/*
Package ieee802_dot1q_bridge is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by C:/Users/hamza/go/pkg/mod/github.com/openconfig/ygot@v0.27.0/genutil/names.go
using the following YANG input files:
	- ieee802-dot1q-bridge.yang
Imported modules were sourced from:
	- ...
*/
package ieee802_dot1q_bridge

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

var (
	SchemaTree map[string]*yang.Entry
	ΛEnumTypes map[string][]reflect.Type
)

func init() {
	var err error
	initΛEnumTypes()
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " +  err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root: &Device{},
		SchemaTree: uzp,
		Unmarshal: Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn )
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// Device represents the /device YANG schema element.
type Device struct {
	Bridges	*Ieee802Dot1QBridge_Bridges	`path:"bridges" module:"ieee802-dot1q-bridge"`
	Interfaces	*IETFInterfaces_Interfaces	`path:"interfaces" module:"ietf-interfaces"`
	InterfacesState	*IETFInterfaces_InterfacesState	`path:"interfaces-state" module:"ietf-interfaces"`
}

// IsYANGGoStruct ensures that Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Device) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Device"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Device) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Device.
func (*Device) ΛBelongingModule() string {
	return ""
}


// IETFInterfaces_Interfaces represents the /ietf-interfaces/interfaces YANG schema element.
type IETFInterfaces_Interfaces struct {
	Interface	map[string]*IETFInterfaces_Interfaces_Interface	`path:"interface" module:"ietf-interfaces"`
}

// IsYANGGoStruct ensures that IETFInterfaces_Interfaces implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_Interfaces) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// IETFInterfaces_Interfaces struct. The keys of the list are populated from the input
// arguments.
func (t *IETFInterfaces_Interfaces) NewInterface(Name string) (*IETFInterfaces_Interfaces_Interface, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*IETFInterfaces_Interfaces_Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &IETFInterfaces_Interfaces_Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_Interfaces"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_Interfaces) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_Interfaces.
func (*IETFInterfaces_Interfaces) ΛBelongingModule() string {
	return "ietf-interfaces"
}


// IETFInterfaces_InterfacesState represents the /ietf-interfaces/interfaces-state YANG schema element.
type IETFInterfaces_InterfacesState struct {
	Interface	map[string]*IETFInterfaces_InterfacesState_Interface	`path:"interface" module:"ietf-interfaces"`
}

// IsYANGGoStruct ensures that IETFInterfaces_InterfacesState implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_InterfacesState) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// IETFInterfaces_InterfacesState struct. The keys of the list are populated from the input
// arguments.
func (t *IETFInterfaces_InterfacesState) NewInterface(Name string) (*IETFInterfaces_InterfacesState_Interface, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*IETFInterfaces_InterfacesState_Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &IETFInterfaces_InterfacesState_Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_InterfacesState) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_InterfacesState"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_InterfacesState) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_InterfacesState) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_InterfacesState.
func (*IETFInterfaces_InterfacesState) ΛBelongingModule() string {
	return "ietf-interfaces"
}


// IETFInterfaces_InterfacesState_Interface represents the /ietf-interfaces/interfaces-state/interface YANG schema element.
type IETFInterfaces_InterfacesState_Interface struct {
	AdminStatus	E_IETFInterfaces_InterfacesState_Interface_AdminStatus	`path:"admin-status" module:"ietf-interfaces"`
	HigherLayerIf	[]string	`path:"higher-layer-if" module:"ietf-interfaces"`
	IfIndex	*int32	`path:"if-index" module:"ietf-interfaces"`
	LastChange	*string	`path:"last-change" module:"ietf-interfaces"`
	LowerLayerIf	[]string	`path:"lower-layer-if" module:"ietf-interfaces"`
	Name	*string	`path:"name" module:"ietf-interfaces"`
	OperStatus	E_IETFInterfaces_InterfacesState_Interface_OperStatus	`path:"oper-status" module:"ietf-interfaces"`
	PhysAddress	*string	`path:"phys-address" module:"ietf-interfaces"`
	Speed	*uint64	`path:"speed" module:"ietf-interfaces"`
	Statistics	*IETFInterfaces_InterfacesState_Interface_Statistics	`path:"statistics" module:"ietf-interfaces"`
	Type	E_IETFInterfaces_InterfaceType	`path:"type" module:"ietf-interfaces"`
}

// IsYANGGoStruct ensures that IETFInterfaces_InterfacesState_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_InterfacesState_Interface) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the IETFInterfaces_InterfacesState_Interface struct, which is a YANG list entry.
func (t *IETFInterfaces_InterfacesState_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_InterfacesState_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_InterfacesState_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_InterfacesState_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_InterfacesState_Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_InterfacesState_Interface.
func (*IETFInterfaces_InterfacesState_Interface) ΛBelongingModule() string {
	return "ietf-interfaces"
}


// IETFInterfaces_InterfacesState_Interface_Statistics represents the /ietf-interfaces/interfaces-state/interface/statistics YANG schema element.
type IETFInterfaces_InterfacesState_Interface_Statistics struct {
	DiscontinuityTime	*string	`path:"discontinuity-time" module:"ietf-interfaces"`
	InBroadcastPkts	*uint64	`path:"in-broadcast-pkts" module:"ietf-interfaces"`
	InDiscards	*uint32	`path:"in-discards" module:"ietf-interfaces"`
	InErrors	*uint32	`path:"in-errors" module:"ietf-interfaces"`
	InMulticastPkts	*uint64	`path:"in-multicast-pkts" module:"ietf-interfaces"`
	InOctets	*uint64	`path:"in-octets" module:"ietf-interfaces"`
	InUnicastPkts	*uint64	`path:"in-unicast-pkts" module:"ietf-interfaces"`
	InUnknownProtos	*uint32	`path:"in-unknown-protos" module:"ietf-interfaces"`
	OutBroadcastPkts	*uint64	`path:"out-broadcast-pkts" module:"ietf-interfaces"`
	OutDiscards	*uint32	`path:"out-discards" module:"ietf-interfaces"`
	OutErrors	*uint32	`path:"out-errors" module:"ietf-interfaces"`
	OutMulticastPkts	*uint64	`path:"out-multicast-pkts" module:"ietf-interfaces"`
	OutOctets	*uint64	`path:"out-octets" module:"ietf-interfaces"`
	OutUnicastPkts	*uint64	`path:"out-unicast-pkts" module:"ietf-interfaces"`
}

// IsYANGGoStruct ensures that IETFInterfaces_InterfacesState_Interface_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_InterfacesState_Interface_Statistics) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_InterfacesState_Interface_Statistics) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_InterfacesState_Interface_Statistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_InterfacesState_Interface_Statistics) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_InterfacesState_Interface_Statistics) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_InterfacesState_Interface_Statistics.
func (*IETFInterfaces_InterfacesState_Interface_Statistics) ΛBelongingModule() string {
	return "ietf-interfaces"
}


// IETFInterfaces_Interfaces_Interface represents the /ietf-interfaces/interfaces/interface YANG schema element.
type IETFInterfaces_Interfaces_Interface struct {
	AdminStatus	E_IETFInterfaces_Interfaces_Interface_AdminStatus	`path:"admin-status" module:"ietf-interfaces"`
	BridgePort	*IETFInterfaces_Interfaces_Interface_BridgePort	`path:"bridge-port" module:"ieee802-dot1q-bridge"`
	Description	*string	`path:"description" module:"ietf-interfaces"`
	Enabled	*bool	`path:"enabled" module:"ietf-interfaces"`
	HigherLayerIf	[]string	`path:"higher-layer-if" module:"ietf-interfaces"`
	IfIndex	*int32	`path:"if-index" module:"ietf-interfaces"`
	LastChange	*string	`path:"last-change" module:"ietf-interfaces"`
	LinkUpDownTrapEnable	E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable	`path:"link-up-down-trap-enable" module:"ietf-interfaces"`
	LowerLayerIf	[]string	`path:"lower-layer-if" module:"ietf-interfaces"`
	Name	*string	`path:"name" module:"ietf-interfaces"`
	OperStatus	E_IETFInterfaces_Interfaces_Interface_OperStatus	`path:"oper-status" module:"ietf-interfaces"`
	PhysAddress	*string	`path:"phys-address" module:"ietf-interfaces"`
	Speed	*uint64	`path:"speed" module:"ietf-interfaces"`
	Statistics	*IETFInterfaces_Interfaces_Interface_Statistics	`path:"statistics" module:"ietf-interfaces"`
	Type	E_IETFInterfaces_InterfaceType	`path:"type" module:"ietf-interfaces"`
}

// IsYANGGoStruct ensures that IETFInterfaces_Interfaces_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_Interfaces_Interface) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the IETFInterfaces_Interfaces_Interface struct, which is a YANG list entry.
func (t *IETFInterfaces_Interfaces_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_Interfaces_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_Interfaces_Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_Interfaces_Interface.
func (*IETFInterfaces_Interfaces_Interface) ΛBelongingModule() string {
	return "ietf-interfaces"
}


// IETFInterfaces_Interfaces_Interface_BridgePort represents the /ietf-interfaces/interfaces/interface/bridge-port YANG schema element.
type IETFInterfaces_Interfaces_Interface_BridgePort struct {
	AcceptableFrame	E_IETFInterfaces_Interfaces_Interface_BridgePort_AcceptableFrame	`path:"acceptable-frame" module:"ieee802-dot1q-bridge"`
	Address	*string	`path:"address" module:"ieee802-dot1q-bridge"`
	AdminPointToPoint	E_IETFInterfaces_Interfaces_Interface_BridgePort_AdminPointToPoint	`path:"admin-point-to-point" module:"ieee802-dot1q-bridge"`
	Capabilities	interface{}	`path:"capabilities" module:"ieee802-dot1q-bridge"`
	ComponentName	*string	`path:"component-name" module:"ieee802-dot1q-bridge"`
	DefaultPriority	*uint8	`path:"default-priority" module:"ieee802-dot1q-bridge"`
	DropEncoding	*bool	`path:"drop-encoding" module:"ieee802-dot1q-bridge"`
	EgressVidTranslations	map[uint16]*IETFInterfaces_Interfaces_Interface_BridgePort_EgressVidTranslations	`path:"egress-vid-translations" module:"ieee802-dot1q-bridge"`
	EnableEgressVidTranslationTable	*bool	`path:"enable-egress-vid-translation-table" module:"ieee802-dot1q-bridge"`
	EnableIngressFiltering	*bool	`path:"enable-ingress-filtering" module:"ieee802-dot1q-bridge"`
	EnableRestrictedVlanRegistration	*bool	`path:"enable-restricted-vlan-registration" module:"ieee802-dot1q-bridge"`
	EnableVidTranslationTable	*bool	`path:"enable-vid-translation-table" module:"ieee802-dot1q-bridge"`
	External	*bool	`path:"external" module:"ieee802-dot1q-bridge"`
	MaxVidSetEntries	*uint16	`path:"max-vid-set-entries" module:"ieee802-dot1q-bridge"`
	OperPointToPoint	*bool	`path:"oper-point-to-point" module:"ieee802-dot1q-bridge"`
	PcpDecodingTable	*IETFInterfaces_Interfaces_Interface_BridgePort_PcpDecodingTable	`path:"pcp-decoding-table" module:"ieee802-dot1q-bridge"`
	PcpEncodingTable	*IETFInterfaces_Interfaces_Interface_BridgePort_PcpEncodingTable	`path:"pcp-encoding-table" module:"ieee802-dot1q-bridge"`
	PcpSelection	E_Ieee802Dot1QBridge_PcpSelectionType	`path:"pcp-selection" module:"ieee802-dot1q-bridge"`
	PortNumber	*uint32	`path:"port-number" module:"ieee802-dot1q-bridge"`
	PortType	E_Ieee802Dot1QBridge_TypeOfPort	`path:"port-type" module:"ieee802-dot1q-bridge"`
	PriorityRegeneration	*IETFInterfaces_Interfaces_Interface_BridgePort_PriorityRegeneration	`path:"priority-regeneration" module:"ieee802-dot1q-bridge"`
	ProtocolBasedVlanClassification	*bool	`path:"protocol-based-vlan-classification" module:"ieee802-dot1q-bridge"`
	ProtocolGroupVidSet	map[uint32]*IETFInterfaces_Interfaces_Interface_BridgePort_ProtocolGroupVidSet	`path:"protocol-group-vid-set" module:"ieee802-dot1q-bridge"`
	Pvid	*uint32	`path:"pvid" module:"ieee802-dot1q-bridge"`
	ServiceAccessPriority	*IETFInterfaces_Interfaces_Interface_BridgePort_ServiceAccessPriority	`path:"service-access-priority" module:"ieee802-dot1q-bridge"`
	ServiceAccessPrioritySelection	*bool	`path:"service-access-priority-selection" module:"ieee802-dot1q-bridge"`
	Statistics	*IETFInterfaces_Interfaces_Interface_BridgePort_Statistics	`path:"statistics" module:"ieee802-dot1q-bridge"`
	TrafficClass	*IETFInterfaces_Interfaces_Interface_BridgePort_TrafficClass	`path:"traffic-class" module:"ieee802-dot1q-bridge"`
	TypeCapabilties	interface{}	`path:"type-capabilties" module:"ieee802-dot1q-bridge"`
	UseDei	*bool	`path:"use-dei" module:"ieee802-dot1q-bridge"`
	VidTranslations	map[uint16]*IETFInterfaces_Interfaces_Interface_BridgePort_VidTranslations	`path:"vid-translations" module:"ieee802-dot1q-bridge"`
}

// IsYANGGoStruct ensures that IETFInterfaces_Interfaces_Interface_BridgePort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_Interfaces_Interface_BridgePort) IsYANGGoStruct() {}

// NewEgressVidTranslations creates a new entry in the EgressVidTranslations list of the
// IETFInterfaces_Interfaces_Interface_BridgePort struct. The keys of the list are populated from the input
// arguments.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort) NewEgressVidTranslations(RelayVid uint16) (*IETFInterfaces_Interfaces_Interface_BridgePort_EgressVidTranslations, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EgressVidTranslations == nil {
		t.EgressVidTranslations = make(map[uint16]*IETFInterfaces_Interfaces_Interface_BridgePort_EgressVidTranslations)
	}

	key := RelayVid

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.EgressVidTranslations[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list EgressVidTranslations", key)
	}

	t.EgressVidTranslations[key] = &IETFInterfaces_Interfaces_Interface_BridgePort_EgressVidTranslations{
		RelayVid: &RelayVid,
	}

	return t.EgressVidTranslations[key], nil
}

// NewProtocolGroupVidSet creates a new entry in the ProtocolGroupVidSet list of the
// IETFInterfaces_Interfaces_Interface_BridgePort struct. The keys of the list are populated from the input
// arguments.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort) NewProtocolGroupVidSet(GroupId uint32) (*IETFInterfaces_Interfaces_Interface_BridgePort_ProtocolGroupVidSet, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ProtocolGroupVidSet == nil {
		t.ProtocolGroupVidSet = make(map[uint32]*IETFInterfaces_Interfaces_Interface_BridgePort_ProtocolGroupVidSet)
	}

	key := GroupId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ProtocolGroupVidSet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ProtocolGroupVidSet", key)
	}

	t.ProtocolGroupVidSet[key] = &IETFInterfaces_Interfaces_Interface_BridgePort_ProtocolGroupVidSet{
		GroupId: &GroupId,
	}

	return t.ProtocolGroupVidSet[key], nil
}

// NewVidTranslations creates a new entry in the VidTranslations list of the
// IETFInterfaces_Interfaces_Interface_BridgePort struct. The keys of the list are populated from the input
// arguments.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort) NewVidTranslations(LocalVid uint16) (*IETFInterfaces_Interfaces_Interface_BridgePort_VidTranslations, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VidTranslations == nil {
		t.VidTranslations = make(map[uint16]*IETFInterfaces_Interfaces_Interface_BridgePort_VidTranslations)
	}

	key := LocalVid

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VidTranslations[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VidTranslations", key)
	}

	t.VidTranslations[key] = &IETFInterfaces_Interfaces_Interface_BridgePort_VidTranslations{
		LocalVid: &LocalVid,
	}

	return t.VidTranslations[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_Interfaces_Interface_BridgePort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_Interfaces_Interface_BridgePort.
func (*IETFInterfaces_Interfaces_Interface_BridgePort) ΛBelongingModule() string {
	return "ieee802-dot1q-bridge"
}


// IETFInterfaces_Interfaces_Interface_BridgePort_EgressVidTranslations represents the /ietf-interfaces/interfaces/interface/bridge-port/egress-vid-translations YANG schema element.
type IETFInterfaces_Interfaces_Interface_BridgePort_EgressVidTranslations struct {
	LocalVid	*uint16	`path:"local-vid" module:"ieee802-dot1q-bridge"`
	RelayVid	*uint16	`path:"relay-vid" module:"ieee802-dot1q-bridge"`
}

// IsYANGGoStruct ensures that IETFInterfaces_Interfaces_Interface_BridgePort_EgressVidTranslations implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_Interfaces_Interface_BridgePort_EgressVidTranslations) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the IETFInterfaces_Interfaces_Interface_BridgePort_EgressVidTranslations struct, which is a YANG list entry.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_EgressVidTranslations) ΛListKeyMap() (map[string]interface{}, error) {
	if t.RelayVid == nil {
		return nil, fmt.Errorf("nil value for key RelayVid")
	}

	return map[string]interface{}{
		"relay-vid": *t.RelayVid,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_EgressVidTranslations) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_Interfaces_Interface_BridgePort_EgressVidTranslations"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_EgressVidTranslations) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_EgressVidTranslations) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_Interfaces_Interface_BridgePort_EgressVidTranslations.
func (*IETFInterfaces_Interfaces_Interface_BridgePort_EgressVidTranslations) ΛBelongingModule() string {
	return "ieee802-dot1q-bridge"
}


// IETFInterfaces_Interfaces_Interface_BridgePort_PcpDecodingTable represents the /ietf-interfaces/interfaces/interface/bridge-port/pcp-decoding-table YANG schema element.
type IETFInterfaces_Interfaces_Interface_BridgePort_PcpDecodingTable struct {
	PcpDecodingMap	map[E_Ieee802Dot1QTypes_PcpSelectionType]*IETFInterfaces_Interfaces_Interface_BridgePort_PcpDecodingTable_PcpDecodingMap	`path:"pcp-decoding-map" module:"ieee802-dot1q-bridge"`
}

// IsYANGGoStruct ensures that IETFInterfaces_Interfaces_Interface_BridgePort_PcpDecodingTable implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_Interfaces_Interface_BridgePort_PcpDecodingTable) IsYANGGoStruct() {}

// NewPcpDecodingMap creates a new entry in the PcpDecodingMap list of the
// IETFInterfaces_Interfaces_Interface_BridgePort_PcpDecodingTable struct. The keys of the list are populated from the input
// arguments.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_PcpDecodingTable) NewPcpDecodingMap(Pcp E_Ieee802Dot1QTypes_PcpSelectionType) (*IETFInterfaces_Interfaces_Interface_BridgePort_PcpDecodingTable_PcpDecodingMap, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PcpDecodingMap == nil {
		t.PcpDecodingMap = make(map[E_Ieee802Dot1QTypes_PcpSelectionType]*IETFInterfaces_Interfaces_Interface_BridgePort_PcpDecodingTable_PcpDecodingMap)
	}

	key := Pcp

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PcpDecodingMap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PcpDecodingMap", key)
	}

	t.PcpDecodingMap[key] = &IETFInterfaces_Interfaces_Interface_BridgePort_PcpDecodingTable_PcpDecodingMap{
		Pcp: Pcp,
	}

	return t.PcpDecodingMap[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_PcpDecodingTable) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_Interfaces_Interface_BridgePort_PcpDecodingTable"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_PcpDecodingTable) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_PcpDecodingTable) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_Interfaces_Interface_BridgePort_PcpDecodingTable.
func (*IETFInterfaces_Interfaces_Interface_BridgePort_PcpDecodingTable) ΛBelongingModule() string {
	return "ieee802-dot1q-bridge"
}


// IETFInterfaces_Interfaces_Interface_BridgePort_PcpDecodingTable_PcpDecodingMap represents the /ietf-interfaces/interfaces/interface/bridge-port/pcp-decoding-table/pcp-decoding-map YANG schema element.
type IETFInterfaces_Interfaces_Interface_BridgePort_PcpDecodingTable_PcpDecodingMap struct {
	Pcp	E_Ieee802Dot1QTypes_PcpSelectionType	`path:"pcp" module:"ieee802-dot1q-bridge"`
	PriorityMap	map[uint8]*IETFInterfaces_Interfaces_Interface_BridgePort_PcpDecodingTable_PcpDecodingMap_PriorityMap	`path:"priority-map" module:"ieee802-dot1q-bridge"`
}

// IsYANGGoStruct ensures that IETFInterfaces_Interfaces_Interface_BridgePort_PcpDecodingTable_PcpDecodingMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_Interfaces_Interface_BridgePort_PcpDecodingTable_PcpDecodingMap) IsYANGGoStruct() {}

// NewPriorityMap creates a new entry in the PriorityMap list of the
// IETFInterfaces_Interfaces_Interface_BridgePort_PcpDecodingTable_PcpDecodingMap struct. The keys of the list are populated from the input
// arguments.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_PcpDecodingTable_PcpDecodingMap) NewPriorityMap(PriorityCodePoint uint8) (*IETFInterfaces_Interfaces_Interface_BridgePort_PcpDecodingTable_PcpDecodingMap_PriorityMap, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PriorityMap == nil {
		t.PriorityMap = make(map[uint8]*IETFInterfaces_Interfaces_Interface_BridgePort_PcpDecodingTable_PcpDecodingMap_PriorityMap)
	}

	key := PriorityCodePoint

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PriorityMap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PriorityMap", key)
	}

	t.PriorityMap[key] = &IETFInterfaces_Interfaces_Interface_BridgePort_PcpDecodingTable_PcpDecodingMap_PriorityMap{
		PriorityCodePoint: &PriorityCodePoint,
	}

	return t.PriorityMap[key], nil
}

// ΛListKeyMap returns the keys of the IETFInterfaces_Interfaces_Interface_BridgePort_PcpDecodingTable_PcpDecodingMap struct, which is a YANG list entry.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_PcpDecodingTable_PcpDecodingMap) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"pcp": t.Pcp,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_PcpDecodingTable_PcpDecodingMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_Interfaces_Interface_BridgePort_PcpDecodingTable_PcpDecodingMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_PcpDecodingTable_PcpDecodingMap) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_PcpDecodingTable_PcpDecodingMap) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_Interfaces_Interface_BridgePort_PcpDecodingTable_PcpDecodingMap.
func (*IETFInterfaces_Interfaces_Interface_BridgePort_PcpDecodingTable_PcpDecodingMap) ΛBelongingModule() string {
	return "ieee802-dot1q-bridge"
}


// IETFInterfaces_Interfaces_Interface_BridgePort_PcpDecodingTable_PcpDecodingMap_PriorityMap represents the /ietf-interfaces/interfaces/interface/bridge-port/pcp-decoding-table/pcp-decoding-map/priority-map YANG schema element.
type IETFInterfaces_Interfaces_Interface_BridgePort_PcpDecodingTable_PcpDecodingMap_PriorityMap struct {
	DropEligible	*bool	`path:"drop-eligible" module:"ieee802-dot1q-bridge"`
	Priority	*uint8	`path:"priority" module:"ieee802-dot1q-bridge"`
	PriorityCodePoint	*uint8	`path:"priority-code-point" module:"ieee802-dot1q-bridge"`
}

// IsYANGGoStruct ensures that IETFInterfaces_Interfaces_Interface_BridgePort_PcpDecodingTable_PcpDecodingMap_PriorityMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_Interfaces_Interface_BridgePort_PcpDecodingTable_PcpDecodingMap_PriorityMap) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the IETFInterfaces_Interfaces_Interface_BridgePort_PcpDecodingTable_PcpDecodingMap_PriorityMap struct, which is a YANG list entry.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_PcpDecodingTable_PcpDecodingMap_PriorityMap) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PriorityCodePoint == nil {
		return nil, fmt.Errorf("nil value for key PriorityCodePoint")
	}

	return map[string]interface{}{
		"priority-code-point": *t.PriorityCodePoint,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_PcpDecodingTable_PcpDecodingMap_PriorityMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_Interfaces_Interface_BridgePort_PcpDecodingTable_PcpDecodingMap_PriorityMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_PcpDecodingTable_PcpDecodingMap_PriorityMap) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_PcpDecodingTable_PcpDecodingMap_PriorityMap) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_Interfaces_Interface_BridgePort_PcpDecodingTable_PcpDecodingMap_PriorityMap.
func (*IETFInterfaces_Interfaces_Interface_BridgePort_PcpDecodingTable_PcpDecodingMap_PriorityMap) ΛBelongingModule() string {
	return "ieee802-dot1q-bridge"
}


// IETFInterfaces_Interfaces_Interface_BridgePort_PcpEncodingTable represents the /ietf-interfaces/interfaces/interface/bridge-port/pcp-encoding-table YANG schema element.
type IETFInterfaces_Interfaces_Interface_BridgePort_PcpEncodingTable struct {
	PcpEncodingMap	map[E_Ieee802Dot1QTypes_PcpSelectionType]*IETFInterfaces_Interfaces_Interface_BridgePort_PcpEncodingTable_PcpEncodingMap	`path:"pcp-encoding-map" module:"ieee802-dot1q-bridge"`
}

// IsYANGGoStruct ensures that IETFInterfaces_Interfaces_Interface_BridgePort_PcpEncodingTable implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_Interfaces_Interface_BridgePort_PcpEncodingTable) IsYANGGoStruct() {}

// NewPcpEncodingMap creates a new entry in the PcpEncodingMap list of the
// IETFInterfaces_Interfaces_Interface_BridgePort_PcpEncodingTable struct. The keys of the list are populated from the input
// arguments.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_PcpEncodingTable) NewPcpEncodingMap(Pcp E_Ieee802Dot1QTypes_PcpSelectionType) (*IETFInterfaces_Interfaces_Interface_BridgePort_PcpEncodingTable_PcpEncodingMap, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PcpEncodingMap == nil {
		t.PcpEncodingMap = make(map[E_Ieee802Dot1QTypes_PcpSelectionType]*IETFInterfaces_Interfaces_Interface_BridgePort_PcpEncodingTable_PcpEncodingMap)
	}

	key := Pcp

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PcpEncodingMap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PcpEncodingMap", key)
	}

	t.PcpEncodingMap[key] = &IETFInterfaces_Interfaces_Interface_BridgePort_PcpEncodingTable_PcpEncodingMap{
		Pcp: Pcp,
	}

	return t.PcpEncodingMap[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_PcpEncodingTable) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_Interfaces_Interface_BridgePort_PcpEncodingTable"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_PcpEncodingTable) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_PcpEncodingTable) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_Interfaces_Interface_BridgePort_PcpEncodingTable.
func (*IETFInterfaces_Interfaces_Interface_BridgePort_PcpEncodingTable) ΛBelongingModule() string {
	return "ieee802-dot1q-bridge"
}


// IETFInterfaces_Interfaces_Interface_BridgePort_PcpEncodingTable_PcpEncodingMap represents the /ietf-interfaces/interfaces/interface/bridge-port/pcp-encoding-table/pcp-encoding-map YANG schema element.
type IETFInterfaces_Interfaces_Interface_BridgePort_PcpEncodingTable_PcpEncodingMap struct {
	Pcp	E_Ieee802Dot1QTypes_PcpSelectionType	`path:"pcp" module:"ieee802-dot1q-bridge"`
	PriorityMap	map[IETFInterfaces_Interfaces_Interface_BridgePort_PcpEncodingTable_PcpEncodingMap_PriorityMap_Key]*IETFInterfaces_Interfaces_Interface_BridgePort_PcpEncodingTable_PcpEncodingMap_PriorityMap	`path:"priority-map" module:"ieee802-dot1q-bridge"`
}

// IsYANGGoStruct ensures that IETFInterfaces_Interfaces_Interface_BridgePort_PcpEncodingTable_PcpEncodingMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_Interfaces_Interface_BridgePort_PcpEncodingTable_PcpEncodingMap) IsYANGGoStruct() {}

// IETFInterfaces_Interfaces_Interface_BridgePort_PcpEncodingTable_PcpEncodingMap_PriorityMap_Key represents the key for list PriorityMap of element /ietf-interfaces/interfaces/interface/bridge-port/pcp-encoding-table/pcp-encoding-map.
type IETFInterfaces_Interfaces_Interface_BridgePort_PcpEncodingTable_PcpEncodingMap_PriorityMap_Key struct {
	Priority	uint8	`path:"priority"`
	Dei	bool	`path:"dei"`
}

// IsYANGGoKeyStruct ensures that IETFInterfaces_Interfaces_Interface_BridgePort_PcpEncodingTable_PcpEncodingMap_PriorityMap_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (IETFInterfaces_Interfaces_Interface_BridgePort_PcpEncodingTable_PcpEncodingMap_PriorityMap_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the IETFInterfaces_Interfaces_Interface_BridgePort_PcpEncodingTable_PcpEncodingMap_PriorityMap_Key key struct.
func (t IETFInterfaces_Interfaces_Interface_BridgePort_PcpEncodingTable_PcpEncodingMap_PriorityMap_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"priority": t.Priority,
		"dei": t.Dei,
	}, nil
}

// NewPriorityMap creates a new entry in the PriorityMap list of the
// IETFInterfaces_Interfaces_Interface_BridgePort_PcpEncodingTable_PcpEncodingMap struct. The keys of the list are populated from the input
// arguments.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_PcpEncodingTable_PcpEncodingMap) NewPriorityMap(Priority uint8, Dei bool) (*IETFInterfaces_Interfaces_Interface_BridgePort_PcpEncodingTable_PcpEncodingMap_PriorityMap, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PriorityMap == nil {
		t.PriorityMap = make(map[IETFInterfaces_Interfaces_Interface_BridgePort_PcpEncodingTable_PcpEncodingMap_PriorityMap_Key]*IETFInterfaces_Interfaces_Interface_BridgePort_PcpEncodingTable_PcpEncodingMap_PriorityMap)
	}

	key := IETFInterfaces_Interfaces_Interface_BridgePort_PcpEncodingTable_PcpEncodingMap_PriorityMap_Key{
		Priority: Priority,
		Dei: Dei,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PriorityMap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PriorityMap", key)
	}

	t.PriorityMap[key] = &IETFInterfaces_Interfaces_Interface_BridgePort_PcpEncodingTable_PcpEncodingMap_PriorityMap{
		Priority: &Priority,
		Dei: &Dei,
	}

	return t.PriorityMap[key], nil
}

// ΛListKeyMap returns the keys of the IETFInterfaces_Interfaces_Interface_BridgePort_PcpEncodingTable_PcpEncodingMap struct, which is a YANG list entry.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_PcpEncodingTable_PcpEncodingMap) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"pcp": t.Pcp,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_PcpEncodingTable_PcpEncodingMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_Interfaces_Interface_BridgePort_PcpEncodingTable_PcpEncodingMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_PcpEncodingTable_PcpEncodingMap) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_PcpEncodingTable_PcpEncodingMap) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_Interfaces_Interface_BridgePort_PcpEncodingTable_PcpEncodingMap.
func (*IETFInterfaces_Interfaces_Interface_BridgePort_PcpEncodingTable_PcpEncodingMap) ΛBelongingModule() string {
	return "ieee802-dot1q-bridge"
}


// IETFInterfaces_Interfaces_Interface_BridgePort_PcpEncodingTable_PcpEncodingMap_PriorityMap represents the /ietf-interfaces/interfaces/interface/bridge-port/pcp-encoding-table/pcp-encoding-map/priority-map YANG schema element.
type IETFInterfaces_Interfaces_Interface_BridgePort_PcpEncodingTable_PcpEncodingMap_PriorityMap struct {
	Dei	*bool	`path:"dei" module:"ieee802-dot1q-bridge"`
	Priority	*uint8	`path:"priority" module:"ieee802-dot1q-bridge"`
	PriorityCodePoint	*uint8	`path:"priority-code-point" module:"ieee802-dot1q-bridge"`
}

// IsYANGGoStruct ensures that IETFInterfaces_Interfaces_Interface_BridgePort_PcpEncodingTable_PcpEncodingMap_PriorityMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_Interfaces_Interface_BridgePort_PcpEncodingTable_PcpEncodingMap_PriorityMap) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the IETFInterfaces_Interfaces_Interface_BridgePort_PcpEncodingTable_PcpEncodingMap_PriorityMap struct, which is a YANG list entry.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_PcpEncodingTable_PcpEncodingMap_PriorityMap) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Dei == nil {
		return nil, fmt.Errorf("nil value for key Dei")
	}

	if t.Priority == nil {
		return nil, fmt.Errorf("nil value for key Priority")
	}

	return map[string]interface{}{
		"dei": *t.Dei,
		"priority": *t.Priority,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_PcpEncodingTable_PcpEncodingMap_PriorityMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_Interfaces_Interface_BridgePort_PcpEncodingTable_PcpEncodingMap_PriorityMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_PcpEncodingTable_PcpEncodingMap_PriorityMap) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_PcpEncodingTable_PcpEncodingMap_PriorityMap) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_Interfaces_Interface_BridgePort_PcpEncodingTable_PcpEncodingMap_PriorityMap.
func (*IETFInterfaces_Interfaces_Interface_BridgePort_PcpEncodingTable_PcpEncodingMap_PriorityMap) ΛBelongingModule() string {
	return "ieee802-dot1q-bridge"
}


// IETFInterfaces_Interfaces_Interface_BridgePort_PriorityRegeneration represents the /ietf-interfaces/interfaces/interface/bridge-port/priority-regeneration YANG schema element.
type IETFInterfaces_Interfaces_Interface_BridgePort_PriorityRegeneration struct {
	Priority0	*uint8	`path:"priority0" module:"ieee802-dot1q-bridge"`
	Priority1	*uint8	`path:"priority1" module:"ieee802-dot1q-bridge"`
	Priority2	*uint8	`path:"priority2" module:"ieee802-dot1q-bridge"`
	Priority3	*uint8	`path:"priority3" module:"ieee802-dot1q-bridge"`
	Priority4	*uint8	`path:"priority4" module:"ieee802-dot1q-bridge"`
	Priority5	*uint8	`path:"priority5" module:"ieee802-dot1q-bridge"`
	Priority6	*uint8	`path:"priority6" module:"ieee802-dot1q-bridge"`
	Priority7	*uint8	`path:"priority7" module:"ieee802-dot1q-bridge"`
}

// IsYANGGoStruct ensures that IETFInterfaces_Interfaces_Interface_BridgePort_PriorityRegeneration implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_Interfaces_Interface_BridgePort_PriorityRegeneration) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_PriorityRegeneration) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_Interfaces_Interface_BridgePort_PriorityRegeneration"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_PriorityRegeneration) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_PriorityRegeneration) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_Interfaces_Interface_BridgePort_PriorityRegeneration.
func (*IETFInterfaces_Interfaces_Interface_BridgePort_PriorityRegeneration) ΛBelongingModule() string {
	return "ieee802-dot1q-bridge"
}


// IETFInterfaces_Interfaces_Interface_BridgePort_ProtocolGroupVidSet represents the /ietf-interfaces/interfaces/interface/bridge-port/protocol-group-vid-set YANG schema element.
type IETFInterfaces_Interfaces_Interface_BridgePort_ProtocolGroupVidSet struct {
	GroupId	*uint32	`path:"group-id" module:"ieee802-dot1q-bridge"`
	Vid	[]uint16	`path:"vid" module:"ieee802-dot1q-bridge"`
}

// IsYANGGoStruct ensures that IETFInterfaces_Interfaces_Interface_BridgePort_ProtocolGroupVidSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_Interfaces_Interface_BridgePort_ProtocolGroupVidSet) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the IETFInterfaces_Interfaces_Interface_BridgePort_ProtocolGroupVidSet struct, which is a YANG list entry.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_ProtocolGroupVidSet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupId == nil {
		return nil, fmt.Errorf("nil value for key GroupId")
	}

	return map[string]interface{}{
		"group-id": *t.GroupId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_ProtocolGroupVidSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_Interfaces_Interface_BridgePort_ProtocolGroupVidSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_ProtocolGroupVidSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_ProtocolGroupVidSet) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_Interfaces_Interface_BridgePort_ProtocolGroupVidSet.
func (*IETFInterfaces_Interfaces_Interface_BridgePort_ProtocolGroupVidSet) ΛBelongingModule() string {
	return "ieee802-dot1q-bridge"
}


// IETFInterfaces_Interfaces_Interface_BridgePort_ServiceAccessPriority represents the /ietf-interfaces/interfaces/interface/bridge-port/service-access-priority YANG schema element.
type IETFInterfaces_Interfaces_Interface_BridgePort_ServiceAccessPriority struct {
	Priority0	*uint8	`path:"priority0" module:"ieee802-dot1q-bridge"`
	Priority1	*uint8	`path:"priority1" module:"ieee802-dot1q-bridge"`
	Priority2	*uint8	`path:"priority2" module:"ieee802-dot1q-bridge"`
	Priority3	*uint8	`path:"priority3" module:"ieee802-dot1q-bridge"`
	Priority4	*uint8	`path:"priority4" module:"ieee802-dot1q-bridge"`
	Priority5	*uint8	`path:"priority5" module:"ieee802-dot1q-bridge"`
	Priority6	*uint8	`path:"priority6" module:"ieee802-dot1q-bridge"`
	Priority7	*uint8	`path:"priority7" module:"ieee802-dot1q-bridge"`
}

// IsYANGGoStruct ensures that IETFInterfaces_Interfaces_Interface_BridgePort_ServiceAccessPriority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_Interfaces_Interface_BridgePort_ServiceAccessPriority) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_ServiceAccessPriority) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_Interfaces_Interface_BridgePort_ServiceAccessPriority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_ServiceAccessPriority) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_ServiceAccessPriority) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_Interfaces_Interface_BridgePort_ServiceAccessPriority.
func (*IETFInterfaces_Interfaces_Interface_BridgePort_ServiceAccessPriority) ΛBelongingModule() string {
	return "ieee802-dot1q-bridge"
}


// IETFInterfaces_Interfaces_Interface_BridgePort_Statistics represents the /ietf-interfaces/interfaces/interface/bridge-port/statistics YANG schema element.
type IETFInterfaces_Interfaces_Interface_BridgePort_Statistics struct {
	DelayExceededDiscards	*uint64	`path:"delay-exceeded-discards" module:"ieee802-dot1q-bridge"`
	DiscardInbound	*uint64	`path:"discard-inbound" module:"ieee802-dot1q-bridge"`
	DiscardLackOfBuffers	*uint64	`path:"discard-lack-of-buffers" module:"ieee802-dot1q-bridge"`
	DiscardOnError	*uint64	`path:"discard-on-error" module:"ieee802-dot1q-bridge"`
	DiscardOnIngressFiltering	*uint64	`path:"discard-on-ingress-filtering" module:"ieee802-dot1q-bridge"`
	DiscardTransitDelayExceeded	*uint64	`path:"discard-transit-delay-exceeded" module:"ieee802-dot1q-bridge"`
	ForwardOutbound	*uint64	`path:"forward-outbound" module:"ieee802-dot1q-bridge"`
	FrameRx	*uint64	`path:"frame-rx" module:"ieee802-dot1q-bridge"`
	FrameTx	*uint64	`path:"frame-tx" module:"ieee802-dot1q-bridge"`
	MtuExceededDiscards	*uint64	`path:"mtu-exceeded-discards" module:"ieee802-dot1q-bridge"`
	OctetsRx	*uint64	`path:"octets-rx" module:"ieee802-dot1q-bridge"`
	OctetsTx	*uint64	`path:"octets-tx" module:"ieee802-dot1q-bridge"`
}

// IsYANGGoStruct ensures that IETFInterfaces_Interfaces_Interface_BridgePort_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_Interfaces_Interface_BridgePort_Statistics) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_Statistics) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_Interfaces_Interface_BridgePort_Statistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_Statistics) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_Statistics) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_Interfaces_Interface_BridgePort_Statistics.
func (*IETFInterfaces_Interfaces_Interface_BridgePort_Statistics) ΛBelongingModule() string {
	return "ieee802-dot1q-bridge"
}


// IETFInterfaces_Interfaces_Interface_BridgePort_TrafficClass represents the /ietf-interfaces/interfaces/interface/bridge-port/traffic-class YANG schema element.
type IETFInterfaces_Interfaces_Interface_BridgePort_TrafficClass struct {
	TrafficClassMap	map[uint8]*IETFInterfaces_Interfaces_Interface_BridgePort_TrafficClass_TrafficClassMap	`path:"traffic-class-map" module:"ieee802-dot1q-bridge"`
	TrafficClassTable	*IETFInterfaces_Interfaces_Interface_BridgePort_TrafficClass_TrafficClassTable	`path:"traffic-class-table" module:"ieee802-dot1q-bridge"`
}

// IsYANGGoStruct ensures that IETFInterfaces_Interfaces_Interface_BridgePort_TrafficClass implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_Interfaces_Interface_BridgePort_TrafficClass) IsYANGGoStruct() {}

// NewTrafficClassMap creates a new entry in the TrafficClassMap list of the
// IETFInterfaces_Interfaces_Interface_BridgePort_TrafficClass struct. The keys of the list are populated from the input
// arguments.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_TrafficClass) NewTrafficClassMap(Priority uint8) (*IETFInterfaces_Interfaces_Interface_BridgePort_TrafficClass_TrafficClassMap, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TrafficClassMap == nil {
		t.TrafficClassMap = make(map[uint8]*IETFInterfaces_Interfaces_Interface_BridgePort_TrafficClass_TrafficClassMap)
	}

	key := Priority

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TrafficClassMap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TrafficClassMap", key)
	}

	t.TrafficClassMap[key] = &IETFInterfaces_Interfaces_Interface_BridgePort_TrafficClass_TrafficClassMap{
		Priority: &Priority,
	}

	return t.TrafficClassMap[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_TrafficClass) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_Interfaces_Interface_BridgePort_TrafficClass"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_TrafficClass) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_TrafficClass) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_Interfaces_Interface_BridgePort_TrafficClass.
func (*IETFInterfaces_Interfaces_Interface_BridgePort_TrafficClass) ΛBelongingModule() string {
	return "ieee802-dot1q-bridge"
}


// IETFInterfaces_Interfaces_Interface_BridgePort_TrafficClass_TrafficClassMap represents the /ietf-interfaces/interfaces/interface/bridge-port/traffic-class/traffic-class-map YANG schema element.
type IETFInterfaces_Interfaces_Interface_BridgePort_TrafficClass_TrafficClassMap struct {
	AvailableTrafficClass	map[uint8]*IETFInterfaces_Interfaces_Interface_BridgePort_TrafficClass_TrafficClassMap_AvailableTrafficClass	`path:"available-traffic-class" module:"ieee802-dot1q-bridge"`
	Priority	*uint8	`path:"priority" module:"ieee802-dot1q-bridge"`
}

// IsYANGGoStruct ensures that IETFInterfaces_Interfaces_Interface_BridgePort_TrafficClass_TrafficClassMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_Interfaces_Interface_BridgePort_TrafficClass_TrafficClassMap) IsYANGGoStruct() {}

// NewAvailableTrafficClass creates a new entry in the AvailableTrafficClass list of the
// IETFInterfaces_Interfaces_Interface_BridgePort_TrafficClass_TrafficClassMap struct. The keys of the list are populated from the input
// arguments.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_TrafficClass_TrafficClassMap) NewAvailableTrafficClass(NumTrafficClass uint8) (*IETFInterfaces_Interfaces_Interface_BridgePort_TrafficClass_TrafficClassMap_AvailableTrafficClass, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AvailableTrafficClass == nil {
		t.AvailableTrafficClass = make(map[uint8]*IETFInterfaces_Interfaces_Interface_BridgePort_TrafficClass_TrafficClassMap_AvailableTrafficClass)
	}

	key := NumTrafficClass

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AvailableTrafficClass[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AvailableTrafficClass", key)
	}

	t.AvailableTrafficClass[key] = &IETFInterfaces_Interfaces_Interface_BridgePort_TrafficClass_TrafficClassMap_AvailableTrafficClass{
		NumTrafficClass: &NumTrafficClass,
	}

	return t.AvailableTrafficClass[key], nil
}

// ΛListKeyMap returns the keys of the IETFInterfaces_Interfaces_Interface_BridgePort_TrafficClass_TrafficClassMap struct, which is a YANG list entry.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_TrafficClass_TrafficClassMap) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Priority == nil {
		return nil, fmt.Errorf("nil value for key Priority")
	}

	return map[string]interface{}{
		"priority": *t.Priority,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_TrafficClass_TrafficClassMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_Interfaces_Interface_BridgePort_TrafficClass_TrafficClassMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_TrafficClass_TrafficClassMap) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_TrafficClass_TrafficClassMap) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_Interfaces_Interface_BridgePort_TrafficClass_TrafficClassMap.
func (*IETFInterfaces_Interfaces_Interface_BridgePort_TrafficClass_TrafficClassMap) ΛBelongingModule() string {
	return "ieee802-dot1q-bridge"
}


// IETFInterfaces_Interfaces_Interface_BridgePort_TrafficClass_TrafficClassMap_AvailableTrafficClass represents the /ietf-interfaces/interfaces/interface/bridge-port/traffic-class/traffic-class-map/available-traffic-class YANG schema element.
type IETFInterfaces_Interfaces_Interface_BridgePort_TrafficClass_TrafficClassMap_AvailableTrafficClass struct {
	NumTrafficClass	*uint8	`path:"num-traffic-class" module:"ieee802-dot1q-bridge"`
	TrafficClass	*uint8	`path:"traffic-class" module:"ieee802-dot1q-bridge"`
}

// IsYANGGoStruct ensures that IETFInterfaces_Interfaces_Interface_BridgePort_TrafficClass_TrafficClassMap_AvailableTrafficClass implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_Interfaces_Interface_BridgePort_TrafficClass_TrafficClassMap_AvailableTrafficClass) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the IETFInterfaces_Interfaces_Interface_BridgePort_TrafficClass_TrafficClassMap_AvailableTrafficClass struct, which is a YANG list entry.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_TrafficClass_TrafficClassMap_AvailableTrafficClass) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NumTrafficClass == nil {
		return nil, fmt.Errorf("nil value for key NumTrafficClass")
	}

	return map[string]interface{}{
		"num-traffic-class": *t.NumTrafficClass,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_TrafficClass_TrafficClassMap_AvailableTrafficClass) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_Interfaces_Interface_BridgePort_TrafficClass_TrafficClassMap_AvailableTrafficClass"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_TrafficClass_TrafficClassMap_AvailableTrafficClass) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_TrafficClass_TrafficClassMap_AvailableTrafficClass) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_Interfaces_Interface_BridgePort_TrafficClass_TrafficClassMap_AvailableTrafficClass.
func (*IETFInterfaces_Interfaces_Interface_BridgePort_TrafficClass_TrafficClassMap_AvailableTrafficClass) ΛBelongingModule() string {
	return "ieee802-dot1q-bridge"
}


// IETFInterfaces_Interfaces_Interface_BridgePort_TrafficClass_TrafficClassTable represents the /ietf-interfaces/interfaces/interface/bridge-port/traffic-class/traffic-class-table YANG schema element.
type IETFInterfaces_Interfaces_Interface_BridgePort_TrafficClass_TrafficClassTable struct {
	NumberOfTrafficClasses	*uint8	`path:"number-of-traffic-classes" module:"ieee802-dot1q-bridge"`
	Priority0	*uint8	`path:"priority0" module:"ieee802-dot1q-bridge"`
	Priority1	*uint8	`path:"priority1" module:"ieee802-dot1q-bridge"`
	Priority2	*uint8	`path:"priority2" module:"ieee802-dot1q-bridge"`
	Priority3	*uint8	`path:"priority3" module:"ieee802-dot1q-bridge"`
	Priority4	*uint8	`path:"priority4" module:"ieee802-dot1q-bridge"`
	Priority5	*uint8	`path:"priority5" module:"ieee802-dot1q-bridge"`
	Priority6	*uint8	`path:"priority6" module:"ieee802-dot1q-bridge"`
	Priority7	*uint8	`path:"priority7" module:"ieee802-dot1q-bridge"`
}

// IsYANGGoStruct ensures that IETFInterfaces_Interfaces_Interface_BridgePort_TrafficClass_TrafficClassTable implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_Interfaces_Interface_BridgePort_TrafficClass_TrafficClassTable) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_TrafficClass_TrafficClassTable) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_Interfaces_Interface_BridgePort_TrafficClass_TrafficClassTable"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_TrafficClass_TrafficClassTable) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_TrafficClass_TrafficClassTable) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_Interfaces_Interface_BridgePort_TrafficClass_TrafficClassTable.
func (*IETFInterfaces_Interfaces_Interface_BridgePort_TrafficClass_TrafficClassTable) ΛBelongingModule() string {
	return "ieee802-dot1q-bridge"
}


// IETFInterfaces_Interfaces_Interface_BridgePort_VidTranslations represents the /ietf-interfaces/interfaces/interface/bridge-port/vid-translations YANG schema element.
type IETFInterfaces_Interfaces_Interface_BridgePort_VidTranslations struct {
	LocalVid	*uint16	`path:"local-vid" module:"ieee802-dot1q-bridge"`
	RelayVid	*uint16	`path:"relay-vid" module:"ieee802-dot1q-bridge"`
}

// IsYANGGoStruct ensures that IETFInterfaces_Interfaces_Interface_BridgePort_VidTranslations implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_Interfaces_Interface_BridgePort_VidTranslations) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the IETFInterfaces_Interfaces_Interface_BridgePort_VidTranslations struct, which is a YANG list entry.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_VidTranslations) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LocalVid == nil {
		return nil, fmt.Errorf("nil value for key LocalVid")
	}

	return map[string]interface{}{
		"local-vid": *t.LocalVid,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_VidTranslations) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_Interfaces_Interface_BridgePort_VidTranslations"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_VidTranslations) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_Interfaces_Interface_BridgePort_VidTranslations) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_Interfaces_Interface_BridgePort_VidTranslations.
func (*IETFInterfaces_Interfaces_Interface_BridgePort_VidTranslations) ΛBelongingModule() string {
	return "ieee802-dot1q-bridge"
}


// IETFInterfaces_Interfaces_Interface_Statistics represents the /ietf-interfaces/interfaces/interface/statistics YANG schema element.
type IETFInterfaces_Interfaces_Interface_Statistics struct {
	DiscontinuityTime	*string	`path:"discontinuity-time" module:"ietf-interfaces"`
	InBroadcastPkts	*uint64	`path:"in-broadcast-pkts" module:"ietf-interfaces"`
	InDiscards	*uint32	`path:"in-discards" module:"ietf-interfaces"`
	InErrors	*uint32	`path:"in-errors" module:"ietf-interfaces"`
	InMulticastPkts	*uint64	`path:"in-multicast-pkts" module:"ietf-interfaces"`
	InOctets	*uint64	`path:"in-octets" module:"ietf-interfaces"`
	InUnicastPkts	*uint64	`path:"in-unicast-pkts" module:"ietf-interfaces"`
	InUnknownProtos	*uint32	`path:"in-unknown-protos" module:"ietf-interfaces"`
	OutBroadcastPkts	*uint64	`path:"out-broadcast-pkts" module:"ietf-interfaces"`
	OutDiscards	*uint32	`path:"out-discards" module:"ietf-interfaces"`
	OutErrors	*uint32	`path:"out-errors" module:"ietf-interfaces"`
	OutMulticastPkts	*uint64	`path:"out-multicast-pkts" module:"ietf-interfaces"`
	OutOctets	*uint64	`path:"out-octets" module:"ietf-interfaces"`
	OutUnicastPkts	*uint64	`path:"out-unicast-pkts" module:"ietf-interfaces"`
}

// IsYANGGoStruct ensures that IETFInterfaces_Interfaces_Interface_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_Interfaces_Interface_Statistics) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_Statistics) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_Interfaces_Interface_Statistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_Statistics) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_Interfaces_Interface_Statistics) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_Interfaces_Interface_Statistics.
func (*IETFInterfaces_Interfaces_Interface_Statistics) ΛBelongingModule() string {
	return "ietf-interfaces"
}


// Ieee802Dot1QBridge_Bridges represents the /ieee802-dot1q-bridge/bridges YANG schema element.
type Ieee802Dot1QBridge_Bridges struct {
	Bridge	map[string]*Ieee802Dot1QBridge_Bridges_Bridge	`path:"bridge" module:"ieee802-dot1q-bridge"`
}

// IsYANGGoStruct ensures that Ieee802Dot1QBridge_Bridges implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ieee802Dot1QBridge_Bridges) IsYANGGoStruct() {}

// NewBridge creates a new entry in the Bridge list of the
// Ieee802Dot1QBridge_Bridges struct. The keys of the list are populated from the input
// arguments.
func (t *Ieee802Dot1QBridge_Bridges) NewBridge(Name string) (*Ieee802Dot1QBridge_Bridges_Bridge, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Bridge == nil {
		t.Bridge = make(map[string]*Ieee802Dot1QBridge_Bridges_Bridge)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Bridge[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Bridge", key)
	}

	t.Bridge[key] = &Ieee802Dot1QBridge_Bridges_Bridge{
		Name: &Name,
	}

	return t.Bridge[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ieee802Dot1QBridge_Bridges"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ieee802Dot1QBridge_Bridges) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ieee802Dot1QBridge_Bridges.
func (*Ieee802Dot1QBridge_Bridges) ΛBelongingModule() string {
	return "ieee802-dot1q-bridge"
}


// Ieee802Dot1QBridge_Bridges_Bridge represents the /ieee802-dot1q-bridge/bridges/bridge YANG schema element.
type Ieee802Dot1QBridge_Bridges_Bridge struct {
	Address	*string	`path:"address" module:"ieee802-dot1q-bridge"`
	BridgeType	E_Ieee802Dot1QBridge_TypeOfBridge	`path:"bridge-type" module:"ieee802-dot1q-bridge"`
	Component	map[string]*Ieee802Dot1QBridge_Bridges_Bridge_Component	`path:"component" module:"ieee802-dot1q-bridge"`
	Components	*uint32	`path:"components" module:"ieee802-dot1q-bridge"`
	Name	*string	`path:"name" module:"ieee802-dot1q-bridge"`
	Ports	*uint16	`path:"ports" module:"ieee802-dot1q-bridge"`
	UpTime	*uint32	`path:"up-time" module:"ieee802-dot1q-bridge"`
}

// IsYANGGoStruct ensures that Ieee802Dot1QBridge_Bridges_Bridge implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ieee802Dot1QBridge_Bridges_Bridge) IsYANGGoStruct() {}

// NewComponent creates a new entry in the Component list of the
// Ieee802Dot1QBridge_Bridges_Bridge struct. The keys of the list are populated from the input
// arguments.
func (t *Ieee802Dot1QBridge_Bridges_Bridge) NewComponent(Name string) (*Ieee802Dot1QBridge_Bridges_Bridge_Component, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Component == nil {
		t.Component = make(map[string]*Ieee802Dot1QBridge_Bridges_Bridge_Component)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Component[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Component", key)
	}

	t.Component[key] = &Ieee802Dot1QBridge_Bridges_Bridge_Component{
		Name: &Name,
	}

	return t.Component[key], nil
}

// ΛListKeyMap returns the keys of the Ieee802Dot1QBridge_Bridges_Bridge struct, which is a YANG list entry.
func (t *Ieee802Dot1QBridge_Bridges_Bridge) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ieee802Dot1QBridge_Bridges_Bridge"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ieee802Dot1QBridge_Bridges_Bridge) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ieee802Dot1QBridge_Bridges_Bridge.
func (*Ieee802Dot1QBridge_Bridges_Bridge) ΛBelongingModule() string {
	return "ieee802-dot1q-bridge"
}


// Ieee802Dot1QBridge_Bridges_Bridge_Component represents the /ieee802-dot1q-bridge/bridges/bridge/component YANG schema element.
type Ieee802Dot1QBridge_Bridges_Bridge_Component struct {
	Address	*string	`path:"address" module:"ieee802-dot1q-bridge"`
	BridgeMst	*Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeMst	`path:"bridge-mst" module:"ieee802-dot1q-bridge"`
	BridgePort	[]string	`path:"bridge-port" module:"ieee802-dot1q-bridge"`
	BridgeVlan	*Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan	`path:"bridge-vlan" module:"ieee802-dot1q-bridge"`
	Capabilities	*Ieee802Dot1QBridge_Bridges_Bridge_Component_Capabilities	`path:"capabilities" module:"ieee802-dot1q-bridge"`
	FilteringDatabase	*Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase	`path:"filtering-database" module:"ieee802-dot1q-bridge"`
	Id	*uint32	`path:"id" module:"ieee802-dot1q-bridge"`
	Name	*string	`path:"name" module:"ieee802-dot1q-bridge"`
	PermanentDatabase	*Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase	`path:"permanent-database" module:"ieee802-dot1q-bridge"`
	Ports	*uint16	`path:"ports" module:"ieee802-dot1q-bridge"`
	TrafficClassEnabled	*bool	`path:"traffic-class-enabled" module:"ieee802-dot1q-bridge"`
	Type	E_Ieee802Dot1QBridge_TypeOfComponent	`path:"type" module:"ieee802-dot1q-bridge"`
}

// IsYANGGoStruct ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Ieee802Dot1QBridge_Bridges_Bridge_Component struct, which is a YANG list entry.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ieee802Dot1QBridge_Bridges_Bridge_Component"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ieee802Dot1QBridge_Bridges_Bridge_Component.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component) ΛBelongingModule() string {
	return "ieee802-dot1q-bridge"
}


// Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeMst represents the /ieee802-dot1q-bridge/bridges/bridge/component/bridge-mst YANG schema element.
type Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeMst struct {
	FidToMstid	map[uint32]*Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeMst_FidToMstid	`path:"fid-to-mstid" module:"ieee802-dot1q-bridge"`
	FidToMstidAllocation	map[string]*Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeMst_FidToMstidAllocation	`path:"fid-to-mstid-allocation" module:"ieee802-dot1q-bridge"`
	Mstid	[]uint32	`path:"mstid" module:"ieee802-dot1q-bridge"`
}

// IsYANGGoStruct ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeMst implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeMst) IsYANGGoStruct() {}

// NewFidToMstid creates a new entry in the FidToMstid list of the
// Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeMst struct. The keys of the list are populated from the input
// arguments.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeMst) NewFidToMstid(Fid uint32) (*Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeMst_FidToMstid, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FidToMstid == nil {
		t.FidToMstid = make(map[uint32]*Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeMst_FidToMstid)
	}

	key := Fid

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.FidToMstid[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list FidToMstid", key)
	}

	t.FidToMstid[key] = &Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeMst_FidToMstid{
		Fid: &Fid,
	}

	return t.FidToMstid[key], nil
}

// NewFidToMstidAllocation creates a new entry in the FidToMstidAllocation list of the
// Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeMst struct. The keys of the list are populated from the input
// arguments.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeMst) NewFidToMstidAllocation(Fids string) (*Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeMst_FidToMstidAllocation, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FidToMstidAllocation == nil {
		t.FidToMstidAllocation = make(map[string]*Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeMst_FidToMstidAllocation)
	}

	key := Fids

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.FidToMstidAllocation[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list FidToMstidAllocation", key)
	}

	t.FidToMstidAllocation[key] = &Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeMst_FidToMstidAllocation{
		Fids: &Fids,
	}

	return t.FidToMstidAllocation[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeMst) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeMst"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeMst) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeMst) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeMst.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeMst) ΛBelongingModule() string {
	return "ieee802-dot1q-bridge"
}


// Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeMst_FidToMstid represents the /ieee802-dot1q-bridge/bridges/bridge/component/bridge-mst/fid-to-mstid YANG schema element.
type Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeMst_FidToMstid struct {
	Fid	*uint32	`path:"fid" module:"ieee802-dot1q-bridge"`
	Mstid	*uint32	`path:"mstid" module:"ieee802-dot1q-bridge"`
}

// IsYANGGoStruct ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeMst_FidToMstid implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeMst_FidToMstid) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeMst_FidToMstid struct, which is a YANG list entry.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeMst_FidToMstid) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Fid == nil {
		return nil, fmt.Errorf("nil value for key Fid")
	}

	return map[string]interface{}{
		"fid": *t.Fid,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeMst_FidToMstid) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeMst_FidToMstid"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeMst_FidToMstid) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeMst_FidToMstid) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeMst_FidToMstid.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeMst_FidToMstid) ΛBelongingModule() string {
	return "ieee802-dot1q-bridge"
}


// Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeMst_FidToMstidAllocation represents the /ieee802-dot1q-bridge/bridges/bridge/component/bridge-mst/fid-to-mstid-allocation YANG schema element.
type Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeMst_FidToMstidAllocation struct {
	Fids	*string	`path:"fids" module:"ieee802-dot1q-bridge"`
	Mstid	*uint32	`path:"mstid" module:"ieee802-dot1q-bridge"`
}

// IsYANGGoStruct ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeMst_FidToMstidAllocation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeMst_FidToMstidAllocation) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeMst_FidToMstidAllocation struct, which is a YANG list entry.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeMst_FidToMstidAllocation) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Fids == nil {
		return nil, fmt.Errorf("nil value for key Fids")
	}

	return map[string]interface{}{
		"fids": *t.Fids,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeMst_FidToMstidAllocation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeMst_FidToMstidAllocation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeMst_FidToMstidAllocation) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeMst_FidToMstidAllocation) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeMst_FidToMstidAllocation.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeMst_FidToMstidAllocation) ΛBelongingModule() string {
	return "ieee802-dot1q-bridge"
}


// Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan represents the /ieee802-dot1q-bridge/bridges/bridge/component/bridge-vlan YANG schema element.
type Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan struct {
	FidToVidAllocation	map[uint32]*Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_FidToVidAllocation	`path:"fid-to-vid-allocation" module:"ieee802-dot1q-bridge"`
	MaxMsti	*uint16	`path:"max-msti" module:"ieee802-dot1q-bridge"`
	MaxVids	*uint16	`path:"max-vids" module:"ieee802-dot1q-bridge"`
	OverrideDefaultPvid	*bool	`path:"override-default-pvid" module:"ieee802-dot1q-bridge"`
	ProtocolGroupDatabase	map[uint16]*Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_ProtocolGroupDatabase	`path:"protocol-group-database" module:"ieee802-dot1q-bridge"`
	ProtocolTemplate	E_Ieee802Dot1QBridge_ProtocolFrameFormatType	`path:"protocol-template" module:"ieee802-dot1q-bridge"`
	Version	*uint16	`path:"version" module:"ieee802-dot1q-bridge"`
	VidToFid	map[uint32]*Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFid	`path:"vid-to-fid" module:"ieee802-dot1q-bridge"`
	VidToFidAllocation	map[string]*Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFidAllocation	`path:"vid-to-fid-allocation" module:"ieee802-dot1q-bridge"`
	Vlan	map[uint32]*Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_Vlan	`path:"vlan" module:"ieee802-dot1q-bridge"`
}

// IsYANGGoStruct ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan) IsYANGGoStruct() {}

// NewFidToVidAllocation creates a new entry in the FidToVidAllocation list of the
// Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan struct. The keys of the list are populated from the input
// arguments.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan) NewFidToVidAllocation(Fid uint32) (*Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_FidToVidAllocation, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FidToVidAllocation == nil {
		t.FidToVidAllocation = make(map[uint32]*Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_FidToVidAllocation)
	}

	key := Fid

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.FidToVidAllocation[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list FidToVidAllocation", key)
	}

	t.FidToVidAllocation[key] = &Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_FidToVidAllocation{
		Fid: &Fid,
	}

	return t.FidToVidAllocation[key], nil
}

// NewProtocolGroupDatabase creates a new entry in the ProtocolGroupDatabase list of the
// Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan struct. The keys of the list are populated from the input
// arguments.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan) NewProtocolGroupDatabase(DbIndex uint16) (*Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_ProtocolGroupDatabase, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ProtocolGroupDatabase == nil {
		t.ProtocolGroupDatabase = make(map[uint16]*Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_ProtocolGroupDatabase)
	}

	key := DbIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ProtocolGroupDatabase[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ProtocolGroupDatabase", key)
	}

	t.ProtocolGroupDatabase[key] = &Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_ProtocolGroupDatabase{
		DbIndex: &DbIndex,
	}

	return t.ProtocolGroupDatabase[key], nil
}

// NewVidToFid creates a new entry in the VidToFid list of the
// Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan struct. The keys of the list are populated from the input
// arguments.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan) NewVidToFid(Vid uint32) (*Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFid, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VidToFid == nil {
		t.VidToFid = make(map[uint32]*Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFid)
	}

	key := Vid

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VidToFid[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VidToFid", key)
	}

	t.VidToFid[key] = &Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFid{
		Vid: &Vid,
	}

	return t.VidToFid[key], nil
}

// NewVidToFidAllocation creates a new entry in the VidToFidAllocation list of the
// Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan struct. The keys of the list are populated from the input
// arguments.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan) NewVidToFidAllocation(Vids string) (*Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFidAllocation, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VidToFidAllocation == nil {
		t.VidToFidAllocation = make(map[string]*Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFidAllocation)
	}

	key := Vids

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VidToFidAllocation[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VidToFidAllocation", key)
	}

	t.VidToFidAllocation[key] = &Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFidAllocation{
		Vids: &Vids,
	}

	return t.VidToFidAllocation[key], nil
}

// NewVlan creates a new entry in the Vlan list of the
// Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan struct. The keys of the list are populated from the input
// arguments.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan) NewVlan(Vid uint32) (*Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_Vlan, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vlan == nil {
		t.Vlan = make(map[uint32]*Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_Vlan)
	}

	key := Vid

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Vlan[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Vlan", key)
	}

	t.Vlan[key] = &Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_Vlan{
		Vid: &Vid,
	}

	return t.Vlan[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan) ΛBelongingModule() string {
	return "ieee802-dot1q-bridge"
}


// Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_FidToVidAllocation represents the /ieee802-dot1q-bridge/bridges/bridge/component/bridge-vlan/fid-to-vid-allocation YANG schema element.
type Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_FidToVidAllocation struct {
	AllocationType	E_Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_FidToVidAllocation_AllocationType	`path:"allocation-type" module:"ieee802-dot1q-bridge"`
	Fid	*uint32	`path:"fid" module:"ieee802-dot1q-bridge"`
	Vid	[]uint32	`path:"vid" module:"ieee802-dot1q-bridge"`
}

// IsYANGGoStruct ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_FidToVidAllocation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_FidToVidAllocation) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_FidToVidAllocation struct, which is a YANG list entry.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_FidToVidAllocation) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Fid == nil {
		return nil, fmt.Errorf("nil value for key Fid")
	}

	return map[string]interface{}{
		"fid": *t.Fid,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_FidToVidAllocation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_FidToVidAllocation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_FidToVidAllocation) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_FidToVidAllocation) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_FidToVidAllocation.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_FidToVidAllocation) ΛBelongingModule() string {
	return "ieee802-dot1q-bridge"
}


// Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_ProtocolGroupDatabase represents the /ieee802-dot1q-bridge/bridges/bridge/component/bridge-vlan/protocol-group-database YANG schema element.
type Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_ProtocolGroupDatabase struct {
	DbIndex	*uint16	`path:"db-index" module:"ieee802-dot1q-bridge"`
	DsapSsapPairs	*Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_ProtocolGroupDatabase_DsapSsapPairs	`path:"dsap-ssap-pairs" module:"ieee802-dot1q-bridge"`
	Ethertype	*string	`path:"ethertype" module:"ieee802-dot1q-bridge"`
	FrameFormatType	E_Ieee802Dot1QBridge_ProtocolFrameFormatType	`path:"frame-format-type" module:"ieee802-dot1q-bridge"`
	GroupId	*uint32	`path:"group-id" module:"ieee802-dot1q-bridge"`
	ProtocolId	*string	`path:"protocol-id" module:"ieee802-dot1q-bridge"`
}

// IsYANGGoStruct ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_ProtocolGroupDatabase implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_ProtocolGroupDatabase) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_ProtocolGroupDatabase struct, which is a YANG list entry.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_ProtocolGroupDatabase) ΛListKeyMap() (map[string]interface{}, error) {
	if t.DbIndex == nil {
		return nil, fmt.Errorf("nil value for key DbIndex")
	}

	return map[string]interface{}{
		"db-index": *t.DbIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_ProtocolGroupDatabase) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_ProtocolGroupDatabase"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_ProtocolGroupDatabase) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_ProtocolGroupDatabase) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_ProtocolGroupDatabase.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_ProtocolGroupDatabase) ΛBelongingModule() string {
	return "ieee802-dot1q-bridge"
}


// Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_ProtocolGroupDatabase_DsapSsapPairs represents the /ieee802-dot1q-bridge/bridges/bridge/component/bridge-vlan/protocol-group-database/dsap-ssap-pairs YANG schema element.
type Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_ProtocolGroupDatabase_DsapSsapPairs struct {
	LlcAddress	*string	`path:"llc-address" module:"ieee802-dot1q-bridge"`
}

// IsYANGGoStruct ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_ProtocolGroupDatabase_DsapSsapPairs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_ProtocolGroupDatabase_DsapSsapPairs) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_ProtocolGroupDatabase_DsapSsapPairs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_ProtocolGroupDatabase_DsapSsapPairs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_ProtocolGroupDatabase_DsapSsapPairs) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_ProtocolGroupDatabase_DsapSsapPairs) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_ProtocolGroupDatabase_DsapSsapPairs.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_ProtocolGroupDatabase_DsapSsapPairs) ΛBelongingModule() string {
	return "ieee802-dot1q-bridge"
}


// Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFid represents the /ieee802-dot1q-bridge/bridges/bridge/component/bridge-vlan/vid-to-fid YANG schema element.
type Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFid struct {
	Fid	*uint32	`path:"fid" module:"ieee802-dot1q-bridge"`
	Vid	*uint32	`path:"vid" module:"ieee802-dot1q-bridge"`
}

// IsYANGGoStruct ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFid implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFid) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFid struct, which is a YANG list entry.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFid) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Vid == nil {
		return nil, fmt.Errorf("nil value for key Vid")
	}

	return map[string]interface{}{
		"vid": *t.Vid,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFid) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFid"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFid) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFid) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFid.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFid) ΛBelongingModule() string {
	return "ieee802-dot1q-bridge"
}


// Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFidAllocation represents the /ieee802-dot1q-bridge/bridges/bridge/component/bridge-vlan/vid-to-fid-allocation YANG schema element.
type Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFidAllocation struct {
	AllocationType	E_Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFidAllocation_AllocationType	`path:"allocation-type" module:"ieee802-dot1q-bridge"`
	Fid	*uint32	`path:"fid" module:"ieee802-dot1q-bridge"`
	Vids	*string	`path:"vids" module:"ieee802-dot1q-bridge"`
}

// IsYANGGoStruct ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFidAllocation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFidAllocation) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFidAllocation struct, which is a YANG list entry.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFidAllocation) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Vids == nil {
		return nil, fmt.Errorf("nil value for key Vids")
	}

	return map[string]interface{}{
		"vids": *t.Vids,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFidAllocation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFidAllocation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFidAllocation) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFidAllocation) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFidAllocation.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFidAllocation) ΛBelongingModule() string {
	return "ieee802-dot1q-bridge"
}


// Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_Vlan represents the /ieee802-dot1q-bridge/bridges/bridge/component/bridge-vlan/vlan YANG schema element.
type Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_Vlan struct {
	EgressPorts	[]string	`path:"egress-ports" module:"ieee802-dot1q-bridge"`
	Name	*string	`path:"name" module:"ieee802-dot1q-bridge"`
	UntaggedPorts	[]string	`path:"untagged-ports" module:"ieee802-dot1q-bridge"`
	Vid	*uint32	`path:"vid" module:"ieee802-dot1q-bridge"`
}

// IsYANGGoStruct ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_Vlan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_Vlan) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_Vlan struct, which is a YANG list entry.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_Vlan) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Vid == nil {
		return nil, fmt.Errorf("nil value for key Vid")
	}

	return map[string]interface{}{
		"vid": *t.Vid,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_Vlan) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_Vlan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_Vlan) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_Vlan) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_Vlan.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_Vlan) ΛBelongingModule() string {
	return "ieee802-dot1q-bridge"
}


// Ieee802Dot1QBridge_Bridges_Bridge_Component_Capabilities represents the /ieee802-dot1q-bridge/bridges/bridge/component/capabilities YANG schema element.
type Ieee802Dot1QBridge_Bridges_Bridge_Component_Capabilities struct {
	ConfigurablePvidTagging	*bool	`path:"configurable-pvid-tagging" module:"ieee802-dot1q-bridge"`
	ExtendedFiltering	*bool	`path:"extended-filtering" module:"ieee802-dot1q-bridge"`
	HybridCapable	*bool	`path:"hybrid-capable" module:"ieee802-dot1q-bridge"`
	IvlCapable	*bool	`path:"ivl-capable" module:"ieee802-dot1q-bridge"`
	LocalVlanCapable	*bool	`path:"local-vlan-capable" module:"ieee802-dot1q-bridge"`
	StaticEntryIndividualPort	*bool	`path:"static-entry-individual-port" module:"ieee802-dot1q-bridge"`
	SvlCapable	*bool	`path:"svl-capable" module:"ieee802-dot1q-bridge"`
	TrafficClasses	*bool	`path:"traffic-classes" module:"ieee802-dot1q-bridge"`
}

// IsYANGGoStruct ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_Capabilities implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_Capabilities) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_Capabilities) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ieee802Dot1QBridge_Bridges_Bridge_Component_Capabilities"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_Capabilities) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_Capabilities) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ieee802Dot1QBridge_Bridges_Bridge_Component_Capabilities.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_Capabilities) ΛBelongingModule() string {
	return "ieee802-dot1q-bridge"
}


// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase represents the /ieee802-dot1q-bridge/bridges/bridge/component/filtering-database YANG schema element.
type Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase struct {
	AgingTime	*uint32	`path:"aging-time" module:"ieee802-dot1q-bridge"`
	DynamicEntries	*uint32	`path:"dynamic-entries" module:"ieee802-dot1q-bridge"`
	DynamicVlanRegistrationEntries	*uint32	`path:"dynamic-vlan-registration-entries" module:"ieee802-dot1q-bridge"`
	FilteringEntry	map[Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_Key]*Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry	`path:"filtering-entry" module:"ieee802-dot1q-bridge"`
	MacAddressRegistrationEntries	*uint32	`path:"mac-address-registration-entries" module:"ieee802-dot1q-bridge"`
	Size	*uint32	`path:"size" module:"ieee802-dot1q-bridge"`
	StaticEntries	*uint32	`path:"static-entries" module:"ieee802-dot1q-bridge"`
	StaticVlanRegistrationEntries	*uint32	`path:"static-vlan-registration-entries" module:"ieee802-dot1q-bridge"`
	VlanRegistrationEntry	map[Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_Key]*Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry	`path:"vlan-registration-entry" module:"ieee802-dot1q-bridge"`
}

// IsYANGGoStruct ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase) IsYANGGoStruct() {}

// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_Key represents the key for list FilteringEntry of element /ieee802-dot1q-bridge/bridges/bridge/component/filtering-database.
type Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_Key struct {
	DatabaseId	uint32	`path:"database-id"`
	Vids	string	`path:"vids"`
	Address	string	`path:"address"`
}

// IsYANGGoKeyStruct ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_Key key struct.
func (t Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"database-id": t.DatabaseId,
		"vids": t.Vids,
		"address": t.Address,
	}, nil
}

// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_Key represents the key for list VlanRegistrationEntry of element /ieee802-dot1q-bridge/bridges/bridge/component/filtering-database.
type Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_Key struct {
	DatabaseId	uint32	`path:"database-id"`
	Vids	string	`path:"vids"`
}

// IsYANGGoKeyStruct ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_Key key struct.
func (t Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"database-id": t.DatabaseId,
		"vids": t.Vids,
	}, nil
}

// NewFilteringEntry creates a new entry in the FilteringEntry list of the
// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase struct. The keys of the list are populated from the input
// arguments.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase) NewFilteringEntry(DatabaseId uint32, Vids string, Address string) (*Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FilteringEntry == nil {
		t.FilteringEntry = make(map[Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_Key]*Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry)
	}

	key := Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_Key{
		DatabaseId: DatabaseId,
		Vids: Vids,
		Address: Address,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.FilteringEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list FilteringEntry", key)
	}

	t.FilteringEntry[key] = &Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry{
		DatabaseId: &DatabaseId,
		Vids: &Vids,
		Address: &Address,
	}

	return t.FilteringEntry[key], nil
}

// NewVlanRegistrationEntry creates a new entry in the VlanRegistrationEntry list of the
// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase struct. The keys of the list are populated from the input
// arguments.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase) NewVlanRegistrationEntry(DatabaseId uint32, Vids string) (*Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VlanRegistrationEntry == nil {
		t.VlanRegistrationEntry = make(map[Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_Key]*Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry)
	}

	key := Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_Key{
		DatabaseId: DatabaseId,
		Vids: Vids,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VlanRegistrationEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VlanRegistrationEntry", key)
	}

	t.VlanRegistrationEntry[key] = &Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry{
		DatabaseId: &DatabaseId,
		Vids: &Vids,
	}

	return t.VlanRegistrationEntry[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase) ΛBelongingModule() string {
	return "ieee802-dot1q-bridge"
}


// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry represents the /ieee802-dot1q-bridge/bridges/bridge/component/filtering-database/filtering-entry YANG schema element.
type Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry struct {
	Address	*string	`path:"address" module:"ieee802-dot1q-bridge"`
	DatabaseId	*uint32	`path:"database-id" module:"ieee802-dot1q-bridge"`
	EntryType	E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_EntryType	`path:"entry-type" module:"ieee802-dot1q-bridge"`
	PortMap	map[uint32]*Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap	`path:"port-map" module:"ieee802-dot1q-bridge"`
	Status	E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_Status	`path:"status" module:"ieee802-dot1q-bridge"`
	Vids	*string	`path:"vids" module:"ieee802-dot1q-bridge"`
}

// IsYANGGoStruct ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry) IsYANGGoStruct() {}

// NewPortMap creates a new entry in the PortMap list of the
// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry struct. The keys of the list are populated from the input
// arguments.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry) NewPortMap(PortRef uint32) (*Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PortMap == nil {
		t.PortMap = make(map[uint32]*Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap)
	}

	key := PortRef

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PortMap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PortMap", key)
	}

	t.PortMap[key] = &Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap{
		PortRef: &PortRef,
	}

	return t.PortMap[key], nil
}

// ΛListKeyMap returns the keys of the Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry struct, which is a YANG list entry.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	if t.DatabaseId == nil {
		return nil, fmt.Errorf("nil value for key DatabaseId")
	}

	if t.Vids == nil {
		return nil, fmt.Errorf("nil value for key Vids")
	}

	return map[string]interface{}{
		"address": *t.Address,
		"database-id": *t.DatabaseId,
		"vids": *t.Vids,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry) ΛBelongingModule() string {
	return "ieee802-dot1q-bridge"
}


// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap represents the /ieee802-dot1q-bridge/bridges/bridge/component/filtering-database/filtering-entry/port-map YANG schema element.
type Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap struct {
	DynamicFilteringEntries	*Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicFilteringEntries	`path:"dynamic-filtering-entries" module:"ieee802-dot1q-bridge"`
	DynamicReservationEntries	*Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicReservationEntries	`path:"dynamic-reservation-entries" module:"ieee802-dot1q-bridge"`
	DynamicVlanRegistrationEntries	*Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicVlanRegistrationEntries	`path:"dynamic-vlan-registration-entries" module:"ieee802-dot1q-bridge"`
	MacAddressRegistrationEntries	*Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_MacAddressRegistrationEntries	`path:"mac-address-registration-entries" module:"ieee802-dot1q-bridge"`
	PortRef	*uint32	`path:"port-ref" module:"ieee802-dot1q-bridge"`
	StaticFilteringEntries	*Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticFilteringEntries	`path:"static-filtering-entries" module:"ieee802-dot1q-bridge"`
	StaticVlanRegistrationEntries	*Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries	`path:"static-vlan-registration-entries" module:"ieee802-dot1q-bridge"`
}

// IsYANGGoStruct ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap struct, which is a YANG list entry.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PortRef == nil {
		return nil, fmt.Errorf("nil value for key PortRef")
	}

	return map[string]interface{}{
		"port-ref": *t.PortRef,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap) ΛBelongingModule() string {
	return "ieee802-dot1q-bridge"
}


// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicFilteringEntries represents the /ieee802-dot1q-bridge/bridges/bridge/component/filtering-database/filtering-entry/port-map/dynamic-filtering-entries YANG schema element.
type Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicFilteringEntries struct {
	ControlElement	E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicFilteringEntries_ControlElement	`path:"control-element" module:"ieee802-dot1q-bridge"`
}

// IsYANGGoStruct ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicFilteringEntries implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicFilteringEntries) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicFilteringEntries) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicFilteringEntries"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicFilteringEntries) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicFilteringEntries) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicFilteringEntries.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicFilteringEntries) ΛBelongingModule() string {
	return "ieee802-dot1q-bridge"
}


// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicReservationEntries represents the /ieee802-dot1q-bridge/bridges/bridge/component/filtering-database/filtering-entry/port-map/dynamic-reservation-entries YANG schema element.
type Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicReservationEntries struct {
	ControlElement	E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicReservationEntries_ControlElement	`path:"control-element" module:"ieee802-dot1q-bridge"`
}

// IsYANGGoStruct ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicReservationEntries implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicReservationEntries) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicReservationEntries) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicReservationEntries"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicReservationEntries) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicReservationEntries) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicReservationEntries.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicReservationEntries) ΛBelongingModule() string {
	return "ieee802-dot1q-bridge"
}


// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicVlanRegistrationEntries represents the /ieee802-dot1q-bridge/bridges/bridge/component/filtering-database/filtering-entry/port-map/dynamic-vlan-registration-entries YANG schema element.
type Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicVlanRegistrationEntries struct {
	ControlElement	E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicVlanRegistrationEntries_ControlElement	`path:"control-element" module:"ieee802-dot1q-bridge"`
}

// IsYANGGoStruct ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicVlanRegistrationEntries implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicVlanRegistrationEntries) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicVlanRegistrationEntries) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicVlanRegistrationEntries"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicVlanRegistrationEntries) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicVlanRegistrationEntries) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicVlanRegistrationEntries.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicVlanRegistrationEntries) ΛBelongingModule() string {
	return "ieee802-dot1q-bridge"
}


// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_MacAddressRegistrationEntries represents the /ieee802-dot1q-bridge/bridges/bridge/component/filtering-database/filtering-entry/port-map/mac-address-registration-entries YANG schema element.
type Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_MacAddressRegistrationEntries struct {
	ControlElement	E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_MacAddressRegistrationEntries_ControlElement	`path:"control-element" module:"ieee802-dot1q-bridge"`
}

// IsYANGGoStruct ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_MacAddressRegistrationEntries implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_MacAddressRegistrationEntries) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_MacAddressRegistrationEntries) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_MacAddressRegistrationEntries"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_MacAddressRegistrationEntries) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_MacAddressRegistrationEntries) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_MacAddressRegistrationEntries.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_MacAddressRegistrationEntries) ΛBelongingModule() string {
	return "ieee802-dot1q-bridge"
}


// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticFilteringEntries represents the /ieee802-dot1q-bridge/bridges/bridge/component/filtering-database/filtering-entry/port-map/static-filtering-entries YANG schema element.
type Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticFilteringEntries struct {
	ConnectionIdentifier	*uint32	`path:"connection-identifier" module:"ieee802-dot1q-bridge"`
	ControlElement	E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticFilteringEntries_ControlElement	`path:"control-element" module:"ieee802-dot1q-bridge"`
}

// IsYANGGoStruct ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticFilteringEntries implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticFilteringEntries) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticFilteringEntries) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticFilteringEntries"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticFilteringEntries) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticFilteringEntries) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticFilteringEntries.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticFilteringEntries) ΛBelongingModule() string {
	return "ieee802-dot1q-bridge"
}


// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries represents the /ieee802-dot1q-bridge/bridges/bridge/component/filtering-database/filtering-entry/port-map/static-vlan-registration-entries YANG schema element.
type Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries struct {
	RegistrarAdminControl	E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_RegistrarAdminControl	`path:"registrar-admin-control" module:"ieee802-dot1q-bridge"`
	VlanTransmitted	E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_VlanTransmitted	`path:"vlan-transmitted" module:"ieee802-dot1q-bridge"`
}

// IsYANGGoStruct ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries) ΛBelongingModule() string {
	return "ieee802-dot1q-bridge"
}


// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry represents the /ieee802-dot1q-bridge/bridges/bridge/component/filtering-database/vlan-registration-entry YANG schema element.
type Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry struct {
	DatabaseId	*uint32	`path:"database-id" module:"ieee802-dot1q-bridge"`
	EntryType	E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_EntryType	`path:"entry-type" module:"ieee802-dot1q-bridge"`
	PortMap	map[uint32]*Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap	`path:"port-map" module:"ieee802-dot1q-bridge"`
	Vids	*string	`path:"vids" module:"ieee802-dot1q-bridge"`
}

// IsYANGGoStruct ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry) IsYANGGoStruct() {}

// NewPortMap creates a new entry in the PortMap list of the
// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry struct. The keys of the list are populated from the input
// arguments.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry) NewPortMap(PortRef uint32) (*Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PortMap == nil {
		t.PortMap = make(map[uint32]*Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap)
	}

	key := PortRef

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PortMap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PortMap", key)
	}

	t.PortMap[key] = &Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap{
		PortRef: &PortRef,
	}

	return t.PortMap[key], nil
}

// ΛListKeyMap returns the keys of the Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry struct, which is a YANG list entry.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.DatabaseId == nil {
		return nil, fmt.Errorf("nil value for key DatabaseId")
	}

	if t.Vids == nil {
		return nil, fmt.Errorf("nil value for key Vids")
	}

	return map[string]interface{}{
		"database-id": *t.DatabaseId,
		"vids": *t.Vids,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry) ΛBelongingModule() string {
	return "ieee802-dot1q-bridge"
}


// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap represents the /ieee802-dot1q-bridge/bridges/bridge/component/filtering-database/vlan-registration-entry/port-map YANG schema element.
type Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap struct {
	DynamicFilteringEntries	*Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_DynamicFilteringEntries	`path:"dynamic-filtering-entries" module:"ieee802-dot1q-bridge"`
	DynamicReservationEntries	*Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_DynamicReservationEntries	`path:"dynamic-reservation-entries" module:"ieee802-dot1q-bridge"`
	DynamicVlanRegistrationEntries	*Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_DynamicVlanRegistrationEntries	`path:"dynamic-vlan-registration-entries" module:"ieee802-dot1q-bridge"`
	MacAddressRegistrationEntries	*Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_MacAddressRegistrationEntries	`path:"mac-address-registration-entries" module:"ieee802-dot1q-bridge"`
	PortRef	*uint32	`path:"port-ref" module:"ieee802-dot1q-bridge"`
	StaticFilteringEntries	*Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_StaticFilteringEntries	`path:"static-filtering-entries" module:"ieee802-dot1q-bridge"`
	StaticVlanRegistrationEntries	*Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_StaticVlanRegistrationEntries	`path:"static-vlan-registration-entries" module:"ieee802-dot1q-bridge"`
}

// IsYANGGoStruct ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap struct, which is a YANG list entry.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PortRef == nil {
		return nil, fmt.Errorf("nil value for key PortRef")
	}

	return map[string]interface{}{
		"port-ref": *t.PortRef,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap) ΛBelongingModule() string {
	return "ieee802-dot1q-bridge"
}


// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_DynamicFilteringEntries represents the /ieee802-dot1q-bridge/bridges/bridge/component/filtering-database/vlan-registration-entry/port-map/dynamic-filtering-entries YANG schema element.
type Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_DynamicFilteringEntries struct {
	ControlElement	E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicFilteringEntries_ControlElement	`path:"control-element" module:"ieee802-dot1q-bridge"`
}

// IsYANGGoStruct ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_DynamicFilteringEntries implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_DynamicFilteringEntries) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_DynamicFilteringEntries) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_DynamicFilteringEntries"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_DynamicFilteringEntries) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_DynamicFilteringEntries) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_DynamicFilteringEntries.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_DynamicFilteringEntries) ΛBelongingModule() string {
	return "ieee802-dot1q-bridge"
}


// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_DynamicReservationEntries represents the /ieee802-dot1q-bridge/bridges/bridge/component/filtering-database/vlan-registration-entry/port-map/dynamic-reservation-entries YANG schema element.
type Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_DynamicReservationEntries struct {
	ControlElement	E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicReservationEntries_ControlElement	`path:"control-element" module:"ieee802-dot1q-bridge"`
}

// IsYANGGoStruct ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_DynamicReservationEntries implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_DynamicReservationEntries) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_DynamicReservationEntries) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_DynamicReservationEntries"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_DynamicReservationEntries) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_DynamicReservationEntries) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_DynamicReservationEntries.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_DynamicReservationEntries) ΛBelongingModule() string {
	return "ieee802-dot1q-bridge"
}


// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_DynamicVlanRegistrationEntries represents the /ieee802-dot1q-bridge/bridges/bridge/component/filtering-database/vlan-registration-entry/port-map/dynamic-vlan-registration-entries YANG schema element.
type Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_DynamicVlanRegistrationEntries struct {
	ControlElement	E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicVlanRegistrationEntries_ControlElement	`path:"control-element" module:"ieee802-dot1q-bridge"`
}

// IsYANGGoStruct ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_DynamicVlanRegistrationEntries implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_DynamicVlanRegistrationEntries) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_DynamicVlanRegistrationEntries) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_DynamicVlanRegistrationEntries"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_DynamicVlanRegistrationEntries) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_DynamicVlanRegistrationEntries) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_DynamicVlanRegistrationEntries.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_DynamicVlanRegistrationEntries) ΛBelongingModule() string {
	return "ieee802-dot1q-bridge"
}


// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_MacAddressRegistrationEntries represents the /ieee802-dot1q-bridge/bridges/bridge/component/filtering-database/vlan-registration-entry/port-map/mac-address-registration-entries YANG schema element.
type Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_MacAddressRegistrationEntries struct {
	ControlElement	E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_MacAddressRegistrationEntries_ControlElement	`path:"control-element" module:"ieee802-dot1q-bridge"`
}

// IsYANGGoStruct ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_MacAddressRegistrationEntries implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_MacAddressRegistrationEntries) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_MacAddressRegistrationEntries) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_MacAddressRegistrationEntries"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_MacAddressRegistrationEntries) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_MacAddressRegistrationEntries) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_MacAddressRegistrationEntries.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_MacAddressRegistrationEntries) ΛBelongingModule() string {
	return "ieee802-dot1q-bridge"
}


// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_StaticFilteringEntries represents the /ieee802-dot1q-bridge/bridges/bridge/component/filtering-database/vlan-registration-entry/port-map/static-filtering-entries YANG schema element.
type Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_StaticFilteringEntries struct {
	ConnectionIdentifier	*uint32	`path:"connection-identifier" module:"ieee802-dot1q-bridge"`
	ControlElement	E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticFilteringEntries_ControlElement	`path:"control-element" module:"ieee802-dot1q-bridge"`
}

// IsYANGGoStruct ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_StaticFilteringEntries implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_StaticFilteringEntries) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_StaticFilteringEntries) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_StaticFilteringEntries"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_StaticFilteringEntries) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_StaticFilteringEntries) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_StaticFilteringEntries.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_StaticFilteringEntries) ΛBelongingModule() string {
	return "ieee802-dot1q-bridge"
}


// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_StaticVlanRegistrationEntries represents the /ieee802-dot1q-bridge/bridges/bridge/component/filtering-database/vlan-registration-entry/port-map/static-vlan-registration-entries YANG schema element.
type Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_StaticVlanRegistrationEntries struct {
	RegistrarAdminControl	E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_RegistrarAdminControl	`path:"registrar-admin-control" module:"ieee802-dot1q-bridge"`
	VlanTransmitted	E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_VlanTransmitted	`path:"vlan-transmitted" module:"ieee802-dot1q-bridge"`
}

// IsYANGGoStruct ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_StaticVlanRegistrationEntries implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_StaticVlanRegistrationEntries) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_StaticVlanRegistrationEntries) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_StaticVlanRegistrationEntries"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_StaticVlanRegistrationEntries) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_StaticVlanRegistrationEntries) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_StaticVlanRegistrationEntries.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_PortMap_StaticVlanRegistrationEntries) ΛBelongingModule() string {
	return "ieee802-dot1q-bridge"
}


// Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase represents the /ieee802-dot1q-bridge/bridges/bridge/component/permanent-database YANG schema element.
type Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase struct {
	FilteringEntry	map[Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_Key]*Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry	`path:"filtering-entry" module:"ieee802-dot1q-bridge"`
	Size	*uint32	`path:"size" module:"ieee802-dot1q-bridge"`
	StaticEntries	*uint32	`path:"static-entries" module:"ieee802-dot1q-bridge"`
	StaticVlanRegistrationEntries	*uint32	`path:"static-vlan-registration-entries" module:"ieee802-dot1q-bridge"`
}

// IsYANGGoStruct ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase) IsYANGGoStruct() {}

// Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_Key represents the key for list FilteringEntry of element /ieee802-dot1q-bridge/bridges/bridge/component/permanent-database.
type Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_Key struct {
	DatabaseId	uint32	`path:"database-id"`
	Vids	string	`path:"vids"`
	Address	string	`path:"address"`
}

// IsYANGGoKeyStruct ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_Key key struct.
func (t Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"database-id": t.DatabaseId,
		"vids": t.Vids,
		"address": t.Address,
	}, nil
}

// NewFilteringEntry creates a new entry in the FilteringEntry list of the
// Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase struct. The keys of the list are populated from the input
// arguments.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase) NewFilteringEntry(DatabaseId uint32, Vids string, Address string) (*Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FilteringEntry == nil {
		t.FilteringEntry = make(map[Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_Key]*Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry)
	}

	key := Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_Key{
		DatabaseId: DatabaseId,
		Vids: Vids,
		Address: Address,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.FilteringEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list FilteringEntry", key)
	}

	t.FilteringEntry[key] = &Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry{
		DatabaseId: &DatabaseId,
		Vids: &Vids,
		Address: &Address,
	}

	return t.FilteringEntry[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase) ΛBelongingModule() string {
	return "ieee802-dot1q-bridge"
}


// Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry represents the /ieee802-dot1q-bridge/bridges/bridge/component/permanent-database/filtering-entry YANG schema element.
type Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry struct {
	Address	*string	`path:"address" module:"ieee802-dot1q-bridge"`
	DatabaseId	*uint32	`path:"database-id" module:"ieee802-dot1q-bridge"`
	PortMap	map[uint32]*Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap	`path:"port-map" module:"ieee802-dot1q-bridge"`
	Status	E_Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_Status	`path:"status" module:"ieee802-dot1q-bridge"`
	Vids	*string	`path:"vids" module:"ieee802-dot1q-bridge"`
}

// IsYANGGoStruct ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry) IsYANGGoStruct() {}

// NewPortMap creates a new entry in the PortMap list of the
// Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry struct. The keys of the list are populated from the input
// arguments.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry) NewPortMap(PortRef uint32) (*Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PortMap == nil {
		t.PortMap = make(map[uint32]*Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap)
	}

	key := PortRef

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PortMap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PortMap", key)
	}

	t.PortMap[key] = &Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap{
		PortRef: &PortRef,
	}

	return t.PortMap[key], nil
}

// ΛListKeyMap returns the keys of the Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry struct, which is a YANG list entry.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	if t.DatabaseId == nil {
		return nil, fmt.Errorf("nil value for key DatabaseId")
	}

	if t.Vids == nil {
		return nil, fmt.Errorf("nil value for key Vids")
	}

	return map[string]interface{}{
		"address": *t.Address,
		"database-id": *t.DatabaseId,
		"vids": *t.Vids,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry) ΛBelongingModule() string {
	return "ieee802-dot1q-bridge"
}


// Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap represents the /ieee802-dot1q-bridge/bridges/bridge/component/permanent-database/filtering-entry/port-map YANG schema element.
type Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap struct {
	DynamicFilteringEntries	*Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_DynamicFilteringEntries	`path:"dynamic-filtering-entries" module:"ieee802-dot1q-bridge"`
	DynamicReservationEntries	*Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_DynamicReservationEntries	`path:"dynamic-reservation-entries" module:"ieee802-dot1q-bridge"`
	DynamicVlanRegistrationEntries	*Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_DynamicVlanRegistrationEntries	`path:"dynamic-vlan-registration-entries" module:"ieee802-dot1q-bridge"`
	MacAddressRegistrationEntries	*Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_MacAddressRegistrationEntries	`path:"mac-address-registration-entries" module:"ieee802-dot1q-bridge"`
	PortRef	*uint32	`path:"port-ref" module:"ieee802-dot1q-bridge"`
	StaticFilteringEntries	*Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_StaticFilteringEntries	`path:"static-filtering-entries" module:"ieee802-dot1q-bridge"`
	StaticVlanRegistrationEntries	*Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries	`path:"static-vlan-registration-entries" module:"ieee802-dot1q-bridge"`
}

// IsYANGGoStruct ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap struct, which is a YANG list entry.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PortRef == nil {
		return nil, fmt.Errorf("nil value for key PortRef")
	}

	return map[string]interface{}{
		"port-ref": *t.PortRef,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap) ΛBelongingModule() string {
	return "ieee802-dot1q-bridge"
}


// Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_DynamicFilteringEntries represents the /ieee802-dot1q-bridge/bridges/bridge/component/permanent-database/filtering-entry/port-map/dynamic-filtering-entries YANG schema element.
type Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_DynamicFilteringEntries struct {
	ControlElement	E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicFilteringEntries_ControlElement	`path:"control-element" module:"ieee802-dot1q-bridge"`
}

// IsYANGGoStruct ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_DynamicFilteringEntries implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_DynamicFilteringEntries) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_DynamicFilteringEntries) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_DynamicFilteringEntries"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_DynamicFilteringEntries) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_DynamicFilteringEntries) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_DynamicFilteringEntries.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_DynamicFilteringEntries) ΛBelongingModule() string {
	return "ieee802-dot1q-bridge"
}


// Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_DynamicReservationEntries represents the /ieee802-dot1q-bridge/bridges/bridge/component/permanent-database/filtering-entry/port-map/dynamic-reservation-entries YANG schema element.
type Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_DynamicReservationEntries struct {
	ControlElement	E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicReservationEntries_ControlElement	`path:"control-element" module:"ieee802-dot1q-bridge"`
}

// IsYANGGoStruct ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_DynamicReservationEntries implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_DynamicReservationEntries) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_DynamicReservationEntries) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_DynamicReservationEntries"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_DynamicReservationEntries) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_DynamicReservationEntries) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_DynamicReservationEntries.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_DynamicReservationEntries) ΛBelongingModule() string {
	return "ieee802-dot1q-bridge"
}


// Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_DynamicVlanRegistrationEntries represents the /ieee802-dot1q-bridge/bridges/bridge/component/permanent-database/filtering-entry/port-map/dynamic-vlan-registration-entries YANG schema element.
type Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_DynamicVlanRegistrationEntries struct {
	ControlElement	E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicVlanRegistrationEntries_ControlElement	`path:"control-element" module:"ieee802-dot1q-bridge"`
}

// IsYANGGoStruct ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_DynamicVlanRegistrationEntries implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_DynamicVlanRegistrationEntries) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_DynamicVlanRegistrationEntries) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_DynamicVlanRegistrationEntries"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_DynamicVlanRegistrationEntries) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_DynamicVlanRegistrationEntries) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_DynamicVlanRegistrationEntries.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_DynamicVlanRegistrationEntries) ΛBelongingModule() string {
	return "ieee802-dot1q-bridge"
}


// Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_MacAddressRegistrationEntries represents the /ieee802-dot1q-bridge/bridges/bridge/component/permanent-database/filtering-entry/port-map/mac-address-registration-entries YANG schema element.
type Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_MacAddressRegistrationEntries struct {
	ControlElement	E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_MacAddressRegistrationEntries_ControlElement	`path:"control-element" module:"ieee802-dot1q-bridge"`
}

// IsYANGGoStruct ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_MacAddressRegistrationEntries implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_MacAddressRegistrationEntries) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_MacAddressRegistrationEntries) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_MacAddressRegistrationEntries"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_MacAddressRegistrationEntries) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_MacAddressRegistrationEntries) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_MacAddressRegistrationEntries.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_MacAddressRegistrationEntries) ΛBelongingModule() string {
	return "ieee802-dot1q-bridge"
}


// Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_StaticFilteringEntries represents the /ieee802-dot1q-bridge/bridges/bridge/component/permanent-database/filtering-entry/port-map/static-filtering-entries YANG schema element.
type Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_StaticFilteringEntries struct {
	ConnectionIdentifier	*uint32	`path:"connection-identifier" module:"ieee802-dot1q-bridge"`
	ControlElement	E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticFilteringEntries_ControlElement	`path:"control-element" module:"ieee802-dot1q-bridge"`
}

// IsYANGGoStruct ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_StaticFilteringEntries implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_StaticFilteringEntries) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_StaticFilteringEntries) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_StaticFilteringEntries"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_StaticFilteringEntries) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_StaticFilteringEntries) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_StaticFilteringEntries.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_StaticFilteringEntries) ΛBelongingModule() string {
	return "ieee802-dot1q-bridge"
}


// Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries represents the /ieee802-dot1q-bridge/bridges/bridge/component/permanent-database/filtering-entry/port-map/static-vlan-registration-entries YANG schema element.
type Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries struct {
	RegistrarAdminControl	E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_RegistrarAdminControl	`path:"registrar-admin-control" module:"ieee802-dot1q-bridge"`
	VlanTransmitted	E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_VlanTransmitted	`path:"vlan-transmitted" module:"ieee802-dot1q-bridge"`
}

// IsYANGGoStruct ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries.
func (*Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries) ΛBelongingModule() string {
	return "ieee802-dot1q-bridge"
}


// E_IETFInterfaces_InterfaceType is a derived int64 type which is used to represent
// the enumerated node IETFInterfaces_InterfaceType. An additional value named
// IETFInterfaces_InterfaceType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFInterfaces_InterfaceType int64

// IsYANGGoEnum ensures that IETFInterfaces_InterfaceType implements the yang.GoEnum
// interface. This ensures that IETFInterfaces_InterfaceType can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFInterfaces_InterfaceType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFInterfaces_InterfaceType.
func (E_IETFInterfaces_InterfaceType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_IETFInterfaces_InterfaceType.
func (e E_IETFInterfaces_InterfaceType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFInterfaces_InterfaceType")
}

const (
	// IETFInterfaces_InterfaceType_UNSET corresponds to the value UNSET of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_UNSET E_IETFInterfaces_InterfaceType = 0
)


// E_IETFInterfaces_InterfacesState_Interface_AdminStatus is a derived int64 type which is used to represent
// the enumerated node IETFInterfaces_InterfacesState_Interface_AdminStatus. An additional value named
// IETFInterfaces_InterfacesState_Interface_AdminStatus_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFInterfaces_InterfacesState_Interface_AdminStatus int64

// IsYANGGoEnum ensures that IETFInterfaces_InterfacesState_Interface_AdminStatus implements the yang.GoEnum
// interface. This ensures that IETFInterfaces_InterfacesState_Interface_AdminStatus can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFInterfaces_InterfacesState_Interface_AdminStatus) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFInterfaces_InterfacesState_Interface_AdminStatus.
func (E_IETFInterfaces_InterfacesState_Interface_AdminStatus) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_IETFInterfaces_InterfacesState_Interface_AdminStatus.
func (e E_IETFInterfaces_InterfacesState_Interface_AdminStatus) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFInterfaces_InterfacesState_Interface_AdminStatus")
}

const (
	// IETFInterfaces_InterfacesState_Interface_AdminStatus_UNSET corresponds to the value UNSET of IETFInterfaces_InterfacesState_Interface_AdminStatus
	IETFInterfaces_InterfacesState_Interface_AdminStatus_UNSET E_IETFInterfaces_InterfacesState_Interface_AdminStatus = 0
	// IETFInterfaces_InterfacesState_Interface_AdminStatus_up corresponds to the value up of IETFInterfaces_InterfacesState_Interface_AdminStatus
	IETFInterfaces_InterfacesState_Interface_AdminStatus_up E_IETFInterfaces_InterfacesState_Interface_AdminStatus = 1
	// IETFInterfaces_InterfacesState_Interface_AdminStatus_down corresponds to the value down of IETFInterfaces_InterfacesState_Interface_AdminStatus
	IETFInterfaces_InterfacesState_Interface_AdminStatus_down E_IETFInterfaces_InterfacesState_Interface_AdminStatus = 2
	// IETFInterfaces_InterfacesState_Interface_AdminStatus_testing corresponds to the value testing of IETFInterfaces_InterfacesState_Interface_AdminStatus
	IETFInterfaces_InterfacesState_Interface_AdminStatus_testing E_IETFInterfaces_InterfacesState_Interface_AdminStatus = 3
)


// E_IETFInterfaces_InterfacesState_Interface_OperStatus is a derived int64 type which is used to represent
// the enumerated node IETFInterfaces_InterfacesState_Interface_OperStatus. An additional value named
// IETFInterfaces_InterfacesState_Interface_OperStatus_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFInterfaces_InterfacesState_Interface_OperStatus int64

// IsYANGGoEnum ensures that IETFInterfaces_InterfacesState_Interface_OperStatus implements the yang.GoEnum
// interface. This ensures that IETFInterfaces_InterfacesState_Interface_OperStatus can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFInterfaces_InterfacesState_Interface_OperStatus) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFInterfaces_InterfacesState_Interface_OperStatus.
func (E_IETFInterfaces_InterfacesState_Interface_OperStatus) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_IETFInterfaces_InterfacesState_Interface_OperStatus.
func (e E_IETFInterfaces_InterfacesState_Interface_OperStatus) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFInterfaces_InterfacesState_Interface_OperStatus")
}

const (
	// IETFInterfaces_InterfacesState_Interface_OperStatus_UNSET corresponds to the value UNSET of IETFInterfaces_InterfacesState_Interface_OperStatus
	IETFInterfaces_InterfacesState_Interface_OperStatus_UNSET E_IETFInterfaces_InterfacesState_Interface_OperStatus = 0
	// IETFInterfaces_InterfacesState_Interface_OperStatus_up corresponds to the value up of IETFInterfaces_InterfacesState_Interface_OperStatus
	IETFInterfaces_InterfacesState_Interface_OperStatus_up E_IETFInterfaces_InterfacesState_Interface_OperStatus = 1
	// IETFInterfaces_InterfacesState_Interface_OperStatus_down corresponds to the value down of IETFInterfaces_InterfacesState_Interface_OperStatus
	IETFInterfaces_InterfacesState_Interface_OperStatus_down E_IETFInterfaces_InterfacesState_Interface_OperStatus = 2
	// IETFInterfaces_InterfacesState_Interface_OperStatus_testing corresponds to the value testing of IETFInterfaces_InterfacesState_Interface_OperStatus
	IETFInterfaces_InterfacesState_Interface_OperStatus_testing E_IETFInterfaces_InterfacesState_Interface_OperStatus = 3
	// IETFInterfaces_InterfacesState_Interface_OperStatus_unknown corresponds to the value unknown of IETFInterfaces_InterfacesState_Interface_OperStatus
	IETFInterfaces_InterfacesState_Interface_OperStatus_unknown E_IETFInterfaces_InterfacesState_Interface_OperStatus = 4
	// IETFInterfaces_InterfacesState_Interface_OperStatus_dormant corresponds to the value dormant of IETFInterfaces_InterfacesState_Interface_OperStatus
	IETFInterfaces_InterfacesState_Interface_OperStatus_dormant E_IETFInterfaces_InterfacesState_Interface_OperStatus = 5
	// IETFInterfaces_InterfacesState_Interface_OperStatus_not_present corresponds to the value not_present of IETFInterfaces_InterfacesState_Interface_OperStatus
	IETFInterfaces_InterfacesState_Interface_OperStatus_not_present E_IETFInterfaces_InterfacesState_Interface_OperStatus = 6
	// IETFInterfaces_InterfacesState_Interface_OperStatus_lower_layer_down corresponds to the value lower_layer_down of IETFInterfaces_InterfacesState_Interface_OperStatus
	IETFInterfaces_InterfacesState_Interface_OperStatus_lower_layer_down E_IETFInterfaces_InterfacesState_Interface_OperStatus = 7
)


// E_IETFInterfaces_Interfaces_Interface_AdminStatus is a derived int64 type which is used to represent
// the enumerated node IETFInterfaces_Interfaces_Interface_AdminStatus. An additional value named
// IETFInterfaces_Interfaces_Interface_AdminStatus_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFInterfaces_Interfaces_Interface_AdminStatus int64

// IsYANGGoEnum ensures that IETFInterfaces_Interfaces_Interface_AdminStatus implements the yang.GoEnum
// interface. This ensures that IETFInterfaces_Interfaces_Interface_AdminStatus can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFInterfaces_Interfaces_Interface_AdminStatus) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFInterfaces_Interfaces_Interface_AdminStatus.
func (E_IETFInterfaces_Interfaces_Interface_AdminStatus) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_IETFInterfaces_Interfaces_Interface_AdminStatus.
func (e E_IETFInterfaces_Interfaces_Interface_AdminStatus) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFInterfaces_Interfaces_Interface_AdminStatus")
}

const (
	// IETFInterfaces_Interfaces_Interface_AdminStatus_UNSET corresponds to the value UNSET of IETFInterfaces_Interfaces_Interface_AdminStatus
	IETFInterfaces_Interfaces_Interface_AdminStatus_UNSET E_IETFInterfaces_Interfaces_Interface_AdminStatus = 0
	// IETFInterfaces_Interfaces_Interface_AdminStatus_up corresponds to the value up of IETFInterfaces_Interfaces_Interface_AdminStatus
	IETFInterfaces_Interfaces_Interface_AdminStatus_up E_IETFInterfaces_Interfaces_Interface_AdminStatus = 1
	// IETFInterfaces_Interfaces_Interface_AdminStatus_down corresponds to the value down of IETFInterfaces_Interfaces_Interface_AdminStatus
	IETFInterfaces_Interfaces_Interface_AdminStatus_down E_IETFInterfaces_Interfaces_Interface_AdminStatus = 2
	// IETFInterfaces_Interfaces_Interface_AdminStatus_testing corresponds to the value testing of IETFInterfaces_Interfaces_Interface_AdminStatus
	IETFInterfaces_Interfaces_Interface_AdminStatus_testing E_IETFInterfaces_Interfaces_Interface_AdminStatus = 3
)


// E_IETFInterfaces_Interfaces_Interface_BridgePort_AcceptableFrame is a derived int64 type which is used to represent
// the enumerated node IETFInterfaces_Interfaces_Interface_BridgePort_AcceptableFrame. An additional value named
// IETFInterfaces_Interfaces_Interface_BridgePort_AcceptableFrame_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFInterfaces_Interfaces_Interface_BridgePort_AcceptableFrame int64

// IsYANGGoEnum ensures that IETFInterfaces_Interfaces_Interface_BridgePort_AcceptableFrame implements the yang.GoEnum
// interface. This ensures that IETFInterfaces_Interfaces_Interface_BridgePort_AcceptableFrame can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFInterfaces_Interfaces_Interface_BridgePort_AcceptableFrame) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFInterfaces_Interfaces_Interface_BridgePort_AcceptableFrame.
func (E_IETFInterfaces_Interfaces_Interface_BridgePort_AcceptableFrame) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_IETFInterfaces_Interfaces_Interface_BridgePort_AcceptableFrame.
func (e E_IETFInterfaces_Interfaces_Interface_BridgePort_AcceptableFrame) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFInterfaces_Interfaces_Interface_BridgePort_AcceptableFrame")
}

const (
	// IETFInterfaces_Interfaces_Interface_BridgePort_AcceptableFrame_UNSET corresponds to the value UNSET of IETFInterfaces_Interfaces_Interface_BridgePort_AcceptableFrame
	IETFInterfaces_Interfaces_Interface_BridgePort_AcceptableFrame_UNSET E_IETFInterfaces_Interfaces_Interface_BridgePort_AcceptableFrame = 0
	// IETFInterfaces_Interfaces_Interface_BridgePort_AcceptableFrame_admit_only_VLAN_tagged_frames corresponds to the value admit_only_VLAN_tagged_frames of IETFInterfaces_Interfaces_Interface_BridgePort_AcceptableFrame
	IETFInterfaces_Interfaces_Interface_BridgePort_AcceptableFrame_admit_only_VLAN_tagged_frames E_IETFInterfaces_Interfaces_Interface_BridgePort_AcceptableFrame = 1
	// IETFInterfaces_Interfaces_Interface_BridgePort_AcceptableFrame_admit_only_untagged_and_priority_tagged corresponds to the value admit_only_untagged_and_priority_tagged of IETFInterfaces_Interfaces_Interface_BridgePort_AcceptableFrame
	IETFInterfaces_Interfaces_Interface_BridgePort_AcceptableFrame_admit_only_untagged_and_priority_tagged E_IETFInterfaces_Interfaces_Interface_BridgePort_AcceptableFrame = 2
	// IETFInterfaces_Interfaces_Interface_BridgePort_AcceptableFrame_admit_all_frames corresponds to the value admit_all_frames of IETFInterfaces_Interfaces_Interface_BridgePort_AcceptableFrame
	IETFInterfaces_Interfaces_Interface_BridgePort_AcceptableFrame_admit_all_frames E_IETFInterfaces_Interfaces_Interface_BridgePort_AcceptableFrame = 3
)


// E_IETFInterfaces_Interfaces_Interface_BridgePort_AdminPointToPoint is a derived int64 type which is used to represent
// the enumerated node IETFInterfaces_Interfaces_Interface_BridgePort_AdminPointToPoint. An additional value named
// IETFInterfaces_Interfaces_Interface_BridgePort_AdminPointToPoint_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFInterfaces_Interfaces_Interface_BridgePort_AdminPointToPoint int64

// IsYANGGoEnum ensures that IETFInterfaces_Interfaces_Interface_BridgePort_AdminPointToPoint implements the yang.GoEnum
// interface. This ensures that IETFInterfaces_Interfaces_Interface_BridgePort_AdminPointToPoint can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFInterfaces_Interfaces_Interface_BridgePort_AdminPointToPoint) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFInterfaces_Interfaces_Interface_BridgePort_AdminPointToPoint.
func (E_IETFInterfaces_Interfaces_Interface_BridgePort_AdminPointToPoint) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_IETFInterfaces_Interfaces_Interface_BridgePort_AdminPointToPoint.
func (e E_IETFInterfaces_Interfaces_Interface_BridgePort_AdminPointToPoint) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFInterfaces_Interfaces_Interface_BridgePort_AdminPointToPoint")
}

const (
	// IETFInterfaces_Interfaces_Interface_BridgePort_AdminPointToPoint_UNSET corresponds to the value UNSET of IETFInterfaces_Interfaces_Interface_BridgePort_AdminPointToPoint
	IETFInterfaces_Interfaces_Interface_BridgePort_AdminPointToPoint_UNSET E_IETFInterfaces_Interfaces_Interface_BridgePort_AdminPointToPoint = 0
	// IETFInterfaces_Interfaces_Interface_BridgePort_AdminPointToPoint_force_true corresponds to the value force_true of IETFInterfaces_Interfaces_Interface_BridgePort_AdminPointToPoint
	IETFInterfaces_Interfaces_Interface_BridgePort_AdminPointToPoint_force_true E_IETFInterfaces_Interfaces_Interface_BridgePort_AdminPointToPoint = 1
	// IETFInterfaces_Interfaces_Interface_BridgePort_AdminPointToPoint_force_false corresponds to the value force_false of IETFInterfaces_Interfaces_Interface_BridgePort_AdminPointToPoint
	IETFInterfaces_Interfaces_Interface_BridgePort_AdminPointToPoint_force_false E_IETFInterfaces_Interfaces_Interface_BridgePort_AdminPointToPoint = 2
	// IETFInterfaces_Interfaces_Interface_BridgePort_AdminPointToPoint_auto corresponds to the value auto of IETFInterfaces_Interfaces_Interface_BridgePort_AdminPointToPoint
	IETFInterfaces_Interfaces_Interface_BridgePort_AdminPointToPoint_auto E_IETFInterfaces_Interfaces_Interface_BridgePort_AdminPointToPoint = 3
)


// E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable is a derived int64 type which is used to represent
// the enumerated node IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable. An additional value named
// IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable int64

// IsYANGGoEnum ensures that IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable implements the yang.GoEnum
// interface. This ensures that IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable.
func (E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable.
func (e E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable")
}

const (
	// IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable_UNSET corresponds to the value UNSET of IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable
	IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable_UNSET E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable = 0
	// IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable_enabled corresponds to the value enabled of IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable
	IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable_enabled E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable = 1
	// IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable_disabled corresponds to the value disabled of IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable
	IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable_disabled E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable = 2
)


// E_IETFInterfaces_Interfaces_Interface_OperStatus is a derived int64 type which is used to represent
// the enumerated node IETFInterfaces_Interfaces_Interface_OperStatus. An additional value named
// IETFInterfaces_Interfaces_Interface_OperStatus_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFInterfaces_Interfaces_Interface_OperStatus int64

// IsYANGGoEnum ensures that IETFInterfaces_Interfaces_Interface_OperStatus implements the yang.GoEnum
// interface. This ensures that IETFInterfaces_Interfaces_Interface_OperStatus can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFInterfaces_Interfaces_Interface_OperStatus) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFInterfaces_Interfaces_Interface_OperStatus.
func (E_IETFInterfaces_Interfaces_Interface_OperStatus) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_IETFInterfaces_Interfaces_Interface_OperStatus.
func (e E_IETFInterfaces_Interfaces_Interface_OperStatus) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFInterfaces_Interfaces_Interface_OperStatus")
}

const (
	// IETFInterfaces_Interfaces_Interface_OperStatus_UNSET corresponds to the value UNSET of IETFInterfaces_Interfaces_Interface_OperStatus
	IETFInterfaces_Interfaces_Interface_OperStatus_UNSET E_IETFInterfaces_Interfaces_Interface_OperStatus = 0
	// IETFInterfaces_Interfaces_Interface_OperStatus_up corresponds to the value up of IETFInterfaces_Interfaces_Interface_OperStatus
	IETFInterfaces_Interfaces_Interface_OperStatus_up E_IETFInterfaces_Interfaces_Interface_OperStatus = 1
	// IETFInterfaces_Interfaces_Interface_OperStatus_down corresponds to the value down of IETFInterfaces_Interfaces_Interface_OperStatus
	IETFInterfaces_Interfaces_Interface_OperStatus_down E_IETFInterfaces_Interfaces_Interface_OperStatus = 2
	// IETFInterfaces_Interfaces_Interface_OperStatus_testing corresponds to the value testing of IETFInterfaces_Interfaces_Interface_OperStatus
	IETFInterfaces_Interfaces_Interface_OperStatus_testing E_IETFInterfaces_Interfaces_Interface_OperStatus = 3
	// IETFInterfaces_Interfaces_Interface_OperStatus_unknown corresponds to the value unknown of IETFInterfaces_Interfaces_Interface_OperStatus
	IETFInterfaces_Interfaces_Interface_OperStatus_unknown E_IETFInterfaces_Interfaces_Interface_OperStatus = 4
	// IETFInterfaces_Interfaces_Interface_OperStatus_dormant corresponds to the value dormant of IETFInterfaces_Interfaces_Interface_OperStatus
	IETFInterfaces_Interfaces_Interface_OperStatus_dormant E_IETFInterfaces_Interfaces_Interface_OperStatus = 5
	// IETFInterfaces_Interfaces_Interface_OperStatus_not_present corresponds to the value not_present of IETFInterfaces_Interfaces_Interface_OperStatus
	IETFInterfaces_Interfaces_Interface_OperStatus_not_present E_IETFInterfaces_Interfaces_Interface_OperStatus = 6
	// IETFInterfaces_Interfaces_Interface_OperStatus_lower_layer_down corresponds to the value lower_layer_down of IETFInterfaces_Interfaces_Interface_OperStatus
	IETFInterfaces_Interfaces_Interface_OperStatus_lower_layer_down E_IETFInterfaces_Interfaces_Interface_OperStatus = 7
)


// E_Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_FidToVidAllocation_AllocationType is a derived int64 type which is used to represent
// the enumerated node Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_FidToVidAllocation_AllocationType. An additional value named
// Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_FidToVidAllocation_AllocationType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_FidToVidAllocation_AllocationType int64

// IsYANGGoEnum ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_FidToVidAllocation_AllocationType implements the yang.GoEnum
// interface. This ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_FidToVidAllocation_AllocationType can be identified as a
// mapped type for a YANG enumeration.
func (E_Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_FidToVidAllocation_AllocationType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_FidToVidAllocation_AllocationType.
func (E_Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_FidToVidAllocation_AllocationType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_FidToVidAllocation_AllocationType.
func (e E_Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_FidToVidAllocation_AllocationType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_FidToVidAllocation_AllocationType")
}

const (
	// Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_FidToVidAllocation_AllocationType_UNSET corresponds to the value UNSET of Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_FidToVidAllocation_AllocationType
	Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_FidToVidAllocation_AllocationType_UNSET E_Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_FidToVidAllocation_AllocationType = 0
	// Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_FidToVidAllocation_AllocationType_undefined corresponds to the value undefined of Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_FidToVidAllocation_AllocationType
	Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_FidToVidAllocation_AllocationType_undefined E_Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_FidToVidAllocation_AllocationType = 1
	// Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_FidToVidAllocation_AllocationType_fixed corresponds to the value fixed of Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_FidToVidAllocation_AllocationType
	Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_FidToVidAllocation_AllocationType_fixed E_Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_FidToVidAllocation_AllocationType = 2
	// Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_FidToVidAllocation_AllocationType_dynamic corresponds to the value dynamic of Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_FidToVidAllocation_AllocationType
	Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_FidToVidAllocation_AllocationType_dynamic E_Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_FidToVidAllocation_AllocationType = 3
)


// E_Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFidAllocation_AllocationType is a derived int64 type which is used to represent
// the enumerated node Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFidAllocation_AllocationType. An additional value named
// Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFidAllocation_AllocationType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFidAllocation_AllocationType int64

// IsYANGGoEnum ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFidAllocation_AllocationType implements the yang.GoEnum
// interface. This ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFidAllocation_AllocationType can be identified as a
// mapped type for a YANG enumeration.
func (E_Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFidAllocation_AllocationType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFidAllocation_AllocationType.
func (E_Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFidAllocation_AllocationType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFidAllocation_AllocationType.
func (e E_Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFidAllocation_AllocationType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFidAllocation_AllocationType")
}

const (
	// Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFidAllocation_AllocationType_UNSET corresponds to the value UNSET of Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFidAllocation_AllocationType
	Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFidAllocation_AllocationType_UNSET E_Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFidAllocation_AllocationType = 0
	// Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFidAllocation_AllocationType_undefined corresponds to the value undefined of Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFidAllocation_AllocationType
	Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFidAllocation_AllocationType_undefined E_Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFidAllocation_AllocationType = 1
	// Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFidAllocation_AllocationType_fixed corresponds to the value fixed of Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFidAllocation_AllocationType
	Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFidAllocation_AllocationType_fixed E_Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFidAllocation_AllocationType = 2
	// Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFidAllocation_AllocationType_dynamic corresponds to the value dynamic of Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFidAllocation_AllocationType
	Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFidAllocation_AllocationType_dynamic E_Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFidAllocation_AllocationType = 3
)


// E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_EntryType is a derived int64 type which is used to represent
// the enumerated node Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_EntryType. An additional value named
// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_EntryType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_EntryType int64

// IsYANGGoEnum ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_EntryType implements the yang.GoEnum
// interface. This ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_EntryType can be identified as a
// mapped type for a YANG enumeration.
func (E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_EntryType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_EntryType.
func (E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_EntryType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_EntryType.
func (e E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_EntryType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_EntryType")
}

const (
	// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_EntryType_UNSET corresponds to the value UNSET of Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_EntryType
	Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_EntryType_UNSET E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_EntryType = 0
	// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_EntryType_static corresponds to the value static of Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_EntryType
	Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_EntryType_static E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_EntryType = 1
	// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_EntryType_dynamic corresponds to the value dynamic of Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_EntryType
	Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_EntryType_dynamic E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_EntryType = 2
)


// E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicFilteringEntries_ControlElement is a derived int64 type which is used to represent
// the enumerated node Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicFilteringEntries_ControlElement. An additional value named
// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicFilteringEntries_ControlElement_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicFilteringEntries_ControlElement int64

// IsYANGGoEnum ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicFilteringEntries_ControlElement implements the yang.GoEnum
// interface. This ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicFilteringEntries_ControlElement can be identified as a
// mapped type for a YANG enumeration.
func (E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicFilteringEntries_ControlElement) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicFilteringEntries_ControlElement.
func (E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicFilteringEntries_ControlElement) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicFilteringEntries_ControlElement.
func (e E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicFilteringEntries_ControlElement) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicFilteringEntries_ControlElement")
}

const (
	// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicFilteringEntries_ControlElement_UNSET corresponds to the value UNSET of Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicFilteringEntries_ControlElement
	Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicFilteringEntries_ControlElement_UNSET E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicFilteringEntries_ControlElement = 0
	// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicFilteringEntries_ControlElement_forward corresponds to the value forward of Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicFilteringEntries_ControlElement
	Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicFilteringEntries_ControlElement_forward E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicFilteringEntries_ControlElement = 1
)


// E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicReservationEntries_ControlElement is a derived int64 type which is used to represent
// the enumerated node Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicReservationEntries_ControlElement. An additional value named
// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicReservationEntries_ControlElement_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicReservationEntries_ControlElement int64

// IsYANGGoEnum ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicReservationEntries_ControlElement implements the yang.GoEnum
// interface. This ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicReservationEntries_ControlElement can be identified as a
// mapped type for a YANG enumeration.
func (E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicReservationEntries_ControlElement) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicReservationEntries_ControlElement.
func (E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicReservationEntries_ControlElement) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicReservationEntries_ControlElement.
func (e E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicReservationEntries_ControlElement) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicReservationEntries_ControlElement")
}

const (
	// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicReservationEntries_ControlElement_UNSET corresponds to the value UNSET of Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicReservationEntries_ControlElement
	Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicReservationEntries_ControlElement_UNSET E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicReservationEntries_ControlElement = 0
	// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicReservationEntries_ControlElement_forward corresponds to the value forward of Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicReservationEntries_ControlElement
	Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicReservationEntries_ControlElement_forward E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicReservationEntries_ControlElement = 1
	// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicReservationEntries_ControlElement_filter corresponds to the value filter of Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicReservationEntries_ControlElement
	Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicReservationEntries_ControlElement_filter E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicReservationEntries_ControlElement = 2
)


// E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicVlanRegistrationEntries_ControlElement is a derived int64 type which is used to represent
// the enumerated node Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicVlanRegistrationEntries_ControlElement. An additional value named
// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicVlanRegistrationEntries_ControlElement_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicVlanRegistrationEntries_ControlElement int64

// IsYANGGoEnum ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicVlanRegistrationEntries_ControlElement implements the yang.GoEnum
// interface. This ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicVlanRegistrationEntries_ControlElement can be identified as a
// mapped type for a YANG enumeration.
func (E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicVlanRegistrationEntries_ControlElement) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicVlanRegistrationEntries_ControlElement.
func (E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicVlanRegistrationEntries_ControlElement) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicVlanRegistrationEntries_ControlElement.
func (e E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicVlanRegistrationEntries_ControlElement) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicVlanRegistrationEntries_ControlElement")
}

const (
	// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicVlanRegistrationEntries_ControlElement_UNSET corresponds to the value UNSET of Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicVlanRegistrationEntries_ControlElement
	Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicVlanRegistrationEntries_ControlElement_UNSET E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicVlanRegistrationEntries_ControlElement = 0
	// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicVlanRegistrationEntries_ControlElement_registered corresponds to the value registered of Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicVlanRegistrationEntries_ControlElement
	Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicVlanRegistrationEntries_ControlElement_registered E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicVlanRegistrationEntries_ControlElement = 1
)


// E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_MacAddressRegistrationEntries_ControlElement is a derived int64 type which is used to represent
// the enumerated node Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_MacAddressRegistrationEntries_ControlElement. An additional value named
// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_MacAddressRegistrationEntries_ControlElement_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_MacAddressRegistrationEntries_ControlElement int64

// IsYANGGoEnum ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_MacAddressRegistrationEntries_ControlElement implements the yang.GoEnum
// interface. This ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_MacAddressRegistrationEntries_ControlElement can be identified as a
// mapped type for a YANG enumeration.
func (E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_MacAddressRegistrationEntries_ControlElement) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_MacAddressRegistrationEntries_ControlElement.
func (E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_MacAddressRegistrationEntries_ControlElement) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_MacAddressRegistrationEntries_ControlElement.
func (e E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_MacAddressRegistrationEntries_ControlElement) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_MacAddressRegistrationEntries_ControlElement")
}

const (
	// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_MacAddressRegistrationEntries_ControlElement_UNSET corresponds to the value UNSET of Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_MacAddressRegistrationEntries_ControlElement
	Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_MacAddressRegistrationEntries_ControlElement_UNSET E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_MacAddressRegistrationEntries_ControlElement = 0
	// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_MacAddressRegistrationEntries_ControlElement_registered corresponds to the value registered of Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_MacAddressRegistrationEntries_ControlElement
	Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_MacAddressRegistrationEntries_ControlElement_registered E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_MacAddressRegistrationEntries_ControlElement = 1
	// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_MacAddressRegistrationEntries_ControlElement_not_registered corresponds to the value not_registered of Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_MacAddressRegistrationEntries_ControlElement
	Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_MacAddressRegistrationEntries_ControlElement_not_registered E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_MacAddressRegistrationEntries_ControlElement = 2
)


// E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticFilteringEntries_ControlElement is a derived int64 type which is used to represent
// the enumerated node Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticFilteringEntries_ControlElement. An additional value named
// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticFilteringEntries_ControlElement_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticFilteringEntries_ControlElement int64

// IsYANGGoEnum ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticFilteringEntries_ControlElement implements the yang.GoEnum
// interface. This ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticFilteringEntries_ControlElement can be identified as a
// mapped type for a YANG enumeration.
func (E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticFilteringEntries_ControlElement) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticFilteringEntries_ControlElement.
func (E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticFilteringEntries_ControlElement) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticFilteringEntries_ControlElement.
func (e E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticFilteringEntries_ControlElement) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticFilteringEntries_ControlElement")
}

const (
	// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticFilteringEntries_ControlElement_UNSET corresponds to the value UNSET of Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticFilteringEntries_ControlElement
	Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticFilteringEntries_ControlElement_UNSET E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticFilteringEntries_ControlElement = 0
	// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticFilteringEntries_ControlElement_forward corresponds to the value forward of Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticFilteringEntries_ControlElement
	Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticFilteringEntries_ControlElement_forward E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticFilteringEntries_ControlElement = 1
	// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticFilteringEntries_ControlElement_filter corresponds to the value filter of Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticFilteringEntries_ControlElement
	Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticFilteringEntries_ControlElement_filter E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticFilteringEntries_ControlElement = 2
	// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticFilteringEntries_ControlElement_forward_filter corresponds to the value forward_filter of Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticFilteringEntries_ControlElement
	Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticFilteringEntries_ControlElement_forward_filter E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticFilteringEntries_ControlElement = 3
)


// E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_RegistrarAdminControl is a derived int64 type which is used to represent
// the enumerated node Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_RegistrarAdminControl. An additional value named
// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_RegistrarAdminControl_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_RegistrarAdminControl int64

// IsYANGGoEnum ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_RegistrarAdminControl implements the yang.GoEnum
// interface. This ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_RegistrarAdminControl can be identified as a
// mapped type for a YANG enumeration.
func (E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_RegistrarAdminControl) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_RegistrarAdminControl.
func (E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_RegistrarAdminControl) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_RegistrarAdminControl.
func (e E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_RegistrarAdminControl) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_RegistrarAdminControl")
}

const (
	// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_RegistrarAdminControl_UNSET corresponds to the value UNSET of Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_RegistrarAdminControl
	Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_RegistrarAdminControl_UNSET E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_RegistrarAdminControl = 0
	// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_RegistrarAdminControl_fixed_new_ignored corresponds to the value fixed_new_ignored of Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_RegistrarAdminControl
	Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_RegistrarAdminControl_fixed_new_ignored E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_RegistrarAdminControl = 1
	// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_RegistrarAdminControl_fixed_new_propagated corresponds to the value fixed_new_propagated of Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_RegistrarAdminControl
	Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_RegistrarAdminControl_fixed_new_propagated E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_RegistrarAdminControl = 2
	// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_RegistrarAdminControl_forbidden corresponds to the value forbidden of Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_RegistrarAdminControl
	Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_RegistrarAdminControl_forbidden E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_RegistrarAdminControl = 3
	// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_RegistrarAdminControl_normal corresponds to the value normal of Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_RegistrarAdminControl
	Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_RegistrarAdminControl_normal E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_RegistrarAdminControl = 4
)


// E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_VlanTransmitted is a derived int64 type which is used to represent
// the enumerated node Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_VlanTransmitted. An additional value named
// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_VlanTransmitted_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_VlanTransmitted int64

// IsYANGGoEnum ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_VlanTransmitted implements the yang.GoEnum
// interface. This ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_VlanTransmitted can be identified as a
// mapped type for a YANG enumeration.
func (E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_VlanTransmitted) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_VlanTransmitted.
func (E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_VlanTransmitted) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_VlanTransmitted.
func (e E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_VlanTransmitted) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_VlanTransmitted")
}

const (
	// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_VlanTransmitted_UNSET corresponds to the value UNSET of Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_VlanTransmitted
	Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_VlanTransmitted_UNSET E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_VlanTransmitted = 0
	// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_VlanTransmitted_tagged corresponds to the value tagged of Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_VlanTransmitted
	Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_VlanTransmitted_tagged E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_VlanTransmitted = 1
	// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_VlanTransmitted_untagged corresponds to the value untagged of Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_VlanTransmitted
	Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_VlanTransmitted_untagged E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_VlanTransmitted = 2
)


// E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_Status is a derived int64 type which is used to represent
// the enumerated node Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_Status. An additional value named
// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_Status_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_Status int64

// IsYANGGoEnum ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_Status implements the yang.GoEnum
// interface. This ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_Status can be identified as a
// mapped type for a YANG enumeration.
func (E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_Status) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_Status.
func (E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_Status) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_Status.
func (e E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_Status) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_Status")
}

const (
	// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_Status_UNSET corresponds to the value UNSET of Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_Status
	Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_Status_UNSET E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_Status = 0
	// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_Status_other corresponds to the value other of Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_Status
	Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_Status_other E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_Status = 1
	// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_Status_invalid corresponds to the value invalid of Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_Status
	Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_Status_invalid E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_Status = 2
	// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_Status_learned corresponds to the value learned of Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_Status
	Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_Status_learned E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_Status = 3
	// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_Status_self corresponds to the value self of Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_Status
	Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_Status_self E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_Status = 4
	// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_Status_mgmt corresponds to the value mgmt of Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_Status
	Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_Status_mgmt E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_Status = 5
)


// E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_EntryType is a derived int64 type which is used to represent
// the enumerated node Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_EntryType. An additional value named
// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_EntryType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_EntryType int64

// IsYANGGoEnum ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_EntryType implements the yang.GoEnum
// interface. This ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_EntryType can be identified as a
// mapped type for a YANG enumeration.
func (E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_EntryType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_EntryType.
func (E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_EntryType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_EntryType.
func (e E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_EntryType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_EntryType")
}

const (
	// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_EntryType_UNSET corresponds to the value UNSET of Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_EntryType
	Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_EntryType_UNSET E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_EntryType = 0
	// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_EntryType_static corresponds to the value static of Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_EntryType
	Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_EntryType_static E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_EntryType = 1
	// Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_EntryType_dynamic corresponds to the value dynamic of Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_EntryType
	Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_EntryType_dynamic E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_EntryType = 2
)


// E_Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_Status is a derived int64 type which is used to represent
// the enumerated node Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_Status. An additional value named
// Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_Status_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_Status int64

// IsYANGGoEnum ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_Status implements the yang.GoEnum
// interface. This ensures that Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_Status can be identified as a
// mapped type for a YANG enumeration.
func (E_Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_Status) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_Status.
func (E_Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_Status) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_Status.
func (e E_Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_Status) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_Status")
}

const (
	// Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_Status_UNSET corresponds to the value UNSET of Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_Status
	Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_Status_UNSET E_Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_Status = 0
	// Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_Status_other corresponds to the value other of Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_Status
	Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_Status_other E_Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_Status = 1
	// Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_Status_invalid corresponds to the value invalid of Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_Status
	Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_Status_invalid E_Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_Status = 2
	// Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_Status_learned corresponds to the value learned of Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_Status
	Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_Status_learned E_Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_Status = 3
	// Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_Status_self corresponds to the value self of Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_Status
	Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_Status_self E_Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_Status = 4
	// Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_Status_mgmt corresponds to the value mgmt of Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_Status
	Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_Status_mgmt E_Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_Status = 5
)


// E_Ieee802Dot1QBridge_PcpSelectionType is a derived int64 type which is used to represent
// the enumerated node Ieee802Dot1QBridge_PcpSelectionType. An additional value named
// Ieee802Dot1QBridge_PcpSelectionType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Ieee802Dot1QBridge_PcpSelectionType int64

// IsYANGGoEnum ensures that Ieee802Dot1QBridge_PcpSelectionType implements the yang.GoEnum
// interface. This ensures that Ieee802Dot1QBridge_PcpSelectionType can be identified as a
// mapped type for a YANG enumeration.
func (E_Ieee802Dot1QBridge_PcpSelectionType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Ieee802Dot1QBridge_PcpSelectionType.
func (E_Ieee802Dot1QBridge_PcpSelectionType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Ieee802Dot1QBridge_PcpSelectionType.
func (e E_Ieee802Dot1QBridge_PcpSelectionType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Ieee802Dot1QBridge_PcpSelectionType")
}

const (
	// Ieee802Dot1QBridge_PcpSelectionType_UNSET corresponds to the value UNSET of Ieee802Dot1QBridge_PcpSelectionType
	Ieee802Dot1QBridge_PcpSelectionType_UNSET E_Ieee802Dot1QBridge_PcpSelectionType = 0
	// Ieee802Dot1QBridge_PcpSelectionType_8P0D corresponds to the value 8P0D of Ieee802Dot1QBridge_PcpSelectionType
	Ieee802Dot1QBridge_PcpSelectionType_8P0D E_Ieee802Dot1QBridge_PcpSelectionType = 1
	// Ieee802Dot1QBridge_PcpSelectionType_7P1D corresponds to the value 7P1D of Ieee802Dot1QBridge_PcpSelectionType
	Ieee802Dot1QBridge_PcpSelectionType_7P1D E_Ieee802Dot1QBridge_PcpSelectionType = 2
	// Ieee802Dot1QBridge_PcpSelectionType_6P2D corresponds to the value 6P2D of Ieee802Dot1QBridge_PcpSelectionType
	Ieee802Dot1QBridge_PcpSelectionType_6P2D E_Ieee802Dot1QBridge_PcpSelectionType = 3
	// Ieee802Dot1QBridge_PcpSelectionType_5P3D corresponds to the value 5P3D of Ieee802Dot1QBridge_PcpSelectionType
	Ieee802Dot1QBridge_PcpSelectionType_5P3D E_Ieee802Dot1QBridge_PcpSelectionType = 4
)


// E_Ieee802Dot1QBridge_ProtocolFrameFormatType is a derived int64 type which is used to represent
// the enumerated node Ieee802Dot1QBridge_ProtocolFrameFormatType. An additional value named
// Ieee802Dot1QBridge_ProtocolFrameFormatType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Ieee802Dot1QBridge_ProtocolFrameFormatType int64

// IsYANGGoEnum ensures that Ieee802Dot1QBridge_ProtocolFrameFormatType implements the yang.GoEnum
// interface. This ensures that Ieee802Dot1QBridge_ProtocolFrameFormatType can be identified as a
// mapped type for a YANG enumeration.
func (E_Ieee802Dot1QBridge_ProtocolFrameFormatType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Ieee802Dot1QBridge_ProtocolFrameFormatType.
func (E_Ieee802Dot1QBridge_ProtocolFrameFormatType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Ieee802Dot1QBridge_ProtocolFrameFormatType.
func (e E_Ieee802Dot1QBridge_ProtocolFrameFormatType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Ieee802Dot1QBridge_ProtocolFrameFormatType")
}

const (
	// Ieee802Dot1QBridge_ProtocolFrameFormatType_UNSET corresponds to the value UNSET of Ieee802Dot1QBridge_ProtocolFrameFormatType
	Ieee802Dot1QBridge_ProtocolFrameFormatType_UNSET E_Ieee802Dot1QBridge_ProtocolFrameFormatType = 0
	// Ieee802Dot1QBridge_ProtocolFrameFormatType_Ethernet corresponds to the value Ethernet of Ieee802Dot1QBridge_ProtocolFrameFormatType
	Ieee802Dot1QBridge_ProtocolFrameFormatType_Ethernet E_Ieee802Dot1QBridge_ProtocolFrameFormatType = 1
	// Ieee802Dot1QBridge_ProtocolFrameFormatType_rfc1042 corresponds to the value rfc1042 of Ieee802Dot1QBridge_ProtocolFrameFormatType
	Ieee802Dot1QBridge_ProtocolFrameFormatType_rfc1042 E_Ieee802Dot1QBridge_ProtocolFrameFormatType = 2
	// Ieee802Dot1QBridge_ProtocolFrameFormatType_snap8021H corresponds to the value snap8021H of Ieee802Dot1QBridge_ProtocolFrameFormatType
	Ieee802Dot1QBridge_ProtocolFrameFormatType_snap8021H E_Ieee802Dot1QBridge_ProtocolFrameFormatType = 3
	// Ieee802Dot1QBridge_ProtocolFrameFormatType_snapOther corresponds to the value snapOther of Ieee802Dot1QBridge_ProtocolFrameFormatType
	Ieee802Dot1QBridge_ProtocolFrameFormatType_snapOther E_Ieee802Dot1QBridge_ProtocolFrameFormatType = 4
	// Ieee802Dot1QBridge_ProtocolFrameFormatType_llcOther corresponds to the value llcOther of Ieee802Dot1QBridge_ProtocolFrameFormatType
	Ieee802Dot1QBridge_ProtocolFrameFormatType_llcOther E_Ieee802Dot1QBridge_ProtocolFrameFormatType = 5
)


// E_Ieee802Dot1QBridge_TypeOfBridge is a derived int64 type which is used to represent
// the enumerated node Ieee802Dot1QBridge_TypeOfBridge. An additional value named
// Ieee802Dot1QBridge_TypeOfBridge_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Ieee802Dot1QBridge_TypeOfBridge int64

// IsYANGGoEnum ensures that Ieee802Dot1QBridge_TypeOfBridge implements the yang.GoEnum
// interface. This ensures that Ieee802Dot1QBridge_TypeOfBridge can be identified as a
// mapped type for a YANG enumeration.
func (E_Ieee802Dot1QBridge_TypeOfBridge) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Ieee802Dot1QBridge_TypeOfBridge.
func (E_Ieee802Dot1QBridge_TypeOfBridge) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Ieee802Dot1QBridge_TypeOfBridge.
func (e E_Ieee802Dot1QBridge_TypeOfBridge) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Ieee802Dot1QBridge_TypeOfBridge")
}

const (
	// Ieee802Dot1QBridge_TypeOfBridge_UNSET corresponds to the value UNSET of Ieee802Dot1QBridge_TypeOfBridge
	Ieee802Dot1QBridge_TypeOfBridge_UNSET E_Ieee802Dot1QBridge_TypeOfBridge = 0
	// Ieee802Dot1QBridge_TypeOfBridge_customer_vlan_bridge corresponds to the value customer_vlan_bridge of Ieee802Dot1QBridge_TypeOfBridge
	Ieee802Dot1QBridge_TypeOfBridge_customer_vlan_bridge E_Ieee802Dot1QBridge_TypeOfBridge = 1
	// Ieee802Dot1QBridge_TypeOfBridge_provider_bridge corresponds to the value provider_bridge of Ieee802Dot1QBridge_TypeOfBridge
	Ieee802Dot1QBridge_TypeOfBridge_provider_bridge E_Ieee802Dot1QBridge_TypeOfBridge = 2
	// Ieee802Dot1QBridge_TypeOfBridge_provider_edge_bridge corresponds to the value provider_edge_bridge of Ieee802Dot1QBridge_TypeOfBridge
	Ieee802Dot1QBridge_TypeOfBridge_provider_edge_bridge E_Ieee802Dot1QBridge_TypeOfBridge = 3
	// Ieee802Dot1QBridge_TypeOfBridge_two_port_mac_relay_bridge corresponds to the value two_port_mac_relay_bridge of Ieee802Dot1QBridge_TypeOfBridge
	Ieee802Dot1QBridge_TypeOfBridge_two_port_mac_relay_bridge E_Ieee802Dot1QBridge_TypeOfBridge = 4
)


// E_Ieee802Dot1QBridge_TypeOfComponent is a derived int64 type which is used to represent
// the enumerated node Ieee802Dot1QBridge_TypeOfComponent. An additional value named
// Ieee802Dot1QBridge_TypeOfComponent_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Ieee802Dot1QBridge_TypeOfComponent int64

// IsYANGGoEnum ensures that Ieee802Dot1QBridge_TypeOfComponent implements the yang.GoEnum
// interface. This ensures that Ieee802Dot1QBridge_TypeOfComponent can be identified as a
// mapped type for a YANG enumeration.
func (E_Ieee802Dot1QBridge_TypeOfComponent) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Ieee802Dot1QBridge_TypeOfComponent.
func (E_Ieee802Dot1QBridge_TypeOfComponent) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Ieee802Dot1QBridge_TypeOfComponent.
func (e E_Ieee802Dot1QBridge_TypeOfComponent) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Ieee802Dot1QBridge_TypeOfComponent")
}

const (
	// Ieee802Dot1QBridge_TypeOfComponent_UNSET corresponds to the value UNSET of Ieee802Dot1QBridge_TypeOfComponent
	Ieee802Dot1QBridge_TypeOfComponent_UNSET E_Ieee802Dot1QBridge_TypeOfComponent = 0
	// Ieee802Dot1QBridge_TypeOfComponent_c_vlan_component corresponds to the value c_vlan_component of Ieee802Dot1QBridge_TypeOfComponent
	Ieee802Dot1QBridge_TypeOfComponent_c_vlan_component E_Ieee802Dot1QBridge_TypeOfComponent = 1
	// Ieee802Dot1QBridge_TypeOfComponent_d_bridge_component corresponds to the value d_bridge_component of Ieee802Dot1QBridge_TypeOfComponent
	Ieee802Dot1QBridge_TypeOfComponent_d_bridge_component E_Ieee802Dot1QBridge_TypeOfComponent = 2
	// Ieee802Dot1QBridge_TypeOfComponent_edge_relay_component corresponds to the value edge_relay_component of Ieee802Dot1QBridge_TypeOfComponent
	Ieee802Dot1QBridge_TypeOfComponent_edge_relay_component E_Ieee802Dot1QBridge_TypeOfComponent = 3
	// Ieee802Dot1QBridge_TypeOfComponent_s_vlan_component corresponds to the value s_vlan_component of Ieee802Dot1QBridge_TypeOfComponent
	Ieee802Dot1QBridge_TypeOfComponent_s_vlan_component E_Ieee802Dot1QBridge_TypeOfComponent = 4
)


// E_Ieee802Dot1QBridge_TypeOfPort is a derived int64 type which is used to represent
// the enumerated node Ieee802Dot1QBridge_TypeOfPort. An additional value named
// Ieee802Dot1QBridge_TypeOfPort_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Ieee802Dot1QBridge_TypeOfPort int64

// IsYANGGoEnum ensures that Ieee802Dot1QBridge_TypeOfPort implements the yang.GoEnum
// interface. This ensures that Ieee802Dot1QBridge_TypeOfPort can be identified as a
// mapped type for a YANG enumeration.
func (E_Ieee802Dot1QBridge_TypeOfPort) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Ieee802Dot1QBridge_TypeOfPort.
func (E_Ieee802Dot1QBridge_TypeOfPort) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Ieee802Dot1QBridge_TypeOfPort.
func (e E_Ieee802Dot1QBridge_TypeOfPort) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Ieee802Dot1QBridge_TypeOfPort")
}

const (
	// Ieee802Dot1QBridge_TypeOfPort_UNSET corresponds to the value UNSET of Ieee802Dot1QBridge_TypeOfPort
	Ieee802Dot1QBridge_TypeOfPort_UNSET E_Ieee802Dot1QBridge_TypeOfPort = 0
	// Ieee802Dot1QBridge_TypeOfPort_c_vlan_bridge_port corresponds to the value c_vlan_bridge_port of Ieee802Dot1QBridge_TypeOfPort
	Ieee802Dot1QBridge_TypeOfPort_c_vlan_bridge_port E_Ieee802Dot1QBridge_TypeOfPort = 1
	// Ieee802Dot1QBridge_TypeOfPort_customer_edge_port corresponds to the value customer_edge_port of Ieee802Dot1QBridge_TypeOfPort
	Ieee802Dot1QBridge_TypeOfPort_customer_edge_port E_Ieee802Dot1QBridge_TypeOfPort = 2
	// Ieee802Dot1QBridge_TypeOfPort_customer_network_port corresponds to the value customer_network_port of Ieee802Dot1QBridge_TypeOfPort
	Ieee802Dot1QBridge_TypeOfPort_customer_network_port E_Ieee802Dot1QBridge_TypeOfPort = 3
	// Ieee802Dot1QBridge_TypeOfPort_d_bridge_port corresponds to the value d_bridge_port of Ieee802Dot1QBridge_TypeOfPort
	Ieee802Dot1QBridge_TypeOfPort_d_bridge_port E_Ieee802Dot1QBridge_TypeOfPort = 4
	// Ieee802Dot1QBridge_TypeOfPort_provider_network_port corresponds to the value provider_network_port of Ieee802Dot1QBridge_TypeOfPort
	Ieee802Dot1QBridge_TypeOfPort_provider_network_port E_Ieee802Dot1QBridge_TypeOfPort = 5
	// Ieee802Dot1QBridge_TypeOfPort_remote_customer_access_port corresponds to the value remote_customer_access_port of Ieee802Dot1QBridge_TypeOfPort
	Ieee802Dot1QBridge_TypeOfPort_remote_customer_access_port E_Ieee802Dot1QBridge_TypeOfPort = 6
)


// E_Ieee802Dot1QTypes_PcpSelectionType is a derived int64 type which is used to represent
// the enumerated node Ieee802Dot1QTypes_PcpSelectionType. An additional value named
// Ieee802Dot1QTypes_PcpSelectionType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Ieee802Dot1QTypes_PcpSelectionType int64

// IsYANGGoEnum ensures that Ieee802Dot1QTypes_PcpSelectionType implements the yang.GoEnum
// interface. This ensures that Ieee802Dot1QTypes_PcpSelectionType can be identified as a
// mapped type for a YANG enumeration.
func (E_Ieee802Dot1QTypes_PcpSelectionType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Ieee802Dot1QTypes_PcpSelectionType.
func (E_Ieee802Dot1QTypes_PcpSelectionType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Ieee802Dot1QTypes_PcpSelectionType.
func (e E_Ieee802Dot1QTypes_PcpSelectionType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Ieee802Dot1QTypes_PcpSelectionType")
}

const (
	// Ieee802Dot1QTypes_PcpSelectionType_UNSET corresponds to the value UNSET of Ieee802Dot1QTypes_PcpSelectionType
	Ieee802Dot1QTypes_PcpSelectionType_UNSET E_Ieee802Dot1QTypes_PcpSelectionType = 0
	// Ieee802Dot1QTypes_PcpSelectionType_8P0D corresponds to the value 8P0D of Ieee802Dot1QTypes_PcpSelectionType
	Ieee802Dot1QTypes_PcpSelectionType_8P0D E_Ieee802Dot1QTypes_PcpSelectionType = 1
	// Ieee802Dot1QTypes_PcpSelectionType_7P1D corresponds to the value 7P1D of Ieee802Dot1QTypes_PcpSelectionType
	Ieee802Dot1QTypes_PcpSelectionType_7P1D E_Ieee802Dot1QTypes_PcpSelectionType = 2
	// Ieee802Dot1QTypes_PcpSelectionType_6P2D corresponds to the value 6P2D of Ieee802Dot1QTypes_PcpSelectionType
	Ieee802Dot1QTypes_PcpSelectionType_6P2D E_Ieee802Dot1QTypes_PcpSelectionType = 3
	// Ieee802Dot1QTypes_PcpSelectionType_5P3D corresponds to the value 5P3D of Ieee802Dot1QTypes_PcpSelectionType
	Ieee802Dot1QTypes_PcpSelectionType_5P3D E_Ieee802Dot1QTypes_PcpSelectionType = 4
)


// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_IETFInterfaces_InterfaceType": {
	},
	"E_IETFInterfaces_InterfacesState_Interface_AdminStatus": {
		1: {Name: "up"},
		2: {Name: "down"},
		3: {Name: "testing"},
	},
	"E_IETFInterfaces_InterfacesState_Interface_OperStatus": {
		1: {Name: "up"},
		2: {Name: "down"},
		3: {Name: "testing"},
		4: {Name: "unknown"},
		5: {Name: "dormant"},
		6: {Name: "not-present"},
		7: {Name: "lower-layer-down"},
	},
	"E_IETFInterfaces_Interfaces_Interface_AdminStatus": {
		1: {Name: "up"},
		2: {Name: "down"},
		3: {Name: "testing"},
	},
	"E_IETFInterfaces_Interfaces_Interface_BridgePort_AcceptableFrame": {
		1: {Name: "admit-only-VLAN-tagged-frames"},
		2: {Name: "admit-only-untagged-and-priority-tagged"},
		3: {Name: "admit-all-frames"},
	},
	"E_IETFInterfaces_Interfaces_Interface_BridgePort_AdminPointToPoint": {
		1: {Name: "force-true"},
		2: {Name: "force-false"},
		3: {Name: "auto"},
	},
	"E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable": {
		1: {Name: "enabled"},
		2: {Name: "disabled"},
	},
	"E_IETFInterfaces_Interfaces_Interface_OperStatus": {
		1: {Name: "up"},
		2: {Name: "down"},
		3: {Name: "testing"},
		4: {Name: "unknown"},
		5: {Name: "dormant"},
		6: {Name: "not-present"},
		7: {Name: "lower-layer-down"},
	},
	"E_Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_FidToVidAllocation_AllocationType": {
		1: {Name: "undefined"},
		2: {Name: "fixed"},
		3: {Name: "dynamic"},
	},
	"E_Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFidAllocation_AllocationType": {
		1: {Name: "undefined"},
		2: {Name: "fixed"},
		3: {Name: "dynamic"},
	},
	"E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_EntryType": {
		1: {Name: "static"},
		2: {Name: "dynamic"},
	},
	"E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicFilteringEntries_ControlElement": {
		1: {Name: "forward"},
	},
	"E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicReservationEntries_ControlElement": {
		1: {Name: "forward"},
		2: {Name: "filter"},
	},
	"E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicVlanRegistrationEntries_ControlElement": {
		1: {Name: "registered"},
	},
	"E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_MacAddressRegistrationEntries_ControlElement": {
		1: {Name: "registered"},
		2: {Name: "not-registered"},
	},
	"E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticFilteringEntries_ControlElement": {
		1: {Name: "forward"},
		2: {Name: "filter"},
		3: {Name: "forward-filter"},
	},
	"E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_RegistrarAdminControl": {
		1: {Name: "fixed-new-ignored"},
		2: {Name: "fixed-new-propagated"},
		3: {Name: "forbidden"},
		4: {Name: "normal"},
	},
	"E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_VlanTransmitted": {
		1: {Name: "tagged"},
		2: {Name: "untagged"},
	},
	"E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_Status": {
		1: {Name: "other"},
		2: {Name: "invalid"},
		3: {Name: "learned"},
		4: {Name: "self"},
		5: {Name: "mgmt"},
	},
	"E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_EntryType": {
		1: {Name: "static"},
		2: {Name: "dynamic"},
	},
	"E_Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_Status": {
		1: {Name: "other"},
		2: {Name: "invalid"},
		3: {Name: "learned"},
		4: {Name: "self"},
		5: {Name: "mgmt"},
	},
	"E_Ieee802Dot1QBridge_PcpSelectionType": {
		1: {Name: "8P0D"},
		2: {Name: "7P1D"},
		3: {Name: "6P2D"},
		4: {Name: "5P3D"},
	},
	"E_Ieee802Dot1QBridge_ProtocolFrameFormatType": {
		1: {Name: "Ethernet"},
		2: {Name: "rfc1042"},
		3: {Name: "snap8021H"},
		4: {Name: "snapOther"},
		5: {Name: "llcOther"},
	},
	"E_Ieee802Dot1QBridge_TypeOfBridge": {
		1: {Name: "customer-vlan-bridge", DefiningModule: "ieee802-dot1q-bridge"},
		2: {Name: "provider-bridge", DefiningModule: "ieee802-dot1q-bridge"},
		3: {Name: "provider-edge-bridge", DefiningModule: "ieee802-dot1q-bridge"},
		4: {Name: "two-port-mac-relay-bridge", DefiningModule: "ieee802-dot1q-bridge"},
	},
	"E_Ieee802Dot1QBridge_TypeOfComponent": {
		1: {Name: "c-vlan-component", DefiningModule: "ieee802-dot1q-bridge"},
		2: {Name: "d-bridge-component", DefiningModule: "ieee802-dot1q-bridge"},
		3: {Name: "edge-relay-component", DefiningModule: "ieee802-dot1q-bridge"},
		4: {Name: "s-vlan-component", DefiningModule: "ieee802-dot1q-bridge"},
	},
	"E_Ieee802Dot1QBridge_TypeOfPort": {
		1: {Name: "c-vlan-bridge-port", DefiningModule: "ieee802-dot1q-bridge"},
		2: {Name: "customer-edge-port", DefiningModule: "ieee802-dot1q-bridge"},
		3: {Name: "customer-network-port", DefiningModule: "ieee802-dot1q-bridge"},
		4: {Name: "d-bridge-port", DefiningModule: "ieee802-dot1q-bridge"},
		5: {Name: "provider-network-port", DefiningModule: "ieee802-dot1q-bridge"},
		6: {Name: "remote-customer-access-port", DefiningModule: "ieee802-dot1q-bridge"},
	},
	"E_Ieee802Dot1QTypes_PcpSelectionType": {
		1: {Name: "8P0D"},
		2: {Name: "7P1D"},
		3: {Name: "6P2D"},
		4: {Name: "5P3D"},
	},
}


var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x7d, 0xef, 0x73, 0xda, 0x4a,
		0xb6, 0xed, 0x77, 0xff, 0x15, 0x1a, 0xbe, 0x24, 0x99, 0x6b, 0x61, 0x04, 0x18, 0xb0, 0xab, 0xa6,
		0x4e, 0x39, 0x27, 0xc9, 0x9d, 0xd4, 0x1c, 0x4f, 0xfc, 0x12, 0xcf, 0xf9, 0xf0, 0x12, 0x57, 0x4a,
		0x46, 0x8d, 0xdd, 0x75, 0x40, 0xe2, 0x4a, 0x8d, 0x13, 0xdf, 0x3c, 0xff, 0xef, 0xaf, 0x10, 0x20,
		0x7e, 0x83, 0xba, 0x7b, 0x77, 0x23, 0x60, 0xa5, 0x6a, 0xe6, 0xc4, 0x0e, 0xea, 0x46, 0xfd, 0x63,
		0xef, 0xb5, 0xd6, 0xde, 0xbd, 0xfb, 0xd7, 0x89, 0xe3, 0x38, 0x4e, 0xe9, 0xdf, 0x7e, 0x8f, 0x95,
		0x2e, 0x9d, 0x52, 0xc0, 0x9e, 0x78, 0x9b, 0x95, 0x4e, 0x47, 0xbf, 0xfd, 0x17, 0x0f, 0x83, 0xd2,
		0xa5, 0xe3, 0x8d, 0x7f, 0xfc, 0x3d, 0x0a, 0x3b, 0xfc, 0xa1, 0x74, 0xe9, 0x54, 0xc6, 0xbf, 0x78,
		0xc7, 0xe3, 0xd2, 0xa5, 0x33, 0x6a, 0x22, 0xfd, 0xc5, 0x7d, 0xcc, 0x83, 0x07, 0x96, 0xcc, 0xfd,
		0x72, 0xae, 0xfd, 0xc9, 0x07, 0x4e, 0xe7, 0xff, 0x79, 0xbe, 0xa3, 0xec, 0xd7, 0x8b, 0x1d, 0x66,
		0xff, 0x70, 0x13, 0xb3, 0x0e, 0xff, 0xb9, 0xd4, 0xcd, 0xfc, 0xab, 0x44, 0xc2, 0xfb, 0x9f, 0x85,
		0x8e, 0xd2, 0x0f, 0x7c, 0x89, 0x06, 0x71, 0x9b, 0xad, 0x7c, 0x78, 0xf4, 0x65, 0xd8, 0xf3, 0x8f,
		0x28, 0x1e, 0x7e, 0x9f, 0x52, 0x7f, 0xd4, 0xcf, 0xe9, 0xea, 0x0f, 0xfe, 0xd3, 0x4f, 0xae, 0xe2,
		0x87, 0x41, 0x8f, 0x85, 0xa2, 0x74, 0xe9, 0x88, 0x78, 0xc0, 0xd6, 0x7c, 0x70, 0xe6, 0x53, 0xe3,
		0xaf, 0xb5, 0xf4, 0xb9, 0x97, 0xb9, 0xdf, 0xbc, 0x2c, 0xbc, 0xef, 0xe2, 0x40, 0x2f, 0x0c, 0xf8,
		0xfa, 0x77, 0x99, 0x1f, 0xf7, 0x75, 0x2f, 0xb2, 0x7a, 0xf8, 0xb7, 0x4e, 0x43, 0x9e, 0xe9, 0xc8,
		0x3d, 0x2d, 0x79, 0xa7, 0x47, 0x7a, 0x9a, 0xa4, 0xa7, 0x4b, 0x66, 0xda, 0x56, 0x4f, 0xdf, 0x9a,
		0x69, 0xdc, 0x3a, 0x9d, 0xd9, 0x07, 0xfc, 0x20, 0x88, 0x59, 0x92, 0x6c, 0x1f, 0x84, 0xc9, 0xa8,
		0x4e, 0x1e, 0xd8, 0xf2, 0x46, 0xe3, 0x89, 0xae, 0x6c, 0xf9, 0xd8, 0xb6, 0x09, 0x97, 0x99, 0x78,
		0xe9, 0x05, 0x20, 0xbb, 0x10, 0x94, 0x17, 0x84, 0xf2, 0xc2, 0x50, 0x59, 0x20, 0x9b, 0x17, 0xca,
		0x96, 0x05, 0x93, 0x75, 0x78, 0xed, 0x87, 0x81, 0x2f, 0xa2, 0xf8, 0x79, 0xfd, 0x6e, 0xcd, 0x3e,
		0x7b, 0xfb, 0xdc, 0x67, 0x72, 0x33, 0xd3, 0xf3, 0xdb, 0x6e, 0xbe, 0x85, 0x34, 0x67, 0x35, 0x5a,
		0x39, 0x3e, 0x7b, 0xe3, 0x0b, 0xc1, 0xe2, 0xb0, 0x74, 0xe9, 0x7c, 0xcd, 0x37, 0xb4, 0x5f, 0x2b,
		0xee, 0x85, 0xef, 0x76, 0xae, 0xdc, 0x0f, 0x77, 0xbf, 0xaa, 0x2f, 0xaf, 0xdd, 0xf9, 0x9f, 0xdf,
		0xfc, 0x3a, 0x7f, 0xd9, 0x3e, 0xd6, 0x77, 0x5a, 0x63, 0xcd, 0x7e, 0x8a, 0xd8, 0x77, 0x07, 0x61,
		0x22, 0xfc, 0xfb, 0x6e, 0xce, 0x91, 0x8c, 0x59, 0x87, 0xc5, 0x2c, 0x4c, 0x57, 0x6d, 0xbe, 0x17,
		0xcd, 0xb7, 0xb6, 0xe7, 0xa6, 0xc9, 0xab, 0x96, 0xeb, 0x4e, 0xd4, 0x71, 0x3e, 0xbe, 0x7f, 0xff,
		0xde, 0xf9, 0x22, 0x02, 0xa7, 0x55, 0xa9, 0x96, 0xbd, 0xff, 0xe3, 0x56, 0x2b, 0x5e, 0x2b, 0xe7,
		0x92, 0x57, 0xd9, 0x5f, 0xab, 0xf6, 0xd9, 0xf4, 0x7d, 0x4f, 0xe5, 0xda, 0x50, 0xdd, 0x72, 0x2b,
		0xb7, 0xde, 0xc6, 0x01, 0xc9, 0xdd, 0xec, 0xcb, 0x09, 0xcd, 0xa7, 0xb6, 0xac, 0xba, 0x13, 0x85,
		0xf5, 0x38, 0x76, 0xdf, 0xae, 0xc8, 0xb3, 0xa5, 0x17, 0x7c, 0xfe, 0xe8, 0x21, 0xf8, 0x05, 0xf8,
		0x05, 0x65, 0xbf, 0xc0, 0x03, 0x16, 0x0a, 0x2e, 0x9e, 0x63, 0xd6, 0x91, 0xf1, 0x0b, 0xe7, 0x39,
		0x3e, 0xfb, 0x71, 0xdc, 0xf4, 0x5b, 0x3f, 0x91, 0x98, 0xd1, 0xc9, 0x17, 0x1b, 0x2e, 0x6d, 0x37,
		0xea, 0xb8, 0x1b, 0xd1, 0xed, 0xd2, 0xd3, 0x7f, 0xfa, 0xdd, 0x41, 0xca, 0x51, 0xbe, 0xe6, 0xb6,
		0x0d, 0x92, 0x16, 0x72, 0xf2, 0xfd, 0xda, 0x83, 0x44, 0x44, 0x3d, 0x16, 0xbb, 0x4f, 0x5d, 0x3f,
		0x9c, 0x7c, 0xcb, 0xfc, 0x06, 0xe9, 0xd4, 0xf4, 0xf7, 0xeb, 0xc7, 0xd1, 0x13, 0x0f, 0x58, 0x5c,
		0xe4, 0xaf, 0xc6, 0x86, 0x36, 0xac, 0x78, 0xdf, 0x4f, 0xfc, 0x88, 0xdc, 0x7e, 0x14, 0x0b, 0x77,
		0x08, 0x9a, 0x62, 0xd6, 0xf5, 0x9f, 0xe5, 0xbf, 0x64, 0xae, 0x4f, 0xde, 0xe9, 0x9a, 0x0e, 0x25,
		0x87, 0xd3, 0x8e, 0x7a, 0xfd, 0x28, 0x1c, 0x99, 0xb0, 0x9c, 0xee, 0x66, 0xfa, 0x48, 0x3e, 0x67,
		0xe3, 0xc1, 0xd9, 0xec, 0xa7, 0xb3, 0xd9, 0xc6, 0x5e, 0xa5, 0x59, 0xac, 0x22, 0x9b, 0x95, 0x44,
		0x2f, 0xd2, 0x0b, 0x4b, 0x65, 0x81, 0x29, 0x2f, 0x34, 0x4a, 0x54, 0x2e, 0xb5, 0xf0, 0xcc, 0x40,
		0xf2, 0x9c, 0x0b, 0x51, 0x12, 0x7b, 0xe7, 0x9c, 0xaf, 0xdc, 0x08, 0x47, 0x93, 0x01, 0xab, 0x30,
		0x61, 0x65, 0x46, 0x4c, 0xca, 0x8c, 0xf3, 0x3b, 0x17, 0x99, 0x71, 0x57, 0x60, 0xcc, 0x1a, 0xcc,
		0x59, 0xcd, 0x81, 0xcf, 0x33, 0xe9, 0x5a, 0xb9, 0xba, 0x96, 0x39, 0x7e, 0x0b, 0x5b, 0x65, 0xaf,
		0x56, 0x6e, 0x11, 0x50, 0x6d, 0xdd, 0xcd, 0x4d, 0x49, 0xbd, 0xc9, 0xf6, 0xfb, 0x6a, 0x2a, 0xae,
		0x35, 0xa2, 0xd2, 0xfd, 0xbf, 0x9c, 0x98, 0xf9, 0xf4, 0x1d, 0x91, 0x16, 0x90, 0x63, 0xe7, 0x4c,
		0x68, 0x7a, 0x2f, 0x11, 0xf2, 0x8e, 0x72, 0xe6, 0x59, 0x39, 0x5f, 0xe9, 0xc1, 0x57, 0xc2, 0x57,
		0xca, 0x80, 0xb9, 0xec, 0x81, 0x0e, 0x0f, 0x5c, 0x11, 0x0d, 0x97, 0x1c, 0x0f, 0xe4, 0x47, 0x7e,
		0x32, 0xd5, 0x73, 0xad, 0x48, 0x8e, 0x9d, 0xdc, 0x12, 0x56, 0x5e, 0xca, 0x3a, 0x4b, 0x5a, 0x7b,
		0x69, 0x9b, 0xf0, 0x18, 0x4a, 0x4b, 0xdd, 0xac, 0xbb, 0x90, 0x5c, 0xfa, 0x8a, 0x66, 0x5f, 0x72,
		0xbe, 0x65, 0xb7, 0xc4, 0xec, 0xd6, 0x50, 0x9f, 0xa8, 0x99, 0x9d, 0xa1, 0x3a, 0x45, 0x72, 0x3c,
		0x88, 0x6c, 0x83, 0x50, 0x6c, 0x14, 0xb2, 0x0d, 0x43, 0xb5, 0x71, 0xc8, 0x37, 0x10, 0xf9, 0x46,
		0xa2, 0xdc, 0x50, 0x6a, 0x1b, 0x4b, 0x71, 0x83, 0xa9, 0xf3, 0xb4, 0xb5, 0xab, 0x65, 0xc0, 0x43,
		0x51, 0xab, 0xea, 0x2c, 0x97, 0xf1, 0xde, 0x69, 0x6a, 0x34, 0xf1, 0xd9, 0x0f, 0x1f, 0xe4, 0xe9,
		0x8b, 0x3e, 0x9d, 0x59, 0xfa, 0x22, 0xd7, 0x3c, 0xd4, 0x5e, 0xf7, 0x59, 0x63, 0xa9, 0x5a, 0xae,
		0x6e, 0x14, 0x96, 0xda, 0xfb, 0x10, 0xfb, 0x6d, 0xc1, 0xa3, 0xf0, 0x1d, 0x7f, 0xe0, 0x22, 0x21,
		0x6c, 0xf8, 0xdf, 0xec, 0xc1, 0x17, 0xfc, 0x69, 0xf8, 0x5d, 0x3b, 0x7e, 0x37, 0x61, 0xda, 0xad,
		0xbe, 0x9c, 0x12, 0x4c, 0x85, 0xff, 0x93, 0x7e, 0x2a, 0xea, 0xd5, 0x8b, 0xfa, 0x45, 0xa3, 0x59,
		0xbd, 0x38, 0x3f, 0xbe, 0x39, 0x39, 0xd9, 0xcd, 0xd3, 0x77, 0x56, 0x0d, 0xa3, 0x86, 0x90, 0x42,
		0x28, 0xac, 0x18, 0xb0, 0x4c, 0x33, 0x29, 0x0c, 0x5e, 0xb5, 0x5c, 0x25, 0x94, 0x56, 0x4c, 0xf9,
		0x7f, 0x13, 0xd2, 0x8b, 0x71, 0x48, 0xb0, 0x5a, 0x9a, 0xd9, 0x32, 0xe6, 0xc7, 0xb6, 0x37, 0x4f,
		0x2c, 0xec, 0xe6, 0x92, 0x1a, 0x4d, 0x5e, 0xda, 0x2f, 0x2a, 0x3c, 0x19, 0xb4, 0x00, 0xb4, 0xe0,
		0xc8, 0x69, 0x41, 0xba, 0x6d, 0xf2, 0x24, 0x40, 0x81, 0x1a, 0xe8, 0xe0, 0x51, 0x0f, 0xd4, 0xa0,
		0x30, 0xd4, 0xa0, 0x72, 0x51, 0x07, 0x29, 0x00, 0x29, 0x00, 0x29, 0x00, 0x29, 0x00, 0x29, 0xb0,
		0x41, 0x0a, 0x8c, 0x86, 0x22, 0xfe, 0xc5, 0x9e, 0xd5, 0x62, 0x02, 0xa5, 0x3f, 0x78, 0x22, 0xae,
		0x84, 0x50, 0x8c, 0x64, 0x5c, 0xf3, 0xf0, 0x7d, 0x97, 0x0d, 0x17, 0x89, 0xa2, 0xe1, 0x1f, 0x7a,
		0xb7, 0x99, 0x16, 0xbc, 0x56, 0xbd, 0xde, 0x68, 0xd6, 0xeb, 0x95, 0x66, 0xad, 0x59, 0xb9, 0x38,
		0x3f, 0xf7, 0x1a, 0x9e, 0x82, 0x76, 0x55, 0xfa, 0x14, 0x07, 0x2c, 0x66, 0xc1, 0xdb, 0xe1, 0xa0,
		0x84, 0x83, 0x6e, 0xd7, 0xe8, 0xd8, 0x13, 0xd8, 0x5b, 0x02, 0x3b, 0x4b, 0x80, 0x82, 0xcd, 0xd9,
		0x55, 0x13, 0x6c, 0x8a, 0xca, 0x8e, 0x9a, 0x25, 0x54, 0xc6, 0xec, 0xe6, 0x8b, 0x25, 0xbb, 0x75,
		0x67, 0x74, 0xef, 0x5c, 0x85, 0x61, 0x24, 0xfc, 0x21, 0x7a, 0x54, 0xdb, 0x37, 0x49, 0xfb, 0x91,
		0xf5, 0xfc, 0xbe, 0x2f, 0x1e, 0x87, 0x83, 0x7d, 0xc6, 0x19, 0x63, 0xad, 0x4a, 0xd5, 0x4d, 0x69,
		0xec, 0x38, 0xcf, 0xfa, 0x6c, 0x7c, 0x94, 0x78, 0xfc, 0xdf, 0xb3, 0x2c, 0xfd, 0xf8, 0x6c, 0x9a,
		0x14, 0x73, 0xa6, 0x91, 0x66, 0x30, 0xfa, 0x1e, 0x22, 0x1e, 0xb4, 0x45, 0x38, 0xde, 0x48, 0x1f,
		0x47, 0x5f, 0xe3, 0x5d, 0x24, 0xbc, 0xff, 0xf3, 0x36, 0xed, 0xe4, 0xfb, 0xe8, 0x3f, 0xc9, 0xf8,
		0xbf, 0xdf, 0x7f, 0x9f, 0x7c, 0x89, 0xf1, 0x2f, 0xae, 0x13, 0xf1, 0xfd, 0x03, 0x0f, 0x6e, 0xa3,
		0xeb, 0xf4, 0x1b, 0x18, 0xca, 0x56, 0x92, 0x98, 0x9d, 0xb9, 0xc4, 0x0b, 0xd7, 0xef, 0x76, 0xa3,
		0xb6, 0xda, 0x34, 0xad, 0xcc, 0xe4, 0x98, 0x6d, 0x10, 0x49, 0x1d, 0xc6, 0xcc, 0x26, 0x92, 0x3a,
		0xec, 0x26, 0x75, 0x24, 0x24, 0x59, 0x1d, 0x09, 0xf4, 0x5b, 0xe8, 0xb7, 0xd0, 0x6f, 0x65, 0x56,
		0xcb, 0x13, 0x0f, 0xdc, 0xd8, 0x0f, 0xf3, 0x1d, 0x62, 0xcd, 0xe5, 0x5e, 0x5a, 0x1a, 0x6d, 0xa8,
		0x66, 0xec, 0x2f, 0x35, 0xf4, 0xfa, 0xab, 0xe7, 0x5e, 0xdc, 0x7d, 0xad, 0xb8, 0x17, 0x77, 0xbf,
		0x2a, 0xa7, 0xb5, 0x97, 0xd7, 0xee, 0xc2, 0x2f, 0xde, 0xfc, 0xf6, 0xfa, 0x74, 0xfb, 0x67, 0xde,
		0xfc, 0xfd, 0x4d, 0x09, 0xda, 0x15, 0xb4, 0x2b, 0x68, 0x57, 0xd0, 0xae, 0x10, 0xd0, 0x06, 0x20,
		0x02, 0x20, 0x3a, 0x78, 0x40, 0x84, 0x80, 0xf6, 0xe2, 0x17, 0x41, 0x40, 0x1b, 0x01, 0xed, 0xc3,
		0x9b, 0x0d, 0x04, 0xb4, 0x41, 0x0a, 0x40, 0x0a, 0x40, 0x0a, 0x76, 0x41, 0x0a, 0x2c, 0x05, 0xb4,
		0x13, 0x44, 0xb4, 0x6d, 0x47, 0xb4, 0x8b, 0x18, 0x95, 0x53, 0x0f, 0x19, 0x39, 0xf4, 0x01, 0xba,
		0xab, 0xe9, 0x77, 0x29, 0x40, 0xa8, 0x4e, 0xf3, 0x88, 0xb5, 0xce, 0xd9, 0xea, 0x0a, 0xc2, 0x70,
		0x16, 0x29, 0xf3, 0x11, 0x85, 0xe1, 0x94, 0xa9, 0x30, 0x0d, 0x05, 0xd6, 0xa0, 0xbe, 0x9a, 0x94,
		0x57, 0x03, 0xdb, 0x52, 0x50, 0x5c, 0x2a, 0x6a, 0x4b, 0x4e, 0xa2, 0xe8, 0xc8, 0x93, 0x06, 0x85,
		0x25, 0xa1, 0xae, 0x84, 0x94, 0xb5, 0xc8, 0xa3, 0x7c, 0x10, 0xf9, 0x49, 0xc0, 0x92, 0x1a, 0x10,
		0xe6, 0xc8, 0x6b, 0x86, 0x0d, 0x09, 0x26, 0x6a, 0x82, 0xc9, 0x52, 0xf2, 0x3d, 0xa8, 0xf9, 0x25,
		0x01, 0xcd, 0x7f, 0x3c, 0xb2, 0xd0, 0xe6, 0xa2, 0x2b, 0x97, 0xcf, 0xca, 0xe5, 0xb3, 0x99, 0x82,
		0xde, 0xce, 0xdf, 0xfe, 0xe1, 0xbc, 0x5a, 0x5b, 0x83, 0xf6, 0xd5, 0x8e, 0xd7, 0x61, 0x3a, 0x3c,
		0x45, 0x5a, 0x82, 0xd2, 0xe3, 0x67, 0x25, 0x96, 0xfa, 0x8e, 0x25, 0xed, 0x98, 0xf7, 0x95, 0x09,
		0xf9, 0xdc, 0x12, 0xb9, 0xea, 0xf7, 0xbb, 0x9c, 0x25, 0x8e, 0x88, 0x9c, 0x30, 0x0a, 0x9d, 0xdb,
		0x9b, 0xeb, 0xcf, 0x49, 0x59, 0x75, 0x12, 0x08, 0x64, 0xc5, 0xd9, 0xf5, 0x10, 0xcc, 0xbc, 0xa8,
		0x06, 0x4a, 0xa3, 0x14, 0x10, 0xe7, 0x96, 0xc7, 0xea, 0xb1, 0x2b, 0xa6, 0xe0, 0xb6, 0xa3, 0xda,
		0x9e, 0x8a, 0xda, 0x11, 0x95, 0x66, 0x24, 0x53, 0x15, 0x90, 0x40, 0x13, 0x2a, 0xd9, 0xaf, 0xff,
		0x38, 0x34, 0x44, 0xca, 0x05, 0x20, 0xd3, 0x87, 0x0d, 0x57, 0x4b, 0xae, 0xa2, 0x02, 0x24, 0xa1,
		0x2d, 0x3a, 0x84, 0x6a, 0xc9, 0x3c, 0x14, 0x2c, 0xee, 0xf8, 0x6d, 0xe6, 0xe6, 0xbb, 0x19, 0x62,
		0x71, 0x09, 0x7a, 0x4d, 0xb9, 0x7a, 0xc9, 0x63, 0x13, 0xd2, 0xb9, 0xcc, 0x3a, 0x4e, 0xe6, 0x7e,
		0x1a, 0xfe, 0x90, 0x6e, 0x7b, 0xd2, 0xf1, 0x51, 0xe2, 0x8a, 0xea, 0x1c, 0x91, 0x94, 0x1b, 0xaa,
		0x71, 0x42, 0x52, 0xbb, 0xf6, 0xd4, 0xf5, 0x43, 0x65, 0xbb, 0x96, 0x3e, 0x8c, 0xca, 0xb6, 0xb0,
		0x6b, 0x0a, 0xfb, 0x56, 0xb5, 0xb2, 0xed, 0x13, 0xed, 0xc1, 0xa8, 0x27, 0x1c, 0x8b, 0xda, 0x01,
		0x03, 0x45, 0x3c, 0xc6, 0x31, 0xb2, 0x49, 0xb2, 0x07, 0xa7, 0x4b, 0x3a, 0xdf, 0xad, 0x64, 0x5b,
		0x57, 0xcd, 0x62, 0x83, 0x3b, 0xce, 0x0d, 0xae, 0x22, 0x37, 0x98, 0x7e, 0x63, 0x19, 0x61, 0xf2,
		0x0e, 0x72, 0x83, 0xd3, 0xd5, 0xc2, 0xc2, 0x41, 0x8f, 0xc5, 0xbe, 0xae, 0xc8, 0x32, 0xf1, 0x38,
		0x1a, 0x21, 0xac, 0xd2, 0xfb, 0x70, 0xd0, 0xd3, 0x5f, 0x75, 0xb7, 0xd1, 0x17, 0x11, 0xf3, 0xf0,
		0x81, 0x24, 0xbb, 0xad, 0x54, 0x49, 0xeb, 0x04, 0x87, 0x01, 0xeb, 0xf0, 0x90, 0x05, 0x14, 0xb9,
		0x77, 0xde, 0xc8, 0xcb, 0xff, 0xa4, 0x69, 0xad, 0x9a, 0x2e, 0xdd, 0xe7, 0xd0, 0xef, 0xf1, 0xb6,
		0x5e, 0x96, 0x9a, 0x66, 0x2e, 0x6f, 0xe9, 0x36, 0xfa, 0x18, 0x0a, 0x9a, 0x41, 0x9f, 0xbc, 0x8f,
		0xb2, 0x3d, 0x5d, 0x00, 0x68, 0xc3, 0xb1, 0x26, 0x49, 0xcf, 0x9e, 0x59, 0x09, 0x97, 0x4e, 0x65,
		0x47, 0x29, 0x7d, 0x2f, 0x48, 0xb7, 0xa5, 0x4e, 0xb7, 0xad, 0x94, 0x6b, 0x48, 0xb7, 0x35, 0xe3,
		0x63, 0x57, 0xfa, 0xda, 0x6d, 0x63, 0x8e, 0x74, 0x5b, 0xfa, 0xdd, 0x8c, 0x7b, 0x26, 0x80, 0xb1,
		0x81, 0xb1, 0x77, 0x82, 0xb1, 0x71, 0xcf, 0xc4, 0xec, 0x17, 0xc1, 0x3d, 0x13, 0xb8, 0x67, 0xe2,
		0x50, 0xe7, 0x04, 0x27, 0xf0, 0x40, 0x09, 0x40, 0x09, 0x40, 0x09, 0xf6, 0x84, 0x12, 0x3c, 0x51,
		0x50, 0x82, 0xa7, 0xdd, 0x53, 0x02, 0xc8, 0xee, 0xa0, 0x04, 0xfb, 0x45, 0x09, 0x9e, 0xba, 0x7e,
		0xe8, 0xf2, 0x30, 0x60, 0x3f, 0x51, 0x97, 0xc3, 0x34, 0x37, 0x40, 0x5d, 0x8e, 0xe2, 0x70, 0x03,
		0xd4, 0xe5, 0xb0, 0x3c, 0x97, 0x45, 0xdd, 0x94, 0xf5, 0xca, 0x45, 0x03, 0xfb, 0x12, 0x9c, 0x1d,
		0x9c, 0xdd, 0x0a, 0x72, 0xd1, 0x3a, 0xba, 0x38, 0x6b, 0x09, 0xf4, 0x8e, 0x30, 0xce, 0xae, 0x62,
		0xf2, 0xa3, 0x8c, 0x59, 0xe3, 0x5a, 0x47, 0x1a, 0xa1, 0x8e, 0x6c, 0x57, 0x47, 0x9a, 0xe5, 0x26,
		0xc4, 0x11, 0xbb, 0xe2, 0xc8, 0xa6, 0x21, 0x87, 0x36, 0x42, 0xfa, 0x04, 0xae, 0xdb, 0x41, 0x71,
		0x22, 0x99, 0x83, 0x66, 0x43, 0x2e, 0x7f, 0x46, 0x91, 0xb7, 0xed, 0x50, 0x9c, 0x43, 0xfb, 0xb3,
		0xeb, 0x87, 0xa3, 0xe2, 0x44, 0x7f, 0x16, 0xae, 0x34, 0x91, 0xff, 0x33, 0x2d, 0xdf, 0xa4, 0x51,
		0x9d, 0x68, 0xd2, 0x82, 0xe5, 0x02, 0x45, 0x55, 0x24, 0xc4, 0xef, 0xd0, 0x37, 0x1e, 0x43, 0x81,
		0xa2, 0x01, 0x0f, 0x85, 0xd7, 0xd0, 0x28, 0x4e, 0xd4, 0x38, 0xda, 0xe2, 0x44, 0x15, 0x14, 0x27,
		0x32, 0xa4, 0x13, 0x64, 0x43, 0xdc, 0x38, 0x3f, 0xaf, 0x9d, 0xa3, 0x3a, 0x91, 0xe6, 0x53, 0x77,
		0xb8, 0x79, 0x30, 0x27, 0xc1, 0xf4, 0x2a, 0x65, 0xcf, 0x08, 0xc7, 0x3c, 0xee, 0xbb, 0x07, 0x37,
		0x8f, 0xea, 0xa1, 0xed, 0x1f, 0x63, 0x18, 0xf6, 0x49, 0xe5, 0x72, 0xaf, 0x39, 0x0c, 0xfb, 0xa4,
		0x50, 0xc9, 0x16, 0x18, 0x16, 0x18, 0x16, 0x18, 0x16, 0x18, 0x16, 0x18, 0x16, 0x18, 0x16, 0x18,
		0x76, 0x4f, 0x30, 0x6c, 0x0d, 0x18, 0xd6, 0x00, 0x86, 0xad, 0x01, 0xc3, 0xea, 0x60, 0xd8, 0xe8,
		0x89, 0xc5, 0x31, 0x0f, 0x98, 0x1b, 0xb0, 0x8e, 0x3f, 0xe8, 0x0a, 0xb7, 0xff, 0xa4, 0x53, 0x32,
		0x7e, 0x75, 0x73, 0xb2, 0x25, 0x25, 0x46, 0xcf, 0x2a, 0xed, 0xd9, 0x52, 0x6a, 0x3a, 0xe5, 0xe6,
		0xfe, 0x0e, 0xe8, 0x1b, 0xe8, 0xfb, 0xa0, 0xd0, 0xf7, 0x7d, 0x14, 0x75, 0x99, 0x1f, 0x6a, 0xc0,
		0x6f, 0xcf, 0x83, 0x73, 0x87, 0x73, 0x87, 0x73, 0xdf, 0x6b, 0xe7, 0xde, 0x8f, 0x23, 0x11, 0xb5,
		0xa3, 0xae, 0xfb, 0x10, 0x47, 0x83, 0xbe, 0x1b, 0xf8, 0xc2, 0xbf, 0xf7, 0x13, 0xa6, 0xee, 0xde,
		0xd7, 0x35, 0x88, 0x9a, 0x64, 0x70, 0xa0, 0x05, 0x72, 0xa0, 0xca, 0x35, 0xc9, 0x82, 0xfb, 0xd1,
		0x41, 0x0c, 0xfd, 0x93, 0x50, 0x59, 0x4b, 0xa8, 0x90, 0x80, 0xe3, 0x50, 0x56, 0xb7, 0x96, 0xa6,
		0xa3, 0x2b, 0x44, 0x85, 0x04, 0x25, 0xe5, 0x78, 0x71, 0xef, 0x34, 0x70, 0x0a, 0x6a, 0x8d, 0xfc,
		0x89, 0x0a, 0x09, 0x4a, 0x53, 0x61, 0xe2, 0xb4, 0x05, 0x81, 0x12, 0xbd, 0x8f, 0xd3, 0x81, 0x03,
		0xd8, 0xcb, 0xc2, 0x55, 0xec, 0xf7, 0x98, 0xdb, 0x89, 0xe2, 0x9e, 0x2f, 0x08, 0x8a, 0x33, 0xcd,
		0xb6, 0xa6, 0x87, 0x41, 0xce, 0x81, 0x41, 0x80, 0x41, 0xf6, 0x01, 0x83, 0xa8, 0xc2, 0xfe, 0xa9,
		0x2a, 0x25, 0x1e, 0x59, 0x1c, 0x32, 0xe1, 0xc6, 0x9d, 0xb6, 0x57, 0xa9, 0x57, 0xdd, 0x24, 0xf4,
		0xfb, 0xad, 0x4a, 0xd5, 0xfb, 0xa7, 0xfe, 0xbc, 0x67, 0x45, 0x56, 0xd7, 0xf7, 0xa1, 0x39, 0x6f,
		0xe3, 0xed, 0xaa, 0x7b, 0x73, 0xa0, 0xee, 0xb6, 0xa5, 0xdc, 0xbe, 0xe4, 0xdb, 0x98, 0x7a, 0x3b,
		0x1b, 0xdb, 0xd6, 0xc6, 0xb6, 0xb7, 0x89, 0x6d, 0x4e, 0xe4, 0xd6, 0x35, 0xd7, 0x9b, 0xee, 0xf6,
		0x9f, 0x37, 0x03, 0x42, 0x97, 0xd0, 0xac, 0xdf, 0xfd, 0x9a, 0x55, 0x1e, 0x08, 0x75, 0x02, 0x63,
		0x9b, 0xdf, 0x84, 0x11, 0x30, 0x66, 0x0c, 0x4c, 0x19, 0x05, 0xe3, 0xc6, 0xc1, 0xb8, 0x91, 0x30,
		0x69, 0x2c, 0x68, 0x8c, 0x06, 0x21, 0xc1, 0xa3, 0xd1, 0x31, 0xb6, 0x6f, 0x7d, 0x97, 0x70, 0xff,
		0xcf, 0xda, 0x00, 0xaf, 0x45, 0xd8, 0xe6, 0x8d, 0x2f, 0x04, 0x8b, 0x43, 0x6d, 0x09, 0x64, 0xa9,
		0xe1, 0xaf, 0x15, 0xf7, 0xc2, 0x77, 0x3b, 0x57, 0xee, 0x87, 0xbb, 0x5f, 0xd5, 0x17, 0x77, 0xfe,
		0x47, 0xba, 0x55, 0x75, 0x57, 0xa8, 0x55, 0x45, 0x78, 0x10, 0x7c, 0xa9, 0x6d, 0xba, 0x83, 0xe1,
		0xf4, 0xf2, 0xd5, 0xda, 0xcd, 0x70, 0xb1, 0x1c, 0xda, 0x73, 0xab, 0x15, 0xaf, 0x4e, 0x6c, 0x18,
		0x4d, 0x5a, 0xf5, 0x55, 0xd6, 0x9d, 0xfa, 0x48, 0xb9, 0x75, 0x43, 0xbf, 0xd2, 0xe0, 0xaf, 0x9d,
		0x2c, 0xf2, 0xae, 0x5f, 0x4e, 0x8a, 0xd9, 0x1a, 0x91, 0x35, 0xd9, 0x73, 0x80, 0x6d, 0xc0, 0x8a,
		0xa9, 0xdd, 0x83, 0x6c, 0xde, 0x60, 0xad, 0xd4, 0xd1, 0x46, 0xf7, 0xfe, 0xfe, 0xc3, 0x79, 0xf5,
		0x7e, 0xcc, 0xe1, 0x5f, 0x39, 0x51, 0xec, 0xac, 0xfc, 0xc4, 0x98, 0xdc, 0xaf, 0xff, 0x40, 0xc6,
		0xfa, 0x5f, 0xed, 0x19, 0x80, 0xd5, 0xb8, 0x99, 0xb9, 0x18, 0xf0, 0xd5, 0xc2, 0x8c, 0xd2, 0x61,
		0x63, 0xc2, 0xb5, 0x41, 0x71, 0x57, 0xf4, 0xd6, 0xed, 0x32, 0x73, 0x0f, 0xf2, 0x64, 0x48, 0x4f,
		0x9d, 0xcf, 0x1f, 0x7e, 0x77, 0x86, 0x63, 0x77, 0xea, 0x7c, 0xf9, 0xf7, 0xd5, 0x8d, 0x93, 0x0e,
		0xd2, 0x68, 0x0c, 0xbf, 0x85, 0xa3, 0x41, 0x54, 0xbe, 0x67, 0x7a, 0x17, 0x4e, 0x9f, 0xfe, 0x5e,
		0xea, 0x9d, 0xba, 0xfb, 0x75, 0xf7, 0x58, 0x4b, 0xce, 0x5f, 0x41, 0x3d, 0xf7, 0x4b, 0x41, 0x3c,
		0xf7, 0xdd, 0x4e, 0x3d, 0xb7, 0x66, 0x69, 0x94, 0xa5, 0xf6, 0xc8, 0x4a, 0xa5, 0xac, 0x49, 0x28,
		0x3b, 0x9b, 0xb5, 0xb0, 0x67, 0x1b, 0x24, 0xf3, 0x5d, 0xdd, 0xbb, 0xa4, 0x11, 0x48, 0xea, 0x76,
		0xdb, 0x6e, 0x34, 0x7c, 0x23, 0xba, 0x98, 0xc2, 0xb4, 0x49, 0x84, 0x10, 0xac, 0xa9, 0x86, 0x08,
		0x21, 0x20, 0x84, 0xb0, 0xb6, 0xa1, 0x20, 0xf1, 0xfb, 0x6e, 0x32, 0xfc, 0xbf, 0xbe, 0xcf, 0xe3,
		0x84, 0x3e, 0x90, 0xb0, 0xd8, 0x01, 0x6d, 0x38, 0xc1, 0x43, 0x38, 0x61, 0x3f, 0xd8, 0x18, 0xc2,
		0x09, 0x86, 0x00, 0x1f, 0xd1, 0x7a, 0xa5, 0x32, 0x28, 0x73, 0xe8, 0xc1, 0x0f, 0x82, 0x98, 0x25,
		0x89, 0x39, 0x16, 0x37, 0xdb, 0x09, 0xf1, 0xcc, 0xd3, 0xc6, 0x2b, 0x8d, 0x19, 0x1a, 0x93, 0x06,
		0xc7, 0xb8, 0xe1, 0xb1, 0x41, 0x82, 0xad, 0x18, 0x22, 0xab, 0x3c, 0xd8, 0xb4, 0x61, 0xa2, 0xe7,
		0xb6, 0xc4, 0x0a, 0x91, 0x63, 0x24, 0xfe, 0xb9, 0xb4, 0xda, 0x93, 0xd1, 0x95, 0xcc, 0x06, 0x96,
		0xbb, 0x81, 0x38, 0xe8, 0xd4, 0x0e, 0x18, 0x8a, 0x87, 0x66, 0x1d, 0x58, 0x8a, 0x8b, 0xd2, 0xe8,
		0x11, 0xa6, 0x57, 0xa1, 0xc1, 0x78, 0x69, 0xd6, 0x87, 0xb9, 0xb8, 0xe9, 0xe4, 0x8f, 0x19, 0xab,
		0xeb, 0xac, 0xac, 0x8f, 0x56, 0xf6, 0x0c, 0x56, 0xe1, 0xde, 0x95, 0x83, 0x59, 0xe5, 0x68, 0x4c,
		0x87, 0x58, 0xad, 0xfb, 0x9c, 0x95, 0xbe, 0x27, 0xcf, 0xbc, 0x1a, 0xfb, 0x36, 0x2f, 0x27, 0xfb,
		0xd1, 0xea, 0xdd, 0x61, 0x6b, 0xce, 0x54, 0x22, 0x0d, 0xad, 0xf6, 0x9b, 0xb5, 0x6b, 0x57, 0x03,
		0xce, 0x24, 0xce, 0x33, 0x33, 0xca, 0x87, 0x43, 0x56, 0x6f, 0xfb, 0x66, 0xfc, 0x3a, 0xff, 0x3d,
		0x7c, 0x9b, 0x77, 0xe3, 0x97, 0xf9, 0xfe, 0x2e, 0xf1, 0xfb, 0x5f, 0x12, 0xbf, 0x7f, 0x93, 0x7e,
		0x67, 0xa4, 0x13, 0x20, 0x9d, 0x60, 0x1a, 0x39, 0xee, 0x76, 0xdb, 0x9f, 0x86, 0x4b, 0x1b, 0xa9,
		0x00, 0x45, 0x48, 0x05, 0x98, 0xce, 0x06, 0xc2, 0xf8, 0x22, 0x72, 0xfe, 0xf8, 0xe3, 0x77, 0x27,
		0x1d, 0x8f, 0x51, 0xc4, 0xd7, 0x19, 0x07, 0x7c, 0x11, 0xaf, 0xdf, 0x15, 0x66, 0x5c, 0x17, 0xaf,
		0x5f, 0x37, 0x51, 0x08, 0xcc, 0x1b, 0x04, 0x91, 0xc7, 0x1d, 0x98, 0x9f, 0xc6, 0x9d, 0xf7, 0x30,
		0x0e, 0x9f, 0x84, 0x7e, 0x9f, 0x3a, 0x10, 0x3f, 0xd3, 0x26, 0x22, 0xf1, 0x5b, 0x47, 0x0b, 0x91,
		0x78, 0x44, 0xe2, 0xd7, 0xc2, 0x1c, 0xaa, 0x48, 0x7c, 0x66, 0xc8, 0x34, 0xee, 0x37, 0x5f, 0xbb,
		0x82, 0x67, 0x1b, 0xc7, 0x81, 0xbe, 0xc2, 0x18, 0x04, 0x9b, 0x24, 0x08, 0x11, 0xf8, 0x62, 0xcb,
		0x5f, 0xe6, 0x0e, 0xf4, 0x91, 0x07, 0xb2, 0xf6, 0xf9, 0x20, 0xdf, 0xeb, 0x85, 0x88, 0xd5, 0x9b,
		0x5f, 0x75, 0x9c, 0xe6, 0x53, 0x68, 0x7b, 0x2f, 0x4f, 0xf3, 0xed, 0x26, 0x0a, 0x85, 0x83, 0x7d,
		0xba, 0x86, 0x7f, 0x27, 0x51, 0x26, 0x9c, 0xf1, 0x2b, 0x32, 0xee, 0x86, 0x28, 0x3f, 0x73, 0x9c,
		0x0b, 0xaa, 0xfc, 0x2e, 0xe0, 0xe8, 0xb6, 0xe9, 0x80, 0x2c, 0x2f, 0x22, 0xe7, 0x4b, 0xe8, 0xf7,
		0x57, 0xc9, 0xbd, 0x38, 0x48, 0xb7, 0x33, 0xf7, 0xba, 0x4e, 0x98, 0x5f, 0x3f, 0x55, 0x90, 0xe6,
		0x0d, 0x7a, 0xe4, 0xe3, 0x96, 0xe6, 0x67, 0x94, 0xe8, 0x5d, 0x69, 0xf3, 0x56, 0x6b, 0xff, 0x11,
		0xe2, 0x16, 0x42, 0x0e, 0x46, 0x28, 0x96, 0x9b, 0xbc, 0x09, 0xd5, 0x94, 0xb1, 0x37, 0xc9, 0xa0,
		0xec, 0x68, 0xe9, 0x06, 0x6f, 0x4a, 0x25, 0xc2, 0xfb, 0xb6, 0x6b, 0xe1, 0xaa, 0xde, 0x19, 0x40,
		0x63, 0x4d, 0xed, 0x5a, 0xd1, 0xd2, 0x9e, 0x94, 0x0b, 0x76, 0xb5, 0x8a, 0x15, 0xae, 0xe7, 0x41,
		0xb8, 0xbc, 0x00, 0x85, 0x83, 0x15, 0x0d, 0xe7, 0x91, 0x5e, 0x5e, 0x90, 0x59, 0x15, 0xaa, 0xbd,
		0x34, 0xbb, 0x9f, 0x3c, 0x8d, 0x6c, 0x80, 0xd2, 0xfb, 0x70, 0xd0, 0xd3, 0x5f, 0x84, 0xb7, 0xd1,
		0x97, 0x51, 0xd4, 0x83, 0x04, 0x12, 0x57, 0x86, 0x43, 0x36, 0xa9, 0x33, 0x42, 0x81, 0x5f, 0xbc,
		0x14, 0x69, 0x8c, 0xaa, 0x44, 0x50, 0xb4, 0x57, 0x9d, 0x24, 0x75, 0x50, 0x14, 0x68, 0x4e, 0x5b,
		0xac, 0x4d, 0x5a, 0xfc, 0x44, 0x90, 0x25, 0x92, 0xb6, 0x58, 0x1f, 0x9f, 0xd8, 0xfc, 0x44, 0x00,
		0xf6, 0x4f, 0x75, 0x57, 0xc7, 0xc7, 0x50, 0xd0, 0x2c, 0x8d, 0x6c, 0x55, 0x90, 0x44, 0xae, 0xa7,
		0xe3, 0xa3, 0x9d, 0x52, 0x33, 0x62, 0x08, 0xe3, 0x25, 0x46, 0x72, 0x52, 0xbe, 0x34, 0x5b, 0x65,
		0xbc, 0x4a, 0xd4, 0xde, 0xe4, 0x6d, 0x6b, 0x60, 0x7f, 0x60, 0x7f, 0x60, 0x7f, 0x60, 0x7f, 0x34,
		0xec, 0xcf, 0x0a, 0xb5, 0x19, 0x31, 0x32, 0x8d, 0x7c, 0xad, 0x6c, 0xdb, 0x64, 0x2d, 0x81, 0xc8,
		0x80, 0xc8, 0x80, 0xc8, 0x48, 0xac, 0x96, 0x01, 0x0f, 0x45, 0xad, 0x4a, 0x40, 0x5a, 0x9a, 0xb8,
		0x85, 0x6d, 0xa1, 0x31, 0xdc, 0xc2, 0xa6, 0x35, 0x15, 0x26, 0x6e, 0x61, 0xab, 0x57, 0x2f, 0xea,
		0x17, 0x8d, 0x66, 0xf5, 0x02, 0x57, 0xb1, 0x15, 0x1c, 0x80, 0x80, 0x20, 0xac, 0xb6, 0xd7, 0x8d,
		0xb2, 0x57, 0x2d, 0x57, 0xc1, 0x0e, 0x2c, 0xb2, 0x83, 0x2d, 0x43, 0x0e, 0x6a, 0x40, 0xfa, 0x84,
		0xec, 0x1d, 0xd0, 0xff, 0x62, 0xcf, 0x1a, 0xf7, 0x30, 0x97, 0xfe, 0xe0, 0x89, 0xb8, 0x12, 0x42,
		0xf1, 0x1e, 0xe9, 0x6b, 0x1e, 0xbe, 0xef, 0xb2, 0xe1, 0x42, 0x51, 0xb4, 0xfd, 0x43, 0x37, 0x37,
		0xd3, 0x82, 0xd7, 0xaa, 0xd7, 0x1b, 0xcd, 0x7a, 0xbd, 0xd2, 0xac, 0x35, 0x2b, 0x17, 0xe7, 0xe7,
		0x5e, 0xc3, 0x53, 0xf0, 0x54, 0xa5, 0x4f, 0x71, 0xc0, 0x62, 0x16, 0xbc, 0x1d, 0x8e, 0x4c, 0x38,
		0xe8, 0x76, 0x8d, 0x4e, 0x00, 0x81, 0xc9, 0x2d, 0xf1, 0x8e, 0xdb, 0x61, 0xbe, 0x18, 0xc4, 0xea,
		0xb6, 0x96, 0x42, 0xd4, 0x8f, 0x62, 0xe1, 0xfa, 0x61, 0xe0, 0x66, 0xea, 0xfe, 0xbd, 0x9f, 0xb0,
		0x20, 0x8d, 0x23, 0x16, 0x8c, 0x50, 0xcd, 0x0c, 0x58, 0x91, 0x49, 0xd5, 0xc6, 0x11, 0xb5, 0xcd,
		0xb5, 0xa4, 0x9f, 0xba, 0x53, 0xd8, 0x7a, 0xfa, 0xa0, 0x81, 0x60, 0x21, 0x6f, 0xd5, 0xb3, 0xbe,
		0x85, 0xa9, 0x53, 0xab, 0x19, 0xc0, 0x11, 0x26, 0x56, 0x3b, 0x15, 0x6e, 0x30, 0xbb, 0xd8, 0xf5,
		0x47, 0xbd, 0xf8, 0x3b, 0xc2, 0xa8, 0x27, 0xd1, 0xcc, 0x1d, 0x31, 0x9e, 0x33, 0xa2, 0xb0, 0xfa,
		0x0c, 0x96, 0x1a, 0x92, 0x5b, 0x2d, 0xf9, 0xe7, 0x5a, 0x62, 0xd6, 0xa6, 0x61, 0x70, 0xc1, 0x7a,
		0xfd, 0xae, 0x2f, 0xe4, 0xb7, 0xfd, 0x72, 0x44, 0x3d, 0x6b, 0x4a, 0x16, 0x08, 0x2a, 0x69, 0xb8,
		0x53, 0xed, 0x56, 0x32, 0x22, 0xa7, 0xa3, 0xd9, 0x6a, 0x6b, 0xb5, 0xba, 0x46, 0x96, 0x4c, 0x9b,
		0x25, 0xb3, 0xa8, 0x14, 0x5a, 0xac, 0x59, 0xa2, 0xa1, 0xac, 0xb9, 0x9a, 0x49, 0x1a, 0xd1, 0x49,
		0x16, 0xd1, 0x4b, 0x12, 0xa1, 0x49, 0x0e, 0x21, 0x4b, 0x0a, 0xa1, 0x4a, 0x06, 0xa1, 0x4b, 0x02,
		0xa1, 0x4b, 0xfe, 0xa0, 0x48, 0xfa, 0x50, 0x8e, 0x31, 0x68, 0x27, 0x79, 0x10, 0x25, 0x77, 0x10,
		0x25, 0x75, 0xd0, 0x24, 0x73, 0x50, 0x25, 0x71, 0x10, 0x24, 0x6f, 0x14, 0x4d, 0x89, 0x81, 0x10,
		0x00, 0x21, 0x00, 0x42, 0xc0, 0x7e, 0x09, 0x01, 0x20, 0xfa, 0x26, 0x88, 0xfe, 0xc1, 0x11, 0x79,
		0x23, 0xe4, 0xf1, 0x89, 0xc5, 0x89, 0x0a, 0xd7, 0xcf, 0x56, 0xf7, 0xa4, 0x01, 0x10, 0x45, 0x10,
		0xc5, 0x83, 0x22, 0x8a, 0x03, 0x1e, 0x0a, 0xaf, 0xa1, 0x41, 0x0a, 0x1b, 0x0a, 0x8f, 0xea, 0x25,
		0xe1, 0x68, 0x38, 0x2b, 0x8a, 0xa4, 0x1b, 0xaa, 0x64, 0x1b, 0xf2, 0x84, 0x0e, 0xba, 0x44, 0x0e,
		0x9d, 0x1a, 0x98, 0x14, 0xc9, 0x34, 0xd9, 0x10, 0x37, 0xce, 0xcf, 0x6b, 0xe7, 0x87, 0x3b, 0xcc,
		0x07, 0x21, 0xa5, 0x53, 0x70, 0xb1, 0x42, 0x21, 0x58, 0x84, 0xaa, 0x4c, 0x20, 0xd8, 0x1a, 0x10,
		0xac, 0x16, 0x82, 0xe5, 0x81, 0x2b, 0x22, 0xb7, 0xa3, 0x90, 0xc2, 0x3e, 0x05, 0xb1, 0xd3, 0x36,
		0xd4, 0x70, 0xac, 0xa7, 0x8a, 0x63, 0x2b, 0xc0, 0xb1, 0xc0, 0xb1, 0x1b, 0xbe, 0xa0, 0x6a, 0x69,
		0xde, 0x52, 0x87, 0xe2, 0x48, 0x47, 0x07, 0xa7, 0x39, 0x70, 0x9a, 0xc3, 0xf6, 0x86, 0xd2, 0x74,
		0x62, 0x38, 0xcd, 0x81, 0xd3, 0x1c, 0xbb, 0x62, 0x40, 0xf4, 0x4c, 0x88, 0x80, 0x78, 0x92, 0x12,
		0xd0, 0xa5, 0xa9, 0xc0, 0x69, 0x0e, 0xeb, 0x4f, 0xe3, 0x34, 0x87, 0x81, 0xe3, 0xde, 0x35, 0x1c,
		0xe7, 0x30, 0x03, 0x09, 0x36, 0x70, 0xdf, 0x1a, 0xce, 0x73, 0xa8, 0xf6, 0xa7, 0x72, 0xd4, 0xfb,
		0x89, 0x82, 0x12, 0x3c, 0x81, 0x12, 0x80, 0x12, 0x80, 0x12, 0x48, 0x6e, 0x9a, 0xae, 0x1f, 0x8e,
		0x8e, 0x46, 0x51, 0x95, 0xa7, 0x02, 0x37, 0x58, 0x07, 0x48, 0x3d, 0x70, 0x83, 0xc2, 0x70, 0x83,
		0xca, 0x45, 0x1d, 0xac, 0xc0, 0xe6, 0x5c, 0x16, 0x75, 0x53, 0xd6, 0x2b, 0x17, 0x0d, 0xec, 0x4b,
		0x70, 0x76, 0x70, 0x76, 0x70, 0x76, 0x22, 0xce, 0xde, 0x44, 0x7d, 0x36, 0xdb, 0x94, 0xbd, 0x89,
		0xe2, 0x6c, 0x1a, 0x8c, 0xdd, 0x46, 0x05, 0x06, 0x79, 0x76, 0x8e, 0xe2, 0x0b, 0xda, 0x63, 0x7f,
		0x60, 0x79, 0x3e, 0xb5, 0x72, 0x7d, 0xfd, 0xe1, 0xe9, 0xc9, 0x47, 0xce, 0x91, 0x0a, 0x44, 0x9e,
		0x0a, 0xa4, 0x39, 0xf0, 0x38, 0xb8, 0x5e, 0x8c, 0x83, 0xeb, 0xca, 0xc9, 0x44, 0x0e, 0xd9, 0x59,
		0xf5, 0x3f, 0x79, 0x70, 0x1b, 0x7d, 0xe0, 0x41, 0xa9, 0x50, 0xf9, 0x59, 0xae, 0xdf, 0xed, 0x46,
		0x6d, 0xb5, 0x29, 0x5a, 0x91, 0xaa, 0x35, 0xdb, 0x1c, 0xb2, 0xb6, 0x8c, 0x59, 0x55, 0x64, 0x6d,
		0x59, 0xcc, 0xda, 0x9a, 0x2e, 0x69, 0xa2, 0x6b, 0x46, 0x16, 0x1b, 0xdc, 0x71, 0xe8, 0xa6, 0x8a,
		0xd0, 0x0d, 0xfd, 0xc6, 0xb2, 0x83, 0x51, 0x8e, 0x34, 0x74, 0xc3, 0xc2, 0x41, 0x8f, 0xc5, 0xbe,
		0xe6, 0x5d, 0x89, 0x87, 0x7d, 0xab, 0xc8, 0x20, 0x0c, 0x58, 0x87, 0x87, 0x2c, 0x20, 0xbb, 0x56,
		0xa4, 0xc3, 0x7f, 0xd2, 0xb4, 0x96, 0xd6, 0x93, 0x08, 0x9e, 0x43, 0xbf, 0xc7, 0xdb, 0x07, 0x73,
		0x5f, 0xc7, 0xe4, 0x7d, 0x68, 0x6e, 0xb0, 0x18, 0x8d, 0x35, 0xcd, 0xed, 0x1a, 0xd3, 0x95, 0x70,
		0xe9, 0x54, 0x70, 0x1b, 0xc6, 0x81, 0x48, 0xad, 0x48, 0x8f, 0xb2, 0xaf, 0xb5, 0x22, 0x3d, 0x4a,
		0x4b, 0x6c, 0x3d, 0x3d, 0xde, 0x13, 0x13, 0xc0, 0xd8, 0xc0, 0xd8, 0xfb, 0x85, 0xb1, 0x71, 0x62,
		0x62, 0xf6, 0x8b, 0xe0, 0xc4, 0x04, 0xb2, 0x2f, 0x0e, 0x75, 0x4e, 0x90, 0x7d, 0x01, 0x4a, 0x00,
		0x4a, 0x00, 0x4a, 0xb0, 0x27, 0x94, 0xe0, 0x89, 0x07, 0x09, 0xc9, 0x91, 0x89, 0x04, 0x67, 0x26,
		0x40, 0x0a, 0x40, 0x0a, 0x24, 0x77, 0x8d, 0x1b, 0x0f, 0x31, 0x39, 0xd9, 0x8d, 0xde, 0x2d, 0x8d,
		0x36, 0x6e, 0x7c, 0x21, 0x58, 0x1c, 0x6a, 0x7b, 0xe1, 0xd2, 0xeb, 0xaf, 0x9e, 0x7b, 0x71, 0xf7,
		0xb5, 0xe2, 0x5e, 0xdc, 0xfd, 0xaa, 0x9c, 0xd6, 0x5e, 0x5e, 0xbb, 0x0b, 0xbf, 0x78, 0xf3, 0xdb,
		0xeb, 0xd3, 0xed, 0x9f, 0x79, 0xf3, 0xf7, 0x37, 0x25, 0xc0, 0x21, 0xc0, 0x21, 0xc0, 0x21, 0xc0,
		0xa1, 0x42, 0xa7, 0xa3, 0x26, 0xc8, 0x47, 0xb5, 0x9d, 0x8f, 0x5a, 0xc0, 0x4c, 0x38, 0xf5, 0x5c,
		0x2d, 0x87, 0x3c, 0x29, 0xee, 0x6a, 0xfa, 0x55, 0x8a, 0x90, 0x1e, 0xd7, 0xf5, 0x75, 0xb2, 0xe1,
		0xe4, 0x8b, 0xa1, 0x23, 0xf9, 0x6d, 0x17, 0x54, 0x01, 0xc9, 0x6f, 0x39, 0x80, 0xe2, 0x43, 0xcc,
		0x92, 0xc4, 0xed, 0x47, 0xb1, 0x20, 0x60, 0xdd, 0x73, 0xad, 0x21, 0x24, 0x07, 0xf6, 0x0d, 0xf6,
		0x2d, 0xb1, 0x5a, 0x78, 0x28, 0x58, 0xdc, 0xf1, 0xdb, 0xcc, 0x8d, 0x59, 0x87, 0x82, 0x7c, 0x37,
		0xf5, 0xc8, 0xf7, 0x18, 0x8a, 0x74, 0x2e, 0xb3, 0x2f, 0x96, 0xcc, 0xfd, 0x34, 0xfc, 0x21, 0xc5,
		0x07, 0x56, 0xc7, 0x5b, 0x0b, 0xab, 0xd2, 0x61, 0x56, 0xa3, 0xd8, 0x95, 0x06, 0xc3, 0x42, 0x44,
		0xc8, 0x25, 0x22, 0x54, 0x37, 0xd5, 0x03, 0xfe, 0x16, 0xb6, 0xca, 0xad, 0xb2, 0x57, 0x81, 0xd0,
		0x60, 0x5d, 0x68, 0xd0, 0x9b, 0x17, 0x88, 0x11, 0xf4, 0x56, 0xa1, 0x34, 0x66, 0x83, 0x9a, 0x28,
		0x31, 0x6d, 0x05, 0xb1, 0x19, 0xa0, 0x43, 0xa0, 0x43, 0xc9, 0x5d, 0x53, 0x88, 0xb0, 0xcc, 0x1f,
		0x2c, 0x7c, 0x48, 0xb1, 0x21, 0xb2, 0xb6, 0x36, 0xb5, 0x87, 0xac, 0x2d, 0xed, 0xa9, 0xa8, 0x55,
		0x91, 0xad, 0x55, 0x6c, 0xd4, 0x01, 0x66, 0xb1, 0x91, 0x59, 0x80, 0x35, 0xd8, 0x67, 0x0d, 0x60,
		0x04, 0x36, 0x19, 0xc1, 0x20, 0x14, 0xfe, 0xc3, 0x03, 0x0b, 0xa8, 0x14, 0xe4, 0x85, 0xf6, 0xa0,
		0x21, 0x83, 0x25, 0x80, 0x25, 0x48, 0xac, 0x16, 0x68, 0xc8, 0xb9, 0x28, 0x0c, 0x34, 0x64, 0x20,
		0x3d, 0x52, 0xa4, 0xb7, 0x5d, 0xab, 0x04, 0x18, 0xdc, 0x01, 0x18, 0xd4, 0x99, 0x16, 0xe0, 0x45,
		0x03, 0x78, 0x11, 0xf7, 0x21, 0x00, 0x19, 0x02, 0x19, 0xee, 0x02, 0x19, 0xe2, 0x3e, 0x84, 0x75,
		0x20, 0x0e, 0xf7, 0x21, 0xe0, 0x3e, 0x84, 0x03, 0x9b, 0x0d, 0xdc, 0x87, 0xb0, 0x72, 0x25, 0xe0,
		0x3e, 0x84, 0xe2, 0xec, 0x4b, 0x9c, 0xc8, 0xdf, 0x13, 0x5e, 0x00, 0xe6, 0xbf, 0x91, 0xf9, 0x83,
		0xd6, 0xdb, 0xa7, 0xf5, 0xe0, 0xec, 0xca, 0x9c, 0x1d, 0x37, 0x22, 0xac, 0xf3, 0x71, 0xb8, 0x11,
		0xa1, 0x48, 0x37, 0x22, 0x54, 0x71, 0xd9, 0x01, 0xf9, 0x65, 0x07, 0x55, 0xdc, 0x63, 0xb0, 0x66,
		0xa8, 0x0a, 0x73, 0x7a, 0x53, 0xfe, 0x6c, 0xa1, 0x43, 0x77, 0x58, 0x73, 0xd8, 0xb9, 0xa9, 0xe3,
		0x99, 0x27, 0x84, 0xf3, 0xa6, 0x63, 0xeb, 0x34, 0x6c, 0x9c, 0xc6, 0x59, 0xca, 0x74, 0xff, 0x11,
		0x5a, 0x34, 0xca, 0x33, 0x96, 0xba, 0x16, 0xcc, 0xcc, 0x31, 0xcb, 0xcd, 0x23, 0x66, 0x1a, 0xf7,
		0xe4, 0xfe, 0xf4, 0x9d, 0xc4, 0xb1, 0xe3, 0x1f, 0x8f, 0x2c, 0xb4, 0xb9, 0xe8, 0xca, 0xe5, 0xb3,
		0x72, 0x79, 0x62, 0x5e, 0xc4, 0x73, 0x9f, 0x39, 0x7f, 0xfb, 0x87, 0xf3, 0x4a, 0xfc, 0x88, 0xd2,
		0xe4, 0x1a, 0xb7, 0xe7, 0xb7, 0xdd, 0x98, 0x75, 0xfd, 0xe7, 0xb1, 0x85, 0x7a, 0xb5, 0xe3, 0x75,
		0x98, 0x0e, 0x4f, 0x91, 0x96, 0xa0, 0xf4, 0xf8, 0x59, 0x89, 0xa0, 0xbd, 0x63, 0x49, 0x3b, 0xe6,
		0x7d, 0x65, 0x67, 0x35, 0xb7, 0x44, 0xae, 0xfa, 0xfd, 0x2e, 0x67, 0x89, 0x23, 0x22, 0x27, 0x8c,
		0x42, 0xe7, 0xf6, 0xe6, 0xfa, 0x73, 0x52, 0x56, 0x9d, 0x04, 0x02, 0x74, 0x35, 0xbb, 0x1e, 0x82,
		0x99, 0x17, 0xd5, 0xc0, 0x7c, 0x94, 0xb8, 0x6a, 0x6e, 0x79, 0xac, 0x1e, 0xbb, 0x62, 0xf2, 0xb8,
		0x13, 0x5a, 0x9c, 0x95, 0xd7, 0x4f, 0x2b, 0xe2, 0x2a, 0x32, 0x3c, 0x25, 0xb1, 0x6e, 0x48, 0x20,
		0x54, 0xbe, 0xd9, 0xdf, 0x3e, 0x1b, 0x39, 0xc6, 0xb7, 0xd4, 0xf6, 0xfb, 0xfe, 0x3d, 0xef, 0x72,
		0xc1, 0x59, 0xfe, 0xbc, 0xcb, 0x6c, 0xe3, 0xcf, 0x3d, 0x9d, 0x73, 0x36, 0xe5, 0x8a, 0x58, 0x48,
		0x67, 0x51, 0xaa, 0xc4, 0xc6, 0x95, 0x63, 0xe1, 0xaa, 0xc6, 0x4a, 0x3b, 0xd6, 0xad, 0x6d, 0x8f,
		0x74, 0x62, 0xd9, 0xb4, 0x28, 0x5c, 0xb6, 0xe8, 0x44, 0xa9, 0x9d, 0xae, 0x88, 0x41, 0x3c, 0x04,
		0xed, 0x6e, 0x3f, 0xad, 0x54, 0xe3, 0x3f, 0x3c, 0xa8, 0xdc, 0x8b, 0x32, 0x5d, 0xc7, 0x6b, 0x9b,
		0x94, 0xad, 0xa0, 0xc1, 0x3a, 0xfe, 0xa0, 0x2b, 0x94, 0x84, 0x8f, 0x52, 0x1a, 0x17, 0x90, 0x33,
		0xfd, 0x77, 0x6a, 0x15, 0x64, 0x2a, 0xa8, 0x20, 0x63, 0x61, 0x93, 0x9a, 0xc5, 0x95, 0x85, 0xac,
		0x20, 0xa3, 0x9c, 0x68, 0x92, 0xcd, 0xf6, 0x7d, 0x14, 0x75, 0x99, 0x9a, 0x7c, 0x31, 0xf1, 0x2c,
		0x1e, 0x14, 0xd2, 0x9c, 0x6a, 0x42, 0xbd, 0xec, 0x95, 0xcf, 0x21, 0x92, 0x52, 0x8b, 0xa4, 0xdb,
		0x86, 0xf5, 0xd0, 0x74, 0x52, 0x23, 0xe5, 0xd5, 0xd8, 0x4f, 0xc1, 0xc2, 0x80, 0x05, 0x6e, 0x87,
		0x77, 0x05, 0x8b, 0xb5, 0xfc, 0xfb, 0x8a, 0xb6, 0xe0, 0xd8, 0xe1, 0xd8, 0xe1, 0xd8, 0xe1, 0xd8,
		0xe1, 0xd8, 0xe1, 0xd8, 0xe1, 0xd8, 0x6d, 0x3a, 0xf6, 0xc7, 0xe7, 0xfb, 0x98, 0x07, 0x6e, 0xaa,
		0x1d, 0x29, 0xec, 0xb3, 0x6c, 0x99, 0x2f, 0xb4, 0x03, 0x87, 0x0e, 0x87, 0x0e, 0x87, 0x0e, 0x87,
		0x0e, 0x87, 0x0e, 0x87, 0x0e, 0x87, 0x6e, 0xd3, 0xa1, 0xf3, 0xa7, 0xae, 0xbe, 0x37, 0x9f, 0x6d,
		0xc4, 0xa6, 0x2b, 0x1f, 0xae, 0x29, 0x78, 0x72, 0x78, 0x72, 0x78, 0x72, 0x78, 0x72, 0x78, 0x72,
		0x78, 0xf2, 0xa3, 0xf6, 0xe4, 0xdd, 0xa8, 0xed, 0x77, 0xd3, 0x9c, 0x17, 0x7d, 0x87, 0xbe, 0xa2,
		0x2d, 0x50, 0x74, 0x38, 0x76, 0x38, 0x76, 0x38, 0x76, 0x38, 0x76, 0x38, 0x76, 0x38, 0x76, 0x9b,
		0x8e, 0x3d, 0x11, 0xbe, 0xe0, 0x6d, 0x97, 0x85, 0x22, 0x7e, 0x76, 0x79, 0x18, 0xf0, 0x27, 0x1e,
		0x0c, 0xfc, 0x6e, 0x9a, 0x82, 0xae, 0xee, 0xe2, 0x37, 0xb6, 0x0a, 0x67, 0x0f, 0x67, 0x0f, 0x67,
		0x0f, 0x67, 0x0f, 0x67, 0x0f, 0x67, 0x0f, 0x67, 0x6f, 0xd5, 0xd9, 0x53, 0xe8, 0xf1, 0xc9, 0x8e,
		0xf4, 0x78, 0xb8, 0x72, 0xb8, 0x72, 0xb8, 0x72, 0xb8, 0x72, 0xb8, 0x72, 0xb8, 0x72, 0xb8, 0x72,
		0x11, 0xfb, 0x9d, 0x0e, 0x6f, 0xbb, 0xed, 0xae, 0x9f, 0x24, 0x2c, 0x51, 0x77, 0xe7, 0x8b, 0x0d,
		0xc1, 0xa5, 0xc3, 0xa5, 0xc3, 0xa5, 0xc3, 0xa5, 0xc3, 0xa5, 0xc3, 0xa5, 0xc3, 0xa5, 0x6b, 0xbb,
		0x74, 0xd4, 0xa5, 0xaa, 0x94, 0xbd, 0xb2, 0x57, 0xae, 0x9d, 0x3a, 0x5c, 0xb0, 0x9e, 0x73, 0xff,
		0x66, 0xfd, 0x7d, 0x19, 0x46, 0xf6, 0xe7, 0x91, 0x94, 0xb2, 0xa2, 0x1c, 0x64, 0x54, 0x8b, 0x99,
		0x57, 0xcd, 0x74, 0xaa, 0xc5, 0x28, 0x14, 0x42, 0x71, 0xf4, 0xca, 0xc5, 0xfc, 0x3e, 0xdb, 0xa3,
		0xc5, 0x82, 0x31, 0xd9, 0x09, 0x5a, 0x37, 0xf0, 0x85, 0x7f, 0xef, 0x27, 0x4c, 0xbe, 0x6c, 0xcc,
		0x8a, 0x36, 0x0c, 0x17, 0x8f, 0xa9, 0xa0, 0x78, 0x0c, 0xa1, 0x7d, 0xda, 0xe3, 0xe2, 0x31, 0xfe,
		0xc3, 0x70, 0xd9, 0x09, 0xde, 0xd3, 0x90, 0xc6, 0x67, 0xda, 0xb0, 0x49, 0xa3, 0x6b, 0x95, 0x0a,
		0x48, 0x34, 0x48, 0xf4, 0x31, 0x93, 0xe8, 0x01, 0x0f, 0x45, 0xad, 0xaa, 0xc1, 0xa1, 0x15, 0x2e,
		0x1b, 0xd2, 0xbc, 0x64, 0x48, 0xef, 0x66, 0x48, 0x7d, 0x9e, 0x99, 0x5d, 0x26, 0xa4, 0x79, 0x91,
		0x05, 0xf9, 0xcd, 0x18, 0x74, 0x37, 0x62, 0xbc, 0xe8, 0xdd, 0x99, 0x49, 0x39, 0xc6, 0xa3, 0x3f,
		0x87, 0x3b, 0xd2, 0x07, 0x51, 0xa7, 0xfb, 0x90, 0x94, 0xae, 0xe6, 0xe6, 0x7b, 0x29, 0x6b, 0x90,
		0xc0, 0x68, 0x25, 0x30, 0xe5, 0xf1, 0x46, 0xb8, 0x2b, 0xc7, 0x60, 0x07, 0xcf, 0xa1, 0xdf, 0x1b,
		0x67, 0x94, 0x72, 0x9d, 0x70, 0xd7, 0x62, 0x43, 0x96, 0x91, 0x70, 0x15, 0x48, 0x18, 0x48, 0xd8,
		0x28, 0x12, 0x7e, 0xf0, 0x07, 0x0f, 0x0c, 0x50, 0x58, 0x09, 0xa6, 0x01, 0x09, 0x1b, 0x47, 0xc2,
		0x54, 0xf7, 0xf2, 0x01, 0x0b, 0x03, 0x0b, 0x03, 0x0b, 0x03, 0x0b, 0x1f, 0x31, 0x16, 0x4e, 0x4f,
		0x50, 0xc7, 0xec, 0x81, 0x27, 0x22, 0x4e, 0xc3, 0x5a, 0x74, 0xe8, 0x78, 0x7d, 0xd3, 0xc0, 0xcb,
		0xc0, 0xcb, 0xc0, 0xcb, 0xc0, 0xcb, 0xc0, 0xcb, 0xc0, 0xcb, 0xc0, 0xcb, 0xc7, 0x89, 0x97, 0xcf,
		0x81, 0x97, 0xad, 0xe2, 0xe5, 0x73, 0xe0, 0x65, 0x1d, 0xbc, 0x3c, 0x4d, 0x2a, 0x4a, 0xeb, 0x11,
		0xa8, 0xa3, 0xe3, 0xc5, 0x86, 0xd4, 0xb0, 0xb0, 0x87, 0x2c, 0x0a, 0x60, 0x61, 0x13, 0x1e, 0x48,
		0x36, 0xe5, 0x29, 0x7b, 0xd0, 0x0f, 0x82, 0x98, 0x25, 0x89, 0xfe, 0x75, 0x8f, 0x93, 0x86, 0x14,
		0x47, 0x58, 0x8d, 0x2c, 0x6a, 0x6f, 0x14, 0x8a, 0x0d, 0x43, 0xb6, 0x71, 0x4c, 0xfa, 0x43, 0xad,
		0x8d, 0x64, 0xc7, 0x19, 0x2a, 0x6e, 0x2c, 0x4d, 0xb7, 0xa6, 0xb8, 0x5e, 0x94, 0xc9, 0xe7, 0xd2,
		0x6a, 0xe9, 0xf9, 0x6d, 0x57, 0x6f, 0xf3, 0xcc, 0x79, 0x98, 0x96, 0x46, 0x1b, 0x37, 0xbe, 0x10,
		0x2c, 0x0e, 0x95, 0x11, 0x68, 0xd6, 0xd0, 0xd7, 0x8a, 0x7b, 0xe1, 0xbb, 0x9d, 0x2b, 0xf7, 0xc3,
		0xdd, 0xaf, 0xea, 0xcb, 0x6b, 0x77, 0xfe, 0xe7, 0x37, 0xbf, 0xce, 0x5f, 0xd4, 0xe7, 0xf9, 0xce,
		0xea, 0x3c, 0x13, 0x40, 0x7b, 0x42, 0x88, 0xaf, 0x0f, 0xf5, 0x57, 0x42, 0xfe, 0xf5, 0x20, 0x54,
		0xd3, 0x60, 0x50, 0x5a, 0x33, 0x93, 0x28, 0xdf, 0x98, 0x81, 0x5b, 0x8b, 0xfa, 0x37, 0x0c, 0xb9,
		0x76, 0x87, 0x2f, 0x27, 0xbb, 0x79, 0xfa, 0xce, 0xd6, 0x05, 0xc5, 0x0a, 0x98, 0x74, 0x72, 0xa6,
		0xc0, 0xe5, 0x81, 0x3e, 0xd6, 0x99, 0x6d, 0x0c, 0x78, 0x07, 0x78, 0x07, 0x78, 0x47, 0x62, 0xb5,
		0x28, 0xa7, 0x6b, 0x2f, 0xee, 0x9d, 0xa6, 0x46, 0x13, 0x7a, 0x1a, 0x3c, 0xa1, 0x1b, 0xa6, 0xd0,
		0xe4, 0xb3, 0xc6, 0x88, 0xb4, 0xf9, 0xac, 0x3d, 0x6a, 0xdd, 0x78, 0xba, 0x16, 0xa8, 0xf4, 0x63,
		0xcd, 0x65, 0x3d, 0x3f, 0x15, 0x04, 0xda, 0xfd, 0xd2, 0x54, 0x50, 0x69, 0xf8, 0xfb, 0x38, 0x27,
		0xfb, 0x05, 0x43, 0x40, 0x10, 0x40, 0x10, 0x40, 0x10, 0x8e, 0x96, 0x20, 0x8c, 0xea, 0x15, 0x0b,
		0x1d, 0x98, 0x33, 0xbd, 0x59, 0x78, 0xda, 0x16, 0xe8, 0x01, 0xe8, 0x01, 0xe8, 0x81, 0xd4, 0xde,
		0x19, 0xf4, 0xd8, 0x28, 0xf1, 0x8c, 0x42, 0x0e, 0xad, 0x6b, 0xb4, 0xf1, 0x3e, 0x1c, 0xf4, 0xf4,
		0x57, 0xdd, 0x6d, 0xf4, 0x45, 0x28, 0x5d, 0x54, 0xbe, 0xb2, 0xb5, 0xca, 0xb4, 0xc4, 0x3a, 0x85,
		0xeb, 0xf5, 0x66, 0x32, 0xff, 0xf4, 0xfc, 0x8a, 0x26, 0x02, 0x2f, 0xdd, 0x46, 0x1f, 0x43, 0x41,
		0x33, 0x46, 0x93, 0xf7, 0x91, 0x8e, 0xb7, 0xae, 0x6c, 0x6d, 0x3c, 0xd8, 0x97, 0x4e, 0x65, 0x47,
		0x5e, 0xf3, 0x05, 0x78, 0x16, 0x78, 0x16, 0x78, 0x16, 0x78, 0x56, 0x6a, 0xfc, 0xfb, 0x51, 0x2c,
		0xdc, 0x9e, 0xdf, 0xd7, 0x47, 0xb3, 0x59, 0x4b, 0x7a, 0x58, 0xd6, 0x3b, 0x18, 0x2c, 0x9b, 0x22,
		0xfb, 0x04, 0x88, 0x56, 0x09, 0xd1, 0x8e, 0x07, 0x6f, 0x4f, 0xbc, 0xa1, 0x6a, 0x5e, 0x4d, 0xd6,
		0x40, 0xcf, 0xef, 0xeb, 0x91, 0xca, 0xa5, 0x25, 0x98, 0xb5, 0xa8, 0x39, 0x33, 0xe3, 0x6d, 0xa9,
		0x9b, 0x5b, 0xac, 0xbb, 0x3d, 0x29, 0xb7, 0xa9, 0xa1, 0xed, 0x6a, 0xc3, 0xb1, 0x93, 0x6c, 0x5f,
		0xbb, 0x5e, 0x9d, 0x64, 0x3b, 0x13, 0xb9, 0x70, 0xcd, 0xb5, 0xa7, 0xbb, 0xcd, 0x17, 0xa9, 0x87,
		0x3b, 0x9f, 0x2e, 0xaa, 0x72, 0x2e, 0x6b, 0xfb, 0xda, 0x5e, 0xdb, 0x15, 0xd1, 0x5c, 0x8f, 0x0d,
		0x44, 0x9d, 0xa8, 0x39, 0x2a, 0x43, 0x61, 0xc2, 0x60, 0x18, 0x36, 0x1c, 0xa6, 0x0c, 0x88, 0x71,
		0x43, 0x62, 0xdc, 0xa0, 0x98, 0x37, 0x2c, 0x34, 0x06, 0x86, 0xc8, 0xd0, 0x90, 0x1b, 0x1c, 0x8b,
		0x86, 0xc7, 0xba, 0x01, 0x22, 0x22, 0x10, 0xd6, 0x0c, 0x92, 0x49, 0xc3, 0x64, 0xc9, 0x40, 0x99,
		0x36, 0x54, 0xd6, 0x0c, 0x96, 0x35, 0xc3, 0x65, 0xcf, 0x80, 0xd1, 0x1a, 0x32, 0x62, 0x83, 0x66,
		0xcc, 0xb0, 0x65, 0x0d, 0xb7, 0xa3, 0x50, 0xc4, 0x51, 0xd7, 0x65, 0x5d, 0x36, 0x1e, 0x66, 0x43,
		0x4b, 0x73, 0xb2, 0xc3, 0x16, 0x3b, 0x34, 0xb4, 0x6e, 0xf4, 0x22, 0x7d, 0x3b, 0x33, 0x72, 0x36,
		0x8c, 0x9d, 0x65, 0xa3, 0x67, 0xcb, 0xf8, 0x59, 0x37, 0x82, 0xd6, 0x8d, 0xa1, 0x7d, 0xa3, 0x68,
		0xc6, 0x38, 0x1a, 0x32, 0x92, 0xd9, 0xf0, 0xdc, 0x52, 0x08, 0x43, 0xb9, 0x76, 0x0e, 0x4d, 0x54,
		0x35, 0x37, 0x52, 0xab, 0x1b, 0xec, 0x83, 0x24, 0x2a, 0xbb, 0x7d, 0x6a, 0x28, 0xa3, 0xb6, 0x5b,
		0x7b, 0x4b, 0xa3, 0xba, 0x9d, 0x28, 0xfe, 0xe1, 0xc7, 0x41, 0xc9, 0x68, 0x77, 0x2f, 0xa7, 0xa6,
		0xc7, 0xed, 0xa3, 0x41, 0xe7, 0x3c, 0xd7, 0xd5, 0x64, 0xbc, 0x74, 0x23, 0xb3, 0xbb, 0xb1, 0x29,
		0xfb, 0x67, 0xad, 0x08, 0x23, 0xc3, 0x5b, 0xfb, 0xa2, 0x8b, 0x1c, 0x6f, 0xfb, 0x63, 0x61, 0xa1,
		0x4e, 0x8c, 0xf0, 0xba, 0xfa, 0x57, 0x86, 0xdd, 0xbe, 0x4d, 0x4c, 0xb3, 0x0a, 0xdb, 0x50, 0xc7,
		0xac, 0x0b, 0x07, 0x73, 0x56, 0xc2, 0x9d, 0xb5, 0x93, 0x6d, 0xfc, 0xab, 0xbc, 0xec, 0xa9, 0x35,
		0xbc, 0x3b, 0xd9, 0x8f, 0xef, 0x5b, 0x6c, 0x02, 0xae, 0x78, 0xd3, 0x51, 0xee, 0xf6, 0xb5, 0x6e,
		0x44, 0x5a, 0xbe, 0xe3, 0xe7, 0x6c, 0xa1, 0xb0, 0xc6, 0xd9, 0x24, 0xdb, 0xe0, 0x6c, 0x12, 0xe7,
		0x3c, 0x5b, 0xab, 0x33, 0x9e, 0xd9, 0x52, 0x20, 0x1d, 0xbd, 0x5b, 0x99, 0x3e, 0x4c, 0xbe, 0xde,
		0xbb, 0xf1, 0x4b, 0x4f, 0x7f, 0xf3, 0x7e, 0xf8, 0xce, 0xdf, 0x6f, 0xa2, 0x58, 0x5c, 0xfb, 0xfd,
		0xef, 0xef, 0x46, 0xef, 0x33, 0xf7, 0xaf, 0x9c, 0x9a, 0x2e, 0xbd, 0x1c, 0xa8, 0xa4, 0x6e, 0x68,
		0xe1, 0x17, 0x69, 0xc1, 0xd3, 0x2c, 0x84, 0x97, 0x42, 0x9c, 0xb6, 0x9a, 0xbc, 0x64, 0xcc, 0x12,
		0x16, 0x3f, 0xe9, 0xd5, 0xb0, 0xdc, 0x2e, 0x1c, 0x6d, 0xe8, 0x0c, 0xd1, 0xd2, 0x82, 0xea, 0x72,
		0x88, 0x96, 0xee, 0x4e, 0x57, 0x3b, 0x92, 0x68, 0xa9, 0x49, 0xe3, 0xb3, 0x03, 0x23, 0xb4, 0xa4,
		0xc3, 0x21, 0x62, 0x8a, 0x88, 0x69, 0x51, 0xd9, 0x33, 0x22, 0xa6, 0x66, 0x8c, 0x5b, 0xd6, 0x30,
		0x22, 0xa6, 0x85, 0x32, 0x72, 0x36, 0x8c, 0x9d, 0x65, 0xa3, 0x67, 0x5b, 0x5d, 0x44, 0xc4, 0x74,
		0x5f, 0xf4, 0x3c, 0x44, 0x4c, 0x25, 0x91, 0x1a, 0x22, 0xa6, 0x72, 0xbd, 0xcd, 0x45, 0x4c, 0x2d,
		0xc4, 0x4f, 0xbc, 0x69, 0x11, 0x60, 0x04, 0x68, 0x73, 0x76, 0x35, 0x1e, 0x2e, 0x72, 0x1e, 0xb2,
		0xba, 0x33, 0x44, 0x83, 0xad, 0x5a, 0x62, 0x44, 0x83, 0x35, 0x1d, 0x4c, 0xab, 0xdc, 0x5a, 0x79,
		0x26, 0x16, 0xd1, 0xe0, 0xfd, 0x86, 0x70, 0x2b, 0xa1, 0xdc, 0xda, 0xc9, 0x46, 0x34, 0x78, 0xcd,
		0x1f, 0x44, 0x83, 0x49, 0xd6, 0xe0, 0xc1, 0x46, 0x83, 0x57, 0xa8, 0xa8, 0x67, 0xf6, 0x14, 0x56,
		0xc7, 0x6e, 0x44, 0xf8, 0xf3, 0xf4, 0x85, 0x10, 0x13, 0xde, 0xfd, 0xf2, 0x2f, 0xd6, 0xb2, 0x3f,
		0xc4, 0xa8, 0x30, 0xdd, 0xfd, 0x86, 0xdb, 0x25, 0x32, 0xe2, 0x7b, 0x0f, 0xb7, 0x51, 0x7d, 0x44,
		0x88, 0x11, 0x21, 0x46, 0x84, 0x98, 0xd8, 0xd0, 0x1b, 0x8b, 0x10, 0x9b, 0x37, 0x44, 0x3b, 0x33,
		0x48, 0x4b, 0x1a, 0x24, 0xa2, 0xc5, 0x88, 0x16, 0x17, 0x95, 0x5d, 0x23, 0x5a, 0x6c, 0xc6, 0xd0,
		0x65, 0x0d, 0x23, 0x5a, 0x5c, 0x28, 0x23, 0x67, 0xc3, 0xd8, 0x59, 0x36, 0x7a, 0xb6, 0xd5, 0x47,
		0x44, 0x8b, 0xf7, 0x45, 0xef, 0x43, 0xb4, 0x58, 0x12, 0xa9, 0x21, 0x5a, 0x2c, 0xd7, 0x5b, 0x65,
		0x14, 0x79, 0x18, 0x42, 0x69, 0x16, 0x33, 0x1c, 0xb1, 0xcd, 0xdb, 0xd5, 0xcc, 0x90, 0x21, 0xae,
		0x6a, 0xc7, 0x66, 0x21, 0xae, 0xaa, 0x69, 0x8a, 0xd7, 0xdd, 0x9a, 0x8d, 0xb8, 0xea, 0x7e, 0x83,
		0x9d, 0x95, 0xa0, 0x67, 0xed, 0x64, 0x23, 0xae, 0xba, 0xe6, 0x0f, 0xe2, 0xaa, 0x24, 0x6b, 0xf0,
		0x60, 0xe3, 0xaa, 0x6b, 0x55, 0xc7, 0x33, 0xdb, 0xba, 0xa4, 0x63, 0x37, 0xc6, 0xfa, 0x67, 0xd7,
		0x0f, 0x3f, 0xcf, 0xbc, 0x15, 0x02, 0xad, 0xbb, 0xdf, 0x0f, 0x45, 0xdc, 0x07, 0x87, 0x14, 0x6e,
		0x9d, 0xb9, 0x7b, 0xdc, 0x52, 0xb4, 0x75, 0x6b, 0x8f, 0x08, 0xb6, 0x16, 0x54, 0xc6, 0x43, 0xb0,
		0x75, 0x77, 0x32, 0xdc, 0x81, 0x07, 0x5b, 0xad, 0x99, 0xa1, 0x5d, 0x99, 0xa3, 0x25, 0x01, 0x0f,
		0xa1, 0x56, 0x84, 0x5a, 0x8b, 0x4a, 0xb8, 0x11, 0x6a, 0x35, 0x63, 0xe6, 0xb2, 0x86, 0x11, 0x6a,
		0x2d, 0x94, 0x91, 0xb3, 0x61, 0xec, 0x2c, 0x1b, 0x3d, 0xdb, 0x82, 0x24, 0x42, 0xad, 0xfb, 0x22,
		0x01, 0x22, 0xd4, 0x2a, 0x89, 0xd4, 0x10, 0x6a, 0x95, 0xeb, 0x6d, 0x31, 0xd4, 0x6a, 0xeb, 0x6c,
		0x6e, 0x18, 0x09, 0x17, 0x11, 0x5e, 0xe9, 0xae, 0x16, 0x86, 0xcd, 0xce, 0x59, 0x5d, 0x84, 0x95,
		0xad, 0xdb, 0x67, 0x84, 0x95, 0x35, 0xdd, 0x4e, 0xab, 0xdc, 0x2a, 0xd7, 0x11, 0x56, 0x36, 0xde,
		0x77, 0x61, 0xc2, 0xca, 0x75, 0x84, 0x95, 0x25, 0xfe, 0x20, 0xac, 0x4c, 0xb2, 0x06, 0x0f, 0x2e,
		0xac, 0xbc, 0x4d, 0x60, 0x3d, 0xb3, 0xac, 0xc0, 0x3a, 0x96, 0x82, 0xca, 0xd7, 0x7e, 0xfb, 0x6a,
		0xf4, 0x56, 0x88, 0x29, 0x17, 0x6b, 0x33, 0x14, 0x70, 0x13, 0x1c, 0x52, 0x48, 0x39, 0x19, 0x4e,
		0x99, 0x95, 0x0b, 0x70, 0xd7, 0xf6, 0x84, 0x10, 0x72, 0x41, 0xe5, 0x49, 0x84, 0x90, 0x77, 0x27,
		0x2f, 0x1e, 0x78, 0x08, 0xd9, 0xb8, 0xd9, 0xb1, 0x6d, 0x7e, 0x96, 0x84, 0x48, 0x84, 0x8c, 0x11,
		0x32, 0x2e, 0x2a, 0x99, 0x46, 0xc8, 0xd8, 0x8c, 0x59, 0xcb, 0x1a, 0x6e, 0x47, 0x61, 0xc8, 0xda,
		0x29, 0x66, 0xe4, 0x01, 0x0b, 0x05, 0xef, 0x70, 0x16, 0x5b, 0x09, 0x1c, 0xaf, 0xe8, 0x16, 0xe1,
		0x63, 0xdb, 0x86, 0xcf, 0xb2, 0x01, 0xb4, 0x2d, 0x3c, 0x22, 0x7c, 0xbc, 0x2f, 0x52, 0xdf, 0xfe,
		0x87, 0x8f, 0x53, 0x76, 0x1e, 0x0e, 0x7a, 0xf7, 0x2c, 0x4e, 0xa7, 0xc0, 0x42, 0x0c, 0xb9, 0x69,
		0xb0, 0x8b, 0xcf, 0x7e, 0xf8, 0x70, 0x10, 0x71, 0x96, 0x6b, 0x1e, 0xda, 0x0b, 0x70, 0xfc, 0xe9,
		0x77, 0x07, 0xcc, 0x4e, 0xb0, 0x33, 0xed, 0xef, 0x43, 0xec, 0xa7, 0x5e, 0xf4, 0x1d, 0x7f, 0xe0,
		0x22, 0x31, 0xe7, 0x83, 0x96, 0x57, 0x3d, 0x7b, 0xf0, 0x05, 0x7f, 0x1a, 0xbe, 0x6b, 0xc7, 0xef,
		0x26, 0xcc, 0x7c, 0xfc, 0xc2, 0x42, 0x38, 0xec, 0xda, 0xff, 0x69, 0x7f, 0xa9, 0xd4, 0x2b, 0x17,
		0xe7, 0x58, 0x2d, 0x7b, 0xe1, 0xa4, 0xcc, 0xb7, 0x7e, 0x87, 0xd8, 0xff, 0x9a, 0xbe, 0x0e, 0x36,
		0xf6, 0xef, 0x9d, 0x3a, 0xe9, 0x7f, 0xaa, 0xc8, 0x01, 0x30, 0xde, 0x77, 0x61, 0x72, 0x00, 0x36,
		0x4e, 0x3a, 0xac, 0xa3, 0x5d, 0xeb, 0x78, 0xb2, 0x07, 0xf6, 0x16, 0xb9, 0xfd, 0x10, 0x67, 0x20,
		0xce, 0x40, 0x9c, 0x81, 0x38, 0xa3, 0xb4, 0x73, 0x90, 0xdb, 0x2f, 0x3b, 0x35, 0x47, 0x73, 0xe9,
		0x96, 0x85, 0xee, 0xaa, 0x33, 0xaf, 0xe7, 0xe2, 0xae, 0x2f, 0xa9, 0xae, 0x76, 0x75, 0xd7, 0x97,
		0xbd, 0xde, 0xdc, 0xec, 0x15, 0xab, 0x38, 0xb1, 0x00, 0xd5, 0x62, 0x4f, 0x54, 0x0b, 0xa8, 0x15,
		0x47, 0xa4, 0x56, 0x40, 0xa5, 0x38, 0x44, 0x95, 0x02, 0x27, 0x16, 0xac, 0x26, 0x6b, 0xaf, 0xcb,
		0xeb, 0x3b, 0xb3, 0x94, 0xf0, 0xe7, 0x58, 0x3a, 0xa1, 0xf0, 0x25, 0x7d, 0x9d, 0xb9, 0x7f, 0xc4,
		0xd1, 0x84, 0xdd, 0xae, 0xfa, 0x02, 0xad, 0xf6, 0x03, 0x3c, 0x92, 0x60, 0xf1, 0x4e, 0xb1, 0xad,
		0x3d, 0xe2, 0x88, 0x82, 0xf6, 0x18, 0xe3, 0x88, 0x82, 0x5d, 0x18, 0x8a, 0x23, 0x0a, 0xfb, 0x62,
		0x86, 0x76, 0x65, 0x8e, 0x16, 0xcd, 0x12, 0x8e, 0x2c, 0xe0, 0xc8, 0x42, 0x61, 0xd9, 0x34, 0x8e,
		0x2c, 0x98, 0x31, 0x73, 0x33, 0x9a, 0xda, 0xc8, 0xd0, 0xc4, 0xae, 0x1f, 0xf4, 0x78, 0xe8, 0x8e,
		0x03, 0xd5, 0xe6, 0x23, 0xe2, 0xeb, 0x3a, 0x46, 0x64, 0xdc, 0xb6, 0xf1, 0xb3, 0x6c, 0x04, 0x6d,
		0xab, 0x8f, 0x88, 0x8c, 0xef, 0x8b, 0xde, 0x87, 0xc8, 0xb8, 0x24, 0x72, 0x43, 0x64, 0x5c, 0xae,
		0xb7, 0x51, 0x64, 0x9c, 0xff, 0x64, 0x81, 0x1b, 0xb2, 0x1f, 0x2e, 0x7f, 0x08, 0x23, 0x9b, 0xc5,
		0xef, 0xa6, 0x3d, 0xf7, 0xe3, 0xa8, 0xef, 0x3f, 0xf8, 0xc2, 0x4e, 0xe7, 0x93, 0x88, 0xf9, 0x3d,
		0x0f, 0x02, 0x16, 0xda, 0xe8, 0xb1, 0x36, 0xaa, 0xf5, 0x17, 0xf7, 0xfc, 0x2e, 0x62, 0xf3, 0x39,
		0xbb, 0x5a, 0x5e, 0x97, 0x96, 0x02, 0xe7, 0xab, 0x56, 0xa5, 0xb5, 0x0c, 0x81, 0xf1, 0x9a, 0xbc,
		0x74, 0xaa, 0xa7, 0x36, 0xca, 0x28, 0xa6, 0x2b, 0xf2, 0xd2, 0xa9, 0x21, 0x37, 0xc0, 0x82, 0xdf,
		0x45, 0x6e, 0x80, 0x26, 0x9c, 0x68, 0x95, 0x5b, 0x65, 0x9c, 0x64, 0x30, 0xdf, 0x77, 0x61, 0x72,
		0x03, 0x70, 0x82, 0x41, 0xe6, 0xcf, 0x31, 0x9f, 0x60, 0x48, 0x55, 0x62, 0x11, 0xfb, 0x61, 0xd2,
		0xe3, 0x62, 0xe4, 0xb1, 0x0d, 0x0b, 0x36, 0x4b, 0x3d, 0x42, 0xa9, 0x81, 0x52, 0x03, 0xa5, 0x06,
		0x4a, 0x0d, 0x94, 0x1a, 0x28, 0x35, 0x46, 0x94, 0x1a, 0xe1, 0x3f, 0x3c, 0x58, 0x94, 0x67, 0x06,
		0xe1, 0xb8, 0x43, 0x28, 0x16, 0xf9, 0xba, 0x1a, 0x0f, 0x97, 0x1d, 0x99, 0x22, 0x9b, 0x9d, 0x4b,
		0xc7, 0x03, 0x7b, 0x07, 0x7b, 0x07, 0x7b, 0x07, 0x7b, 0x07, 0x7b, 0x07, 0x7b, 0x37, 0xcf, 0xde,
		0x91, 0xd9, 0xbf, 0x8b, 0x5c, 0xe7, 0xf5, 0x37, 0xdc, 0x5b, 0xce, 0x93, 0x73, 0xac, 0x66, 0xfa,
		0xe3, 0x7e, 0xfb, 0xe2, 0x6d, 0x86, 0x02, 0x6e, 0x82, 0xc2, 0x24, 0xfe, 0x9f, 0xec, 0x70, 0xde,
		0xa9, 0xe7, 0xdb, 0xfe, 0x3c, 0xeb, 0x4d, 0xa3, 0xfa, 0xe0, 0x6b, 0x0c, 0xfc, 0xa8, 0x34, 0x67,
		0xcc, 0x3a, 0xda, 0x43, 0x3e, 0x5f, 0xec, 0x73, 0xd8, 0xa2, 0xe6, 0x72, 0xa0, 0x51, 0x8e, 0xc9,
		0x14, 0x62, 0x4a, 0x25, 0xd8, 0x90, 0xe2, 0x4b, 0xcd, 0x13, 0x8c, 0x29, 0xb8, 0xc6, 0x40, 0xbe,
		0x39, 0x45, 0x76, 0xb7, 0xa6, 0x91, 0x4c, 0x49, 0x35, 0x59, 0x92, 0x97, 0xb0, 0xf4, 0x2e, 0x71,
		0x89, 0x5d, 0x42, 0xf0, 0x60, 0xa2, 0x64, 0xae, 0xa9, 0xd2, 0xb8, 0xc6, 0x8b, 0x9a, 0x9a, 0x2b,
		0x5e, 0x4a, 0x48, 0xac, 0x8c, 0x94, 0xae, 0x35, 0x58, 0xa2, 0x76, 0x9f, 0x67, 0xad, 0x20, 0x38,
		0xf6, 0x6e, 0xa7, 0xc6, 0xda, 0x80, 0xd4, 0x6a, 0x40, 0x52, 0x35, 0x70, 0x3a, 0xd4, 0x42, 0xf1,
		0x13, 0x1b, 0x47, 0x45, 0x4d, 0x49, 0x9e, 0x76, 0x4f, 0x8b, 0x9a, 0x2f, 0x4e, 0x72, 0x20, 0xbb,
		0xfd, 0xc4, 0xee, 0x93, 0x8a, 0xd6, 0x65, 0xb8, 0x40, 0x09, 0xd8, 0x55, 0xe9, 0x0f, 0x9e, 0x88,
		0x2b, 0x21, 0xf4, 0xce, 0x9f, 0x0d, 0x51, 0xd0, 0xfb, 0x51, 0xed, 0x53, 0x4d, 0xff, 0x34, 0x74,
		0xce, 0x33, 0x2d, 0x79, 0xad, 0x7a, 0xbd, 0xd1, 0xac, 0xd7, 0x2b, 0xcd, 0x5a, 0xb3, 0x72, 0x71,
		0x7e, 0xee, 0x35, 0x3c, 0x0d, 0xef, 0x5a, 0xfa, 0x14, 0x07, 0x2c, 0x66, 0xc1, 0xdb, 0xe1, 0xc8,
		0x85, 0x83, 0x6e, 0xd7, 0xea, 0x84, 0x11, 0xc9, 0x19, 0xd6, 0x64, 0x0c, 0x0d, 0x6b, 0x67, 0x41,
		0x50, 0x55, 0x33, 0x5b, 0xf2, 0x5b, 0x54, 0x61, 0xb6, 0xd3, 0xa3, 0xde, 0x03, 0xf5, 0xa3, 0xe4,
		0x73, 0x47, 0xc6, 0x07, 0xaa, 0x42, 0x80, 0xa6, 0x5e, 0x32, 0xd5, 0x49, 0x14, 0x53, 0xf7, 0x29,
		0xf4, 0x91, 0x79, 0x5d, 0x44, 0x67, 0x41, 0x12, 0xc1, 0x04, 0x72, 0x05, 0x84, 0x1c, 0x03, 0x2c,
		0x2b, 0x1e, 0xa5, 0x3d, 0x71, 0x68, 0xda, 0x9a, 0x06, 0x71, 0xf6, 0x17, 0x45, 0x76, 0x17, 0x4d,
		0xf6, 0x16, 0x6d, 0x76, 0xd6, 0x28, 0xfb, 0x2a, 0x12, 0x8f, 0x24, 0x05, 0x5d, 0x47, 0xc9, 0x55,
		0x3c, 0x7c, 0xf2, 0xbb, 0x9c, 0x22, 0x99, 0x6b, 0x74, 0x9c, 0xad, 0xcb, 0xfc, 0x38, 0x24, 0x49,
		0x0e, 0x1b, 0x1d, 0x56, 0x4b, 0x58, 0xb7, 0x43, 0xd1, 0x58, 0x7d, 0xd8, 0x58, 0xef, 0xa1, 0x27,
		0x4a, 0xbb, 0x95, 0xff, 0xc8, 0xb2, 0xc0, 0xb2, 0x99, 0x23, 0x11, 0x9b, 0xb2, 0x79, 0x23, 0x39,
		0xf0, 0x35, 0x1a, 0x68, 0x92, 0xca, 0x4a, 0xe3, 0xe5, 0x4e, 0x22, 0x9d, 0x8c, 0x16, 0x93, 0xee,
		0x29, 0x33, 0xeb, 0x34, 0xc3, 0x0a, 0xf2, 0x79, 0xe2, 0x01, 0x01, 0xee, 0x49, 0x5b, 0xd9, 0x31,
		0xea, 0xa9, 0x00, 0xf5, 0x00, 0xf5, 0xec, 0x15, 0xea, 0x79, 0xe2, 0x81, 0x1b, 0xfb, 0xe1, 0x03,
		0xd3, 0x8d, 0xdf, 0x64, 0xc0, 0xa7, 0xa5, 0xd1, 0xc6, 0x8d, 0x2f, 0x04, 0x8b, 0x43, 0x6d, 0x79,
		0xb2, 0xf4, 0xfa, 0xab, 0xe7, 0x5e, 0xdc, 0x7d, 0xad, 0xb8, 0x17, 0x77, 0xbf, 0x2a, 0xa7, 0xb5,
		0x97, 0xd7, 0xee, 0xc2, 0x2f, 0xde, 0xfc, 0xf6, 0xfa, 0x74, 0xfb, 0x67, 0xde, 0xfc, 0xfd, 0x8d,
		0xfa, 0x92, 0xb8, 0xb3, 0xba, 0x24, 0x08, 0xf5, 0x62, 0x42, 0x9d, 0x98, 0x30, 0xd6, 0xe8, 0x55,
		0xcb, 0xcd, 0x72, 0x73, 0x85, 0x16, 0xe9, 0x56, 0x2b, 0x5e, 0xab, 0xe0, 0x81, 0x6f, 0x6a, 0x35,
		0xd8, 0x4e, 0xec, 0x7b, 0xcb, 0x90, 0xef, 0x3a, 0x1c, 0x6e, 0x7b, 0x67, 0x9e, 0x98, 0x7d, 0x42,
		0x72, 0xe7, 0x4f, 0xb4, 0xdc, 0x89, 0x24, 0xe7, 0xf2, 0xc0, 0x19, 0x62, 0x20, 0xc7, 0x0f, 0x82,
		0x98, 0x25, 0xb2, 0x58, 0x48, 0x4f, 0xd3, 0xd5, 0xd7, 0x72, 0x8d, 0x68, 0xb8, 0x7a, 0xda, 0xad,
		0xec, 0x84, 0x68, 0x6a, 0xb5, 0xa6, 0x35, 0xda, 0x92, 0x92, 0x28, 0x69, 0x4a, 0x92, 0x95, 0xb3,
		0x1e, 0xf9, 0x77, 0x92, 0xc4, 0xa4, 0x95, 0x7a, 0x7e, 0xdb, 0x1d, 0xef, 0x16, 0x9a, 0xba, 0x9e,
		0x99, 0xb3, 0xda, 0xda, 0xb2, 0xec, 0x5e, 0x57, 0x22, 0x28, 0xca, 0x72, 0xac, 0x0e, 0x21, 0xd1,
		0x26, 0x22, 0xba, 0x7e, 0x98, 0x8c, 0x78, 0x90, 0x39, 0x59, 0x0a, 0xa2, 0x61, 0xd6, 0x97, 0x28,
		0x13, 0x8a, 0x6c, 0xb6, 0x1f, 0xfc, 0xc1, 0x03, 0xab, 0x55, 0x55, 0xe6, 0x5b, 0x3d, 0xe3, 0x4b,
		0x33, 0xc3, 0x4b, 0x2f, 0x76, 0xa9, 0xcf, 0x90, 0x27, 0xe9, 0x3f, 0xba, 0x49, 0xa5, 0xd4, 0xb9,
		0x3e, 0x74, 0xb9, 0x3d, 0x2f, 0x7a, 0x41, 0x5d, 0xba, 0x21, 0xae, 0x57, 0x2f, 0xea, 0x17, 0x8d,
		0x66, 0x55, 0x37, 0xcf, 0xaa, 0xc8, 0x63, 0x6d, 0x09, 0xd5, 0xde, 0x19, 0xb5, 0x44, 0x04, 0x3c,
		0xb6, 0xc4, 0x3b, 0x6e, 0x87, 0xf9, 0x62, 0x10, 0xef, 0xc4, 0x34, 0x64, 0x01, 0xa5, 0x9f, 0x82,
		0x85, 0x01, 0x0b, 0x66, 0xae, 0x68, 0x48, 0x58, 0xfc, 0xc4, 0xdb, 0x5a, 0x69, 0xda, 0x26, 0xe4,
		0xb9, 0x99, 0xf1, 0x2a, 0xb2, 0x44, 0xb7, 0x69, 0x40, 0x8b, 0xbf, 0x6b, 0x14, 0xbc, 0x9b, 0xbe,
		0x0e, 0x43, 0xb0, 0x8c, 0xbd, 0xea, 0x7a, 0x09, 0xe0, 0x5b, 0xd8, 0x2a, 0xb7, 0xca, 0x75, 0x03,
		0xa2, 0x8c, 0x89, 0x65, 0x4e, 0x25, 0xc2, 0x98, 0x5d, 0xe5, 0x3a, 0xe3, 0x7d, 0x68, 0xbe, 0xc3,
		0x08, 0xeb, 0x4b, 0xf8, 0xff, 0x32, 0x75, 0x66, 0x97, 0x3e, 0x0d, 0xf6, 0x06, 0xf6, 0x06, 0xf6,
		0x06, 0xf6, 0x06, 0xf6, 0x06, 0xf6, 0x06, 0xf6, 0x46, 0xcc, 0xde, 0x0a, 0x8f, 0x7a, 0x01, 0x6b,
		0x89, 0x61, 0x2d, 0x70, 0x6b, 0x2e, 0xdc, 0x3a, 0xaa, 0xff, 0xa0, 0x1d, 0x9b, 0x58, 0x68, 0x07,
		0x58, 0x16, 0x58, 0x16, 0x58, 0x16, 0x58, 0x16, 0x58, 0x16, 0x58, 0x16, 0x58, 0xf6, 0xd8, 0xb0,
		0xec, 0x48, 0x51, 0xf4, 0x00, 0x75, 0xad, 0x2a, 0xb8, 0x1e, 0x90, 0x30, 0x01, 0x12, 0xa6, 0xbb,
		0x8f, 0xd7, 0xd4, 0x7d, 0xbb, 0x40, 0xcb, 0x40, 0xcb, 0x40, 0xcb, 0x40, 0xcb, 0x40, 0xcb, 0x40,
		0xcb, 0x40, 0xcb, 0x87, 0x82, 0x96, 0xab, 0x40, 0xcb, 0x56, 0xd1, 0x72, 0x15, 0x68, 0x59, 0x07,
		0x2d, 0xaf, 0x06, 0xb3, 0xcf, 0xea, 0x20, 0x79, 0x5d, 0x83, 0x6a, 0xd8, 0xd8, 0x53, 0xc5, 0xc6,
		0x15, 0x60, 0x63, 0x60, 0xe3, 0x0d, 0x5f, 0xf0, 0x1d, 0x57, 0x3c, 0xcb, 0x34, 0x73, 0xa2, 0x4a,
		0xff, 0x58, 0xfa, 0x6c, 0x63, 0x38, 0x9d, 0x8e, 0xd3, 0xe9, 0x56, 0x37, 0x98, 0xa6, 0xbb, 0xdb,
		0xf9, 0xe9, 0xf4, 0x01, 0x0f, 0x85, 0x12, 0x37, 0x25, 0xe0, 0xa8, 0x44, 0x5c, 0x55, 0x1f, 0x99,
		0x92, 0x72, 0x57, 0x6a, 0x0e, 0x6b, 0x8c, 0x5f, 0xd1, 0xf3, 0x2c, 0x02, 0x6e, 0x4b, 0xca, 0x71,
		0x8d, 0x71, 0xdd, 0x7d, 0x9c, 0x93, 0xfd, 0x3a, 0x09, 0x8e, 0x1a, 0x0d, 0xeb, 0xb9, 0x33, 0x6a,
		0x34, 0x98, 0x42, 0x04, 0x6b, 0xe9, 0x33, 0x6a, 0x34, 0xa8, 0xf7, 0xa7, 0x52, 0xb0, 0x2a, 0xa5,
		0xbb, 0xa3, 0x82, 0x39, 0xda, 0xfc, 0x60, 0xa6, 0x2d, 0xd0, 0x03, 0xd0, 0x03, 0xd0, 0x03, 0xa9,
		0xbd, 0x83, 0x92, 0x9d, 0x1b, 0x5a, 0xab, 0x4c, 0x23, 0xda, 0x64, 0x35, 0x3b, 0x83, 0xe7, 0xd0,
		0xef, 0xf1, 0xf6, 0xc1, 0x54, 0xb2, 0x9c, 0xbc, 0x0f, 0x4d, 0x25, 0xcb, 0xf1, 0x60, 0x5f, 0x3a,
		0x95, 0xa3, 0xa8, 0x26, 0x0f, 0x3c, 0x0b, 0x3c, 0x0b, 0x3c, 0xbb, 0xff, 0x78, 0x36, 0x2b, 0xde,
		0xaf, 0x8d, 0x66, 0x35, 0xaf, 0x01, 0x50, 0x8c, 0x09, 0x15, 0x18, 0xcb, 0x6a, 0x5f, 0xcb, 0x77,
		0xcc, 0x88, 0x56, 0xf7, 0xda, 0x3d, 0xbb, 0xde, 0x50, 0x35, 0xde, 0x94, 0x35, 0x90, 0xdd, 0x00,
		0x4a, 0x76, 0x8b, 0x66, 0xd6, 0x22, 0xcd, 0x2d, 0x9a, 0xe7, 0xb8, 0x45, 0xb3, 0x08, 0x8e, 0x1d,
		0xb7, 0x68, 0xee, 0x92, 0x7c, 0xe8, 0x6e, 0xf3, 0x45, 0xea, 0xe1, 0xce, 0x97, 0x69, 0x54, 0x49,
		0x5f, 0xde, 0xbe, 0xb6, 0xd7, 0x76, 0x45, 0x34, 0xd7, 0x63, 0x03, 0x51, 0x27, 0x6a, 0x8e, 0xca,
		0x50, 0x98, 0x30, 0x18, 0x86, 0x0d, 0x87, 0x29, 0x03, 0x62, 0xdc, 0x90, 0x18, 0x37, 0x28, 0xe6,
		0x0d, 0x0b, 0x8d, 0x81, 0x21, 0x32, 0x34, 0xe4, 0x06, 0xc7, 0xa2, 0xe1, 0xb1, 0x6e, 0x80, 0x88,
		0x08, 0x84, 0x35, 0x83, 0x64, 0xd2, 0x30, 0x59, 0x32, 0x50, 0xa6, 0x0d, 0x95, 0x35, 0x83, 0x65,
		0xcd, 0x70, 0xd9, 0x33, 0x60, 0xb4, 0x86, 0x8c, 0xd8, 0xa0, 0x19, 0x33, 0x6c, 0x59, 0xc3, 0xed,
		0x28, 0x14, 0x71, 0xd4, 0x75, 0xd9, 0xa8, 0x9e, 0xb8, 0xb9, 0xa5, 0x39, 0xd9, 0x61, 0x8b, 0x1d,
		0x1a, 0x5a, 0x37, 0x7a, 0x91, 0xbe, 0x9d, 0x19, 0x39, 0x1b, 0xc6, 0xce, 0xb2, 0xd1, 0xb3, 0x65,
		0xfc, 0xac, 0x1b, 0x41, 0xeb, 0xc6, 0xd0, 0xbe, 0x51, 0x34, 0x63, 0x1c, 0x0d, 0x19, 0xc9, 0x6c,
		0x78, 0x6e, 0x29, 0x84, 0xa1, 0x5c, 0x3b, 0x87, 0x26, 0xaa, 0x9a, 0x1b, 0xa9, 0xd5, 0x0d, 0xf6,
		0x41, 0x12, 0x95, 0xdd, 0x3e, 0x35, 0x94, 0x51, 0xdb, 0xad, 0xbd, 0xa5, 0x51, 0xdd, 0x4e, 0x14,
		0xff, 0xf0, 0xe3, 0xa0, 0x64, 0xb4, 0xbb, 0x97, 0x53, 0xd3, 0xe3, 0xf6, 0xd1, 0xa0, 0x73, 0x9e,
		0xeb, 0x6a, 0x32, 0x5e, 0xba, 0x91, 0xd9, 0xdd, 0xd8, 0x94, 0xfd, 0xb3, 0x56, 0x84, 0x91, 0xe1,
		0xad, 0x7d, 0xd1, 0x45, 0x8e, 0xb7, 0xfd, 0xb1, 0xb0, 0x50, 0x27, 0x46, 0xb8, 0x55, 0x6e, 0x95,
		0x6b, 0xab, 0x2e, 0xde, 0x3f, 0x35, 0xff, 0x1d, 0x2c, 0x61, 0x9a, 0x55, 0xd8, 0x86, 0x3a, 0x66,
		0x5d, 0x38, 0x98, 0xb3, 0x12, 0xee, 0xac, 0x9d, 0x6c, 0xe3, 0x5f, 0xe5, 0x65, 0x4f, 0xad, 0xe1,
		0xdd, 0xc9, 0x7e, 0x7c, 0xdf, 0x62, 0x13, 0x70, 0xcd, 0x0b, 0xab, 0xb6, 0xb6, 0x4f, 0x7d, 0xa1,
		0xd5, 0x9a, 0x83, 0xa7, 0x67, 0x93, 0xac, 0x83, 0xb3, 0x49, 0xbc, 0xf3, 0x6c, 0xad, 0xde, 0x78,
		0x66, 0x4b, 0x89, 0x74, 0xa8, 0xaf, 0xcf, 0xfa, 0xb3, 0xeb, 0x87, 0x9f, 0x67, 0xde, 0x3d, 0xbd,
		0x45, 0xeb, 0xfb, 0x4d, 0x14, 0x8b, 0x6b, 0xbf, 0xff, 0xfd, 0xdd, 0xe8, 0xb5, 0xe6, 0xee, 0xd8,
		0xe2, 0xd4, 0xec, 0xe9, 0xe5, 0x40, 0x15, 0x76, 0x43, 0xfb, 0xa0, 0x88, 0xeb, 0x9f, 0x66, 0x41,
		0xbc, 0x14, 0xe2, 0x10, 0xd6, 0xe4, 0x25, 0x63, 0x96, 0xb0, 0xf8, 0x49, 0xaf, 0x02, 0xd4, 0x76,
		0x3d, 0x69, 0x43, 0x67, 0x08, 0xa2, 0x16, 0x54, 0xae, 0x43, 0x10, 0x75, 0x77, 0x72, 0xdb, 0x91,
		0x04, 0x51, 0x4d, 0x1a, 0x9f, 0x1d, 0x18, 0xa1, 0x25, 0x79, 0x0e, 0x81, 0x54, 0x04, 0x52, 0x8b,
		0x4a, 0xaa, 0x11, 0x48, 0x35, 0x63, 0xdc, 0xb2, 0x86, 0x11, 0x48, 0x2d, 0x94, 0x91, 0xb3, 0x61,
		0xec, 0x2c, 0x1b, 0x3d, 0xdb, 0xa2, 0x23, 0x02, 0xa9, 0xfb, 0x22, 0xf3, 0x21, 0x90, 0x2a, 0x89,
		0xd4, 0x10, 0x48, 0x95, 0xeb, 0x6d, 0x2e, 0x90, 0x6a, 0x21, 0xac, 0x92, 0x9e, 0x9f, 0x1d, 0x09,
		0x32, 0x88, 0xdb, 0xe6, 0xec, 0x6a, 0x3c, 0x5c, 0xe4, 0x3c, 0x64, 0x75, 0x67, 0x08, 0x12, 0x5b,
		0xb5, 0xc4, 0x08, 0x12, 0x6b, 0x3a, 0x98, 0x56, 0xb9, 0xb5, 0xf2, 0xa8, 0x2c, 0x82, 0xc4, 0xfb,
		0x0d, 0xe1, 0x56, 0x42, 0xb9, 0xb5, 0x93, 0x8d, 0x20, 0xf1, 0x9a, 0x3f, 0x08, 0x12, 0x93, 0xac,
		0xc1, 0x83, 0x0f, 0x12, 0xaf, 0x50, 0x53, 0xcf, 0xec, 0x29, 0xad, 0xce, 0x4e, 0x02, 0xc5, 0x9f,
		0xa7, 0xef, 0x85, 0x50, 0xf1, 0xee, 0x77, 0x43, 0x31, 0x77, 0xc1, 0x21, 0x06, 0x8b, 0xe9, 0x2e,
		0x0d, 0xda, 0xae, 0x9c, 0x6d, 0xed, 0x12, 0x81, 0xe3, 0x82, 0xca, 0x93, 0x08, 0x1c, 0xef, 0x4e,
		0x5e, 0x3c, 0x92, 0xc0, 0xb1, 0x79, 0x43, 0xb4, 0x33, 0x83, 0xb4, 0x24, 0x4d, 0x22, 0x88, 0x8c,
		0x20, 0x72, 0x51, 0x49, 0x37, 0x82, 0xc8, 0x66, 0x0c, 0x5d, 0xd6, 0x30, 0x82, 0xc8, 0x85, 0x32,
		0x72, 0x36, 0x8c, 0x9d, 0x65, 0xa3, 0x67, 0x5b, 0x94, 0x44, 0x10, 0x79, 0x5f, 0x64, 0x40, 0x04,
		0x91, 0x25, 0x91, 0x1a, 0x82, 0xc8, 0x72, 0xbd, 0x55, 0x46, 0x01, 0x89, 0x21, 0x94, 0x66, 0x31,
		0xc3, 0x81, 0xdc, 0xbc, 0x5d, 0xcd, 0x0c, 0x19, 0xc2, 0xad, 0x76, 0x6c, 0x16, 0xc2, 0xad, 0x9a,
		0xa6, 0xb8, 0x55, 0x6e, 0x95, 0xcf, 0x11, 0x6e, 0x35, 0xde, 0x77, 0x61, 0xc2, 0xad, 0xe7, 0x08,
		0xb7, 0x4a, 0xfc, 0x41, 0xb8, 0x95, 0x64, 0x0d, 0x1e, 0x7c, 0xb8, 0x75, 0xad, 0xfa, 0x78, 0x66,
		0x5b, 0x9f, 0x74, 0x76, 0x12, 0x7a, 0x5d, 0xf5, 0x21, 0xc4, 0x5f, 0x77, 0xbb, 0x3d, 0x8a, 0xbc,
		0x2d, 0x0e, 0x29, 0x0a, 0xdb, 0xf3, 0xdb, 0xae, 0x1f, 0x04, 0x31, 0x4b, 0x12, 0x4b, 0x41, 0xd8,
		0xad, 0x3d, 0x22, 0x06, 0x5b, 0x50, 0x75, 0x0f, 0x31, 0xd8, 0xdd, 0xa9, 0x73, 0x07, 0x1e, 0x83,
		0xb5, 0x66, 0x86, 0x76, 0x65, 0x8e, 0x96, 0x74, 0x3d, 0x44, 0x60, 0x11, 0x81, 0x2d, 0x2a, 0x0f,
		0x47, 0x04, 0xd6, 0x8c, 0x99, 0xcb, 0x1a, 0x46, 0x04, 0xb6, 0x50, 0x46, 0xce, 0x86, 0xb1, 0xb3,
		0x6c, 0xf4, 0x6c, 0xeb, 0x94, 0x88, 0xc0, 0xee, 0x8b, 0x32, 0x88, 0x08, 0xac, 0x24, 0x52, 0x43,
		0x04, 0x56, 0xae, 0xb7, 0xc5, 0x08, 0xac, 0xad, 0x93, 0xbc, 0x61, 0x24, 0x5c, 0x04, 0x7e, 0xa5,
		0xbb, 0x5a, 0x18, 0x36, 0x3b, 0x27, 0x7b, 0x11, 0x6d, 0xb6, 0x6e, 0x9f, 0x11, 0x6d, 0xd6, 0x74,
		0x3b, 0xad, 0x72, 0xab, 0x5c, 0x47, 0xb4, 0xd9, 0x78, 0xdf, 0x85, 0x89, 0x36, 0xd7, 0x11, 0x6d,
		0x96, 0xf8, 0x83, 0x68, 0x33, 0xc9, 0x1a, 0x3c, 0xd8, 0x68, 0xf3, 0x36, 0xa1, 0xf5, 0xcc, 0xb2,
		0x12, 0xeb, 0xd8, 0x8d, 0x35, 0x5f, 0xfb, 0xed, 0xab, 0xd1, 0xcb, 0x21, 0xd4, 0x5c, 0xac, 0xbd,
		0x51, 0xe0, 0x3d, 0x71, 0x48, 0x91, 0xe6, 0x64, 0x38, 0x75, 0x56, 0x2e, 0xd7, 0x5d, 0xdb, 0x13,
		0x22, 0xcb, 0x05, 0x55, 0x2d, 0x11, 0x59, 0xde, 0x9d, 0xea, 0x78, 0xe0, 0x91, 0x65, 0xe3, 0x66,
		0xc7, 0xb6, 0xf9, 0x59, 0xd2, 0x27, 0x11, 0x49, 0x46, 0x24, 0xb9, 0xa8, 0x1c, 0x1b, 0x91, 0x64,
		0x33, 0x66, 0x2d, 0x6b, 0xb8, 0x1d, 0x85, 0x21, 0x6b, 0xa7, 0x98, 0x91, 0x07, 0x2c, 0x14, 0xbc,
		0xc3, 0x59, 0x6c, 0x25, 0x9e, 0xbc, 0xa2, 0x5b, 0x44, 0x95, 0x6d, 0x1b, 0x3e, 0xcb, 0x06, 0xd0,
		0xb6, 0x1e, 0x89, 0xa8, 0xf2, 0xbe, 0x28, 0x80, 0xfb, 0x1f, 0x55, 0x4e, 0xd9, 0x79, 0x38, 0xe8,
		0xdd, 0xb3, 0x38, 0x9d, 0x02, 0x0b, 0xa1, 0xe5, 0xa6, 0xc1, 0x2e, 0x3e, 0xfb, 0xe1, 0xc3, 0x41,
		0x84, 0x5f, 0xae, 0x79, 0x68, 0x2f, 0xee, 0xf1, 0xa7, 0xdf, 0x1d, 0x30, 0x3b, 0x31, 0xd0, 0xb4,
		0xbf, 0x0f, 0xb1, 0x9f, 0x7a, 0xd1, 0x77, 0xfc, 0x81, 0x8b, 0xc4, 0x9c, 0x0f, 0x5a, 0x5e, 0xf5,
		0xec, 0xc1, 0x17, 0xfc, 0x69, 0xf8, 0xae, 0x1d, 0xbf, 0x9b, 0x30, 0xf3, 0x61, 0x0d, 0x0b, 0x51,
		0xb2, 0x6b, 0xff, 0xa7, 0xfd, 0xa5, 0x52, 0xaf, 0x5c, 0x9c, 0x63, 0xb5, 0xec, 0x85, 0x93, 0x32,
		0xdf, 0xfa, 0x1d, 0x52, 0x02, 0xd6, 0xf4, 0x75, 0xb0, 0x29, 0x01, 0xde, 0xa9, 0x93, 0xfe, 0xa7,
		0x8a, 0xd4, 0x00, 0xe3, 0x7d, 0x17, 0x26, 0x35, 0x60, 0xe3, 0xa4, 0xc3, 0x3a, 0xda, 0xb5, 0x8e,
		0x27, 0x7b, 0x60, 0x6f, 0x91, 0xf2, 0x0f, 0x71, 0x06, 0xe2, 0x0c, 0xc4, 0x19, 0x88, 0x33, 0x4a,
		0x3b, 0x07, 0x29, 0xff, 0xb2, 0x53, 0x73, 0x34, 0x37, 0x77, 0x59, 0xe8, 0xae, 0x3a, 0xf3, 0x7a,
		0x2e, 0x2e, 0x0c, 0x93, 0xea, 0x6a, 0x57, 0x17, 0x86, 0xd9, 0xeb, 0xcd, 0xcd, 0x5e, 0xb1, 0x8a,
		0x83, 0x0c, 0x50, 0x2d, 0xf6, 0x44, 0xb5, 0x80, 0x5a, 0x71, 0x44, 0x6a, 0x05, 0x54, 0x8a, 0x43,
		0x54, 0x29, 0x70, 0x90, 0x61, 0x27, 0x49, 0xdb, 0xeb, 0xf2, 0xfb, 0xce, 0x2c, 0x25, 0xfe, 0x39,
		0x76, 0x0f, 0x2e, 0x7c, 0x49, 0xdf, 0x2a, 0x7b, 0x0a, 0x27, 0x16, 0x76, 0xbf, 0x09, 0x0a, 0xb8,
		0xf8, 0x0f, 0xf0, 0xa4, 0x82, 0xc5, 0x8b, 0xc9, 0xb6, 0xf6, 0x88, 0x93, 0x0b, 0xda, 0x63, 0x8c,
		0x93, 0x0b, 0x76, 0xd1, 0x29, 0x4e, 0x2e, 0xec, 0x8b, 0x19, 0xda, 0x95, 0x39, 0x5a, 0x34, 0x4b,
		0x38, 0xc9, 0x80, 0x93, 0x0c, 0x85, 0x25, 0xd9, 0x38, 0xc9, 0x60, 0xc6, 0xcc, 0xcd, 0x48, 0x6d,
		0x23, 0x43, 0x13, 0xbb, 0x7e, 0xd0, 0xe3, 0xa1, 0x3b, 0x8e, 0x5f, 0x9b, 0x0f, 0x94, 0xaf, 0xeb,
		0x18, 0x01, 0x73, 0xdb, 0xc6, 0xcf, 0xb2, 0x11, 0xb4, 0x2d, 0x4a, 0x22, 0x60, 0xbe, 0x2f, 0x32,
		0x20, 0x02, 0xe6, 0x92, 0xc8, 0x0d, 0x01, 0x73, 0xb9, 0xde, 0x46, 0x01, 0x73, 0xfe, 0x93, 0x05,
		0x6e, 0xc8, 0x7e, 0xb8, 0xfc, 0x21, 0x8c, 0x6c, 0x96, 0xca, 0x9b, 0xf6, 0xdc, 0x8f, 0xa3, 0xbe,
		0xff, 0xe0, 0x0b, 0x3b, 0x9d, 0x4f, 0x02, 0xe9, 0xf7, 0x3c, 0x08, 0x58, 0x68, 0xa3, 0xc7, 0xda,
		0xa8, 0x32, 0x60, 0xdc, 0xf3, 0xbb, 0x08, 0xd9, 0xe7, 0xec, 0x6a, 0x79, 0x5d, 0x5a, 0x8a, 0xa7,
		0xaf, 0x5a, 0x95, 0xd6, 0x12, 0x07, 0xc6, 0x6b, 0xf2, 0xd2, 0xa9, 0x9e, 0xda, 0x28, 0xba, 0x98,
		0xae, 0xc8, 0x4b, 0xa7, 0x86, 0x94, 0x01, 0x0b, 0x7e, 0x17, 0x29, 0x03, 0x9a, 0x70, 0xa2, 0x55,
		0x6e, 0x95, 0x71, 0xc0, 0xc1, 0x7c, 0xdf, 0x85, 0x49, 0x19, 0xc0, 0xc1, 0x06, 0x99, 0x3f, 0xc7,
		0x7c, 0xb0, 0x21, 0x55, 0x89, 0x45, 0xec, 0x87, 0x49, 0x8f, 0x8b, 0x91, 0xc7, 0x36, 0x2c, 0xd8,
		0x2c, 0xf5, 0x08, 0xa5, 0x06, 0x4a, 0x0d, 0x94, 0x1a, 0x28, 0x35, 0x50, 0x6a, 0xa0, 0xd4, 0x18,
		0x51, 0x6a, 0x84, 0xff, 0xf0, 0x60, 0x51, 0x9e, 0x19, 0x84, 0xe3, 0x0e, 0xa1, 0x58, 0xe4, 0xeb,
		0x6a, 0x3c, 0x5c, 0x76, 0x64, 0x8a, 0x6c, 0x76, 0x2e, 0x1d, 0x0f, 0xec, 0x1d, 0xec, 0x1d, 0xec,
		0x1d, 0xec, 0x1d, 0xec, 0x1d, 0xec, 0xdd, 0x3c, 0x7b, 0x47, 0xc2, 0xff, 0x2e, 0x73, 0x9e, 0xd7,
		0x5f, 0x93, 0x6f, 0x39, 0x5f, 0xce, 0xd9, 0xc5, 0x01, 0x00, 0x5c, 0x92, 0x5f, 0xbc, 0xbd, 0x51,
		0xe0, 0x3d, 0x51, 0x98, 0xf3, 0x00, 0x27, 0x3b, 0x9c, 0x7f, 0xea, 0x79, 0xdf, 0xdd, 0x7c, 0xeb,
		0x4d, 0xa7, 0xfa, 0x24, 0x68, 0x4c, 0xc0, 0xa8, 0xa0, 0x67, 0xcc, 0x3a, 0xda, 0x43, 0x3f, 0x5f,
		0x22, 0x74, 0xd8, 0xa2, 0xe6, 0xb2, 0xa0, 0x11, 0x96, 0xc9, 0x04, 0x64, 0x4a, 0xa1, 0xd8, 0x90,
		0x20, 0x4c, 0x4d, 0x23, 0x8c, 0x09, 0xbc, 0xc6, 0x38, 0x80, 0x39, 0xc1, 0x76, 0xb7, 0x26, 0x92,
		0x4c, 0x68, 0x35, 0x59, 0xc8, 0x97, 0xb0, 0x60, 0x2f, 0x71, 0x61, 0x5e, 0x42, 0x30, 0x61, 0xa2,
		0xd0, 0xae, 0xa9, 0x82, 0xba, 0xc6, 0x4b, 0xa1, 0x9a, 0x2b, 0x79, 0x4a, 0xc8, 0xbb, 0x8c, 0x14,
		0xbc, 0x35, 0x58, 0xd8, 0x76, 0x9f, 0x67, 0xad, 0x20, 0x78, 0xf6, 0x6e, 0xa7, 0xc6, 0xda, 0x80,
		0x12, 0x6b, 0x40, 0x71, 0x35, 0x70, 0x78, 0xd4, 0x42, 0xc9, 0x14, 0x1b, 0x27, 0x49, 0x4d, 0x29,
		0xa2, 0x76, 0x0f, 0x93, 0x9a, 0x2f, 0x69, 0x72, 0x20, 0xbb, 0xfd, 0xc4, 0xee, 0x93, 0x8a, 0xd6,
		0x65, 0xb8, 0x40, 0x09, 0xd8, 0x55, 0xe9, 0x0f, 0x9e, 0x88, 0x2b, 0x21, 0xf4, 0x8e, 0xa7, 0x0d,
		0x51, 0xd0, 0xfb, 0x51, 0xc5, 0x54, 0x4d, 0xff, 0x34, 0x74, 0xce, 0x33, 0x2d, 0x79, 0xad, 0x7a,
		0xbd, 0xd1, 0xac, 0xd7, 0x2b, 0xcd, 0x5a, 0xb3, 0x72, 0x71, 0x7e, 0xee, 0x35, 0x3c, 0x0d, 0xef,
		0x5a, 0xfa, 0x14, 0x07, 0x2c, 0x66, 0xc1, 0xdb, 0xe1, 0xc8, 0x85, 0x83, 0x6e, 0xd7, 0xea, 0x84,
		0x11, 0xc9, 0x1a, 0xd6, 0xe5, 0x0c, 0x0d, 0xab, 0x67, 0x4f, 0x6f, 0x55, 0xb3, 0x62, 0xf2, 0x3b,
		0x56, 0x61, 0xf2, 0x4b, 0x4f, 0x3c, 0x50, 0x3f, 0x76, 0x3e, 0xcd, 0xdf, 0x1b, 0xb6, 0xa2, 0x6a,
		0x2b, 0xb4, 0xa4, 0x13, 0x6d, 0xc9, 0x84, 0x42, 0x2a, 0x99, 0x97, 0x48, 0x74, 0xd6, 0x24, 0x11,
		0x62, 0x20, 0x17, 0x43, 0xc8, 0xe1, 0xc0, 0xb2, 0xf8, 0x51, 0xda, 0x13, 0xdf, 0xa6, 0x2d, 0x6f,
		0xcc, 0xee, 0x1a, 0x37, 0xf6, 0xc3, 0x07, 0xa6, 0x2b, 0x6a, 0x64, 0xa9, 0x60, 0x2d, 0x8d, 0x36,
		0x6e, 0x7c, 0x21, 0x58, 0x1c, 0x6a, 0x63, 0xf6, 0xd2, 0xeb, 0xaf, 0x9e, 0x7b, 0x71, 0xf7, 0xb5,
		0xe2, 0x5e, 0xdc, 0xfd, 0xaa, 0x9c, 0xd6, 0x5e, 0x5e, 0xbb, 0x0b, 0xbf, 0x78, 0xf3, 0xdb, 0xeb,
		0xd3, 0xed, 0x9f, 0x79, 0xf3, 0xf7, 0x37, 0xea, 0x4b, 0xe2, 0xce, 0xea, 0x92, 0x20, 0x24, 0x51,
		0x84, 0xe4, 0x89, 0x50, 0x80, 0xf3, 0xaa, 0xe5, 0x66, 0xb9, 0xb9, 0x02, 0xa0, 0xbb, 0xd5, 0x8a,
		0xd7, 0x2a, 0xb8, 0x1a, 0x4c, 0x4d, 0x91, 0xec, 0x08, 0xc2, 0x5b, 0x86, 0x7c, 0xd7, 0x1a, 0xb1,
		0xed, 0x9d, 0x79, 0x62, 0xf6, 0x09, 0xc9, 0x9d, 0x3f, 0x21, 0x38, 0x13, 0x9c, 0xea, 0xf2, 0xc0,
		0x51, 0xc0, 0x40, 0x7a, 0x04, 0x47, 0x9f, 0xd8, 0x18, 0x21, 0x34, 0x7a, 0x44, 0x46, 0x76, 0x22,
		0x08, 0x4c, 0x2f, 0x81, 0xc9, 0x25, 0x00, 0x03, 0xe9, 0x7e, 0x3f, 0x37, 0x60, 0x62, 0x4d, 0x60,
		0x4a, 0x2a, 0x93, 0x6a, 0x16, 0x56, 0x6e, 0x19, 0x52, 0xdb, 0x78, 0xf3, 0xc4, 0xac, 0xa9, 0x94,
		0xdd, 0x39, 0x9a, 0x94, 0xdf, 0x16, 0xd5, 0x57, 0x58, 0x61, 0xe6, 0x99, 0xbd, 0xdc, 0xda, 0xc9,
		0x3f, 0xf3, 0xf9, 0x3e, 0x99, 0x73, 0xa6, 0x75, 0x6c, 0xa3, 0x86, 0x4d, 0x54, 0x58, 0x4a, 0xb3,
		0x36, 0x90, 0xd0, 0x02, 0xea, 0x5a, 0x3e, 0x4a, 0x8b, 0x47, 0x66, 0xe9, 0x96, 0x2c, 0x1c, 0x9d,
		0x7d, 0x7b, 0x31, 0xb4, 0xaa, 0xef, 0xf2, 0xbf, 0x69, 0xe9, 0xc7, 0x23, 0x0b, 0x6d, 0x2e, 0xb9,
		0x72, 0xf9, 0xac, 0x5c, 0x1e, 0xdb, 0xa7, 0x94, 0x86, 0x3b, 0x7f, 0xfb, 0x87, 0xf3, 0x4a, 0xfc,
		0x88, 0xdc, 0xb1, 0xc4, 0xd8, 0x76, 0x63, 0xd6, 0xf5, 0x9f, 0xc7, 0x16, 0xed, 0xd5, 0x8e, 0x97,
		0x61, 0x3a, 0x3c, 0x45, 0x5a, 0x81, 0xd2, 0xe3, 0x67, 0x45, 0xd5, 0x7c, 0xc7, 0x92, 0x76, 0xcc,
		0xfb, 0x5a, 0x7a, 0x76, 0xb6, 0x44, 0xae, 0xfa, 0xfd, 0x2e, 0x67, 0x89, 0x23, 0x22, 0x27, 0x8c,
		0x42, 0xe7, 0xf6, 0xe6, 0xfa, 0x73, 0x52, 0x56, 0x9d, 0x04, 0x02, 0x30, 0x36, 0xbb, 0x1e, 0x82,
		0x99, 0x17, 0xd5, 0x80, 0x88, 0x94, 0x30, 0x6c, 0x6e, 0x79, 0xac, 0x1e, 0xbb, 0x62, 0x52, 0xc0,
		0x13, 0x5a, 0x5c, 0x96, 0xd7, 0x4b, 0x2b, 0xe2, 0x30, 0x6a, 0xfc, 0x25, 0xb1, 0x7c, 0x28, 0xf1,
		0x55, 0xbe, 0xb5, 0xb0, 0x7d, 0x6e, 0x72, 0x8c, 0x76, 0x89, 0xe7, 0xaf, 0x64, 0x90, 0x6d, 0x7e,
		0x9e, 0xf7, 0x8c, 0xa8, 0x64, 0x1c, 0x43, 0x3a, 0x6e, 0xa1, 0x12, 0xa7, 0x50, 0x8e, 0x4b, 0xa8,
		0x9a, 0x29, 0xed, 0xb8, 0x83, 0xb6, 0x25, 0xd2, 0x89, 0x2b, 0xd0, 0xa2, 0x6f, 0xe9, 0x38, 0x41,
		0x36, 0x5b, 0x03, 0x1e, 0x8a, 0x5a, 0x55, 0x66, 0xba, 0xe4, 0x93, 0x19, 0x15, 0x93, 0x16, 0xd5,
		0x54, 0x2a, 0x75, 0x1f, 0x3c, 0xc9, 0x5c, 0x53, 0x0d, 0xee, 0x51, 0xa5, 0xa7, 0xe9, 0xa7, 0xa1,
		0xbd, 0xa8, 0xc9, 0x73, 0xfa, 0x43, 0x57, 0xaf, 0x5e, 0xd4, 0x2f, 0x1a, 0xcd, 0xaa, 0x6a, 0xea,
		0x5f, 0x91, 0xc6, 0x70, 0x2f, 0x1c, 0xfa, 0x3e, 0xd2, 0xee, 0xda, 0xa9, 0xc3, 0x05, 0xeb, 0x39,
		0xdd, 0x37, 0xe0, 0xdf, 0x72, 0xfc, 0x3b, 0xc7, 0xc8, 0xed, 0xdb, 0x3a, 0x27, 0x01, 0x5b, 0x63,
		0x74, 0x28, 0x09, 0xb7, 0xd2, 0xa7, 0x00, 0xb8, 0x00, 0xb8, 0xac, 0x02, 0xae, 0x64, 0x54, 0x7d,
		0x46, 0x1e, 0x70, 0x79, 0x2d, 0x8b, 0x3b, 0xaa, 0xcf, 0xe2, 0x9e, 0x3f, 0x64, 0x51, 0x53, 0xce,
		0x26, 0xbd, 0xbf, 0x56, 0xb4, 0x21, 0xb7, 0xdb, 0x3c, 0xec, 0x36, 0xec, 0x36, 0x95, 0x5b, 0x23,
		0x4a, 0xf3, 0x17, 0x8c, 0x3d, 0xcb, 0x0f, 0xfe, 0x64, 0xb6, 0x17, 0x1b, 0x92, 0x0d, 0xdd, 0x2b,
		0x5d, 0x4d, 0xa3, 0x9c, 0x67, 0xa8, 0x93, 0x5f, 0xa8, 0x9d, 0x57, 0x48, 0x89, 0xc0, 0xb4, 0xf2,
		0x08, 0xcd, 0xc0, 0x2f, 0xc5, 0xbc, 0x41, 0xb3, 0xa9, 0x21, 0xaa, 0xd7, 0xa9, 0x94, 0xfc, 0x20,
		0x88, 0x59, 0x42, 0x90, 0x8d, 0x3b, 0x69, 0x08, 0x09, 0xb9, 0x48, 0xc8, 0xb5, 0xba, 0xb1, 0xd4,
		0x36, 0x98, 0x86, 0x42, 0xe2, 0xd0, 0x26, 0xe4, 0xf6, 0xfc, 0xb6, 0xab, 0xb7, 0x79, 0x9c, 0xc2,
		0x65, 0xe3, 0x7e, 0xad, 0xb8, 0x17, 0xbe, 0xdb, 0xb9, 0x72, 0x3f, 0xdc, 0xfd, 0xaa, 0xbe, 0xbc,
		0x76, 0xe7, 0x7f, 0x7e, 0xf3, 0xeb, 0xfc, 0x05, 0x59, 0xb6, 0x3a, 0x03, 0x8c, 0x2c, 0x5b, 0x64,
		0xd9, 0x52, 0x5b, 0x42, 0xfd, 0xa7, 0xef, 0x0a, 0x7c, 0xe4, 0x68, 0x26, 0x69, 0x56, 0x1f, 0xeb,
		0xcc, 0x36, 0x06, 0xbc, 0x03, 0xbc, 0x03, 0xbc, 0x23, 0xb1, 0x5a, 0xa4, 0x03, 0x8d, 0xeb, 0xf6,
		0x8e, 0x46, 0x15, 0x15, 0xa2, 0xea, 0x29, 0x04, 0x6e, 0x98, 0xb2, 0x5a, 0x8a, 0x6e, 0xe0, 0x72,
		0xa9, 0x3d, 0x53, 0x75, 0x36, 0xe8, 0xeb, 0x6b, 0x50, 0xdc, 0xd7, 0x4e, 0x59, 0x05, 0x85, 0x2c,
		0x10, 0xba, 0xcf, 0x73, 0xb2, 0x5f, 0x30, 0x04, 0x04, 0x01, 0x04, 0x01, 0x04, 0xe1, 0x68, 0x09,
		0x42, 0x56, 0xdc, 0x41, 0x9b, 0x1d, 0x68, 0x96, 0x89, 0xd0, 0xbc, 0xc6, 0xbe, 0x80, 0xd4, 0x40,
		0xbb, 0x7c, 0xe3, 0x31, 0x13, 0x04, 0xdd, 0xf2, 0x8c, 0x76, 0x69, 0x82, 0xee, 0xb5, 0xee, 0xa5,
		0xac, 0x52, 0x2c, 0x59, 0xb5, 0xd5, 0xac, 0x45, 0x9a, 0x6a, 0xab, 0xe7, 0xa8, 0xb6, 0x5a, 0x04,
		0xc7, 0x8e, 0x6a, 0xab, 0x3b, 0xa4, 0x4b, 0xda, 0xdb, 0x7c, 0x2a, 0xcb, 0x3d, 0x87, 0x7e, 0x8f,
		0xb7, 0xdd, 0xf9, 0xf0, 0x3a, 0x67, 0x09, 0xdd, 0xa2, 0xc9, 0xd6, 0xf6, 0xda, 0xae, 0x88, 0xe6,
		0x7a, 0x6c, 0x20, 0x88, 0x6e, 0xc6, 0x22, 0xbf, 0xd7, 0xcf, 0xc4, 0x3d, 0x7e, 0x86, 0xef, 0xed,
		0xb3, 0x51, 0xcb, 0xd0, 0xc8, 0xbd, 0x7c, 0x76, 0x0b, 0x19, 0x1a, 0xb9, 0x77, 0xaf, 0x58, 0x37,
		0x1f, 0x50, 0x19, 0x1c, 0x8b, 0x86, 0xc7, 0xba, 0x01, 0x22, 0x22, 0x10, 0xd6, 0x0c, 0x92, 0x49,
		0xc3, 0x64, 0xc9, 0x40, 0x99, 0x36, 0x54, 0xd6, 0x0c, 0x96, 0x35, 0xc3, 0x65, 0xcf, 0x80, 0xd1,
		0x1a, 0x32, 0x62, 0x83, 0x66, 0xcc, 0xb0, 0x65, 0x0d, 0xb7, 0xa3, 0x50, 0xc4, 0x51, 0xd7, 0x65,
		0xa3, 0x52, 0x3b, 0xe6, 0xaf, 0x53, 0x5e, 0xec, 0x10, 0xb7, 0x29, 0xdb, 0x36, 0x76, 0x96, 0x8d,
		0x9e, 0x2d, 0xe3, 0x67, 0xdd, 0x08, 0x5a, 0x37, 0x86, 0xf6, 0x8d, 0xa2, 0x19, 0xe3, 0x68, 0xc8,
		0x48, 0x66, 0xc3, 0x83, 0xdb, 0x94, 0x15, 0xfa, 0x38, 0xd8, 0xdb, 0x94, 0x3b, 0x51, 0xfc, 0xc3,
		0x8f, 0x71, 0xbb, 0x71, 0xde, 0xae, 0x26, 0xe3, 0x75, 0xe9, 0x54, 0x70, 0xdf, 0xb0, 0x05, 0x6b,
		0x85, 0xfb, 0x86, 0x35, 0x8d, 0x70, 0xab, 0xdc, 0x2a, 0xd7, 0x70, 0xdf, 0xb0, 0xf1, 0xbe, 0x0b,
		0x73, 0xdf, 0x70, 0x0d, 0xf7, 0x0d, 0x4b, 0xfc, 0xc1, 0x7d, 0xc3, 0x24, 0x6b, 0xb0, 0xc8, 0xf7,
		0x0d, 0x2f, 0x9f, 0x9c, 0x3d, 0x5b, 0x38, 0x88, 0xb8, 0xe2, 0x4e, 0xd5, 0xb5, 0x3a, 0xe3, 0x99,
		0x2d, 0x05, 0xd2, 0xd1, 0xab, 0xd7, 0x74, 0x33, 0x79, 0xeb, 0xac, 0x1e, 0x66, 0x56, 0xc1, 0x69,
		0xfe, 0x4a, 0xe1, 0x77, 0xa3, 0xf7, 0x99, 0xfb, 0x57, 0x5c, 0x26, 0xbc, 0xdb, 0x85, 0x5f, 0xa4,
		0x05, 0x5f, 0x98, 0xdb, 0x83, 0x4f, 0xe9, 0x22, 0xa5, 0x31, 0x4b, 0x58, 0xfc, 0x34, 0x7f, 0x49,
		0xb2, 0xb1, 0x58, 0xe9, 0xaa, 0xce, 0x10, 0x2d, 0x2d, 0xa8, 0x2e, 0x87, 0x68, 0xe9, 0xee, 0x74,
		0xb5, 0x23, 0x89, 0x96, 0x9a, 0x34, 0x3e, 0x3b, 0x30, 0x42, 0x4b, 0x3a, 0x1c, 0x22, 0xa6, 0x88,
		0x98, 0x16, 0x95, 0x3d, 0x23, 0x62, 0x6a, 0xc6, 0xb8, 0x65, 0x0d, 0x23, 0x62, 0x5a, 0x28, 0x23,
		0x67, 0xc3, 0xd8, 0x59, 0x36, 0x7a, 0xb6, 0xd5, 0x45, 0x44, 0x4c, 0xf7, 0x45, 0xcf, 0x43, 0xc4,
		0x54, 0x12, 0xa9, 0x21, 0x62, 0x2a, 0xd7, 0xdb, 0x5c, 0xc4, 0xd4, 0x42, 0xfc, 0xc4, 0x9b, 0x16,
		0x4d, 0x43, 0x80, 0x36, 0x67, 0x57, 0xe3, 0xe1, 0x22, 0xe7, 0x21, 0xab, 0x3b, 0x43, 0x34, 0xd8,
		0xaa, 0x25, 0x46, 0x34, 0x58, 0xd3, 0xc1, 0xb4, 0xca, 0xad, 0x95, 0x67, 0x62, 0x11, 0x0d, 0xde,
		0x6f, 0x08, 0xb7, 0x12, 0xca, 0xad, 0x9d, 0x6c, 0x44, 0x83, 0xd7, 0xfc, 0x41, 0x34, 0x98, 0x64,
		0x0d, 0x1e, 0x6c, 0x34, 0x78, 0x85, 0x8a, 0x7a, 0x66, 0x4f, 0x61, 0x75, 0xec, 0x46, 0x84, 0x3f,
		0x4f, 0x5f, 0x08, 0x31, 0xe1, 0xdd, 0x2f, 0xff, 0x62, 0x2d, 0xfb, 0x43, 0x8c, 0x0a, 0xaf, 0xbe,
		0xc7, 0xd4, 0x68, 0x6c, 0x78, 0x7d, 0x97, 0x88, 0x10, 0x17, 0x54, 0x87, 0x44, 0x84, 0x78, 0x77,
		0x3a, 0xe2, 0x91, 0x44, 0x88, 0xcd, 0x1b, 0xa2, 0x9d, 0x19, 0xa4, 0x25, 0x0d, 0x12, 0xd1, 0x62,
		0x44, 0x8b, 0x8b, 0xca, 0xae, 0x11, 0x2d, 0x36, 0x63, 0xe8, 0xb2, 0x86, 0x11, 0x2d, 0x2e, 0x94,
		0x91, 0xb3, 0x61, 0xec, 0x2c, 0x1b, 0x3d, 0xdb, 0xea, 0x23, 0xa2, 0xc5, 0xfb, 0xa2, 0xf7, 0x21,
		0x5a, 0x2c, 0x89, 0xd4, 0x10, 0x2d, 0x96, 0xeb, 0xad, 0x32, 0x8a, 0x3c, 0x0c, 0xa1, 0x34, 0x8b,
		0x19, 0x8e, 0xd8, 0xe6, 0xed, 0x6a, 0x66, 0xc8, 0x10, 0x57, 0xb5, 0x63, 0xb3, 0x10, 0x57, 0xd5,
		0x34, 0xc5, 0xad, 0x72, 0xab, 0x7c, 0x8e, 0xb8, 0xaa, 0xf1, 0xbe, 0x0b, 0x13, 0x57, 0x3d, 0x47,
		0x5c, 0x55, 0xe2, 0x0f, 0xe2, 0xaa, 0x24, 0x6b, 0xf0, 0x60, 0xe3, 0xaa, 0x6b, 0x55, 0xc7, 0x33,
		0xdb, 0xba, 0xa4, 0x63, 0x37, 0xc6, 0xfa, 0x67, 0xd7, 0x0f, 0x3f, 0xcf, 0xbc, 0x15, 0x02, 0xad,
		0xbb, 0xdf, 0x0f, 0x45, 0xdc, 0x07, 0x87, 0x14, 0x6e, 0x9d, 0xb9, 0xab, 0xd1, 0x52, 0xb4, 0x75,
		0x6b, 0x8f, 0x08, 0xb6, 0x16, 0x54, 0xc6, 0x43, 0xb0, 0x75, 0x77, 0x32, 0xdc, 0x81, 0x07, 0x5b,
		0xad, 0x99, 0xa1, 0x5d, 0x99, 0xa3, 0x25, 0x01, 0x0f, 0xa1, 0x56, 0x84, 0x5a, 0x8b, 0x4a, 0xb8,
		0x11, 0x6a, 0x35, 0x63, 0xe6, 0xb2, 0x86, 0x11, 0x6a, 0x2d, 0x94, 0x91, 0xb3, 0x61, 0xec, 0x2c,
		0x1b, 0x3d, 0xdb, 0x82, 0x24, 0x42, 0xad, 0xfb, 0x22, 0x01, 0x22, 0xd4, 0x2a, 0x89, 0xd4, 0x10,
		0x6a, 0x95, 0xeb, 0x6d, 0x31, 0xd4, 0x6a, 0xeb, 0x6c, 0x6e, 0x18, 0x09, 0x17, 0x11, 0x5e, 0xe9,
		0xae, 0x16, 0x86, 0xcd, 0xce, 0x59, 0x5d, 0x84, 0x95, 0xad, 0xdb, 0x67, 0x84, 0x95, 0x35, 0xdd,
		0x4e, 0xab, 0xdc, 0x2a, 0xd7, 0x11, 0x56, 0x36, 0xde, 0x77, 0x61, 0xc2, 0xca, 0x75, 0x84, 0x95,
		0x25, 0xfe, 0x20, 0xac, 0x4c, 0xb2, 0x06, 0x0f, 0x2e, 0xac, 0xbc, 0x4d, 0x60, 0x3d, 0xb3, 0xac,
		0xc0, 0x3a, 0x96, 0x82, 0xca, 0xd7, 0x7e, 0xfb, 0x6a, 0xf4, 0x56, 0x88, 0x29, 0x17, 0x6b, 0x33,
		0x14, 0x70, 0x13, 0x1c, 0x52, 0x48, 0x39, 0x19, 0x4e, 0x99, 0x95, 0x0b, 0x70, 0xd7, 0xf6, 0x84,
		0x10, 0x72, 0x41, 0xe5, 0x49, 0x84, 0x90, 0x77, 0x27, 0x2f, 0x1e, 0x78, 0x08, 0xd9, 0xb8, 0xd9,
		0xb1, 0x6d, 0x7e, 0x96, 0x84, 0x48, 0x84, 0x8c, 0x11, 0x32, 0x2e, 0x2a, 0x99, 0x46, 0xc8, 0xd8,
		0x8c, 0x59, 0xcb, 0x1a, 0x6e, 0x47, 0x61, 0xc8, 0xda, 0x29, 0x66, 0xe4, 0x01, 0x0b, 0x05, 0xef,
		0x70, 0x16, 0x5b, 0x09, 0x1c, 0xaf, 0xe8, 0x16, 0xe1, 0x63, 0xdb, 0x86, 0xcf, 0xb2, 0x01, 0xb4,
		0x2d, 0x3c, 0x22, 0x7c, 0xbc, 0x2f, 0x52, 0xdf, 0xfe, 0x87, 0x8f, 0x53, 0x76, 0x1e, 0x0e, 0x7a,
		0xf7, 0x2c, 0x4e, 0xa7, 0xc0, 0x42, 0x0c, 0xb9, 0x69, 0xb0, 0x8b, 0xcf, 0x7e, 0xf8, 0x70, 0x10,
		0x71, 0x96, 0x6b, 0x1e, 0xda, 0x0b, 0x70, 0xfc, 0xe9, 0x77, 0x07, 0xcc, 0x4e, 0xb0, 0x33, 0xed,
		0xef, 0x43, 0xec, 0xa7, 0x5e, 0xf4, 0x1d, 0x7f, 0xe0, 0x22, 0x31, 0xe7, 0x83, 0x96, 0x57, 0x3d,
		0x7b, 0xf0, 0x05, 0x7f, 0x1a, 0xbe, 0x6b, 0xc7, 0xef, 0x26, 0xcc, 0x7c, 0xfc, 0xc2, 0x42, 0x38,
		0xec, 0xda, 0xff, 0x69, 0x7f, 0xa9, 0xd4, 0x2b, 0x17, 0xe7, 0x58, 0x2d, 0x7b, 0xe1, 0xa4, 0xcc,
		0xb7, 0x7e, 0x87, 0xd8, 0xff, 0x9a, 0xbe, 0x0e, 0x36, 0xf6, 0xef, 0x9d, 0x3a, 0xe9, 0x7f, 0xaa,
		0xc8, 0x01, 0x30, 0xde, 0x77, 0x61, 0x72, 0x00, 0x36, 0x4e, 0x3a, 0xac, 0xa3, 0x5d, 0xeb, 0x78,
		0xb2, 0x07, 0xf6, 0x16, 0xb9, 0xfd, 0x10, 0x67, 0x20, 0xce, 0x40, 0x9c, 0x81, 0x38, 0xa3, 0xb4,
		0x73, 0x90, 0xdb, 0x2f, 0x3b, 0x35, 0x47, 0x73, 0xe9, 0x96, 0x85, 0xee, 0xaa, 0x33, 0xaf, 0xe7,
		0xe2, 0xae, 0x2f, 0xa9, 0xae, 0x76, 0x75, 0xd7, 0x97, 0xbd, 0xde, 0xdc, 0xec, 0x15, 0xab, 0x38,
		0xb1, 0x00, 0xd5, 0x62, 0x4f, 0x54, 0x0b, 0xa8, 0x15, 0x47, 0xa4, 0x56, 0x40, 0xa5, 0x38, 0x44,
		0x95, 0x02, 0x27, 0x16, 0xac, 0x26, 0x6b, 0xaf, 0xcb, 0xeb, 0x3b, 0xb3, 0x94, 0xf0, 0xe7, 0x58,
		0x3a, 0xa1, 0xf0, 0x25, 0x7d, 0x9d, 0xb9, 0x7f, 0xc4, 0xd1, 0x84, 0xdd, 0xae, 0xfa, 0x02, 0xad,
		0xf6, 0x03, 0x3c, 0x92, 0x60, 0xf1, 0x4e, 0xb1, 0xad, 0x3d, 0xe2, 0x88, 0x82, 0xf6, 0x18, 0xe3,
		0x88, 0x82, 0x5d, 0x18, 0x8a, 0x23, 0x0a, 0xfb, 0x62, 0x86, 0x76, 0x65, 0x8e, 0x16, 0xcd, 0x12,
		0x8e, 0x2c, 0xe0, 0xc8, 0x42, 0x61, 0xd9, 0x34, 0x8e, 0x2c, 0x98, 0x31, 0x73, 0x33, 0x9a, 0xda,
		0xc8, 0xd0, 0xc4, 0xae, 0x1f, 0xf4, 0x78, 0xe8, 0x8e, 0x03, 0xd5, 0xe6, 0x23, 0xe2, 0xeb, 0x3a,
		0x46, 0x64, 0xdc, 0xb6, 0xf1, 0xb3, 0x6c, 0x04, 0x6d, 0xab, 0x8f, 0x88, 0x8c, 0xef, 0x8b, 0xde,
		0x87, 0xc8, 0xb8, 0x24, 0x72, 0x43, 0x64, 0x5c, 0xae, 0xb7, 0x51, 0x64, 0x9c, 0xff, 0x64, 0x81,
		0x1b, 0xb2, 0x1f, 0x2e, 0x7f, 0x08, 0x23, 0x9b, 0xc5, 0xef, 0xa6, 0x3d, 0xf7, 0xe3, 0xa8, 0xef,
		0x3f, 0xf8, 0xc2, 0x4e, 0xe7, 0x93, 0x88, 0xf9, 0x3d, 0x0f, 0x02, 0x16, 0xda, 0xe8, 0xb1, 0x36,
		0xaa, 0xf5, 0x17, 0xf7, 0xfc, 0x2e, 0x62, 0xf3, 0x39, 0xbb, 0x5a, 0x5e, 0x97, 0x96, 0x02, 0xe7,
		0xab, 0x56, 0xa5, 0xb5, 0x0c, 0x81, 0xf1, 0x9a, 0xbc, 0x74, 0xaa, 0xa7, 0x36, 0xca, 0x28, 0xa6,
		0x2b, 0xf2, 0xd2, 0xa9, 0x21, 0x37, 0xc0, 0x82, 0xdf, 0x45, 0x6e, 0x80, 0x26, 0x9c, 0x68, 0x95,
		0x5b, 0x65, 0x9c, 0x64, 0x30, 0xdf, 0x77, 0x61, 0x72, 0x03, 0x70, 0x82, 0x41, 0xe6, 0xcf, 0x31,
		0x9f, 0x60, 0x48, 0x55, 0x62, 0x11, 0xfb, 0x61, 0xd2, 0xe3, 0x62, 0xe4, 0xb1, 0x0d, 0x0b, 0x36,
		0x4b, 0x3d, 0x42, 0xa9, 0x81, 0x52, 0x03, 0xa5, 0x06, 0x4a, 0x0d, 0x94, 0x1a, 0x28, 0x35, 0x46,
		0x94, 0x1a, 0xe1, 0x3f, 0x3c, 0x58, 0x94, 0x67, 0x06, 0xe1, 0xb8, 0x43, 0x28, 0x16, 0xf9, 0xba,
		0x1a, 0x0f, 0x97, 0x1d, 0x99, 0x22, 0x9b, 0x9d, 0x4b, 0xc7, 0x03, 0x7b, 0x07, 0x7b, 0x07, 0x7b,
		0x07, 0x7b, 0x07, 0x7b, 0x07, 0x7b, 0x37, 0xcf, 0xde, 0x91, 0xd9, 0xbf, 0x8b, 0x5c, 0xe7, 0xf5,
		0x37, 0xdc, 0x5b, 0xce, 0x93, 0x73, 0xac, 0x66, 0xfa, 0xe3, 0x7e, 0xfb, 0xe2, 0x6d, 0x86, 0x02,
		0x6e, 0x82, 0xc2, 0x24, 0xfe, 0x9f, 0xec, 0x70, 0xde, 0xa9, 0xe7, 0xdb, 0xfe, 0x3c, 0xeb, 0x4d,
		0xa3, 0xfa, 0xe0, 0x6b, 0x0c, 0xfc, 0xa8, 0x34, 0x67, 0xcc, 0x3a, 0xda, 0x43, 0x3e, 0x5f, 0xec,
		0x73, 0xd8, 0xa2, 0xe6, 0x72, 0xa0, 0x51, 0x8e, 0xc9, 0x14, 0x62, 0x4a, 0x25, 0xd8, 0x90, 0xe2,
		0x4b, 0xcd, 0x13, 0x8c, 0x29, 0xb8, 0xc6, 0x40, 0xbe, 0x39, 0x45, 0x76, 0xb7, 0xa6, 0x91, 0x4c,
		0x49, 0x35, 0x59, 0x92, 0x97, 0xb0, 0xf4, 0x2e, 0x71, 0x89, 0x5d, 0x42, 0xf0, 0x60, 0xa2, 0x64,
		0xae, 0xa9, 0xd2, 0xb8, 0xc6, 0x8b, 0x9a, 0x9a, 0x2b, 0x5e, 0x4a, 0x48, 0xac, 0x8c, 0x94, 0xae,
		0x35, 0x58, 0xa2, 0x76, 0x9f, 0x67, 0xad, 0x20, 0x38, 0xf6, 0x6e, 0xa7, 0xc6, 0xda, 0x80, 0xd4,
		0x6a, 0x40, 0x52, 0x35, 0x70, 0x3a, 0xd4, 0x42, 0xf1, 0x13, 0x1b, 0x47, 0x45, 0x4d, 0x49, 0x9e,
		0x76, 0x4f, 0x8b, 0x9a, 0x2f, 0x4e, 0x72, 0x20, 0xbb, 0xfd, 0xc4, 0xee, 0x93, 0x8a, 0xd6, 0x65,
		0xb8, 0x40, 0x09, 0xd8, 0x55, 0xe9, 0x0f, 0x9e, 0x88, 0x2b, 0x21, 0xf4, 0xce, 0x9f, 0x0d, 0x51,
		0xd0, 0xfb, 0x51, 0xed, 0x53, 0x4d, 0xff, 0x34, 0x74, 0xce, 0x33, 0x2d, 0x79, 0xad, 0x7a, 0xbd,
		0xd1, 0xac, 0xd7, 0x2b, 0xcd, 0x5a, 0xb3, 0x72, 0x71, 0x7e, 0xee, 0x35, 0x3c, 0x0d, 0xef, 0x5a,
		0xfa, 0x14, 0x07, 0x2c, 0x66, 0xc1, 0xdb, 0xe1, 0xc8, 0x85, 0x83, 0x6e, 0xd7, 0xea, 0x84, 0x11,
		0xc9, 0x19, 0xd6, 0x64, 0x0c, 0x0d, 0x6b, 0x67, 0x41, 0x50, 0x55, 0x33, 0x5b, 0xf2, 0x5b, 0x54,
		0x61, 0xb6, 0xd3, 0xa3, 0xde, 0x03, 0xf5, 0xa3, 0xe4, 0x73, 0x47, 0xc6, 0x07, 0xaa, 0x42, 0x80,
		0xa6, 0x5e, 0x32, 0xd5, 0x49, 0x14, 0x53, 0xf7, 0x29, 0xf4, 0x91, 0x79, 0x5d, 0x44, 0x67, 0x41,
		0x12, 0xc1, 0x04, 0x72, 0x05, 0x84, 0x1c, 0x03, 0x2c, 0x2b, 0x1e, 0xa5, 0x3d, 0x71, 0x68, 0xda,
		0x9a, 0x06, 0x71, 0xf6, 0x17, 0x45, 0x76, 0x17, 0x4d, 0xf6, 0x16, 0x6d, 0x76, 0xd6, 0x28, 0xfb,
		0x2a, 0x12, 0x8f, 0x24, 0x05, 0x5d, 0x47, 0xc9, 0x55, 0x3c, 0x7c, 0xf2, 0xbb, 0x9c, 0x22, 0x99,
		0x6b, 0x74, 0x9c, 0xad, 0xcb, 0xfc, 0x38, 0x24, 0x49, 0x0e, 0x1b, 0x1d, 0x56, 0x4b, 0x58, 0xb7,
		0x43, 0xd1, 0x58, 0x7d, 0xd8, 0x58, 0xef, 0xa1, 0x27, 0x4a, 0xbb, 0x95, 0xff, 0xc8, 0xb2, 0xc0,
		0xb2, 0x99, 0x23, 0x11, 0x9b, 0xb2, 0x79, 0x23, 0x39, 0xf0, 0x35, 0x1a, 0x68, 0x92, 0xca, 0x4a,
		0xe3, 0xe5, 0x4e, 0x22, 0x9d, 0x8c, 0x16, 0x93, 0xee, 0x29, 0x33, 0xeb, 0x34, 0xc3, 0x0a, 0xf2,
		0x79, 0xe2, 0x01, 0x01, 0xee, 0x49, 0x5b, 0xd9, 0x31, 0xea, 0xa9, 0x00, 0xf5, 0x00, 0xf5, 0xec,
		0x15, 0xea, 0x79, 0xe2, 0x81, 0x1b, 0xfb, 0xe1, 0x03, 0xd3, 0x8d, 0xdf, 0x64, 0xc0, 0xa7, 0xa5,
		0xd1, 0xc6, 0x8d, 0x2f, 0x04, 0x8b, 0x43, 0x6d, 0x79, 0xb2, 0xf4, 0xfa, 0xab, 0xe7, 0x5e, 0xdc,
		0x7d, 0xad, 0xb8, 0x17, 0x77, 0xbf, 0x2a, 0xa7, 0xb5, 0x97, 0xd7, 0xee, 0xc2, 0x2f, 0xde, 0xfc,
		0xf6, 0xfa, 0x74, 0xfb, 0x67, 0xde, 0xfc, 0xfd, 0x8d, 0xfa, 0x92, 0xb8, 0xb3, 0xba, 0x24, 0x08,
		0xf5, 0x62, 0x42, 0x9d, 0x98, 0x30, 0xd6, 0xe8, 0x55, 0xcb, 0xcd, 0x72, 0x73, 0x85, 0x16, 0xe9,
		0x56, 0x2b, 0x5e, 0xab, 0xe0, 0x81, 0x6f, 0x6a, 0x35, 0xd8, 0x4e, 0xec, 0x7b, 0xcb, 0x90, 0xef,
		0x3a, 0x1c, 0x6e, 0x7b, 0x67, 0x9e, 0x98, 0x7d, 0x42, 0x72, 0xe7, 0x4f, 0xb4, 0xdc, 0x89, 0x24,
		0xe7, 0xf2, 0xc0, 0x19, 0x62, 0x20, 0xc7, 0x0f, 0x82, 0x98, 0x25, 0xb2, 0x58, 0x48, 0x4f, 0xd3,
		0xd5, 0xd7, 0x72, 0x8d, 0x68, 0xb8, 0x7a, 0xda, 0xad, 0xec, 0x84, 0x68, 0x6a, 0xb5, 0xa6, 0x35,
		0xda, 0x92, 0x92, 0x28, 0x69, 0x4a, 0x92, 0x95, 0xb3, 0x1e, 0xf9, 0x77, 0x92, 0xc4, 0xa4, 0x95,
		0x12, 0xfe, 0xbf, 0xf2, 0xe6, 0x7e, 0x2a, 0xb4, 0x0e, 0x9f, 0x96, 0xdd, 0xb3, 0x4a, 0x44, 0x43,
		0x59, 0x56, 0xd5, 0x21, 0x16, 0xda, 0x84, 0x42, 0xd7, 0x9f, 0x92, 0x11, 0x08, 0x32, 0x67, 0x49,
		0x41, 0x18, 0xcc, 0xfa, 0x04, 0x65, 0x62, 0x90, 0xcd, 0xf6, 0x83, 0x3f, 0x78, 0x60, 0xb5, 0xaa,
		0xca, 0x7c, 0xab, 0x67, 0x6e, 0x69, 0x66, 0x6a, 0xe9, 0xc5, 0x20, 0xf5, 0x99, 0xee, 0x24, 0x8d,
		0x47, 0x37, 0x39, 0x94, 0x3a, 0x67, 0x87, 0x2e, 0x47, 0xe7, 0x45, 0x2f, 0x38, 0x4b, 0x37, 0xc4,
		0xf5, 0xea, 0x45, 0xfd, 0xa2, 0xd1, 0xac, 0xea, 0xe6, 0x4b, 0x15, 0x79, 0xac, 0x2d, 0xa1, 0xd3,
		0x3b, 0xa3, 0x96, 0x88, 0x80, 0x8f, 0x12, 0xf0, 0x50, 0x02, 0x85, 0x24, 0x25, 0x41, 0x0d, 0x03,
		0xbc, 0xd3, 0x84, 0xd0, 0x46, 0xc5, 0x33, 0xcd, 0x6a, 0x6d, 0x5b, 0x86, 0xf4, 0xd0, 0x76, 0x8e,
		0x19, 0xec, 0x3a, 0x3a, 0x0d, 0xa4, 0x5a, 0x81, 0x7e, 0xb1, 0xc2, 0xbc, 0xda, 0x39, 0x39, 0xe0,
		0x59, 0xe0, 0x59, 0xe0, 0x59, 0xe0, 0x59, 0xe0, 0x59, 0xe0, 0x59, 0xe0, 0x59, 0xe0, 0x59, 0xe0,
		0x59, 0xe0, 0x59, 0x3d, 0x3c, 0x4b, 0x77, 0xc7, 0x92, 0xa9, 0x3b, 0x94, 0x80, 0x79, 0x81, 0x79,
		0x81, 0x79, 0x81, 0x79, 0x81, 0x79, 0x81, 0x79, 0x81, 0x79, 0x81, 0x79, 0x81, 0x79, 0x81, 0x79,
		0xa5, 0x3f, 0x99, 0x73, 0x27, 0xaa, 0xa6, 0x94, 0x50, 0xa7, 0x92, 0x94, 0xa4, 0x80, 0x3c, 0x59,
		0xca, 0x48, 0xbe, 0x55, 0xb4, 0x7d, 0xc4, 0x73, 0x8c, 0x76, 0x7a, 0x24, 0x36, 0x3f, 0xc9, 0x98,
		0xab, 0x80, 0x92, 0x97, 0x41, 0x48, 0x32, 0x07, 0x69, 0xc6, 0xa0, 0xc2, 0x14, 0x94, 0x19, 0x82,
		0xaa, 0xe5, 0xd3, 0x66, 0x04, 0xda, 0x66, 0x4d, 0x87, 0x01, 0xd0, 0xee, 0x6e, 0x69, 0xa4, 0x9f,
		0xcd, 0xd6, 0x80, 0x87, 0xc2, 0x6b, 0xc8, 0x4c, 0xd7, 0x78, 0xed, 0x35, 0x24, 0x1e, 0x51, 0x03,
		0xf4, 0x6a, 0xc9, 0x83, 0xea, 0x0c, 0x53, 0xb3, 0xec, 0x0d, 0x19, 0x88, 0xd4, 0x07, 0x8f, 0x2f,
		0x6a, 0x59, 0x93, 0xfa, 0x43, 0xa7, 0x5e, 0x7e, 0xa6, 0x48, 0xa3, 0x67, 0xc8, 0xa1, 0xdf, 0x91,
		0x6e, 0x79, 0x0d, 0x48, 0xad, 0x01, 0xa5, 0x35, 0xb4, 0x04, 0xaf, 0x5a, 0xae, 0x97, 0xbd, 0xb2,
		0x57, 0xae, 0x9d, 0x3a, 0x5c, 0xb0, 0x9e, 0xd3, 0x7e, 0x43, 0x88, 0xa3, 0x29, 0xf5, 0x25, 0x5d,
		0xdc, 0x6c, 0x46, 0x62, 0x92, 0x19, 0xbf, 0x7d, 0x5b, 0xf3, 0x24, 0xc0, 0x4b, 0xc4, 0x7e, 0xa7,
		0xc3, 0xdb, 0x6e, 0xbb, 0xeb, 0x27, 0x89, 0xcb, 0xc2, 0xe1, 0xbe, 0x08, 0xe4, 0x81, 0xd8, 0xea,
		0x66, 0x72, 0xee, 0xca, 0x77, 0xac, 0xe3, 0x0f, 0xba, 0x42, 0x6a, 0x5f, 0x95, 0x86, 0x0b, 0x24,
		0xdf, 0x94, 0xdd, 0x19, 0xc6, 0x87, 0x15, 0xe0, 0x43, 0xe0, 0xc3, 0xb9, 0xd9, 0xba, 0x8f, 0xa2,
		0x2e, 0xf3, 0x43, 0x05, 0x80, 0xe8, 0x79, 0xf0, 0x77, 0x65, 0xaf, 0x7c, 0xbe, 0xb2, 0xec, 0x15,
		0xdc, 0xdc, 0x16, 0x37, 0xb7, 0x69, 0xd8, 0x8e, 0xd3, 0xbb, 0xc9, 0x6c, 0xe1, 0xa9, 0x33, 0xcb,
		0x7f, 0x16, 0x17, 0x4e, 0x03, 0x4e, 0x63, 0x81, 0x11, 0x86, 0x81, 0x2f, 0xa2, 0xf8, 0x39, 0x3f,
		0x27, 0xd6, 0x70, 0x34, 0x3c, 0x60, 0xa1, 0xe0, 0xe2, 0x59, 0xae, 0x98, 0x5c, 0xe6, 0x6c, 0x24,
		0x68, 0x67, 0xe9, 0xe3, 0xb8, 0xab, 0xb7, 0x7e, 0xa2, 0x71, 0x6a, 0x6b, 0xb8, 0xb5, 0xdc, 0xa8,
		0xe3, 0x66, 0x72, 0xa7, 0xec, 0x4a, 0x49, 0x49, 0x73, 0xa2, 0x14, 0xcd, 0xd0, 0xac, 0x70, 0x31,
		0xce, 0x61, 0x98, 0x7e, 0x73, 0x1b, 0x0a, 0x83, 0xe6, 0x77, 0x0e, 0xc6, 0x6a, 0xf3, 0x7e, 0x7d,
		0x6b, 0x36, 0xfc, 0xc6, 0x31, 0xeb, 0xfa, 0xcf, 0xfb, 0xf5, 0xbd, 0x13, 0xfd, 0x15, 0x22, 0xf5,
		0xc4, 0xdd, 0x8e, 0x6c, 0xdc, 0x3e, 0xa2, 0xca, 0x09, 0xff, 0xef, 0x41, 0x3f, 0x91, 0x04, 0x96,
		0x39, 0x46, 0xee, 0xf0, 0xb0, 0xe5, 0x89, 0xc6, 0x3e, 0x99, 0x94, 0x06, 0x48, 0x83, 0x70, 0x5b,
		0x3e, 0x2a, 0x75, 0xec, 0x5f, 0xfe, 0x98, 0x3f, 0xc9, 0xb1, 0x7e, 0xb9, 0x63, 0xfc, 0xdb, 0x06,
		0x47, 0xc1, 0x78, 0x28, 0x18, 0x0d, 0x05, 0x2c, 0x35, 0x5c, 0xea, 0x04, 0xb6, 0x81, 0x02, 0x44,
		0xab, 0xda, 0x02, 0x5a, 0x1c, 0xbd, 0x71, 0x40, 0xa8, 0x5d, 0xcf, 0x89, 0xde, 0xd6, 0xde, 0xb6,
		0xea, 0x24, 0x23, 0xf9, 0x5a, 0x11, 0xfc, 0x1c, 0x93, 0xa6, 0x1e, 0xa6, 0xdf, 0x3c, 0xf0, 0xeb,
		0x87, 0x71, 0xc3, 0x00, 0x95, 0xb2, 0x6f, 0xbe, 0x3d, 0x02, 0x3f, 0x45, 0xc3, 0xd3, 0x67, 0xb6,
		0x59, 0xc3, 0x5c, 0x0c, 0x39, 0x77, 0xb8, 0x5d, 0x86, 0x11, 0x4b, 0x33, 0x61, 0xd9, 0xcd, 0xab,
		0xcc, 0x7c, 0x95, 0x77, 0xaa, 0x0a, 0xd3, 0xd5, 0xf3, 0x66, 0xb9, 0xd9, 0xe9, 0x5c, 0x78, 0x3c,
		0x57, 0xfe, 0xab, 0x44, 0xbe, 0xab, 0x64, 0x38, 0x5c, 0xc2, 0xfe, 0xab, 0x84, 0xbf, 0x55, 0xf3,
		0x55, 0xb5, 0x03, 0xb6, 0xea, 0x81, 0x5a, 0x99, 0xd3, 0x00, 0x2a, 0x61, 0x6d, 0xed, 0xfc, 0xd2,
		0x5d, 0x8e, 0x8d, 0x1d, 0x1f, 0xa5, 0x64, 0x9c, 0xc7, 0x3e, 0x22, 0xa7, 0x59, 0xce, 0x83, 0x39,
		0x65, 0x0d, 0x72, 0x05, 0x06, 0x79, 0xcf, 0x0d, 0xf2, 0x70, 0x55, 0xe4, 0xad, 0x30, 0x29, 0x53,
		0x49, 0xb2, 0xf4, 0x07, 0x0b, 0x1f, 0x52, 0x88, 0x04, 0xab, 0x5c, 0x70, 0xab, 0x5c, 0xab, 0xc2,
		0x1a, 0x1f, 0x0c, 0x4f, 0xad, 0x83, 0xa7, 0x2e, 0x04, 0x3f, 0xf7, 0x86, 0xa7, 0x2a, 0x61, 0x80,
		0x7c, 0xd9, 0xd1, 0x52, 0x59, 0xd1, 0xa0, 0x65, 0x47, 0x49, 0xcb, 0x72, 0x65, 0x2d, 0x4b, 0x64,
		0x2b, 0x17, 0x94, 0x96, 0x79, 0x00, 0x00, 0x4b, 0xb4, 0xac, 0x02, 0x42, 0x06, 0x08, 0x00, 0x08,
		0xb0, 0xa7, 0x10, 0x60, 0xd0, 0x77, 0x05, 0x97, 0x51, 0x02, 0x26, 0x0f, 0x00, 0x06, 0x00, 0x06,
		0xcc, 0x8d, 0xf6, 0xff, 0xb2, 0x38, 0x72, 0xef, 0xfd, 0x84, 0x05, 0x6e, 0x3b, 0x1a, 0x84, 0x82,
		0xc5, 0xe4, 0x5a, 0xed, 0x34, 0xa1, 0xbb, 0x54, 0xc9, 0xd3, 0xf4, 0x3f, 0xfd, 0x64, 0xfa, 0x48,
		0xbe, 0xd1, 0x86, 0x1e, 0x0c, 0x3d, 0x18, 0xf0, 0x03, 0xf0, 0x03, 0xf0, 0x83, 0x0e, 0x7e, 0x9c,
		0x48, 0xac, 0xd2, 0x1c, 0x49, 0x2e, 0xf9, 0x92, 0x5b, 0xf2, 0x27, 0xb5, 0x68, 0x25, 0xb3, 0xe4,
		0x4b, 0x62, 0x59, 0xf7, 0xb2, 0x12, 0x5b, 0xb1, 0x34, 0x08, 0xf9, 0xff, 0x0c, 0xb6, 0xef, 0x3f,
		0x09, 0x8f, 0x9d, 0xff, 0x4a, 0x11, 0x1d, 0x84, 0x34, 0xfe, 0xde, 0x36, 0x11, 0xd2, 0xe4, 0xc5,
		0x74, 0x31, 0xd2, 0x89, 0xdc, 0x56, 0x58, 0x37, 0xcb, 0x39, 0x93, 0x44, 0x14, 0x92, 0x43, 0x36,
		0x8c, 0xaa, 0x6c, 0x2a, 0xc8, 0xea, 0xc1, 0x5a, 0x1e, 0x82, 0xf9, 0xdf, 0x2c, 0xbc, 0xf2, 0xb6,
		0x57, 0x95, 0x79, 0xc5, 0x15, 0xef, 0x96, 0xfb, 0x9d, 0xe6, 0x5f, 0x66, 0xfa, 0x95, 0x67, 0xbe,
		0x6e, 0x89, 0x0f, 0x21, 0x6a, 0xc7, 0x6f, 0xaf, 0x28, 0x42, 0x37, 0xcd, 0x83, 0x9f, 0x7e, 0x66,
		0xe1, 0x45, 0x27, 0xd1, 0xac, 0x85, 0x5f, 0xaf, 0x0b, 0x6e, 0x6e, 0xe2, 0x2f, 0xd3, 0xde, 0x56,
		0x25, 0xdb, 0x6f, 0xdb, 0x7a, 0xb9, 0xc9, 0x48, 0xee, 0xad, 0x35, 0xb7, 0x95, 0x78, 0xa7, 0x24,
		0xb9, 0x04, 0xde, 0xf1, 0xd5, 0x86, 0x79, 0x3a, 0x98, 0xeb, 0xdf, 0x65, 0x69, 0xdc, 0xd7, 0xbd,
		0xcb, 0xea, 0xe1, 0xdf, 0x3a, 0x0d, 0x32, 0x74, 0x72, 0xf3, 0xb4, 0xc8, 0x5a, 0x46, 0x69, 0xce,
		0x28, 0x6d, 0x09, 0xb7, 0x4e, 0x9b, 0x9a, 0x3f, 0x5e, 0x37, 0x9d, 0xd9, 0x07, 0xfc, 0xa0, 0xc7,
		0x43, 0x37, 0xe7, 0x3d, 0xe7, 0x33, 0xbe, 0x67, 0xe6, 0xa9, 0x3d, 0xd0, 0x12, 0x78, 0xe7, 0xf0,
		0x84, 0x84, 0x4d, 0x8b, 0x84, 0x46, 0x45, 0x90, 0x38, 0xb5, 0xa4, 0xa0, 0x38, 0xc8, 0xdd, 0xed,
		0x2d, 0x73, 0x87, 0xb7, 0xdc, 0x5d, 0xdd, 0x6a, 0x77, 0x72, 0x8f, 0x6e, 0xcb, 0x1e, 0xf4, 0x65,
		0x98, 0x4d, 0x75, 0xa4, 0xff, 0xfc, 0x90, 0x3a, 0x02, 0x9c, 0xde, 0x7a, 0x2d, 0x58, 0x22, 0x86,
		0xdf, 0x90, 0xf6, 0x24, 0xb3, 0xf4, 0xdd, 0xd3, 0xa3, 0x2f, 0x2f, 0x55, 0x2d, 0x35, 0xfb, 0xea,
		0x97, 0x4e, 0x4d, 0xe2, 0xa9, 0x41, 0x7f, 0x38, 0xd7, 0x85, 0xc8, 0xdb, 0x57, 0x21, 0xdc, 0xbc,
		0xe3, 0x76, 0x98, 0x2f, 0x06, 0xb1, 0x51, 0xc6, 0xcd, 0x3b, 0x6e, 0x8f, 0xdf, 0x5b, 0xe6, 0xd6,
		0x33, 0xaf, 0xb6, 0x4b, 0x72, 0x3d, 0x7e, 0x77, 0xfb, 0x34, 0xfa, 0xb4, 0x20, 0x72, 0xcb, 0xe7,
		0x0f, 0xbf, 0x3b, 0xd5, 0x56, 0xa3, 0x76, 0xe9, 0xdc, 0x3e, 0x32, 0xe7, 0x63, 0x06, 0x75, 0x9d,
		0xff, 0x8e, 0xa3, 0x41, 0xdf, 0xb9, 0xfe, 0xf8, 0xd6, 0x71, 0x1d, 0xde, 0xb9, 0x1a, 0x7a, 0xea,
		0x2f, 0x79, 0x1c, 0xf5, 0x61, 0x8a, 0x30, 0x0a, 0xc3, 0x74, 0x10, 0x91, 0xa1, 0xf1, 0x09, 0xcf,
		0x7e, 0x14, 0x8b, 0xfc, 0xb0, 0x6e, 0xf6, 0xa1, 0x7c, 0xa8, 0xce, 0x43, 0xba, 0x28, 0x39, 0xb0,
		0xb3, 0x12, 0x21, 0xda, 0x46, 0x0c, 0xa6, 0x04, 0xa1, 0xdd, 0x66, 0xfd, 0xd4, 0xf5, 0xb9, 0x9d,
		0x38, 0x4f, 0xd6, 0xf1, 0x32, 0x59, 0x58, 0x6c, 0xc1, 0x64, 0x01, 0xa0, 0x21, 0x33, 0x11, 0xae,
		0xdf, 0xed, 0x8e, 0xfa, 0x4a, 0x50, 0x0c, 0xc8, 0xa4, 0x8d, 0x47, 0x31, 0x20, 0xd5, 0x1a, 0x0d,
		0x72, 0xec, 0x47, 0x85, 0x05, 0xa9, 0xb1, 0x21, 0x3d, 0x56, 0x94, 0x3d, 0x5d, 0x99, 0xa8, 0x04,
		0xc2, 0x8d, 0xc2, 0xee, 0xb3, 0xfb, 0xe7, 0x1f, 0x57, 0xff, 0x76, 0x85, 0xff, 0xf0, 0xc0, 0x82,
		0xc9, 0xc6, 0x54, 0x38, 0x58, 0xed, 0x2d, 0xb4, 0x3a, 0x08, 0xc7, 0x4d, 0xfa, 0x61, 0xe0, 0xf6,
		0x63, 0x1e, 0xc5, 0x5c, 0x3c, 0x8f, 0xbb, 0x51, 0x69, 0xbf, 0x3a, 0x6d, 0x5f, 0xd6, 0x82, 0x48,
		0xae, 0x1c, 0x0d, 0x12, 0xb6, 0xde, 0xd4, 0x49, 0x5f, 0x63, 0x31, 0xd3, 0xcc, 0xba, 0x59, 0x52,
		0xbb, 0x37, 0x3c, 0xef, 0x1c, 0xe5, 0xe5, 0x78, 0x72, 0xbb, 0xd7, 0x41, 0x6d, 0x03, 0xaf, 0x5a,
		0xf6, 0x2a, 0x65, 0x6f, 0xfd, 0x51, 0xdd, 0x6f, 0x61, 0xa3, 0x7c, 0x81, 0xa2, 0x07, 0x12, 0x8e,
		0x46, 0x73, 0x48, 0x8b, 0x53, 0x0d, 0x41, 0xc2, 0x75, 0xfc, 0x78, 0x64, 0xa1, 0xcd, 0x65, 0x5b,
		0x2e, 0x4f, 0x0f, 0x4c, 0xbb, 0xa1, 0xdf, 0x63, 0xce, 0xdf, 0xfe, 0xe1, 0xbc, 0x5a, 0xae, 0x57,
		0xf3, 0x6a, 0xc7, 0x2b, 0x34, 0x1d, 0x97, 0x22, 0x2d, 0xce, 0xfc, 0x03, 0x67, 0xa5, 0x02, 0xf2,
		0x3b, 0x96, 0xb4, 0x63, 0xde, 0x97, 0xae, 0x91, 0xbf, 0x72, 0x51, 0x5c, 0xf5, 0xfb, 0x5d, 0xce,
		0x12, 0x47, 0x44, 0x4e, 0x18, 0x85, 0xce, 0xed, 0xcd, 0xf5, 0xe7, 0x44, 0x75, 0xf0, 0x09, 0xae,
		0x86, 0x98, 0x5d, 0x07, 0xc1, 0xcc, 0x7b, 0x6a, 0x5c, 0x58, 0x41, 0x79, 0x29, 0xc4, 0xdc, 0xb2,
		0x58, 0x39, 0x74, 0x96, 0x2e, 0x73, 0x38, 0x84, 0x4a, 0x81, 0x93, 0x54, 0x04, 0x79, 0xce, 0x9b,
		0x3b, 0x39, 0xc3, 0xc1, 0x25, 0x04, 0xe0, 0x95, 0x74, 0xbc, 0xb2, 0xe7, 0xb7, 0x5d, 0xb9, 0xc5,
		0xe7, 0x48, 0x1e, 0xef, 0x9d, 0x2e, 0x2a, 0x5f, 0x08, 0x16, 0xcb, 0xe3, 0x83, 0xd2, 0xd7, 0x8a,
		0x7b, 0xe1, 0xbb, 0x9d, 0x2b, 0xf7, 0xc3, 0xdd, 0xaf, 0xea, 0xcb, 0x6b, 0x77, 0xfe, 0xe7, 0x37,
		0xbf, 0xce, 0x5f, 0x4a, 0xa8, 0x04, 0x9f, 0x1b, 0xe7, 0xd7, 0xcb, 0xd5, 0xf5, 0x88, 0x74, 0xf4,
		0xef, 0x73, 0xb5, 0xce, 0x7d, 0xd4, 0x3a, 0x93, 0x84, 0xfd, 0x84, 0x23, 0x7c, 0xa4, 0x5e, 0xb4,
		0xc7, 0x43, 0xb7, 0x1f, 0xf1, 0x50, 0xb8, 0x22, 0x1a, 0xfd, 0x45, 0xc5, 0xa5, 0xae, 0x68, 0x05,
		0xba, 0x2d, 0xfc, 0x2b, 0x74, 0x5b, 0x3a, 0xdd, 0x36, 0x55, 0x58, 0x3b, 0x51, 0xdc, 0x66, 0x6e,
		0x7a, 0x95, 0x82, 0xaa, 0x88, 0x3a, 0x6a, 0x22, 0x3d, 0x5f, 0xa1, 0xd2, 0x46, 0x9a, 0xf4, 0xe2,
		0x0f, 0x44, 0x54, 0x5c, 0xf1, 0x75, 0xf8, 0xe5, 0xa4, 0x72, 0x5a, 0xb2, 0x47, 0x67, 0xc7, 0x46,
		0x4d, 0xb2, 0x9d, 0x99, 0x20, 0x28, 0xa8, 0x3b, 0x42, 0x56, 0x8d, 0x72, 0x6b, 0xfd, 0x3f, 0x03,
		0x49, 0x29, 0x20, 0xa9, 0xcd, 0x23, 0x7a, 0x94, 0xc8, 0xa9, 0xed, 0xf7, 0xfd, 0x7b, 0xde, 0xe5,
		0x42, 0xe6, 0xb2, 0xf5, 0x69, 0x35, 0xc6, 0xd9, 0xa7, 0xa1, 0x44, 0x00, 0x29, 0x59, 0x45, 0x4a,
		0xf7, 0x5c, 0x28, 0x49, 0x10, 0x12, 0xf1, 0xc6, 0xd2, 0x5b, 0x2e, 0x76, 0x12, 0xd9, 0x16, 0xfe,
		0xc3, 0xc3, 0xb0, 0x05, 0xd5, 0x18, 0x76, 0x3b, 0xdd, 0x36, 0x83, 0x38, 0x4d, 0x8a, 0x59, 0xcc,
		0x8f, 0x71, 0x25, 0x6e, 0x1a, 0x59, 0x46, 0x5e, 0x3c, 0x7c, 0x88, 0x59, 0x92, 0xb8, 0x1d, 0xde,
		0x15, 0x2c, 0xce, 0x9d, 0x34, 0xbc, 0x03, 0x08, 0x95, 0x63, 0x10, 0x94, 0x6e, 0x90, 0x5c, 0x31,
		0x04, 0x6a, 0x30, 0x6b, 0x32, 0xcb, 0x97, 0x4e, 0x05, 0x18, 0xcb, 0x10, 0xc6, 0x4a, 0x43, 0xaa,
		0x79, 0x2e, 0xe2, 0x9b, 0x28, 0x2d, 0x80, 0x5c, 0x72, 0x90, 0x8b, 0x6e, 0x80, 0x8f, 0x13, 0x81,
		0xcd, 0x45, 0x55, 0x15, 0x30, 0xd8, 0xfc, 0xf3, 0xd0, 0xab, 0x80, 0xc2, 0xac, 0xa2, 0xb0, 0x64,
		0x04, 0x75, 0x54, 0x42, 0x41, 0x16, 0x77, 0x59, 0x30, 0x4a, 0xf5, 0xcd, 0xf2, 0xc3, 0xe4, 0xf7,
		0xd9, 0x52, 0x0b, 0x26, 0x93, 0x8c, 0x2b, 0xc8, 0x2a, 0xc6, 0x6e, 0x2f, 0xe2, 0x6e, 0x9f, 0xe6,
		0x57, 0xca, 0x51, 0x88, 0xc9, 0x12, 0x3c, 0x3f, 0xd8, 0x9b, 0xe8, 0x2b, 0xb8, 0x89, 0x5e, 0x75,
		0xe8, 0x9a, 0xb8, 0x86, 0x5e, 0x0f, 0x88, 0x1e, 0x30, 0x7d, 0x6b, 0x80, 0x90, 0xc9, 0x12, 0xb2,
		0x06, 0x28, 0xd6, 0x02, 0xf8, 0x8b, 0xa3, 0xbe, 0xcb, 0xc2, 0x76, 0x14, 0xc8, 0x88, 0x72, 0x53,
		0x84, 0x32, 0xf7, 0xb8, 0x49, 0xd8, 0x37, 0x0a, 0xd9, 0x01, 0xfa, 0x01, 0xfa, 0x15, 0x10, 0xfa,
		0xe1, 0x76, 0x79, 0x33, 0x6e, 0xec, 0x5b, 0xd8, 0x2a, 0x37, 0xca, 0x0d, 0x78, 0x39, 0x32, 0x2f,
		0xb7, 0x6d, 0x44, 0x8f, 0xd2, 0x09, 0xb2, 0x51, 0xc8, 0xe2, 0x89, 0x07, 0xae, 0x88, 0xfd, 0x30,
		0xe9, 0xa6, 0x29, 0x46, 0x0a, 0x41, 0xdf, 0x75, 0x0d, 0xc9, 0x39, 0x24, 0x0f, 0x0e, 0x09, 0x0e,
		0x49, 0xa6, 0x4e, 0x40, 0xf6, 0x40, 0x37, 0x6a, 0xfb, 0xdd, 0xe1, 0xf2, 0x53, 0xbf, 0x0e, 0x7e,
		0xda, 0x84, 0xe4, 0xa8, 0xc9, 0xa1, 0x29, 0xe5, 0x45, 0xac, 0xb3, 0x98, 0xb5, 0x17, 0xb5, 0x09,
		0x2f, 0xa2, 0xb4, 0xc8, 0xcd, 0xba, 0x10, 0xc9, 0x45, 0xaf, 0xe8, 0x0a, 0x64, 0x83, 0xdd, 0xb2,
		0xe8, 0x6c, 0x69, 0xb6, 0x9f, 0xba, 0x7e, 0xc8, 0x95, 0xce, 0xa6, 0xe7, 0xbf, 0x7d, 0x85, 0x48,
		0xa9, 0x53, 0x47, 0x56, 0x24, 0xca, 0xdd, 0x92, 0x0c, 0xe5, 0x9d, 0xea, 0xb5, 0x43, 0x25, 0x47,
		0xd1, 0xc9, 0x52, 0x1a, 0xca, 0x1e, 0x89, 0xc2, 0xb7, 0x34, 0xc4, 0xf5, 0xca, 0x45, 0xfd, 0x70,
		0x47, 0xd9, 0xd2, 0xb9, 0xc7, 0x3b, 0xa3, 0x26, 0x48, 0x83, 0x5d, 0x11, 0xb0, 0x2c, 0x02, 0x9b,
		0xb0, 0x98, 0xfb, 0x71, 0x61, 0xab, 0x42, 0x01, 0x95, 0xe3, 0x34, 0x41, 0xc3, 0xc8, 0x7d, 0xe9,
		0x3a, 0x5a, 0xa6, 0x33, 0xe4, 0x87, 0xb6, 0xf3, 0x8c, 0x5c, 0x8a, 0x11, 0xb3, 0xae, 0xff, 0xac,
		0x07, 0x7f, 0xa7, 0x4d, 0x00, 0xfe, 0x02, 0xfe, 0x02, 0xfe, 0x02, 0xfe, 0x02, 0xfe, 0x02, 0xfe,
		0x02, 0xfe, 0x02, 0xfe, 0x02, 0xfe, 0x02, 0xfe, 0xee, 0x00, 0xfe, 0x92, 0x0a, 0xca, 0xe3, 0x1b,
		0xa2, 0x64, 0x41, 0x6e, 0xbe, 0x6b, 0xa3, 0x56, 0xb9, 0xe0, 0x7c, 0xd7, 0x48, 0xad, 0xf2, 0x2c,
		0xca, 0xd7, 0x4a, 0x2d, 0x35, 0x96, 0xeb, 0x9a, 0x29, 0xd5, 0x11, 0xd5, 0x09, 0xb8, 0xa2, 0xc0,
		0xdb, 0x6a, 0x8b, 0x86, 0x02, 0x6f, 0x9b, 0xbf, 0x1a, 0x0a, 0xbc, 0xed, 0xcc, 0xaf, 0xa1, 0xc0,
		0x9b, 0x94, 0x75, 0xcc, 0x79, 0x7d, 0xdb, 0xd2, 0x73, 0x4b, 0x77, 0x9d, 0x89, 0x8e, 0x3b, 0xbd,
		0x50, 0xec, 0x6c, 0xd5, 0x5f, 0xcf, 0x66, 0xea, 0xe7, 0x9f, 0xe9, 0xc5, 0xe1, 0x9d, 0x15, 0xf7,
		0xa5, 0xbd, 0xbf, 0xfd, 0x30, 0xbd, 0xbf, 0xe0, 0xfb, 0xaa, 0xbf, 0x8e, 0x2f, 0x50, 0xbb, 0x89,
		0x62, 0xf1, 0xfd, 0x7d, 0xda, 0xff, 0x9f, 0x3c, 0xb8, 0x9d, 0xed, 0xdd, 0x66, 0x46, 0x43, 0x98,
		0x9e, 0xe6, 0x5c, 0x3d, 0x0e, 0xae, 0x9c, 0xaf, 0x9a, 0x29, 0xbf, 0xb2, 0xbd, 0x51, 0xa4, 0x00,
		0xea, 0xaa, 0x74, 0xc8, 0xb8, 0x40, 0x0a, 0xe0, 0xae, 0x10, 0xe9, 0x4e, 0x0f, 0x22, 0x5f, 0xa0,
		0x5c, 0x36, 0xf5, 0xd1, 0xe3, 0x0b, 0x94, 0xcb, 0x06, 0x9b, 0x02, 0x9b, 0x02, 0x9b, 0x02, 0x9b,
		0x2a, 0x32, 0x9b, 0xa2, 0x84, 0xfc, 0xab, 0xea, 0xaf, 0xa8, 0xe1, 0xfc, 0xe5, 0x96, 0x00, 0xee,
		0x01, 0xee, 0x01, 0xee, 0x01, 0xee, 0x15, 0xc0, 0x7d, 0x7d, 0xf3, 0x81, 0x14, 0x1c, 0x64, 0x55,
		0x81, 0xf7, 0xca, 0x83, 0x0a, 0x80, 0x0f, 0x80, 0x0f, 0x80, 0x0f, 0x80, 0x0f, 0x80, 0xbf, 0x7f,
		0x00, 0x3f, 0x66, 0x89, 0x88, 0x79, 0x5b, 0xb0, 0xc0, 0x7d, 0xea, 0xfa, 0xa1, 0x1b, 0xb3, 0x07,
		0x9e, 0x88, 0x58, 0x2e, 0xca, 0xb2, 0x88, 0xf5, 0x37, 0x36, 0x0a, 0xd8, 0x0f, 0xd8, 0x0f, 0xd8,
		0x0f, 0xd8, 0x2f, 0x03, 0xfb, 0xbd, 0x72, 0xb5, 0x5c, 0x1b, 0xfe, 0x6f, 0x63, 0xc5, 0xcb, 0x14,
		0xc5, 0xe2, 0x78, 0xbf, 0x14, 0xf6, 0x27, 0x19, 0x59, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
		0x00, 0x10, 0x80, 0xfd, 0x23, 0x00, 0xb4, 0xd9, 0x3c, 0x48, 0xe3, 0x01, 0xe4, 0x07, 0xe4, 0x07,
		0xe4, 0x27, 0x53, 0xfa, 0x5b, 0x48, 0xe3, 0xa1, 0xd6, 0xf9, 0x5b, 0x48, 0xe3, 0x01, 0xc8, 0x07,
		0xc8, 0x07, 0xc8, 0x07, 0xc8, 0x3f, 0x7c, 0x90, 0xff, 0x53, 0xb0, 0x38, 0xf4, 0xbb, 0x0a, 0x80,
		0x7e, 0xf2, 0x24, 0x6e, 0x9b, 0x03, 0x68, 0x06, 0x68, 0x3e, 0x80, 0x8b, 0x4e, 0x01, 0x8a, 0x57,
		0x83, 0x62, 0x5c, 0x94, 0xb5, 0x30, 0x3e, 0x3d, 0xff, 0x67, 0x2a, 0xe4, 0x24, 0x4c, 0xb8, 0x2c,
		0x14, 0xb1, 0xd2, 0x8d, 0xa5, 0xab, 0x1a, 0x81, 0x2b, 0x81, 0x2b, 0xb1, 0xea, 0x4a, 0x06, 0x3c,
		0x14, 0x5e, 0x43, 0xc1, 0x93, 0x34, 0x70, 0x7b, 0xce, 0xc2, 0xf3, 0xb8, 0x3d, 0xc7, 0x69, 0x9c,
		0x9f, 0xd7, 0xce, 0x71, 0x83, 0x8e, 0x9e, 0x87, 0xb2, 0x80, 0xbd, 0x78, 0xc7, 0xed, 0x30, 0x5f,
		0x0c, 0x62, 0xab, 0xe0, 0xab, 0x1f, 0xc5, 0xc2, 0xf5, 0xc3, 0xc0, 0xed, 0xc7, 0x91, 0x88, 0xda,
		0x51, 0xd7, 0xbd, 0xf7, 0x93, 0x71, 0x06, 0xd4, 0x8e, 0xa1, 0xd7, 0xcc, 0x80, 0x14, 0x09, 0x7b,
		0x6d, 0x1c, 0xb1, 0xbd, 0x94, 0x1b, 0x77, 0x7d, 0xf5, 0x2e, 0xa0, 0xbf, 0x1c, 0xf4, 0xdf, 0x3a,
		0x6e, 0x10, 0xbd, 0x73, 0x2c, 0x40, 0x88, 0xde, 0x8a, 0x2b, 0x10, 0xa2, 0xb7, 0x95, 0x35, 0xe0,
		0x40, 0xf4, 0x3e, 0x2a, 0xfd, 0x22, 0xea, 0xb3, 0xd8, 0xed, 0x47, 0x3c, 0x14, 0xae, 0x88, 0x46,
		0x7f, 0x91, 0xd7, 0x2f, 0x56, 0x35, 0x02, 0xfd, 0x02, 0xfa, 0x85, 0x55, 0xfd, 0x02, 0x52, 0xb8,
		0xaa, 0xfb, 0x99, 0x47, 0x73, 0x57, 0xbf, 0xa7, 0x69, 0xcc, 0x10, 0xc7, 0xe5, 0x76, 0x8d, 0xf4,
		0x20, 0x1e, 0xa5, 0xbb, 0xe9, 0xb7, 0xfb, 0x6e, 0xc0, 0x46, 0x97, 0x96, 0xaa, 0xa6, 0x4f, 0xae,
		0x68, 0x03, 0xb7, 0xbc, 0xc1, 0xd9, 0x28, 0x58, 0x6a, 0xe9, 0x5b, 0xde, 0xe6, 0x96, 0x5e, 0xcf,
		0xef, 0xab, 0xdf, 0x76, 0xb1, 0xd4, 0x92, 0xda, 0xa5, 0x17, 0xde, 0xde, 0x5d, 0x7a, 0x91, 0xde,
		0xd1, 0x9f, 0xe0, 0xea, 0x8b, 0x95, 0x1b, 0x61, 0x3c, 0x38, 0x05, 0xbb, 0x00, 0x43, 0x76, 0x9b,
		0xcc, 0x6e, 0x17, 0x7d, 0x72, 0x3c, 0x6c, 0x44, 0x71, 0x7c, 0xd5, 0x6e, 0x86, 0xd1, 0xde, 0x2c,
		0x14, 0x9b, 0x86, 0x78, 0xf3, 0x50, 0xca, 0x03, 0xa4, 0x9b, 0xc9, 0x88, 0x42, 0x40, 0xbb, 0xb9,
		0xd4, 0x05, 0x02, 0x47, 0xfd, 0x9a, 0x0f, 0xf5, 0x5b, 0x67, 0x56, 0xba, 0x9a, 0x84, 0x75, 0x59,
		0x7b, 0x74, 0xca, 0x64, 0xd8, 0xae, 0xc6, 0x02, 0x9a, 0x38, 0x1e, 0x8d, 0x2b, 0x43, 0x4a, 0xef,
		0xc3, 0x41, 0x4f, 0x7f, 0x09, 0xde, 0x46, 0x5f, 0x84, 0x54, 0x99, 0xad, 0x8d, 0xad, 0x55, 0x86,
		0x43, 0xd5, 0xba, 0xa9, 0xbc, 0xd3, 0x5c, 0xc8, 0x69, 0x63, 0xde, 0xb0, 0xb1, 0xe6, 0x8d, 0x47,
		0xd2, 0x58, 0x75, 0xd8, 0x58, 0xe3, 0xa6, 0x4a, 0xd2, 0x58, 0x6d, 0xd8, 0xd8, 0xf9, 0x4d, 0xed,
		0x5d, 0x49, 0xab, 0xad, 0x97, 0x53, 0xdd, 0xb9, 0xfb, 0x28, 0x21, 0x34, 0x6d, 0x6c, 0x2a, 0x7d,
		0x99, 0x4b, 0xa7, 0x46, 0x30, 0x38, 0xe9, 0x20, 0xe7, 0xd6, 0x96, 0x36, 0x36, 0x95, 0x4e, 0xbe,
		0xf6, 0xf5, 0x45, 0x69, 0x53, 0xe9, 0xa2, 0xbc, 0x74, 0x2a, 0x7a, 0x13, 0xb6, 0x27, 0x66, 0x8f,
		0xe0, 0xa6, 0x1b, 0x02, 0x31, 0x45, 0x5f, 0x5c, 0x59, 0x6b, 0x8d, 0x47, 0x97, 0xc4, 0x97, 0x9b,
		0xa7, 0x4e, 0xa3, 0x7c, 0xb1, 0x32, 0x9a, 0x46, 0xb1, 0xcd, 0x89, 0xdc, 0xbc, 0x09, 0xf9, 0xc5,
		0xb8, 0xe7, 0x5f, 0x89, 0x00, 0x72, 0x0c, 0xbb, 0x76, 0xa7, 0x2f, 0x3b, 0xda, 0xa1, 0x77, 0xb6,
		0xe2, 0x1d, 0x0a, 0xa4, 0xad, 0x1f, 0xf3, 0x28, 0xe6, 0xe2, 0x59, 0x89, 0x2d, 0x2f, 0x43, 0x99,
		0xd9, 0xd6, 0xf4, 0x48, 0x81, 0x07, 0x52, 0x00, 0x52, 0xb0, 0x6f, 0xa4, 0x40, 0x95, 0x89, 0x67,
		0x0d, 0x04, 0x71, 0xd4, 0x77, 0x59, 0x97, 0x3f, 0x70, 0x5d, 0xef, 0x3a, 0xbf, 0x0e, 0xe7, 0x9a,
		0xd5, 0x9c, 0x23, 0x3d, 0xd6, 0x4e, 0xb6, 0x51, 0x29, 0x37, 0xac, 0xa1, 0x8d, 0x6b, 0xc3, 0xdd,
		0x93, 0x6c, 0x64, 0xbb, 0xbe, 0x9e, 0x64, 0x63, 0x13, 0x39, 0x75, 0x5d, 0x9e, 0xa4, 0xab, 0x02,
		0x2c, 0xad, 0x3c, 0xf9, 0x30, 0xe9, 0x56, 0x4f, 0xea, 0xed, 0x74, 0x88, 0x08, 0x19, 0x83, 0x01,
		0xe6, 0x40, 0xc7, 0x20, 0x76, 0xc3, 0x24, 0x4c, 0x99, 0x18, 0x1b, 0xcc, 0xc2, 0xb8, 0xd5, 0xd9,
		0x19, 0xd3, 0xa0, 0x31, 0x4e, 0x74, 0xad, 0xdc, 0xed, 0x4a, 0x9b, 0xd0, 0x00, 0xbd, 0x13, 0x2e,
		0x41, 0x87, 0x82, 0xb2, 0x16, 0x01, 0x80, 0x00, 0x80, 0x00, 0x80, 0x0a, 0x0a, 0x80, 0x32, 0x0d,
		0x41, 0x33, 0x12, 0xb2, 0xb8, 0x5d, 0xcf, 0x09, 0x9a, 0xd2, 0xbb, 0xb3, 0xdf, 0x20, 0xe6, 0xa0,
		0xb8, 0xd3, 0x7f, 0xa9, 0x51, 0xcd, 0x63, 0x76, 0x6b, 0xdb, 0xa5, 0xbe, 0x8d, 0x7e, 0x79, 0x29,
		0x51, 0xdd, 0x4e, 0x4f, 0xbc, 0x5b, 0xe6, 0xa7, 0xcc, 0xff, 0x69, 0x6e, 0xca, 0x9a, 0x98, 0xb2,
		0xc3, 0x82, 0x60, 0x20, 0x61, 0x20, 0x61, 0x20, 0x61, 0x20, 0x61, 0x3b, 0x22, 0x61, 0x6e, 0x3b,
		0x0a, 0x98, 0xe4, 0xf1, 0x93, 0xfc, 0x48, 0x6f, 0xa6, 0x71, 0x50, 0x33, 0x50, 0x33, 0x50, 0x33,
		0x50, 0x33, 0x50, 0x33, 0x50, 0x33, 0x50, 0x33, 0x50, 0x33, 0x50, 0x33, 0x50, 0x33, 0x50, 0x33,
		0x50, 0xb3, 0x03, 0xa5, 0x66, 0x56, 0xb3, 0x93, 0xfe, 0xc5, 0x9e, 0x69, 0x69, 0x57, 0xe9, 0x0f,
		0x9e, 0x88, 0x2b, 0x21, 0x34, 0x93, 0x9e, 0xae, 0x79, 0xf8, 0xbe, 0xcb, 0x86, 0xeb, 0x4f, 0xd3,
		0x7d, 0x0d, 0x1d, 0xf7, 0x4c, 0x4b, 0x5e, 0xab, 0x5e, 0x6f, 0x34, 0xeb, 0xf5, 0x4a, 0xb3, 0xd6,
		0xac, 0x5c, 0x9c, 0x9f, 0x7b, 0x0d, 0x4f, 0x03, 0x69, 0x96, 0x3e, 0xc5, 0x01, 0x8b, 0x59, 0xf0,
		0x76, 0x38, 0x88, 0xe1, 0xa0, 0xdb, 0xb5, 0x3a, 0x77, 0x57, 0x61, 0x18, 0x09, 0x5f, 0xab, 0x9c,
		0x49, 0xda, 0x4e, 0xd2, 0x7e, 0x64, 0x3d, 0xbf, 0xef, 0x8b, 0xc7, 0xe1, 0x52, 0x38, 0xe3, 0x4c,
		0x74, 0x5c, 0x1e, 0x0a, 0x16, 0x77, 0xfc, 0x36, 0x4b, 0xce, 0x56, 0xfd, 0xf5, 0x6c, 0x5c, 0xc2,
		0xa5, 0x1f, 0xc5, 0xe2, 0x6c, 0xf9, 0x70, 0xef, 0xd9, 0xe2, 0x51, 0xc9, 0x33, 0x82, 0x2c, 0xd0,
		0xd1, 0x77, 0x15, 0xf1, 0xa0, 0x2d, 0xc2, 0xec, 0x14, 0xfc, 0xed, 0x87, 0x8f, 0xd9, 0xd7, 0xfb,
		0xbe, 0xea, 0xaf, 0xdf, 0xdf, 0xa6, 0xdf, 0xf4, 0x26, 0x8a, 0xc5, 0xf7, 0x9b, 0x76, 0xff, 0xdd,
		0xf8, 0x4b, 0xdd, 0x0e, 0xbf, 0xe6, 0xec, 0x2f, 0xae, 0xfd, 0xfe, 0xf7, 0x9b, 0xf1, 0x97, 0xbc,
		0xf6, 0xfb, 0x05, 0xad, 0x47, 0x72, 0x7a, 0xa2, 0xb4, 0xbb, 0xa5, 0x8f, 0xe3, 0xe9, 0xed, 0x62,
		0xfd, 0xdd, 0x6b, 0x64, 0xd7, 0xea, 0xed, 0x56, 0xd9, 0xb1, 0xd7, 0xdc, 0x9d, 0x36, 0x76, 0xa5,
		0xca, 0x89, 0x5e, 0x93, 0x1b, 0xb0, 0x64, 0xa8, 0x5a, 0x02, 0xed, 0x09, 0x74, 0xc5, 0x89, 0x35,
		0x30, 0xa1, 0x32, 0xa5, 0x07, 0x48, 0xe7, 0xad, 0x64, 0xb9, 0xfc, 0x04, 0x0b, 0xf5, 0xcb, 0x4f,
		0x2c, 0xb4, 0x81, 0xf2, 0x13, 0xf6, 0xe4, 0xdb, 0x63, 0x2f, 0x3f, 0x91, 0x2d, 0x3d, 0xed, 0xf2,
		0x13, 0x73, 0x2d, 0xa1, 0xfc, 0x84, 0x61, 0x82, 0x8f, 0xf2, 0x13, 0xaa, 0xe0, 0x07, 0xe5, 0x27,
		0x70, 0xd2, 0xcc, 0xd4, 0x66, 0x32, 0x26, 0x81, 0xa1, 0xfc, 0x04, 0xca, 0x4f, 0xc8, 0xb4, 0x86,
		0xf2, 0x13, 0x16, 0x56, 0xf5, 0xcc, 0xdc, 0xa1, 0xfc, 0x44, 0xde, 0xa6, 0x50, 0x7e, 0x42, 0x71,
		0xe0, 0x50, 0x7e, 0x02, 0xe5, 0x27, 0x50, 0x7e, 0x82, 0xae, 0x3f, 0x94, 0x9f, 0x00, 0x29, 0x00,
		0x29, 0xd8, 0xa5, 0x77, 0xd4, 0x2f, 0x3f, 0xc1, 0x38, 0x61, 0xd1, 0x09, 0xc6, 0x91, 0xce, 0x6b,
		0x6b, 0x93, 0xda, 0x70, 0xed, 0x48, 0xe7, 0xdd, 0x29, 0x27, 0x42, 0xa9, 0x09, 0x8b, 0xec, 0xc0,
		0x00, 0x4b, 0xa0, 0x63, 0x0b, 0x6b, 0x58, 0xc3, 0xa9, 0xd3, 0x2a, 0x37, 0xca, 0x0d, 0x24, 0xd2,
		0x59, 0xb7, 0x39, 0x1b, 0x38, 0xc5, 0x86, 0x49, 0x41, 0x1a, 0x1d, 0x95, 0x06, 0x81, 0x32, 0x13,
		0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x2a, 0x5a, 0x01, 0xce, 0x32, 0xe5, 0xff, 0x62, 0x38, 0xcb,
		0x34, 0xb7, 0x94, 0x70, 0x96, 0x09, 0x53, 0x76, 0x58, 0x10, 0x0c, 0x04, 0x4c, 0x87, 0x80, 0xe1,
		0x2c, 0x53, 0x21, 0x29, 0x18, 0xce, 0x32, 0xed, 0x0b, 0x09, 0x43, 0x99, 0x09, 0x50, 0x33, 0x50,
		0x33, 0x50, 0x33, 0x50, 0x33, 0x50, 0x33, 0x50, 0x33, 0x50, 0x33, 0x00, 0x33, 0x50, 0x33, 0x22,
		0x6a, 0x76, 0x01, 0x6a, 0x56, 0x44, 0x6a, 0x76, 0x01, 0x6a, 0x66, 0x81, 0x9a, 0xed, 0xb2, 0xcc,
		0x84, 0xa3, 0x9e, 0x07, 0x84, 0xfa, 0x12, 0xd6, 0x26, 0xad, 0x48, 0xf5, 0x25, 0xe6, 0x4f, 0xef,
		0x9e, 0x2d, 0x9e, 0x85, 0x2c, 0x4c, 0x7d, 0x89, 0xf7, 0xe1, 0xc2, 0xf1, 0xf6, 0xc9, 0x2f, 0x50,
		0x5f, 0x82, 0x6e, 0x17, 0xa3, 0xbe, 0x44, 0x41, 0xea, 0x4b, 0x6c, 0xd9, 0x95, 0xbb, 0xa8, 0x2f,
		0xb1, 0x69, 0x03, 0xa2, 0xbe, 0x84, 0xdc, 0x84, 0xda, 0xac, 0x2f, 0x31, 0x37, 0x6f, 0xb6, 0xeb,
		0x4b, 0x64, 0x67, 0x1d, 0xd5, 0x4a, 0x4b, 0x4c, 0x1f, 0xcf, 0x5b, 0x45, 0x80, 0x75, 0xfc, 0x41,
		0x57, 0x48, 0x51, 0xa4, 0xd1, 0xa1, 0xae, 0x5c, 0x1f, 0xbf, 0x93, 0x2b, 0x6e, 0x51, 0x41, 0x71,
		0x0b, 0x14, 0xb7, 0x50, 0x92, 0x6d, 0x69, 0x0e, 0x0c, 0xab, 0x1c, 0x10, 0x56, 0x3b, 0x10, 0xac,
		0x77, 0x00, 0x58, 0xeb, 0xc0, 0xaf, 0xd6, 0x01, 0x5f, 0xad, 0x03, 0xbd, 0xaa, 0x07, 0x78, 0x65,
		0x01, 0x89, 0xfa, 0x01, 0x5d, 0x8d, 0x03, 0xb9, 0x1a, 0x07, 0x70, 0x35, 0x0e, 0xdc, 0xaa, 0x1d,
		0xb0, 0xdd, 0x15, 0xa0, 0xd0, 0x90, 0xf9, 0x34, 0xe4, 0x3c, 0x8d, 0xaa, 0x2f, 0x23, 0x1d, 0x68,
		0x85, 0xfc, 0xe3, 0x56, 0x2b, 0x5e, 0xeb, 0x5b, 0xb8, 0x4e, 0x1d, 0x4a, 0xff, 0x79, 0xc7, 0x75,
		0x62, 0x74, 0x95, 0x38, 0x33, 0xa5, 0x62, 0xf4, 0x46, 0xd4, 0x34, 0xeb, 0x3c, 0xa1, 0x15, 0xcb,
		0x88, 0x70, 0x61, 0x14, 0x0b, 0x37, 0x1c, 0xf4, 0xee, 0x59, 0xac, 0x80, 0x0a, 0x67, 0x1e, 0x36,
		0x0c, 0xc6, 0xaa, 0x00, 0x63, 0x00, 0x63, 0xeb, 0x16, 0x9f, 0x2a, 0x14, 0x93, 0x88, 0x14, 0x2a,
		0x86, 0xbf, 0xd5, 0x54, 0x1f, 0x75, 0x13, 0x3d, 0x89, 0x81, 0xaa, 0x1e, 0xe2, 0xa6, 0x8a, 0x75,
		0xea, 0xc7, 0x34, 0x5f, 0xd4, 0xe4, 0x2e, 0xfd, 0xa1, 0xab, 0x57, 0x2e, 0xce, 0xf7, 0x7f, 0xf4,
		0x76, 0xeb, 0x9a, 0x0e, 0x18, 0xb2, 0xd5, 0x4e, 0x1d, 0x2e, 0x58, 0xcf, 0xe1, 0x6f, 0xd6, 0xe3,
		0x0c, 0xaf, 0x59, 0xae, 0x95, 0xab, 0xeb, 0x91, 0x08, 0xc0, 0xdb, 0x6a, 0xf0, 0x46, 0x32, 0xb6,
		0xc7, 0x0b, 0xe3, 0x84, 0x8c, 0x2f, 0x9d, 0xf7, 0xa3, 0x12, 0x0e, 0x14, 0x7a, 0x1a, 0x20, 0x1c,
		0x11, 0x84, 0xe3, 0x01, 0x0b, 0x05, 0x17, 0xcf, 0x31, 0xeb, 0xa8, 0x08, 0x69, 0x12, 0x6e, 0xba,
		0xf4, 0x71, 0xdc, 0xd5, 0x5b, 0x3f, 0x61, 0xea, 0xc5, 0x69, 0x87, 0xdb, 0xc4, 0x8d, 0x3a, 0x69,
		0x24, 0x41, 0x76, 0xc2, 0x53, 0x7c, 0x91, 0x28, 0xe5, 0x0b, 0x69, 0x16, 0x07, 0x6a, 0xbb, 0x4f,
		0x5d, 0x3f, 0x74, 0x67, 0xa2, 0x20, 0x25, 0x1b, 0x70, 0x4c, 0xf7, 0x5b, 0x0f, 0x12, 0x11, 0xf5,
		0x58, 0xec, 0xb2, 0xbd, 0xfc, 0xd6, 0x21, 0x13, 0x3f, 0xa2, 0xf8, 0xaf, 0xbd, 0xf9, 0xe2, 0xc1,
		0xbe, 0xad, 0x8f, 0x7e, 0x1c, 0x3d, 0xf1, 0x60, 0x0f, 0x47, 0x3a, 0x66, 0xbd, 0x48, 0x30, 0x37,
		0x5b, 0x29, 0x7e, 0xbb, 0xcd, 0x92, 0x44, 0xf5, 0xeb, 0x4b, 0x3d, 0x71, 0x07, 0x6d, 0x36, 0x37,
		0xd0, 0xaf, 0x97, 0xab, 0x65, 0x0f, 0x08, 0x5e, 0x0e, 0xc1, 0x6f, 0x1e, 0xb4, 0xe3, 0x84, 0xe6,
		0x93, 0x9c, 0xad, 0x98, 0x3d, 0xb0, 0x90, 0xc5, 0xbe, 0x62, 0x04, 0x7e, 0x65, 0x33, 0xb8, 0xdf,
		0x01, 0x90, 0x5d, 0xc1, 0x1e, 0xcb, 0xdf, 0xef, 0x30, 0x5e, 0x7d, 0x15, 0x8d, 0x8b, 0x1d, 0xb2,
		0x26, 0x64, 0xab, 0xec, 0x2b, 0xa4, 0x91, 0x64, 0x0f, 0x57, 0xe4, 0x8c, 0xce, 0x9d, 0xda, 0x6d,
		0x13, 0x15, 0xdc, 0x36, 0x61, 0x6d, 0x1b, 0x9a, 0xf5, 0x61, 0x05, 0xbe, 0x6d, 0x42, 0xf9, 0xb8,
		0x21, 0xd9, 0xf1, 0x42, 0x8d, 0xe3, 0x84, 0x9a, 0xc7, 0x07, 0xf5, 0x72, 0xe0, 0xf5, 0x4f, 0x54,
		0x13, 0x1d, 0x07, 0x24, 0x3f, 0x4b, 0x46, 0x77, 0x76, 0xec, 0x45, 0xef, 0x70, 0x00, 0xdd, 0x10,
		0x37, 0x0f, 0x77, 0x88, 0x2d, 0x65, 0xc3, 0xdf, 0x19, 0x35, 0x43, 0x04, 0xc7, 0xe9, 0x08, 0x8e,
		0xcf, 0x11, 0xd4, 0x88, 0x1e, 0x9f, 0xc3, 0xaa, 0x8d, 0xce, 0x61, 0xd5, 0x69, 0x8f, 0xc7, 0x99,
		0x28, 0x1d, 0x4d, 0x75, 0xfc, 0xcd, 0x6c, 0xf5, 0xe8, 0x1c, 0xc3, 0x7a, 0x68, 0x3b, 0xe8, 0xc4,
		0xc0, 0x5e, 0xcb, 0x9c, 0xb5, 0xa7, 0x0f, 0xb9, 0x3d, 0xab, 0x90, 0xdb, 0x03, 0xe4, 0x06, 0xe4,
		0x06, 0xe4, 0x06, 0xe4, 0x06, 0xe4, 0x06, 0xe4, 0x06, 0xe4, 0x06, 0xe4, 0x06, 0xe4, 0x06, 0xe4,
		0xde, 0x2b, 0xc8, 0x5d, 0xd5, 0x87, 0xdc, 0x55, 0xab, 0x90, 0xbb, 0x0a, 0xc8, 0x0d, 0xc8, 0x0d,
		0xc8, 0x0d, 0xc8, 0x0d, 0xc8, 0x0d, 0xc8, 0x0d, 0xc8, 0x0d, 0xc8, 0x0d, 0xc8, 0x0d, 0xc8, 0xbd,
		0x57, 0x90, 0xbb, 0xa6, 0x0f, 0xb9, 0x6b, 0x56, 0x21, 0x77, 0x0d, 0x90, 0x1b, 0x90, 0x1b, 0x90,
		0x1b, 0x90, 0x1b, 0x90, 0x1b, 0x90, 0x1b, 0x90, 0x1b, 0x90, 0x1b, 0x90, 0x1b, 0x90, 0x7b, 0xaf,
		0x20, 0x77, 0x5d, 0x1f, 0x72, 0xd7, 0xad, 0x42, 0xee, 0x3a, 0x20, 0x37, 0x20, 0x37, 0x20, 0x37,
		0x20, 0x37, 0x20, 0x37, 0x20, 0x37, 0x20, 0x37, 0x20, 0x37, 0x20, 0x37, 0x20, 0xf7, 0x5e, 0x41,
		0xee, 0x73, 0x7d, 0xc8, 0x7d, 0x6e, 0x15, 0x72, 0x9f, 0x03, 0x72, 0x03, 0x72, 0x03, 0x72, 0x03,
		0x72, 0x03, 0x72, 0x03, 0x72, 0x03, 0x72, 0x03, 0x72, 0x03, 0x72, 0x03, 0x72, 0xef, 0x15, 0xe4,
		0x6e, 0xe8, 0x43, 0xee, 0x86, 0x55, 0xc8, 0xdd, 0x00, 0xe4, 0x06, 0xe4, 0x06, 0xe4, 0x06, 0xe4,
		0x06, 0xe4, 0x06, 0xe4, 0x06, 0xe4, 0x06, 0xe4, 0x06, 0xe4, 0x06, 0xe4, 0xde, 0x2b, 0xc8, 0xdd,
		0xd4, 0x87, 0xdc, 0x4d, 0xab, 0x90, 0xbb, 0x09, 0xc8, 0x0d, 0xc8, 0x0d, 0xc8, 0x0d, 0xc8, 0x0d,
		0xc8, 0x0d, 0xc8, 0x0d, 0xc8, 0x0d, 0xc8, 0x0d, 0xc8, 0x0d, 0xc8, 0xbd, 0x3b, 0xc8, 0x8d, 0x6b,
		0x71, 0xb7, 0x5d, 0xe2, 0x5a, 0xc7, 0xbd, 0x0c, 0xd2, 0x9b, 0x4d, 0x75, 0x44, 0x0f, 0xf4, 0xee,
		0xc1, 0xab, 0x30, 0x8c, 0x84, 0xdc, 0x5d, 0x0c, 0xe9, 0x73, 0x49, 0xfb, 0x91, 0xf5, 0xfc, 0xbe,
		0x2f, 0x1e, 0x87, 0x43, 0x7b, 0xc6, 0x99, 0xe8, 0xb8, 0x3c, 0x14, 0x2c, 0xee, 0xf8, 0x6d, 0x96,
		0x9c, 0xad, 0xfa, 0xeb, 0xd9, 0xcc, 0xcd, 0x3a, 0x67, 0x3a, 0xf7, 0x38, 0x8c, 0xbe, 0x80, 0x88,
		0x07, 0x6d, 0x11, 0x8e, 0x77, 0xcb, 0xc7, 0xf7, 0xb7, 0x1f, 0x3e, 0x66, 0x7d, 0x7e, 0x5f, 0xf5,
		0xd7, 0xef, 0x6f, 0xd3, 0xee, 0x6f, 0xa2, 0x58, 0x7c, 0xbf, 0x19, 0xf7, 0xfe, 0x79, 0xb6, 0x73,
		0xab, 0x97, 0x61, 0x44, 0x22, 0x6a, 0x47, 0x5d, 0xf7, 0xde, 0x4f, 0x58, 0x30, 0xba, 0x97, 0xaa,
		0xdd, 0xf5, 0x93, 0x84, 0x77, 0x78, 0x5b, 0xf9, 0x66, 0x8c, 0xad, 0x6d, 0xe2, 0x72, 0x62, 0x7b,
		0xd4, 0x1b, 0x37, 0xdb, 0x5d, 0x3a, 0xa5, 0xfb, 0x28, 0xea, 0x32, 0x3f, 0x54, 0xb9, 0xd5, 0xce,
		0x2b, 0x8c, 0xfb, 0xe7, 0x1d, 0xb7, 0xc3, 0x7c, 0x31, 0x88, 0xad, 0xfa, 0xff, 0xf4, 0x3e, 0x4a,
		0x3f, 0x0c, 0xdc, 0x15, 0xfb, 0x7a, 0xc7, 0xee, 0x7d, 0x66, 0x40, 0x8a, 0xe4, 0xdf, 0x37, 0x8e,
		0x58, 0x71, 0xdc, 0xf7, 0x69, 0xc1, 0x81, 0xe7, 0x79, 0xb9, 0x5e, 0xf6, 0x70, 0x69, 0xaf, 0xd4,
		0xd2, 0xdb, 0x36, 0x66, 0x7b, 0xb9, 0xfa, 0x7e, 0x3c, 0xb2, 0xd0, 0xe6, 0xc2, 0x2b, 0x97, 0xcf,
		0xda, 0x51, 0xaf, 0x1f, 0x85, 0x2c, 0x14, 0xee, 0x10, 0xd8, 0x39, 0x7f, 0xfb, 0x87, 0xf3, 0x2a,
		0xbb, 0x90, 0x31, 0xfb, 0xb7, 0x57, 0x3b, 0x5e, 0x82, 0xe9, 0xb8, 0x14, 0x69, 0xf5, 0xe5, 0x1f,
		0x38, 0x2b, 0xd7, 0xcf, 0xbf, 0x63, 0x49, 0x3b, 0xe6, 0x7d, 0x69, 0x4e, 0xb1, 0x72, 0x51, 0x5c,
		0xf5, 0xfb, 0x5d, 0xce, 0x12, 0x47, 0x44, 0x4e, 0x18, 0x85, 0xce, 0xed, 0xcd, 0xf5, 0xe7, 0x44,
		0x75, 0xf0, 0x09, 0x64, 0xa6, 0xd9, 0x75, 0x10, 0xcc, 0xbc, 0xa7, 0x86, 0xf8, 0x45, 0x29, 0x30,
		0xcd, 0x2d, 0x8b, 0x95, 0x43, 0x67, 0x49, 0x14, 0x3a, 0x8c, 0x1b, 0x0b, 0xc7, 0x30, 0xe2, 0x21,
		0x8e, 0x06, 0x7d, 0xf7, 0x89, 0x07, 0x6e, 0xc2, 0x84, 0x06, 0x31, 0x9b, 0x6f, 0x07, 0x77, 0x16,
		0x82, 0x8c, 0x29, 0x30, 0x19, 0xe9, 0x3b, 0x0b, 0x47, 0xab, 0x8e, 0x07, 0xea, 0xd9, 0x08, 0x59,
		0x0b, 0xc7, 0x12, 0xf0, 0x47, 0xa8, 0x5f, 0x73, 0xc9, 0x2b, 0xba, 0x01, 0xeb, 0x41, 0xfe, 0x01,
		0x0f, 0x45, 0xad, 0xaa, 0x11, 0xdd, 0x6f, 0x22, 0xba, 0xaf, 0xd8, 0x0e, 0xa2, 0xfb, 0x5b, 0x87,
		0xb8, 0x5e, 0xbd, 0xa8, 0x5f, 0x34, 0x9a, 0xd5, 0x8b, 0x73, 0x84, 0xf9, 0x35, 0x9f, 0x42, 0x98,
		0x3f, 0x97, 0x3d, 0xf4, 0xaa, 0x65, 0xaf, 0x52, 0xf6, 0xca, 0x4d, 0x42, 0xf5, 0x87, 0x92, 0x7e,
		0x39, 0xfb, 0x1a, 0xe5, 0xdf, 0x32, 0xaa, 0xc8, 0xab, 0xcd, 0x31, 0xa4, 0x4f, 0x3a, 0x18, 0xf6,
		0x09, 0xf0, 0x15, 0xf0, 0xf5, 0xd0, 0xe0, 0xeb, 0x53, 0xd7, 0x0f, 0xa5, 0xd7, 0xf5, 0xec, 0xda,
		0x6e, 0x1c, 0x2d, 0x7c, 0xf5, 0x00, 0x5f, 0x8d, 0xc3, 0xd7, 0xca, 0x45, 0x1d, 0xc0, 0xb5, 0xd0,
		0xc0, 0xf5, 0x0f, 0x9e, 0x88, 0x2b, 0x21, 0x62, 0x35, 0x33, 0x74, 0xcd, 0xc3, 0xf7, 0x5d, 0x36,
		0xb4, 0xb1, 0x8a, 0x53, 0x33, 0x5c, 0x6f, 0x33, 0x2d, 0x78, 0xad, 0x7a, 0xbd, 0xd1, 0xac, 0xd7,
		0x2b, 0xcd, 0x5a, 0xb3, 0x72, 0x71, 0x7e, 0xee, 0x35, 0x3c, 0x95, 0xec, 0xf9, 0x4f, 0x71, 0xc0,
		0x62, 0x16, 0xbc, 0x7d, 0x2e, 0x5d, 0x3a, 0xe1, 0xa0, 0xdb, 0x05, 0xf4, 0xcf, 0x0f, 0xfd, 0xab,
		0x00, 0xfe, 0xe4, 0xc0, 0xbf, 0x0a, 0xd8, 0xaf, 0xf6, 0xc9, 0xbc, 0x92, 0xf8, 0xbf, 0xd8, 0xb3,
		0x82, 0x4c, 0xad, 0x66, 0xfc, 0xd4, 0x8d, 0x1e, 0xa9, 0xb1, 0x53, 0x33, 0x72, 0xc8, 0x96, 0xda,
		0x01, 0x1d, 0x42, 0xb6, 0x94, 0xc6, 0xa7, 0x0b, 0x9f, 0x2d, 0x35, 0xd1, 0x76, 0xbc, 0x72, 0x0d,
		0x19, 0x53, 0x0a, 0x9a, 0xd8, 0xa6, 0x71, 0x43, 0xd6, 0x54, 0x8e, 0x05, 0x88, 0xac, 0x29, 0xc5,
		0x15, 0x88, 0xac, 0x29, 0x6b, 0xe8, 0x1d, 0x59, 0x53, 0x3b, 0xb6, 0x5f, 0x07, 0x72, 0x64, 0x48,
		0x23, 0x8f, 0xca, 0x21, 0x38, 0x33, 0x34, 0xea, 0xfe, 0xbf, 0x87, 0xbd, 0xff, 0xc9, 0x83, 0x2f,
		0x4c, 0x58, 0x3d, 0x32, 0x24, 0x13, 0xfe, 0x98, 0xe2, 0xe2, 0xfc, 0x71, 0x0f, 0xa5, 0xda, 0x21,
		0x25, 0x2f, 0xdf, 0x18, 0xdc, 0x19, 0x3e, 0x7a, 0x84, 0x6c, 0x37, 0x4a, 0xe3, 0x78, 0x08, 0x47,
		0x8f, 0xd2, 0xf3, 0x6f, 0x3c, 0x0c, 0xd8, 0x4f, 0xd9, 0x0a, 0x1e, 0x0a, 0xb9, 0x3d, 0x8a, 0x41,
		0x11, 0x35, 0xcd, 0x55, 0x1d, 0x1e, 0x68, 0x06, 0x3f, 0xc8, 0xe4, 0x78, 0x7d, 0x19, 0xfe, 0x45,
		0x4d, 0x6c, 0xd6, 0x1f, 0x3a, 0xf5, 0xa0, 0x46, 0x91, 0x46, 0xcf, 0xa4, 0x24, 0xbe, 0xab, 0x45,
		0x5d, 0xaf, 0x5c, 0x34, 0xb0, 0xae, 0x95, 0x47, 0x4f, 0x33, 0xd7, 0x6c, 0x7f, 0x57, 0xf7, 0x8e,
		0x50, 0xf4, 0x3e, 0x16, 0xa4, 0xf0, 0x2a, 0x65, 0x6f, 0x7d, 0xfd, 0x84, 0xf3, 0x72, 0xfd, 0xd4,
		0xe1, 0x82, 0xf5, 0x9c, 0xde, 0x1b, 0x68, 0x61, 0xf2, 0x5a, 0x98, 0xe6, 0xc8, 0x42, 0x2d, 0x83,
		0x5a, 0x06, 0xb5, 0x0c, 0x6a, 0x19, 0xd4, 0x32, 0x3b, 0x7e, 0x9e, 0x44, 0xd5, 0x49, 0x58, 0xfc,
		0xc4, 0xdb, 0xcc, 0xf5, 0xdb, 0x6d, 0x96, 0x24, 0xee, 0xa4, 0x2a, 0x8e, 0xbc, 0xd0, 0xb3, 0xae,
		0x21, 0x9c, 0x32, 0x84, 0xee, 0xa2, 0x80, 0x4e, 0xa5, 0x4f, 0x19, 0x4e, 0x16, 0x5c, 0x45, 0xbf,
		0xe8, 0x71, 0xc5, 0x6a, 0xd1, 0xe3, 0x0a, 0x8a, 0x1e, 0xaf, 0xdc, 0x70, 0x28, 0x7a, 0xbc, 0x61,
		0x5b, 0xa2, 0xe8, 0xf1, 0xe6, 0xe5, 0x8e, 0xa2, 0xc7, 0xaa, 0xed, 0x20, 0xaf, 0x7c, 0xeb, 0x10,
		0xa3, 0xe8, 0xb1, 0xee, 0x53, 0x38, 0x0d, 0x99, 0x57, 0xf1, 0x6a, 0x94, 0xab, 0x65, 0xaf, 0x79,
		0xea, 0x34, 0xca, 0x5e, 0x6d, 0xa5, 0x42, 0x83, 0xbc, 0x68, 0x35, 0xc1, 0x6b, 0xfb, 0xc0, 0xe2,
		0x4c, 0xa4, 0x04, 0xec, 0xf6, 0xf4, 0x61, 0xb7, 0x67, 0x15, 0x76, 0x7b, 0x80, 0xdd, 0x80, 0xdd,
		0x80, 0xdd, 0x80, 0xdd, 0x80, 0xdd, 0x80, 0xdd, 0x80, 0xdd, 0x80, 0xdd, 0x80, 0xdd, 0x80, 0xdd,
		0x7b, 0x07, 0xbb, 0xab, 0xfa, 0xb0, 0xbb, 0x6a, 0x15, 0x76, 0x57, 0x01, 0xbb, 0x01, 0xbb, 0x01,
		0xbb, 0x01, 0xbb, 0x01, 0xbb, 0x01, 0xbb, 0x01, 0xbb, 0x01, 0xbb, 0x01, 0xbb, 0x01, 0xbb, 0xf7,
		0x0e, 0x76, 0xd7, 0xf4, 0x61, 0x77, 0xcd, 0x2a, 0xec, 0xae, 0x01, 0x76, 0x03, 0x76, 0x03, 0x76,
		0x03, 0x76, 0x03, 0x76, 0x03, 0x76, 0x03, 0x76, 0x03, 0x76, 0x03, 0x76, 0x03, 0x76, 0xef, 0x1d,
		0xec, 0xae, 0xeb, 0xc3, 0xee, 0xba, 0x55, 0xd8, 0x5d, 0x07, 0xec, 0x06, 0xec, 0x06, 0xec, 0x06,
		0xec, 0x06, 0xec, 0x06, 0xec, 0x06, 0xec, 0x06, 0xec, 0x06, 0xec, 0x06, 0xec, 0xde, 0x3b, 0xd8,
		0x7d, 0xae, 0x0f, 0xbb, 0xcf, 0xad, 0xc2, 0xee, 0x73, 0xc0, 0x6e, 0xc0, 0x6e, 0xc0, 0x6e, 0xc0,
		0x6e, 0xc0, 0x6e, 0xc0, 0x6e, 0xc0, 0x6e, 0xc0, 0x6e, 0xc0, 0x6e, 0xc0, 0xee, 0xbd, 0x83, 0xdd,
		0x0d, 0x7d, 0xd8, 0xdd, 0xb0, 0x0a, 0xbb, 0x1b, 0x80, 0xdd, 0x80, 0xdd, 0x80, 0xdd, 0x80, 0xdd,
		0x80, 0xdd, 0x80, 0xdd, 0x80, 0xdd, 0x80, 0xdd, 0x80, 0xdd, 0x80, 0xdd, 0x7b, 0x07, 0xbb, 0x9b,
		0xfa, 0xb0, 0xbb, 0x69, 0x15, 0x76, 0x37, 0x01, 0xbb, 0x01, 0xbb, 0x01, 0xbb, 0x01, 0xbb, 0x01,
		0xbb, 0x01, 0xbb, 0x01, 0xbb, 0x01, 0xbb, 0x01, 0xbb, 0x01, 0xbb, 0x77, 0x0b, 0xbb, 0x8f, 0xfe,
		0xa2, 0x9a, 0xc6, 0xfa, 0x4b, 0xf7, 0xbf, 0x85, 0x6b, 0x57, 0x0c, 0x6e, 0xa8, 0xd9, 0xbc, 0xdf,
		0x94, 0x87, 0x14, 0x17, 0xa1, 0xce, 0x3d, 0xa7, 0x7b, 0x11, 0xaa, 0xde, 0x5d, 0x0f, 0x8e, 0xf6,
		0x4d, 0xa8, 0x5f, 0x46, 0xfd, 0x5f, 0xa5, 0xdd, 0xdf, 0x4c, 0x7a, 0xdf, 0xfd, 0xad, 0x19, 0x6e,
		0xc2, 0xba, 0xac, 0x2d, 0x35, 0x1f, 0xdb, 0xee, 0xcf, 0x98, 0x69, 0xd2, 0xe4, 0x2d, 0xaa, 0x29,
		0xea, 0xc3, 0x4d, 0xaa, 0xd4, 0x06, 0x16, 0x37, 0x7a, 0x68, 0x70, 0xfb, 0x6c, 0xb6, 0xee, 0xa3,
		0xa8, 0xcb, 0xfc, 0x50, 0xe1, 0x06, 0x55, 0xcf, 0x03, 0x12, 0xd9, 0xe6, 0x36, 0x81, 0x43, 0x88,
		0x71, 0xc8, 0xc1, 0xa0, 0x10, 0x1a, 0x57, 0x39, 0x04, 0x28, 0x89, 0xe0, 0xed, 0x44, 0xc1, 0x27,
		0x4e, 0x9f, 0x35, 0x7c, 0x8d, 0x54, 0x15, 0x4e, 0xe7, 0x20, 0x9d, 0x8e, 0xf4, 0x35, 0x52, 0x01,
		0xeb, 0xfa, 0xcf, 0x2e, 0xfb, 0xd9, 0x66, 0x2c, 0x60, 0x81, 0x1b, 0xf0, 0xa4, 0xed, 0xc7, 0x41,
		0xa2, 0x1e, 0x13, 0x5a, 0xd7, 0x20, 0xa2, 0x30, 0x16, 0x9d, 0x09, 0xa2, 0x30, 0x32, 0x5f, 0x53,
		0x3f, 0x0a, 0xd3, 0x8e, 0x06, 0x43, 0xde, 0xd6, 0xa8, 0x6b, 0x44, 0x60, 0x5a, 0x88, 0xc0, 0x28,
		0xb6, 0x83, 0x08, 0xcc, 0xd6, 0x21, 0xf6, 0x5a, 0xf5, 0x7a, 0xa3, 0x59, 0xaf, 0x57, 0x9a, 0xb5,
		0x66, 0xe5, 0xe2, 0xfc, 0xdc, 0x6b, 0x78, 0xe7, 0x08, 0xca, 0xd8, 0x95, 0x93, 0x8f, 0x3a, 0x28,
		0xe3, 0x95, 0xbd, 0x72, 0xed, 0xd4, 0x69, 0x95, 0x1b, 0xe5, 0x06, 0x82, 0x32, 0xea, 0x0d, 0x2e,
		0x91, 0xb3, 0x6d, 0x03, 0x8b, 0x5c, 0xa8, 0x3c, 0x28, 0x78, 0x84, 0x52, 0x5d, 0x1e, 0xde, 0x47,
		0x83, 0xd4, 0x1b, 0xab, 0xa2, 0xdf, 0x85, 0x86, 0x80, 0x7a, 0x81, 0x7a, 0x81, 0x7a, 0x81, 0x7a,
		0x81, 0x7a, 0x81, 0x7a, 0x81, 0x7a, 0x8f, 0x13, 0xf5, 0x02, 0xee, 0x52, 0xc3, 0x5d, 0xe0, 0x5c,
		0x4d, 0x9c, 0xdb, 0xf5, 0xdb, 0x7f, 0xb9, 0x51, 0xc7, 0xbd, 0x1f, 0x74, 0x3a, 0x2c, 0x4e, 0xf4,
		0xf1, 0xee, 0x62, 0x83, 0xc0, 0xbd, 0xc0, 0xbd, 0xc0, 0xbd, 0xc0, 0xbd, 0xc0, 0xbd, 0xc0, 0xbd,
		0xc0, 0xbd, 0xc0, 0xbd, 0xc0, 0xbd, 0xc0, 0xbd, 0x05, 0xc0, 0xbd, 0x51, 0xe8, 0xb2, 0x38, 0x8e,
		0x62, 0x7d, 0xc0, 0x9b, 0xb5, 0x04, 0xa4, 0x0b, 0xa4, 0x0b, 0xa4, 0x0b, 0xa4, 0x0b, 0xa4, 0x0b,
		0xa4, 0x0b, 0xa4, 0x0b, 0xa4, 0x0b, 0xa4, 0x0b, 0xa4, 0x5b, 0x0c, 0xa4, 0xcb, 0xc3, 0x87, 0x98,
		0x25, 0x89, 0xdb, 0xe1, 0x5d, 0xc1, 0x62, 0x1e, 0x3e, 0x90, 0xa0, 0xde, 0xe5, 0x56, 0x8f, 0x05,
		0x01, 0x03, 0xfb, 0x6a, 0xa6, 0xba, 0x03, 0xf5, 0x02, 0xf5, 0x02, 0xf5, 0x02, 0xf5, 0x02, 0xf5,
		0xaa, 0xd9, 0x27, 0xde, 0x71, 0x3b, 0xcc, 0x17, 0x83, 0x78, 0xa7, 0xb0, 0x57, 0x17, 0x00, 0x98,
		0x86, 0xba, 0x33, 0xa3, 0x54, 0x64, 0xac, 0xbb, 0x3c, 0x8c, 0xc5, 0xdf, 0x21, 0xa7, 0x87, 0xc8,
		0xd4, 0x54, 0x0f, 0xff, 0x82, 0xae, 0xe5, 0x18, 0xd6, 0x83, 0x5c, 0xd3, 0x3f, 0x1e, 0x59, 0xb8,
		0xcb, 0xe5, 0x5c, 0x2e, 0x9f, 0x95, 0xcb, 0x67, 0xed, 0xa8, 0xd7, 0x8f, 0x42, 0x16, 0x0a, 0x37,
		0xf4, 0x7b, 0xcc, 0xf9, 0xdb, 0x3f, 0x9c, 0x57, 0x81, 0x3b, 0xae, 0x5a, 0x92, 0xfd, 0xdb, 0xab,
		0x82, 0x2d, 0xec, 0x74, 0xe8, 0x8a, 0xbc, 0xa6, 0xa5, 0xc6, 0x76, 0x27, 0x48, 0xf2, 0x1d, 0x4b,
		0xda, 0x31, 0xef, 0x4b, 0x57, 0xc1, 0xd9, 0xb8, 0xa4, 0xae, 0xfa, 0xfd, 0x2e, 0x67, 0x89, 0x23,
		0x22, 0x27, 0x8c, 0x42, 0xe7, 0xf6, 0xe6, 0xfa, 0x73, 0xa2, 0x3b, 0x4f, 0x44, 0xcb, 0x67, 0x71,
		0x09, 0x05, 0x33, 0xef, 0x7f, 0xaa, 0xdf, 0x32, 0xf5, 0x6a, 0x5a, 0x5a, 0x51, 0x2b, 0x87, 0x56,
		0xab, 0x8b, 0x17, 0x28, 0x61, 0x12, 0x4a, 0x98, 0x88, 0xfd, 0x30, 0xe1, 0xc2, 0x9d, 0x3f, 0x98,
		0xae, 0xaf, 0x85, 0xad, 0x69, 0x17, 0xf1, 0x60, 0x68, 0x62, 0x88, 0x07, 0x43, 0x19, 0x83, 0x32,
		0x06, 0x65, 0x0c, 0xca, 0x98, 0x25, 0x65, 0x0c, 0xf1, 0xe0, 0xe3, 0x13, 0x18, 0x10, 0x0f, 0xce,
		0x33, 0x9c, 0x9d, 0x28, 0xfe, 0x91, 0x46, 0x6e, 0x07, 0x42, 0xf3, 0x68, 0xfb, 0x52, 0x4b, 0x40,
		0xba, 0x40, 0xba, 0x40, 0xba, 0x40, 0xba, 0x40, 0xba, 0x40, 0xba, 0x40, 0xba, 0x40, 0xba, 0x40,
		0xba, 0x40, 0xba, 0xbb, 0x44, 0xba, 0xb1, 0xdf, 0x63, 0x6e, 0xfc, 0x53, 0x03, 0xe1, 0x4e, 0x5a,
		0x00, 0xb2, 0x05, 0xb2, 0x05, 0xb2, 0x05, 0xb2, 0x05, 0xb2, 0x05, 0xb2, 0x05, 0xb2, 0x05, 0xb2,
		0x05, 0xb2, 0x05, 0xb2, 0xdd, 0x39, 0xb2, 0x15, 0xda, 0xc8, 0x56, 0x00, 0xd9, 0x02, 0xd9, 0x02,
		0xd9, 0x02, 0xd9, 0x02, 0xd9, 0x02, 0xd9, 0x1e, 0x2b, 0xb2, 0x35, 0xe2, 0xa1, 0x7b, 0x62, 0x40,
		0x79, 0x87, 0xce, 0xea, 0xe6, 0xe0, 0xbb, 0xe1, 0xbb, 0xe1, 0xbb, 0xe1, 0xbb, 0xe1, 0xbb, 0xe1,
		0xbb, 0xa1, 0x4a, 0x1d, 0x93, 0x2a, 0xf5, 0x51, 0xb0, 0x9e, 0xf3, 0xf0, 0xc6, 0xe1, 0xa1, 0x03,
		0x81, 0x8a, 0x5a, 0xa0, 0xca, 0x3d, 0xb8, 0x40, 0xc2, 0x39, 0x46, 0x36, 0x6a, 0x0b, 0x26, 0x12,
		0xad, 0x30, 0xec, 0xb4, 0x09, 0x20, 0x5e, 0x20, 0x5e, 0x20, 0x5e, 0x20, 0x5e, 0x20, 0x5e, 0x20,
		0x5e, 0x20, 0xde, 0x63, 0x42, 0xbc, 0x80, 0xb9, 0x88, 0xc3, 0x16, 0x15, 0xdb, 0x0a, 0x7d, 0x6c,
		0x8b, 0x48, 0x2c, 0xb0, 0x2d, 0xb0, 0x2d, 0xb0, 0x2d, 0xb0, 0x2d, 0xb0, 0xed, 0xd1, 0x62, 0xdb,
		0x13, 0xda, 0x4f, 0xe6, 0x5c, 0x5b, 0xa5, 0xab, 0x30, 0x8c, 0x84, 0x2f, 0x5d, 0x3e, 0xa9, 0x94,
		0xb4, 0x1f, 0x59, 0xcf, 0xef, 0xfb, 0xe2, 0x71, 0x68, 0xe1, 0xce, 0x38, 0x13, 0x1d, 0x97, 0x0f,
		0xad, 0x5c, 0xc7, 0x6f, 0xb3, 0xe4, 0x6c, 0xd5, 0x5f, 0xcf, 0xc6, 0x25, 0xa3, 0xfa, 0x51, 0x2c,
		0xce, 0x92, 0x61, 0xa7, 0x89, 0xe0, 0x6d, 0x19, 0x67, 0x58, 0x4a, 0x44, 0x3c, 0x68, 0x8b, 0x70,
		0x22, 0x04, 0xbf, 0xbf, 0xfd, 0xf0, 0x31, 0xeb, 0xe8, 0xfb, 0xaa, 0xbf, 0x7e, 0x7f, 0x9b, 0xf6,
		0x79, 0x13, 0xc5, 0xe2, 0xfb, 0x97, 0x69, 0x97, 0x27, 0x34, 0x03, 0x9d, 0x63, 0x90, 0x4b, 0x22,
		0xf6, 0x3b, 0x1d, 0xde, 0x76, 0xdb, 0x5d, 0x3f, 0xc9, 0x1f, 0x04, 0xcf, 0x7c, 0xc7, 0xfc, 0xe3,
		0x39, 0x27, 0x75, 0xec, 0x33, 0xbc, 0x9c, 0x1f, 0x97, 0x85, 0x45, 0x2a, 0x70, 0x48, 0xb9, 0x78,
		0xb4, 0x2a, 0xf0, 0xd1, 0x06, 0x3c, 0xda, 0x40, 0x47, 0xa7, 0x38, 0x34, 0xed, 0x26, 0x7f, 0xc7,
		0xe5, 0xee, 0xf8, 0x99, 0x5f, 0x75, 0x6e, 0xcf, 0xef, 0xab, 0x63, 0xfc, 0xe5, 0xa6, 0xd4, 0xb0,
		0xbe, 0x07, 0xac, 0x0f, 0xac, 0x6f, 0x1a, 0xeb, 0xcb, 0x6e, 0x94, 0xec, 0x41, 0xff, 0xc9, 0xe7,
		0x5d, 0xff, 0xbe, 0xcb, 0x5c, 0x35, 0x7b, 0xbf, 0x76, 0x25, 0xad, 0x6b, 0x58, 0x71, 0x1e, 0xd4,
		0x36, 0x93, 0xf6, 0xa6, 0xa2, 0xd8, 0x5c, 0xc4, 0x9b, 0xcc, 0xa4, 0x06, 0xa6, 0xb5, 0xe9, 0xec,
		0x08, 0x60, 0x5a, 0x9b, 0x50, 0x13, 0x4a, 0x2b, 0xae, 0x1d, 0xd5, 0xcd, 0x99, 0x35, 0x10, 0x0e,
		0x7a, 0x44, 0xdb, 0x73, 0x69, 0x2d, 0x2e, 0x37, 0xad, 0x39, 0x57, 0x6a, 0x0a, 0x17, 0xf9, 0x86,
		0xa5, 0xdc, 0xb8, 0x86, 0x36, 0x30, 0xf5, 0x46, 0x36, 0xb6, 0xa1, 0x8d, 0x6d, 0x6c, 0x73, 0x1b,
		0x5c, 0x6f, 0xa3, 0x13, 0xe8, 0x1c, 0x7a, 0x0a, 0xdc, 0xda, 0x95, 0x37, 0xe0, 0xa1, 0x68, 0x51,
		0xac, 0xb9, 0xf1, 0x36, 0x3d, 0x27, 0x68, 0x4a, 0x4f, 0xad, 0xa3, 0x53, 0xef, 0x8c, 0xa8, 0x79,
		0xeb, 0xa5, 0xa7, 0x53, 0xda, 0x76, 0xa9, 0x75, 0x27, 0x73, 0x3a, 0x14, 0xf1, 0x2e, 0x21, 0x57,
		0x07, 0xd7, 0x4e, 0x59, 0x0b, 0x53, 0x46, 0x62, 0x16, 0xe9, 0x5a, 0xb9, 0xdb, 0xa9, 0x79, 0x26,
		0x08, 0xb3, 0x2f, 0xb5, 0xa9, 0x1f, 0x76, 0x37, 0x68, 0x10, 0x27, 0x5e, 0xa4, 0x55, 0x6e, 0x94,
		0x1b, 0xb4, 0x11, 0x79, 0xd3, 0xa0, 0x66, 0x15, 0xb8, 0xa1, 0x8a, 0xd8, 0x5b, 0xc3, 0x39, 0x2b,
		0xf1, 0xce, 0xda, 0xc9, 0xc0, 0x6e, 0x27, 0xea, 0x5f, 0x27, 0x5c, 0x65, 0x88, 0x76, 0x81, 0x72,
		0x81, 0x72, 0x81, 0x72, 0xed, 0x05, 0xe5, 0x9a, 0x8f, 0x03, 0x0c, 0x07, 0x09, 0xfc, 0xab, 0x00,
		0xfc, 0xab, 0x02, 0x30, 0xbf, 0x6f, 0xfc, 0xab, 0x89, 0x29, 0x03, 0xff, 0x02, 0xff, 0x02, 0xff,
		0x02, 0xff, 0x3a, 0x2e, 0xfe, 0x65, 0x35, 0xda, 0xf6, 0x2f, 0xf6, 0x4c, 0x19, 0xd8, 0x2a, 0xfd,
		0xc1, 0x13, 0x71, 0x25, 0x84, 0x66, 0x08, 0xef, 0x9a, 0x87, 0xef, 0xbb, 0x6c, 0xb8, 0xe6, 0x34,
		0x1d, 0xd5, 0xd0, 0x45, 0xcf, 0xb4, 0x44, 0x9b, 0x01, 0x59, 0xfa, 0x14, 0x07, 0x2c, 0x66, 0xc1,
		0xdb, 0xe1, 0x10, 0x86, 0x83, 0x6e, 0xd7, 0xea, 0xcc, 0x11, 0xfa, 0x03, 0x42, 0x3f, 0x40, 0x48,
		0x25, 0x0c, 0xda, 0x7d, 0x93, 0x8c, 0x96, 0xda, 0xce, 0xdb, 0x21, 0xb5, 0xe6, 0xec, 0xfa, 0xcb,
		0x8e, 0xec, 0xe8, 0x9d, 0xd5, 0xdd, 0xa8, 0x98, 0x60, 0xbb, 0xd4, 0x8e, 0x6e, 0xc2, 0xed, 0x9c,
		0x11, 0x3f, 0x5b, 0xca, 0xca, 0x3b, 0xa3, 0x4d, 0x34, 0x72, 0xb4, 0xb3, 0x75, 0x6f, 0x47, 0xdf,
		0xe2, 0xf7, 0xe1, 0x97, 0x98, 0xfb, 0xe1, 0xda, 0xef, 0x7f, 0xbf, 0x9a, 0x7c, 0xd9, 0xd9, 0x7f,
		0x28, 0x59, 0x4a, 0xec, 0x56, 0x58, 0x09, 0xa5, 0x7e, 0xcc, 0xa3, 0x98, 0x8b, 0x67, 0xfd, 0x84,
		0xb0, 0xac, 0x25, 0xbd, 0x0c, 0xb0, 0x0a, 0x32, 0xc0, 0xa8, 0x6d, 0x3e, 0x32, 0xc0, 0x4c, 0xdb,
		0x52, 0x6d, 0x55, 0x72, 0x69, 0x17, 0xe9, 0x0a, 0x91, 0x04, 0x02, 0x24, 0x91, 0xf0, 0x48, 0x80,
		0xaf, 0x28, 0x85, 0x46, 0x6a, 0x81, 0xd1, 0x98, 0x4a, 0x45, 0xaf, 0x4e, 0x11, 0x08, 0x89, 0xa4,
		0x02, 0x22, 0xb5, 0x70, 0xb8, 0x4f, 0x53, 0x71, 0x14, 0x10, 0x13, 0x84, 0x0f, 0x84, 0x0f, 0x84,
		0x8f, 0x7c, 0x37, 0x16, 0xec, 0x6c, 0xca, 0x58, 0x90, 0x53, 0xc4, 0xff, 0x7a, 0xfa, 0x9b, 0xbe,
		0xee, 0x66, 0x44, 0x6f, 0xd3, 0xd3, 0xd9, 0x76, 0x51, 0x4e, 0x26, 0x11, 0xbe, 0x18, 0x24, 0xbb,
		0xac, 0x25, 0x13, 0xb0, 0x7e, 0xcc, 0xda, 0xbe, 0x60, 0x41, 0xc1, 0x28, 0xd3, 0x78, 0x68, 0x0a,
		0x4d, 0x99, 0xa6, 0x63, 0x77, 0xe4, 0xa5, 0x95, 0x34, 0x55, 0x2d, 0xd3, 0x6a, 0x96, 0xca, 0xa1,
		0x4b, 0x63, 0x6a, 0x55, 0xa9, 0x00, 0xc5, 0x7a, 0x16, 0xb2, 0x6f, 0x94, 0x0c, 0xd8, 0xba, 0x54,
		0x9e, 0xb4, 0x31, 0x1c, 0xea, 0x35, 0x6c, 0x32, 0x71, 0xa8, 0x57, 0xd5, 0x56, 0x29, 0x1f, 0xea,
		0x0d, 0x07, 0xbd, 0x7b, 0x16, 0xbb, 0x51, 0x67, 0x5e, 0x12, 0x67, 0x04, 0xc7, 0x7a, 0xd7, 0x37,
		0x0d, 0x59, 0x17, 0xb2, 0x2e, 0x64, 0x5d, 0xc5, 0x95, 0xa3, 0x7b, 0xae, 0x0f, 0x72, 0xee, 0x36,
		0x0d, 0xd1, 0x83, 0x9c, 0x5b, 0x14, 0x39, 0xb7, 0x05, 0x39, 0x17, 0x72, 0xee, 0x3e, 0xca, 0xb9,
		0x69, 0xf1, 0xd5, 0x5a, 0xd9, 0x83, 0xa2, 0x6b, 0x47, 0xd1, 0xdd, 0x34, 0xde, 0x10, 0x75, 0xe9,
		0x77, 0x71, 0xa6, 0xd1, 0x56, 0xe8, 0xd2, 0x3d, 0x2a, 0x20, 0x06, 0x20, 0x06, 0x20, 0x06, 0xaa,
		0x2b, 0x87, 0xf4, 0xf4, 0x19, 0x58, 0xc2, 0x36, 0x68, 0x8a, 0xa4, 0x8f, 0xc2, 0xb0, 0x04, 0x24,
		0x7d, 0x80, 0x25, 0x6c, 0x6b, 0xab, 0x37, 0x48, 0x44, 0x91, 0x08, 0x42, 0x7b, 0x10, 0xc7, 0x2c,
		0x14, 0xaf, 0xdf, 0x38, 0xdf, 0x06, 0x95, 0x4a, 0xad, 0xed, 0x94, 0xcb, 0x67, 0xeb, 0x15, 0xd3,
		0x5d, 0x4d, 0xf7, 0x29, 0xb2, 0x6c, 0xc0, 0xc9, 0x54, 0xd1, 0x18, 0xb2, 0x6c, 0x76, 0x41, 0xc8,
		0x3c, 0x3a, 0x42, 0xe6, 0x81, 0x90, 0x81, 0x90, 0x81, 0x90, 0x81, 0x90, 0x81, 0x90, 0x81, 0x90,
		0x81, 0x90, 0x81, 0x90, 0x81, 0x90, 0x81, 0x90, 0x81, 0x90, 0x81, 0x90, 0x81, 0x90, 0x49, 0x10,
		0xb2, 0x2a, 0x1d, 0x21, 0xab, 0x82, 0x90, 0x81, 0x90, 0x81, 0x90, 0x81, 0x90, 0x81, 0x90, 0x81,
		0x90, 0x81, 0x90, 0x81, 0x90, 0x81, 0x90, 0x81, 0x90, 0x81, 0x90, 0x81, 0x90, 0x81, 0x90, 0x49,
		0x10, 0xb2, 0x1a, 0x1d, 0x21, 0xab, 0x81, 0x90, 0x81, 0x90, 0x81, 0x90, 0x81, 0x90, 0x81, 0x90,
		0x81, 0x90, 0x81, 0x90, 0x81, 0x90, 0x81, 0x90, 0x81, 0x90, 0x81, 0x90, 0x81, 0x90, 0x81, 0x90,
		0x49, 0x10, 0xb2, 0x3a, 0x1d, 0x21, 0xab, 0x83, 0x90, 0x81, 0x90, 0x81, 0x90, 0x81, 0x90, 0x81,
		0x90, 0x81, 0x90, 0x81, 0x90, 0x81, 0x90, 0x81, 0x90, 0x81, 0x90, 0x81, 0x90, 0x81, 0x90, 0x81,
		0x90, 0x49, 0x10, 0xb2, 0x73, 0x3a, 0x42, 0x76, 0x0e, 0x42, 0x06, 0x42, 0x06, 0x42, 0x06, 0x42,
		0x06, 0x42, 0x06, 0x42, 0x06, 0x42, 0x06, 0x42, 0x06, 0x42, 0x06, 0x42, 0x06, 0x42, 0x06, 0x42,
		0x06, 0x42, 0x26, 0x41, 0xc8, 0x1a, 0x74, 0x84, 0xac, 0x01, 0x42, 0x06, 0x42, 0x06, 0x42, 0x06,
		0x42, 0x06, 0x42, 0x06, 0x42, 0x06, 0x42, 0x06, 0x42, 0x06, 0x42, 0x06, 0x42, 0x06, 0x42, 0x06,
		0x42, 0x06, 0x42, 0x26, 0x41, 0xc8, 0x9a, 0x74, 0x84, 0xac, 0x09, 0x42, 0x06, 0x42, 0x06, 0x42,
		0x06, 0x42, 0x06, 0x42, 0x06, 0x42, 0x06, 0x42, 0x06, 0x42, 0x06, 0x42, 0x06, 0x42, 0x06, 0x42,
		0x06, 0x42, 0x76, 0x7c, 0x84, 0xcc, 0xe8, 0x1d, 0xc9, 0x04, 0x66, 0x95, 0x60, 0x77, 0x13, 0x20,
		0x5e, 0x03, 0xbb, 0xd9, 0x04, 0x71, 0xa2, 0xda, 0xbd, 0x66, 0xb9, 0x13, 0xfd, 0x6e, 0x7d, 0xb1,
		0xb4, 0x5b, 0xee, 0x8c, 0xee, 0x96, 0xab, 0x30, 0x8c, 0x84, 0x3f, 0x84, 0x85, 0x6a, 0x3b, 0x25,
		0x69, 0x3f, 0xb2, 0x9e, 0xdf, 0xf7, 0xc5, 0xe3, 0x70, 0x94, 0xcf, 0x38, 0x13, 0x1d, 0x97, 0x87,
		0x82, 0xc5, 0x1d, 0xbf, 0xcd, 0x92, 0xb3, 0x55, 0x7f, 0x3d, 0xbb, 0x8f, 0x79, 0xf0, 0xc0, 0xdc,
		0x7e, 0x14, 0x8b, 0xb3, 0x39, 0x28, 0x70, 0xa6, 0x7f, 0x1d, 0xff, 0xe8, 0x4b, 0x89, 0x78, 0xd0,
		0x16, 0xe1, 0x78, 0x1f, 0x7d, 0x7c, 0x7f, 0xfb, 0xe1, 0x63, 0xf6, 0x3d, 0xbe, 0xaf, 0xfa, 0xeb,
		0xf7, 0xb7, 0xe9, 0x57, 0xba, 0x89, 0x62, 0xf1, 0xfd, 0x76, 0xf4, 0x1d, 0x7e, 0x1f, 0x7e, 0x85,
		0xb9, 0x1f, 0x6e, 0xd3, 0xaf, 0x73, 0x62, 0x66, 0xb6, 0xf3, 0x7d, 0x32, 0xe7, 0xec, 0xea, 0xd8,
		0x40, 0x0d, 0xdb, 0xa7, 0xb0, 0x7c, 0xe6, 0xef, 0x51, 0x5d, 0xb1, 0x3f, 0xdd, 0x6a, 0xc5, 0x6b,
		0x7d, 0x0b, 0xd7, 0x6d, 0xdf, 0xf4, 0x9f, 0x55, 0x96, 0x88, 0xa6, 0x21, 0xa4, 0x34, 0x80, 0x64,
		0x86, 0x6f, 0xc5, 0x4d, 0xa9, 0xaa, 0x23, 0x6a, 0xda, 0xa7, 0x9f, 0xd0, 0x5a, 0xbf, 0xbc, 0xfb,
		0x42, 0xd1, 0xda, 0xd1, 0x5a, 0x39, 0x89, 0x65, 0x42, 0x67, 0xc9, 0xf2, 0xcd, 0xe8, 0xf6, 0x79,
		0xc9, 0x31, 0xd2, 0x25, 0xf1, 0xdc, 0x67, 0x6e, 0xdb, 0xef, 0xfb, 0xf7, 0xbc, 0x2b, 0x38, 0x4b,
		0x72, 0x8f, 0xf5, 0x54, 0xec, 0x5b, 0x6c, 0x21, 0xe7, 0xfc, 0xca, 0x49, 0xe5, 0x53, 0x69, 0xbc,
		0x9a, 0xf3, 0x01, 0x05, 0x29, 0x7c, 0x5e, 0xfa, 0x96, 0x99, 0x7b, 0x45, 0x13, 0xa5, 0x2d, 0x6a,
		0x6b, 0xdb, 0xa3, 0x65, 0xd1, 0xba, 0xb4, 0x23, 0x3f, 0x28, 0x2d, 0x3f, 0x67, 0xb3, 0x75, 0xcf,
		0x85, 0xd4, 0x46, 0x1d, 0xaf, 0x3c, 0x4f, 0x42, 0x53, 0x2b, 0xbd, 0xe5, 0x42, 0x7e, 0x76, 0x6f,
		0xa3, 0x2f, 0x22, 0xe6, 0xe1, 0x83, 0x1a, 0x5c, 0xab, 0x8c, 0xc4, 0x99, 0x44, 0x44, 0x3d, 0x16,
		0xbb, 0x4f, 0x5d, 0x3f, 0x4c, 0x0d, 0x94, 0x8a, 0x07, 0xf5, 0x46, 0x0b, 0x2c, 0x7a, 0xe2, 0x01,
		0x8b, 0xdd, 0x90, 0x89, 0x1f, 0x51, 0xfc, 0x97, 0x7a, 0x6b, 0xe9, 0x37, 0x1b, 0xf4, 0xbb, 0x3c,
		0xfc, 0xcb, 0x8d, 0x59, 0xd7, 0x7f, 0x56, 0x6e, 0xaa, 0x3a, 0xf7, 0x8e, 0xba, 0x5f, 0xac, 0x36,
		0xd7, 0x1a, 0x9b, 0x98, 0x74, 0x95, 0xa6, 0xea, 0x73, 0x4d, 0xdd, 0xfb, 0xed, 0xbf, 0xee, 0xa3,
		0x50, 0xbd, 0xb9, 0xf3, 0x61, 0x73, 0x4f, 0x3c, 0x16, 0x03, 0xbf, 0xeb, 0xf2, 0x21, 0xd6, 0x0b,
		0xdb, 0xea, 0xad, 0x35, 0xd2, 0xcd, 0xea, 0xce, 0x78, 0x2d, 0x95, 0x56, 0x9a, 0x23, 0x40, 0xd4,
		0x8b, 0x04, 0x73, 0xb3, 0x37, 0xf5, 0xdb, 0x6d, 0x96, 0x24, 0xca, 0x6d, 0xb6, 0x86, 0x6d, 0x26,
		0x23, 0xb7, 0xed, 0x76, 0xfc, 0x36, 0x0f, 0x1f, 0x74, 0xbf, 0xe6, 0xc5, 0xcc, 0x62, 0x9b, 0xfd,
		0x76, 0x46, 0xa9, 0xd6, 0x6d, 0xf4, 0x31, 0x14, 0x6a, 0xdb, 0x76, 0xcd, 0xa2, 0xb9, 0x74, 0xea,
		0xa7, 0x1a, 0x8d, 0x4d, 0x17, 0xf3, 0xa5, 0x53, 0xd3, 0x69, 0x68, 0x6e, 0x8f, 0xe5, 0xf6, 0xa6,
		0xab, 0xdb, 0x9a, 0xda, 0x24, 0xa5, 0x00, 0xc5, 0xc2, 0x12, 0xbe, 0x74, 0x1a, 0x4a, 0xd1, 0xff,
		0x55, 0x56, 0xed, 0xd2, 0xf1, 0x4e, 0x55, 0xa4, 0xa4, 0xf5, 0x9b, 0x41, 0x29, 0xb6, 0xb3, 0x69,
		0x2b, 0x5c, 0x3a, 0x2d, 0x85, 0x06, 0x57, 0x6c, 0x84, 0x4b, 0xe7, 0x42, 0xbd, 0xa1, 0x19, 0xf3,
		0x2d, 0xe7, 0x11, 0xb3, 0x86, 0x56, 0x5b, 0xb5, 0x4b, 0xe7, 0x1c, 0xec, 0xdb, 0x10, 0xfb, 0xae,
		0x97, 0xab, 0xa0, 0xd7, 0x72, 0xf4, 0x7a, 0xd3, 0x90, 0xed, 0x1b, 0x7f, 0x26, 0xe1, 0x7d, 0x83,
		0x84, 0xb9, 0x01, 0xe3, 0xf2, 0x74, 0x6f, 0xf2, 0x60, 0xce, 0xfd, 0xf5, 0x8e, 0x75, 0xfc, 0x41,
		0x57, 0x2e, 0xde, 0x59, 0x4a, 0x23, 0xd3, 0xf9, 0xe6, 0xe5, 0xce, 0x30, 0xdb, 0xac, 0x80, 0x6d,
		0x82, 0x6d, 0xce, 0xb3, 0xcd, 0x28, 0xea, 0x32, 0x3f, 0x54, 0x21, 0x9c, 0x1e, 0x84, 0xe3, 0xf5,
		0x76, 0xf8, 0x5b, 0xd8, 0x28, 0x5f, 0xac, 0x57, 0x41, 0xe1, 0xd9, 0xd6, 0x09, 0xc7, 0xca, 0x23,
		0x7a, 0x94, 0x8e, 0xef, 0x89, 0x07, 0xae, 0x88, 0xfd, 0x30, 0xe9, 0xa6, 0xc8, 0x5c, 0x41, 0xf0,
		0x5c, 0x6a, 0x41, 0xce, 0x05, 0x79, 0x70, 0x41, 0x70, 0x41, 0x29, 0x34, 0xe2, 0xb1, 0xdc, 0x64,
		0x75, 0xa3, 0xb6, 0xdf, 0x75, 0x9f, 0x78, 0x20, 0x3f, 0xec, 0x93, 0x79, 0x9e, 0x36, 0x21, 0x39,
		0x6a, 0x6a, 0x89, 0xed, 0xca, 0x09, 0xed, 0x3a, 0x89, 0xec, 0xca, 0x8b, 0xda, 0x84, 0xdf, 0xd0,
		0x4a, 0x55, 0x37, 0xe3, 0x34, 0x24, 0x17, 0xbd, 0xa2, 0xf1, 0x97, 0x15, 0xdc, 0x54, 0x93, 0xcf,
		0xa7, 0x66, 0xb9, 0xeb, 0x87, 0xd2, 0xeb, 0x7a, 0x76, 0x6d, 0xab, 0xa8, 0x4f, 0x7a, 0x89, 0xe5,
		0x1a, 0x89, 0x47, 0x14, 0x89, 0xe4, 0x59, 0xd6, 0xb2, 0xa7, 0x99, 0xbc, 0x43, 0x9d, 0xad, 0x4c,
		0x97, 0xa5, 0xac, 0x91, 0x28, 0x4e, 0x92, 0x20, 0x9e, 0x0d, 0x71, 0xbd, 0x72, 0x51, 0x3f, 0xdc,
		0x51, 0x3e, 0x88, 0xf4, 0xaa, 0x83, 0x49, 0x46, 0xf4, 0xaa, 0x65, 0xaf, 0x52, 0xf6, 0xca, 0xad,
		0x8d, 0xc4, 0x80, 0x90, 0x68, 0x51, 0x39, 0x4e, 0x13, 0xc4, 0x8b, 0xdc, 0x97, 0xae, 0x23, 0x62,
		0x3a, 0x43, 0x7e, 0x68, 0x3b, 0xef, 0xc4, 0xc0, 0x1e, 0x2d, 0x8d, 0x42, 0x15, 0x5a, 0xf0, 0x77,
		0xda, 0x04, 0xe0, 0x2f, 0xe0, 0x2f, 0xe0, 0x2f, 0xe0, 0x2f, 0xe0, 0x2f, 0xe0, 0x2f, 0xe0, 0x2f,
		0xe0, 0x2f, 0xe0, 0x2f, 0xe0, 0xef, 0x0e, 0xe0, 0x2f, 0xa9, 0xa0, 0xfc, 0x2f, 0xf6, 0xac, 0xa2,
		0xf1, 0x96, 0xfe, 0xe0, 0x89, 0xb8, 0x12, 0x42, 0x52, 0x8d, 0xbe, 0xe6, 0xe1, 0xfb, 0x2e, 0x1b,
		0xae, 0x00, 0x49, 0x63, 0x3c, 0xf4, 0x2c, 0x33, 0x4f, 0x7a, 0xad, 0x7a, 0xbd, 0xd1, 0xac, 0xd7,
		0x2b, 0xcd, 0x5a, 0xb3, 0x72, 0x71, 0x7e, 0xee, 0x35, 0x3c, 0x89, 0x52, 0x0f, 0xa5, 0x4f, 0x71,
		0xc0, 0x62, 0x16, 0xbc, 0x1d, 0xbe, 0x7a, 0x38, 0xe8, 0x76, 0x0b, 0x13, 0x62, 0xfd, 0xf1, 0xc8,
		0x42, 0x9b, 0xd1, 0xd5, 0x72, 0xf9, 0xac, 0x1d, 0xf5, 0xfa, 0x51, 0xc8, 0x42, 0xe1, 0x86, 0x7e,
		0x8f, 0x39, 0x7f, 0xfb, 0x87, 0xf3, 0x2a, 0x4b, 0xb1, 0xcb, 0xfe, 0xed, 0xd5, 0x8e, 0x29, 0x41,
		0x3a, 0x2e, 0x45, 0x22, 0x04, 0xf9, 0x07, 0xce, 0x4a, 0x39, 0xa3, 0x77, 0x2c, 0x69, 0xc7, 0xbc,
		0xaf, 0x7c, 0xcc, 0x6f, 0x6e, 0x51, 0x5c, 0xf5, 0xfb, 0x5d, 0xce, 0x12, 0x47, 0x44, 0x4e, 0x18,
		0x85, 0xce, 0xed, 0xcd, 0xf5, 0x67, 0xd5, 0x62, 0x3e, 0x14, 0xde, 0x6d, 0x76, 0x1d, 0x04, 0x33,
		0xef, 0xa9, 0xe1, 0x73, 0x29, 0xfd, 0xda, 0xdc, 0xb2, 0x58, 0x39, 0x74, 0xc5, 0x3c, 0x75, 0x7d,
		0x64, 0x27, 0xb4, 0x14, 0x03, 0xf0, 0x8e, 0xf6, 0x21, 0xad, 0x3f, 0x79, 0x70, 0x3b, 0xdb, 0x2f,
		0x55, 0xda, 0xc2, 0x89, 0xc6, 0x6c, 0xc8, 0xce, 0x82, 0xee, 0xe8, 0xe7, 0x18, 0x6c, 0xad, 0x41,
		0xde, 0x3c, 0xa8, 0xeb, 0x87, 0x6a, 0xc3, 0x30, 0xcd, 0x99, 0x9a, 0x6d, 0x63, 0x34, 0x95, 0xcf,
		0x72, 0xdb, 0xa7, 0x9c, 0xea, 0x60, 0x6e, 0x35, 0x50, 0x46, 0xfd, 0xcb, 0xbe, 0x2e, 0xef, 0xe4,
		0x99, 0x19, 0x49, 0x1b, 0xae, 0x2c, 0xe5, 0x29, 0x9b, 0xe5, 0x39, 0x13, 0xcc, 0x3b, 0x25, 0xc3,
		0x9b, 0x27, 0xb7, 0xee, 0x96, 0x8d, 0x73, 0x32, 0x3a, 0xd1, 0x95, 0x63, 0xac, 0x27, 0xf9, 0x3e,
		0x2d, 0xad, 0x6f, 0xa8, 0x00, 0x41, 0x15, 0x68, 0xb8, 0x42, 0xca, 0xd0, 0xe7, 0x0f, 0xbf, 0x3b,
		0xd5, 0x56, 0xa3, 0x76, 0xe9, 0xdc, 0x3e, 0x32, 0x67, 0xba, 0xab, 0x9d, 0xff, 0x8e, 0xa3, 0x41,
		0xdf, 0xb9, 0xfe, 0xf8, 0xd6, 0x71, 0x1d, 0xde, 0xb9, 0xea, 0x72, 0x3f, 0xb1, 0x9c, 0x59, 0xa4,
		0x4a, 0x9a, 0x69, 0x93, 0x8b, 0xa4, 0x06, 0x88, 0x9a, 0x32, 0x9e, 0xe8, 0x41, 0x01, 0x35, 0x3b,
		0xcb, 0xc2, 0xe1, 0x1a, 0x0d, 0xf2, 0xdb, 0xd8, 0xc9, 0x03, 0x5b, 0xf6, 0x80, 0x4c, 0x12, 0x79,
		0x69, 0x38, 0x6b, 0x9b, 0x87, 0xf3, 0x0e, 0xe6, 0x1c, 0xe6, 0x5c, 0x3a, 0x9b, 0x3b, 0x67, 0x16,
		0xf7, 0xc1, 0xdb, 0xf3, 0xa0, 0xc7, 0xc3, 0x2f, 0xc2, 0x17, 0x03, 0x58, 0xf5, 0x9c, 0xc3, 0x74,
		0x10, 0xb6, 0xfd, 0x91, 0x3f, 0x3c, 0xb2, 0xd8, 0xed, 0xfa, 0xcf, 0x2c, 0x76, 0x79, 0x27, 0xbf,
		0x8d, 0x5f, 0x7c, 0x90, 0xd8, 0xf8, 0x56, 0x61, 0x7c, 0xf7, 0xd6, 0xf8, 0x66, 0x04, 0xd3, 0x8d,
		0x59, 0x47, 0xc6, 0x04, 0xe7, 0x38, 0x8a, 0x5b, 0xba, 0xc9, 0x18, 0x6e, 0xe7, 0x72, 0x96, 0xd4,
		0xce, 0xfc, 0x34, 0xfc, 0x21, 0x65, 0xa9, 0x5a, 0xef, 0x2d, 0x25, 0x9f, 0xcb, 0xcb, 0xe6, 0x24,
		0x72, 0xb9, 0x9c, 0x4c, 0x7e, 0xe8, 0x3e, 0xec, 0x8b, 0xf0, 0xdb, 0x7f, 0xdd, 0x4a, 0x56, 0x2c,
		0x3b, 0x3a, 0x17, 0x36, 0x33, 0x4a, 0x07, 0xe1, 0xc1, 0x78, 0xc7, 0xe5, 0x61, 0xc0, 0x7e, 0xe6,
		0x77, 0x5d, 0xd9, 0x13, 0xf0, 0x59, 0x07, 0xea, 0xb3, 0xae, 0xfd, 0x30, 0xf0, 0x45, 0x14, 0x3f,
		0x6f, 0x4f, 0x03, 0x52, 0xf3, 0x6f, 0xb5, 0xaa, 0x84, 0x5f, 0xcb, 0x51, 0xd8, 0x43, 0x32, 0xe5,
		0x4a, 0x2e, 0x9e, 0x2b, 0x6f, 0xdb, 0x14, 0x53, 0xa8, 0xb4, 0x93, 0x79, 0xd4, 0x93, 0x77, 0x5e,
		0xe4, 0x02, 0xd5, 0xea, 0x43, 0x52, 0xf5, 0xea, 0xcd, 0x7a, 0xab, 0xd6, 0xa8, 0x37, 0xf7, 0x67,
		0x6c, 0xec, 0x58, 0x6f, 0x03, 0xe8, 0x82, 0x77, 0xdc, 0x0e, 0xf3, 0xc5, 0x20, 0x36, 0x0a, 0x2f,
		0x78, 0xc7, 0xed, 0xf1, 0x7b, 0xcb, 0x98, 0x61, 0xe6, 0xd5, 0x76, 0x09, 0x1a, 0xc6, 0xef, 0x6e,
		0x7f, 0x2d, 0x9d, 0xee, 0x17, 0xb6, 0xfc, 0x98, 0x03, 0x30, 0x1c, 0x35, 0xac, 0x1c, 0x0d, 0xd0,
		0x41, 0x20, 0xca, 0xae, 0x9f, 0x08, 0xb7, 0xfd, 0x38, 0xf6, 0xc8, 0x39, 0x41, 0xe5, 0xec, 0x43,
		0xc0, 0x95, 0xd0, 0x42, 0x26, 0xe1, 0x66, 0x5f, 0x30, 0xd7, 0x0f, 0x03, 0x57, 0xf0, 0x1e, 0x93,
		0x0a, 0x2f, 0xe6, 0xd3, 0x42, 0x04, 0x8b, 0xf3, 0xa7, 0xa3, 0x95, 0xbe, 0x7d, 0x0b, 0x7e, 0xd5,
		0x5f, 0xdc, 0xe1, 0x7f, 0xaa, 0x93, 0xff, 0xdc, 0x8e, 0xfe, 0x73, 0x39, 0xf7, 0x9f, 0xd7, 0xdf,
		0xbe, 0x95, 0xbf, 0x7d, 0x0b, 0xfe, 0xeb, 0xcd, 0x6f, 0xaf, 0xff, 0xef, 0xff, 0xfb, 0xfa, 0xed,
		0xdb, 0x7f, 0x7d, 0xfb, 0xe6, 0xde, 0xcd, 0x7d, 0xe2, 0x4d, 0xa9, 0x80, 0x78, 0xa1, 0x48, 0x1e,
		0xe3, 0x0f, 0x3f, 0x11, 0xbf, 0xe7, 0xb1, 0x07, 0x47, 0xed, 0x36, 0x66, 0x46, 0xe9, 0x30, 0x7c,
		0x07, 0x0f, 0xff, 0x72, 0x07, 0x7d, 0x37, 0x88, 0x7e, 0x84, 0xae, 0x88, 0xfd, 0xbe, 0x3b, 0x0a,
		0x86, 0x4a, 0x38, 0x92, 0x75, 0x2d, 0x20, 0xbc, 0x09, 0xaf, 0x92, 0x05, 0xd8, 0x07, 0x3d, 0x16,
		0xfb, 0x39, 0x93, 0x2c, 0x33, 0x9f, 0x92, 0xe3, 0xac, 0x4e, 0xe9, 0x7d, 0x38, 0xe8, 0xe5, 0x9f,
		0x1a, 0xa5, 0x52, 0xc8, 0xa3, 0xba, 0xc5, 0xf9, 0x92, 0x04, 0xe6, 0x9e, 0x4b, 0xcb, 0x0a, 0x07,
		0x3c, 0x19, 0x3d, 0x48, 0x5b, 0x38, 0x4c, 0xba, 0x32, 0xec, 0xf4, 0x8b, 0x48, 0x95, 0x5b, 0x9d,
		0xc9, 0xa6, 0xf0, 0x0a, 0x91, 0x68, 0x08, 0x5e, 0x0e, 0x5e, 0xbe, 0xa7, 0xbc, 0xfc, 0x5b, 0x38,
		0x7d, 0x90, 0x77, 0xfe, 0xe0, 0xe1, 0x5f, 0xff, 0xe9, 0xbf, 0x8b, 0x7e, 0x84, 0xb7, 0xb1, 0xdf,
		0x7f, 0x1f, 0x22, 0x10, 0xa4, 0x37, 0x74, 0x87, 0x81, 0xc7, 0xa2, 0x1f, 0x4a, 0xe9, 0x0d, 0x0b,
		0xcf, 0x81, 0xd1, 0x03, 0x7b, 0x21, 0xbb, 0x01, 0xd9, 0x0d, 0x3b, 0xd4, 0x13, 0x90, 0xdd, 0x70,
		0x8c, 0xd9, 0x0d, 0xe3, 0xd3, 0x36, 0x39, 0xbd, 0x56, 0xfa, 0x69, 0xe8, 0x04, 0xf0, 0x55, 0x38,
		0xd5, 0xa2, 0x64, 0x63, 0xff, 0xed, 0xf7, 0x60, 0x5d, 0xb7, 0x8d, 0xcf, 0x41, 0xd8, 0xd5, 0xa8,
		0xcf, 0x62, 0x37, 0x19, 0x25, 0x72, 0xe7, 0x36, 0xaf, 0xb3, 0x0f, 0x81, 0x11, 0x20, 0x77, 0xec,
		0x48, 0x95, 0xdb, 0x41, 0x5f, 0x5e, 0xb4, 0x8d, 0x7e, 0x48, 0x5d, 0xad, 0x90, 0x5e, 0xf9, 0x26,
		0x58, 0x22, 0xf2, 0xb9, 0xaf, 0xec, 0xb9, 0xf4, 0x7e, 0xb7, 0x41, 0xf8, 0x57, 0x28, 0xd9, 0xdf,
		0xf9, 0xe8, 0x4b, 0xc6, 0x3d, 0x3f, 0x94, 0xb9, 0xcd, 0x6c, 0x74, 0x65, 0x5b, 0x18, 0x09, 0xb7,
		0x1f, 0xb3, 0x84, 0xc9, 0x3d, 0xdb, 0x5c, 0xd4, 0x19, 0xd2, 0x41, 0xda, 0xb9, 0xaa, 0x3d, 0x1e,
		0x84, 0x4b, 0x47, 0xa6, 0x5c, 0x4b, 0xfa, 0xd5, 0xe5, 0x74, 0xf0, 0xa5, 0x37, 0x97, 0xba, 0x8a,
		0x6b, 0x6e, 0xd0, 0xa5, 0xaa, 0xdc, 0x65, 0xcb, 0x4a, 0xea, 0xc6, 0xb5, 0x6c, 0x51, 0x49, 0x5d,
		0xf8, 0x36, 0xdc, 0x2a, 0xfb, 0xac, 0xf3, 0x17, 0x09, 0x9b, 0x7d, 0xea, 0xb3, 0x18, 0x07, 0xd4,
		0x24, 0x46, 0xe9, 0x20, 0x70, 0x5a, 0xff, 0xf1, 0x39, 0x71, 0xfd, 0x20, 0x88, 0x59, 0x22, 0x01,
		0xd4, 0xe6, 0x9e, 0x02, 0x52, 0x03, 0x1f, 0x96, 0x5f, 0x17, 0x8e, 0xf1, 0x64, 0xac, 0xd7, 0x5f,
		0x2b, 0xee, 0x85, 0xef, 0x76, 0xae, 0xdc, 0x0f, 0x77, 0xbf, 0xaa, 0x2f, 0xaf, 0x2f, 0xe7, 0x7f,
		0x7e, 0xf3, 0xf7, 0x37, 0xbf, 0x21, 0xc7, 0x6a, 0xb3, 0xb5, 0xbb, 0x79, 0x7c, 0x4e, 0xae, 0x72,
		0x4f, 0xe7, 0xd1, 0x3a, 0x85, 0xd9, 0x61, 0x3a, 0x08, 0xaf, 0x90, 0xf4, 0x99, 0x4c, 0x3d, 0x8a,
		0xd1, 0xc7, 0xe1, 0x07, 0xe0, 0x07, 0xc6, 0xe3, 0xfc, 0xe0, 0x0f, 0x1e, 0x58, 0xa3, 0x2e, 0xe1,
		0x02, 0x5a, 0x7b, 0x7b, 0x86, 0xab, 0x82, 0x33, 0x5c, 0x8b, 0x43, 0xa2, 0x57, 0x9b, 0xd4, 0xc1,
		0x69, 0xae, 0x3d, 0x47, 0x0e, 0xf3, 0xc9, 0x2f, 0x5f, 0x86, 0xde, 0xe1, 0xd4, 0xe1, 0x9d, 0x7f,
		0xf2, 0x87, 0xc7, 0x2f, 0x39, 0x5c, 0xc5, 0xf1, 0x62, 0x89, 0xad, 0x03, 0x77, 0x18, 0xe8, 0x42,
		0xf8, 0x82, 0x27, 0x82, 0xb7, 0x25, 0x18, 0xe7, 0xcc, 0x33, 0xf9, 0x70, 0x86, 0x07, 0x9c, 0xb1,
		0x6f, 0x38, 0x23, 0xef, 0xcd, 0x8e, 0xa5, 0x80, 0x27, 0xed, 0x28, 0x14, 0x3c, 0x1c, 0x70, 0xf1,
		0x3c, 0x3a, 0xf9, 0x23, 0x7d, 0x1d, 0xe9, 0x8a, 0x36, 0x0e, 0xe0, 0x4e, 0xec, 0x5c, 0x0b, 0x8f,
		0xd2, 0xb6, 0x16, 0xe0, 0x36, 0xd2, 0x3c, 0x0b, 0x53, 0xd2, 0x2c, 0xe6, 0x9c, 0x29, 0x89, 0x50,
		0x96, 0x3c, 0x98, 0x5e, 0x5e, 0xb1, 0x92, 0x47, 0xdd, 0x54, 0x54, 0x16, 0x65, 0xb5, 0x25, 0x7b,
		0xd0, 0xee, 0x11, 0xb8, 0x7c, 0x6e, 0x4a, 0x22, 0x04, 0x90, 0xc3, 0x6c, 0xf3, 0xd0, 0xbd, 0x8f,
		0x23, 0x3f, 0x68, 0xfb, 0x89, 0x70, 0xfb, 0x7f, 0x09, 0x85, 0xbb, 0x90, 0x97, 0x9b, 0x80, 0xed,
		0x81, 0xed, 0x91, 0xb2, 0x3d, 0xea, 0x76, 0xa4, 0x1d, 0x0d, 0x86, 0xe0, 0x33, 0x17, 0x3d, 0x57,
		0xa0, 0xe9, 0x8a, 0x74, 0x5d, 0x9e, 0x92, 0x68, 0xd1, 0x77, 0x5d, 0x1a, 0x4f, 0x46, 0x54, 0xf5,
		0x09, 0xab, 0x02, 0xbd, 0xd7, 0xa2, 0xf9, 0x06, 0xe8, 0x7e, 0x11, 0x47, 0x73, 0x2f, 0xee, 0x12,
		0xd0, 0xb9, 0x69, 0x45, 0xfd, 0xd6, 0x29, 0x8d, 0xeb, 0x56, 0xe4, 0x59, 0xf0, 0x3f, 0x7f, 0xff,
		0x18, 0xbe, 0x9d, 0x38, 0xcb, 0x9b, 0xfc, 0xbe, 0x92, 0xc2, 0xdb, 0x50, 0xaa, 0x09, 0x64, 0x0e,
		0x88, 0x48, 0x5d, 0x58, 0x1e, 0xd7, 0x7d, 0xdb, 0x23, 0x54, 0x68, 0x6e, 0x48, 0x05, 0xfd, 0x38,
		0x50, 0xc3, 0x71, 0xd9, 0xc3, 0x40, 0x70, 0x40, 0x70, 0x76, 0x11, 0x5c, 0xae, 0x22, 0x79, 0x8b,
		0x0b, 0xaf, 0x09, 0x04, 0x07, 0x04, 0xb7, 0x38, 0x74, 0xf5, 0xea, 0x45, 0xfd, 0xa2, 0xd1, 0xac,
		0x5e, 0x00, 0xb7, 0x01, 0xb7, 0x29, 0xe3, 0xb6, 0xb4, 0x4a, 0xd9, 0x3b, 0x39, 0x7f, 0x08, 0x94,
		0xb6, 0x79, 0x14, 0x8f, 0x15, 0x93, 0xb1, 0x38, 0x8e, 0x62, 0x35, 0x44, 0x36, 0x7e, 0x14, 0x78,
		0x0c, 0x78, 0x0c, 0x78, 0x0c, 0x78, 0x0c, 0x78, 0x0c, 0x78, 0xec, 0x88, 0xf1, 0xd8, 0x7b, 0x19,
		0x6f, 0x08, 0x34, 0xb6, 0x69, 0x0c, 0x8f, 0x15, 0x8b, 0xf5, 0x06, 0x5d, 0xc1, 0xf5, 0xa2, 0x9d,
		0x0b, 0x4d, 0x00, 0x9b, 0x01, 0x9b, 0xd9, 0xc5, 0x66, 0x88, 0x76, 0x02, 0x9b, 0x21, 0xda, 0x09,
		0x94, 0xb6, 0x0f, 0xd1, 0xce, 0xeb, 0x89, 0xb3, 0x44, 0xb4, 0x53, 0x03, 0xb9, 0x6d, 0x1b, 0xd7,
		0x63, 0x45, 0x73, 0x51, 0x5b, 0x30, 0x45, 0x14, 0x37, 0x7e, 0x14, 0xe8, 0x0d, 0xe8, 0x0d, 0xe8,
		0x0d, 0xe8, 0x0d, 0xe8, 0x0d, 0xe8, 0x0d, 0x1a, 0x5b, 0x0a, 0x2d, 0x3e, 0xc9, 0x78, 0x46, 0x60,
		0xb5, 0xcd, 0xa3, 0x78, 0xac, 0xc8, 0x6c, 0x10, 0x6a, 0xaa, 0x6c, 0x73, 0x0d, 0x00, 0xa5, 0x01,
		0xa5, 0x01, 0xa5, 0x01, 0xa5, 0x01, 0xa5, 0x01, 0xa5, 0x01, 0xa5, 0xa5, 0xf8, 0xe2, 0x3f, 0x10,
		0xd5, 0x68, 0x80, 0xda, 0x7f, 0x8e, 0x5e, 0x45, 0x1b, 0x97, 0xab, 0x74, 0xfb, 0x71, 0x24, 0x22,
		0x55, 0xb4, 0x36, 0xd7, 0x04, 0xf0, 0x1a, 0xf0, 0x9a, 0x5d, 0xbc, 0x86, 0x7c, 0x35, 0xe0, 0x35,
		0xe4, 0xab, 0x01, 0xa5, 0x15, 0x08, 0xa5, 0x7d, 0x0c, 0xff, 0x33, 0xf2, 0x8a, 0x37, 0x32, 0x4e,
		0x11, 0x38, 0x2d, 0xc7, 0x50, 0x1e, 0x25, 0x52, 0x8b, 0x06, 0x42, 0xbb, 0x58, 0xc7, 0x8a, 0x36,
		0x80, 0xd5, 0x80, 0xd5, 0xa0, 0xad, 0x01, 0xab, 0x41, 0x5b, 0x03, 0x6a, 0x43, 0xfe, 0xda, 0xf4,
		0x41, 0xde, 0xf9, 0xe7, 0xef, 0x9f, 0x06, 0x02, 0xe5, 0x3a, 0x28, 0x30, 0xdc, 0xd6, 0x81, 0x3d,
		0x5a, 0x44, 0xa7, 0x5e, 0xb0, 0x63, 0xee, 0x69, 0xa0, 0x38, 0xa0, 0x38, 0x28, 0x6e, 0x40, 0x71,
		0x50, 0xdc, 0x80, 0xdd, 0x8e, 0x56, 0x71, 0xfb, 0x34, 0x10, 0x28, 0xd9, 0xa1, 0xaf, 0xb6, 0xcd,
		0x0e, 0xe3, 0xd1, 0xe2, 0x32, 0xd5, 0xa2, 0x1d, 0x33, 0xcf, 0x02, 0x93, 0x01, 0x93, 0x01, 0x93,
		0x01, 0x93, 0x01, 0x93, 0x01, 0x93, 0x1d, 0x33, 0x26, 0x43, 0xd9, 0x0e, 0x02, 0x44, 0x76, 0xcc,
		0x75, 0x3b, 0x86, 0x98, 0x4a, 0xb7, 0x70, 0xc7, 0x8a, 0x36, 0x80, 0xcf, 0x80, 0xcf, 0xec, 0xe2,
		0x33, 0x44, 0x3e, 0x81, 0xcf, 0x10, 0xf9, 0x04, 0x52, 0xdb, 0x8b, 0xc8, 0x27, 0x4a, 0x77, 0x50,
		0xa0, 0xb7, 0xad, 0x03, 0x7b, 0xb4, 0x88, 0x4e, 0xb5, 0x78, 0xc7, 0xcc, 0xb3, 0x40, 0x70, 0x40,
		0x70, 0x40, 0x70, 0x40, 0x70, 0x40, 0x70, 0x40, 0x70, 0xd0, 0xda, 0x46, 0xe8, 0x02, 0xe5, 0x3b,
		0x74, 0xd5, 0xb6, 0xd9, 0x61, 0x3c, 0x5a, 0x74, 0xa6, 0x57, 0xc0, 0x63, 0xa9, 0x05, 0x20, 0x35,
		0x20, 0x35, 0x20, 0x35, 0x20, 0x35, 0x20, 0x35, 0x20, 0x35, 0x20, 0xb5, 0x11, 0xc4, 0x40, 0x09,
		0x0f, 0x2a, 0xb0, 0x76, 0xc8, 0x35, 0x3c, 0x4e, 0x34, 0xf6, 0x51, 0xe9, 0x2a, 0x0c, 0x23, 0xe1,
		0x0f, 0x2d, 0x4e, 0xae, 0x95, 0x52, 0x4a, 0xda, 0x8f, 0xac, 0xe7, 0xf7, 0x7d, 0xf1, 0x38, 0x9c,
		0x82, 0x33, 0xce, 0x44, 0xc7, 0xe5, 0xd9, 0xd0, 0x9f, 0xad, 0xfa, 0xeb, 0x59, 0x32, 0xec, 0x20,
		0x11, 0xbc, 0x9d, 0x67, 0x1d, 0x97, 0x12, 0x11, 0x0f, 0xda, 0x22, 0x1c, 0x6f, 0x97, 0x8f, 0xef,
		0x6f, 0x3f, 0x4c, 0xa7, 0xf6, 0xfb, 0xaa, 0xbf, 0x7e, 0xff, 0x32, 0x6d, 0xff, 0x44, 0x6d, 0xa4,
		0x36, 0x8c, 0x52, 0x49, 0xe4, 0xc1, 0x19, 0xd9, 0xf6, 0x4e, 0x3f, 0xbd, 0x65, 0xcc, 0xf3, 0x61,
		0xd8, 0xdc, 0xd8, 0x55, 0x06, 0xb3, 0xca, 0x61, 0x55, 0x59, 0x1b, 0xa2, 0x8c, 0x4d, 0x95, 0x0d,
		0x84, 0x34, 0x16, 0xd5, 0xdb, 0x2d, 0xd7, 0x7e, 0x18, 0xf8, 0x22, 0x8a, 0x9f, 0x87, 0x4e, 0x7f,
		0xcb, 0x67, 0x73, 0xe3, 0xd3, 0xe9, 0x9c, 0x04, 0x2c, 0x14, 0x5c, 0x3c, 0xc7, 0x2c, 0xd7, 0xe4,
		0x8c, 0x97, 0x51, 0x1e, 0xa8, 0x51, 0xfa, 0x38, 0x6e, 0xfa, 0xad, 0x9f, 0x30, 0x95, 0xfa, 0x3d,
		0xe3, 0xad, 0xe6, 0xa6, 0xcb, 0xdb, 0xf0, 0x20, 0x2b, 0xb8, 0x74, 0x05, 0x57, 0xae, 0xc0, 0x1b,
		0x72, 0x3a, 0x9c, 0xdb, 0xed, 0x26, 0x80, 0x9a, 0x08, 0xaa, 0x3a, 0x68, 0x5a, 0x2e, 0x28, 0x33,
		0x3e, 0xd4, 0xa4, 0xf1, 0x44, 0xcf, 0xdd, 0x6e, 0x70, 0x0d, 0x27, 0x12, 0x6b, 0x78, 0x38, 0x27,
		0xc3, 0x91, 0x48, 0xbd, 0xd7, 0x9a, 0x8f, 0xfc, 0xc1, 0x13, 0x71, 0x25, 0x44, 0xbc, 0x71, 0xc2,
		0x87, 0x94, 0xee, 0x7d, 0x97, 0x0d, 0x47, 0x76, 0x0b, 0x09, 0x18, 0x32, 0x98, 0x99, 0x4f, 0xca,
		0x51, 0x91, 0xd2, 0xa7, 0x38, 0x60, 0x31, 0x0b, 0xde, 0x0e, 0xbf, 0x75, 0x38, 0xe8, 0x76, 0xa5,
		0x5e, 0xf6, 0x6a, 0xf0, 0x30, 0xec, 0x96, 0x05, 0x1b, 0x37, 0x5d, 0x4e, 0xc7, 0x79, 0xc6, 0x3b,
		0x97, 0xb3, 0xe8, 0x61, 0xe6, 0xa7, 0x6d, 0xfe, 0xf4, 0x1d, 0x4b, 0xda, 0x31, 0xef, 0x8f, 0x41,
		0xcc, 0xe4, 0x6b, 0x39, 0xe2, 0x91, 0x39, 0x59, 0x1b, 0x4e, 0x2f, 0x0a, 0x58, 0xd7, 0xf9, 0xc1,
		0xc5, 0x63, 0xfa, 0x0f, 0x6f, 0x63, 0x1e, 0x3c, 0x30, 0xe7, 0x26, 0x8a, 0x45, 0x4e, 0x77, 0xed,
		0xed, 0xd2, 0x5d, 0x07, 0x91, 0xf0, 0xfe, 0xe7, 0xf0, 0x3c, 0xf6, 0xe8, 0xb5, 0x0c, 0xfb, 0x93,
		0x77, 0x3c, 0xce, 0x37, 0xd8, 0xf7, 0xe9, 0x9a, 0x70, 0xfb, 0xc3, 0x35, 0x21, 0xed, 0x23, 0x67,
		0x1f, 0xce, 0x39, 0x12, 0x0b, 0xeb, 0x76, 0x66, 0x49, 0x3a, 0x3c, 0x71, 0xfc, 0xd0, 0x61, 0x3f,
		0x05, 0x0b, 0x13, 0x1e, 0x85, 0x4e, 0xd4, 0x49, 0x57, 0xed, 0x10, 0x0d, 0xcf, 0x1a, 0xd6, 0x74,
		0x51, 0x7f, 0x0b, 0x5f, 0x7f, 0xfe, 0xf0, 0x7b, 0xb3, 0x5a, 0xad, 0xbd, 0x29, 0x4b, 0xca, 0xa8,
		0x5e, 0x11, 0x65, 0xd4, 0xbc, 0x6b, 0xfd, 0xc0, 0x94, 0xd4, 0x9c, 0x7b, 0x81, 0xda, 0x2f, 0xda,
		0xc7, 0x6a, 0x3f, 0x1e, 0x59, 0x68, 0x12, 0xa6, 0xf1, 0xce, 0xe5, 0x10, 0xa6, 0x3a, 0xff, 0x70,
		0x5e, 0x71, 0x3f, 0xf4, 0x79, 0xe7, 0x72, 0xb4, 0x37, 0x5f, 0x39, 0x51, 0xec, 0x64, 0xff, 0x38,
		0xf9, 0x37, 0x26, 0x1e, 0x59, 0x1c, 0x32, 0xf1, 0x7b, 0xd2, 0xf3, 0xdb, 0xc1, 0xfc, 0x67, 0xb2,
		0x06, 0x38, 0x63, 0xac, 0x55, 0xa9, 0xd6, 0xfc, 0xe0, 0x0f, 0xff, 0xe1, 0xd5, 0xea, 0x8f, 0x74,
		0xfd, 0xf0, 0x95, 0xe5, 0x55, 0x9b, 0x8e, 0xe4, 0x6e, 0xd5, 0xff, 0xdd, 0x0d, 0xf5, 0x89, 0x01,
		0x59, 0x78, 0xc1, 0x24, 0x4b, 0xce, 0xcc, 0x64, 0x01, 0x5e, 0xf5, 0xfb, 0x5d, 0xce, 0x12, 0x67,
		0x38, 0x3d, 0x8e, 0x3f, 0x81, 0x1a, 0x19, 0x14, 0x29, 0xcb, 0x4e, 0x99, 0x86, 0x92, 0x37, 0xbb,
		0x5a, 0x82, 0x99, 0x77, 0x53, 0xd0, 0x13, 0x29, 0x34, 0xbc, 0xb9, 0xc5, 0xb3, 0x75, 0x98, 0x0c,
		0x09, 0x6f, 0xc5, 0x64, 0x14, 0x77, 0xeb, 0x40, 0x76, 0x3e, 0x81, 0x4e, 0x45, 0x98, 0xdb, 0xb0,
		0x0a, 0xe4, 0x55, 0xb8, 0xd5, 0xb3, 0xb5, 0xfc, 0xae, 0xf3, 0xbf, 0x59, 0xd8, 0x9b, 0xdb, 0xde,
		0x36, 0xff, 0x5b, 0xae, 0x78, 0xb7, 0xbc, 0xef, 0x34, 0xff, 0x26, 0xd3, 0xef, 0x3b, 0xf3, 0x5d,
		0xa7, 0x8a, 0x48, 0xe2, 0x26, 0xc2, 0x17, 0xcb, 0x9b, 0x73, 0x59, 0x3b, 0x99, 0x7c, 0x72, 0xe1,
		0x8d, 0x57, 0x23, 0xb1, 0x29, 0xe2, 0xaa, 0x2e, 0xfc, 0xc3, 0x06, 0x64, 0xb5, 0x59, 0xdc, 0xdb,
		0x66, 0x46, 0x72, 0xc3, 0xa1, 0xdc, 0x96, 0x60, 0xab, 0x38, 0xb7, 0x79, 0x2d, 0xac, 0xc3, 0xed,
		0xd3, 0x21, 0x5d, 0xff, 0x2e, 0x4b, 0xa3, 0xbf, 0xee, 0x5d, 0x36, 0x03, 0xe1, 0xad, 0xc0, 0x37,
		0x0f, 0xd0, 0xcd, 0xa7, 0xb9, 0xe6, 0xb5, 0xf2, 0xd2, 0xa8, 0x55, 0xda, 0x70, 0xe7, 0xd6, 0x54,
		0xe5, 0xa4, 0x91, 0x6d, 0x34, 0xac, 0xe4, 0x07, 0x3d, 0x1e, 0xa6, 0x9b, 0x64, 0x90, 0xe4, 0x17,
		0xdc, 0xe7, 0x9e, 0x82, 0xf0, 0x0e, 0xe1, 0x5d, 0x41, 0x78, 0x67, 0xe1, 0xa0, 0xc7, 0x62, 0x3f,
		0x27, 0x32, 0xca, 0x6c, 0x46, 0x3d, 0xc7, 0x67, 0xdf, 0x87, 0x83, 0x5e, 0xfe, 0x69, 0xbc, 0x8d,
		0xbe, 0x88, 0x98, 0x87, 0x0f, 0x72, 0xc4, 0xd9, 0x1b, 0xbe, 0xc3, 0xa0, 0x2f, 0x43, 0x3e, 0xaa,
		0x23, 0xc6, 0xf9, 0x43, 0x06, 0x09, 0x96, 0x6a, 0x69, 0x80, 0x8b, 0x25, 0x62, 0xf8, 0x0d, 0x69,
		0x73, 0x79, 0xa2, 0x8f, 0xa1, 0x90, 0x7b, 0xe9, 0xf4, 0xcb, 0x2f, 0xb9, 0xc7, 0x8d, 0x8f, 0x4c,
		0xbe, 0xfa, 0xa5, 0x53, 0x93, 0x78, 0x6a, 0xd0, 0x1f, 0xce, 0xf5, 0xde, 0xb2, 0x6d, 0xde, 0x71,
		0x3b, 0xcc, 0x17, 0x83, 0x98, 0x99, 0xe5, 0xdc, 0x6e, 0x8f, 0xdf, 0x5b, 0xa6, 0xbf, 0x33, 0xaf,
		0xb6, 0x5b, 0x12, 0x9c, 0xbe, 0xbb, 0x7d, 0xfe, 0x71, 0xba, 0x5f, 0x71, 0xb1, 0xab, 0xa1, 0xa7,
		0xfe, 0x92, 0xc7, 0x51, 0x1f, 0x75, 0x78, 0x6c, 0x76, 0x98, 0x0a, 0xb9, 0xa6, 0x32, 0x84, 0x66,
		0x6c, 0x41, 0x05, 0xac, 0x1f, 0xb3, 0xb6, 0x2f, 0x58, 0x60, 0x79, 0xa1, 0x24, 0xb2, 0xab, 0xd3,
		0x80, 0x0c, 0x3c, 0x7d, 0xf7, 0xfd, 0x51, 0x34, 0x36, 0xd0, 0x9a, 0x47, 0xfe, 0xf0, 0xc8, 0x62,
		0xb7, 0xeb, 0x3f, 0xb3, 0xd8, 0xe5, 0x9d, 0xfc, 0xc0, 0x7e, 0xf1, 0x41, 0x60, 0xfb, 0x03, 0xc5,
		0xf6, 0x0a, 0x89, 0x32, 0x59, 0x3e, 0x4a, 0x2a, 0xa9, 0xb8, 0x92, 0x09, 0x33, 0x39, 0xea, 0x59,
		0x95, 0x6e, 0x32, 0x89, 0x69, 0x36, 0x2c, 0x3d, 0xea, 0x6f, 0xee, 0x77, 0xc3, 0x1f, 0x52, 0x49,
		0x49, 0x6b, 0x0c, 0x72, 0x25, 0x05, 0x4c, 0xd9, 0x50, 0xde, 0xe4, 0x80, 0x19, 0xfe, 0xa4, 0x9e,
		0x24, 0x90, 0x35, 0x92, 0x2b, 0x59, 0xc0, 0x24, 0x96, 0x2d, 0x12, 0x9a, 0xf9, 0x22, 0xfc, 0xf6,
		0x5f, 0xb7, 0xe9, 0x77, 0x07, 0x98, 0xc9, 0x33, 0x4a, 0xc0, 0x32, 0xc0, 0x32, 0x7b, 0x8e, 0x65,
		0x78, 0xc7, 0xe5, 0x61, 0xc0, 0x7e, 0xe6, 0x07, 0x31, 0xd9, 0x13, 0x40, 0x2f, 0x50, 0x26, 0xd5,
		0x90, 0x4e, 0xae, 0x92, 0x9d, 0x93, 0x05, 0x94, 0x43, 0xd8, 0x92, 0x3c, 0x96, 0x26, 0x61, 0xf2,
		0x54, 0x8e, 0xa1, 0x4d, 0xcf, 0x50, 0x49, 0xda, 0x19, 0xdd, 0x83, 0x52, 0xea, 0x07, 0xa4, 0x64,
		0xf2, 0x09, 0x54, 0x8e, 0x97, 0x65, 0x43, 0x52, 0xf5, 0xea, 0xcd, 0x7a, 0xab, 0xd6, 0xa8, 0x37,
		0xf7, 0x67, 0x6c, 0xec, 0x58, 0x6f, 0xe8, 0xa4, 0xd0, 0x49, 0x0f, 0x56, 0x27, 0xfd, 0x98, 0x03,
		0x30, 0x1c, 0x35, 0xa9, 0x18, 0x0d, 0x10, 0xf8, 0x04, 0xf8, 0xc4, 0x9e, 0xf3, 0x89, 0xae, 0x9f,
		0x08, 0xb7, 0xfd, 0x38, 0xc6, 0x63, 0x39, 0x29, 0xc5, 0xec, 0x43, 0x60, 0x15, 0xd0, 0x44, 0x27,
		0x76, 0xc1, 0x17, 0xcc, 0xf5, 0xc3, 0xc0, 0x15, 0xbc, 0xc7, 0x64, 0xd4, 0xd0, 0x56, 0x3e, 0x35,
		0x54, 0xb0, 0x38, 0x7f, 0xd6, 0x76, 0xe9, 0xdb, 0xb7, 0xe0, 0x57, 0xfd, 0xc5, 0x1d, 0xfe, 0xa7,
		0x3a, 0xf9, 0xcf, 0xed, 0xe8, 0x3f, 0x97, 0x73, 0xff, 0x79, 0xfd, 0xed, 0x5b, 0xf9, 0xdb, 0xb7,
		0xe0, 0xbf, 0xde, 0xfc, 0xf6, 0xfa, 0xff, 0xfe, 0xbf, 0xaf, 0xdf, 0xbe, 0xfd, 0xd7, 0xb7, 0x6f,
		0xee, 0xdd, 0xdc, 0x27, 0xde, 0x94, 0x0a, 0x88, 0x16, 0x8b, 0x84, 0x17, 0xfe, 0xf0, 0x13, 0xf1,
		0x7b, 0x1e, 0x7b, 0x70, 0xd4, 0xa0, 0x61, 0x66, 0x94, 0x80, 0x1c, 0x80, 0x1c, 0xf6, 0x1d, 0x39,
		0x44, 0x3f, 0x94, 0x82, 0xaa, 0x0b, 0xcf, 0x01, 0x3f, 0x00, 0x3f, 0x20, 0xa6, 0xea, 0x20, 0xa6,
		0x8a, 0x98, 0x2a, 0x62, 0xaa, 0x40, 0x32, 0x40, 0x32, 0xf6, 0x91, 0xcc, 0xf8, 0x38, 0x56, 0x4e,
		0xfc, 0xb2, 0xa1, 0xb0, 0x06, 0x50, 0xcb, 0x11, 0xa2, 0x96, 0x64, 0x74, 0x5c, 0x42, 0x46, 0xee,
		0x38, 0x6a, 0x0f, 0xfb, 0x6f, 0xbf, 0x07, 0xdf, 0xba, 0x6d, 0x7c, 0xe0, 0x55, 0xe1, 0x55, 0xf7,
		0xdc, 0xab, 0x46, 0x7d, 0x16, 0x4b, 0x1f, 0xa5, 0x9c, 0x7d, 0x08, 0x3e, 0x16, 0xf9, 0x4a, 0x38,
		0x49, 0x99, 0xe3, 0x11, 0xfd, 0x93, 0x94, 0x12, 0xcf, 0xd5, 0xd3, 0xef, 0x17, 0xfe, 0x15, 0x4a,
		0xf6, 0x77, 0x3e, 0xfa, 0x92, 0x71, 0xcf, 0x0f, 0x85, 0xcc, 0x73, 0x8d, 0x14, 0x73, 0x47, 0xc2,
		0xed, 0xc7, 0x2c, 0x61, 0x72, 0xcf, 0x36, 0x17, 0xf5, 0xc6, 0x74, 0x90, 0x76, 0x7f, 0x6c, 0x74,
		0x34, 0x08, 0x97, 0x8e, 0x44, 0x85, 0x6e, 0x95, 0xc3, 0xa6, 0x4b, 0x6f, 0x2e, 0x77, 0x8f, 0xf6,
		0xec, 0xa0, 0x5f, 0x3a, 0x0d, 0xf3, 0xa7, 0x5c, 0xc7, 0x8b, 0xea, 0xd2, 0xa9, 0x1f, 0xcf, 0xd9,
		0xd8, 0x22, 0x21, 0xf3, 0x4f, 0x7d, 0x16, 0xe3, 0x70, 0xa4, 0xc4, 0x28, 0x01, 0xa5, 0x03, 0xa5,
		0xef, 0x39, 0x4a, 0xef, 0x3f, 0x3e, 0x27, 0xae, 0x1f, 0x04, 0x31, 0x4b, 0x24, 0x60, 0xfa, 0xdc,
		0x53, 0xc0, 0xe9, 0xd0, 0xc2, 0xe4, 0xd7, 0x85, 0x63, 0x3c, 0x01, 0xe8, 0xf5, 0xd7, 0x8a, 0x7b,
		0xe1, 0xbb, 0x9d, 0x2b, 0xf7, 0xc3, 0xdd, 0xaf, 0xea, 0xcb, 0xeb, 0xcb, 0xf9, 0x9f, 0xdf, 0xfc,
		0xfd, 0xcd, 0x6f, 0xc8, 0xeb, 0xd9, 0xec, 0xeb, 0x6e, 0x1e, 0x9f, 0x93, 0xab, 0xdc, 0xd3, 0x79,
		0xb4, 0x90, 0x60, 0x76, 0x98, 0x80, 0x09, 0x80, 0x09, 0xf6, 0x1c, 0x13, 0x24, 0x7d, 0x96, 0x16,
		0x54, 0xcf, 0x09, 0x06, 0x46, 0x1f, 0x07, 0x0a, 0x00, 0x0a, 0x18, 0x8f, 0xf3, 0x83, 0x3f, 0x78,
		0x60, 0xb9, 0xae, 0xb6, 0x93, 0xb8, 0xd2, 0xae, 0xa0, 0x67, 0x06, 0x2b, 0x38, 0x33, 0xb8, 0x38,
		0x24, 0xfa, 0x57, 0xd1, 0xe1, 0xf4, 0xe0, 0x3e, 0xe3, 0xc6, 0x6f, 0xe1, 0xf4, 0x41, 0xde, 0xf9,
		0x32, 0xf4, 0x0e, 0xa7, 0x0e, 0xef, 0xfc, 0x93, 0x3f, 0x3c, 0x7e, 0xc9, 0xe1, 0x2a, 0x8e, 0x17,
		0x49, 0x6e, 0x1d, 0x38, 0x60, 0x4b, 0x60, 0xcb, 0x7d, 0xc7, 0x96, 0xd3, 0x8b, 0xf2, 0xf2, 0x03,
		0xcc, 0xbc, 0x97, 0xf7, 0x15, 0xe2, 0x9e, 0x1c, 0xa0, 0x4c, 0x15, 0x8f, 0x97, 0xfb, 0x86, 0x9c,
		0x80, 0x27, 0xed, 0x28, 0x14, 0x3c, 0x1c, 0x70, 0xf1, 0x3c, 0x3a, 0x69, 0x26, 0x7d, 0x51, 0xce,
		0x8a, 0x36, 0x70, 0xf7, 0xb7, 0xbc, 0x79, 0x3c, 0xea, 0xbb, 0xbf, 0x25, 0x92, 0x18, 0xe4, 0xa9,
		0xd4, 0xf2, 0x8a, 0x95, 0x3c, 0x5a, 0xa9, 0xa2, 0xb0, 0x2a, 0x2b, 0xad, 0xd9, 0x83, 0x76, 0x8f,
		0x5c, 0xe6, 0x73, 0x53, 0xb2, 0xf3, 0xaa, 0x73, 0x9b, 0xb3, 0x24, 0x14, 0x92, 0x87, 0x44, 0x34,
		0xd0, 0x48, 0xd7, 0x06, 0x90, 0x41, 0x25, 0x32, 0x9b, 0x40, 0x06, 0x9d, 0xe4, 0x6c, 0x85, 0xfc,
		0xa7, 0xc9, 0x6e, 0x5c, 0xce, 0x01, 0x31, 0x78, 0xe8, 0xde, 0xc7, 0x91, 0x1f, 0xb4, 0xfd, 0x44,
		0xb8, 0xfd, 0xbf, 0x44, 0xa2, 0x72, 0xeb, 0xea, 0x62, 0x13, 0xf0, 0x93, 0xf0, 0x93, 0x52, 0xf6,
		0x54, 0xdd, 0xe7, 0xb5, 0xa3, 0xc1, 0x90, 0x26, 0xe7, 0x12, 0x12, 0x15, 0x04, 0x45, 0x45, 0x61,
		0x51, 0xc3, 0x68, 0xab, 0x08, 0x8d, 0xba, 0x82, 0x23, 0x99, 0xa4, 0xa6, 0x2f, 0xad, 0x29, 0x08,
		0x91, 0x5a, 0x82, 0xa4, 0x01, 0x61, 0xb2, 0x88, 0xa3, 0xb9, 0x5b, 0x4f, 0x65, 0x01, 0x55, 0xc9,
		0x0b, 0x9b, 0x04, 0xc0, 0x4a, 0x5e, 0xaf, 0xfb, 0xe7, 0xef, 0x1f, 0xc3, 0xb7, 0x13, 0x67, 0x79,
		0x93, 0xdf, 0x57, 0x9a, 0x42, 0x64, 0xaa, 0xba, 0xa7, 0x59, 0x50, 0x46, 0x31, 0xae, 0xc5, 0xd9,
		0x23, 0xa7, 0xe0, 0x06, 0xe0, 0x06, 0x7b, 0xca, 0x0d, 0x02, 0x9e, 0xb4, 0xfd, 0x38, 0x50, 0x63,
		0x05, 0xd9, 0xc3, 0xe0, 0x03, 0xe0, 0x03, 0x76, 0xf9, 0x40, 0xae, 0x62, 0xc4, 0x8b, 0x0b, 0xaf,
		0x09, 0x3e, 0x00, 0x3e, 0xb0, 0x38, 0x74, 0xf5, 0xea, 0x45, 0xfd, 0xa2, 0xd1, 0xac, 0x5e, 0x80,
		0x05, 0x80, 0x05, 0x28, 0xb3, 0x80, 0xb4, 0x1a, 0xec, 0x3b, 0x39, 0x7f, 0x08, 0xcc, 0xbf, 0x79,
		0x14, 0x81, 0xf0, 0x81, 0xf0, 0x81, 0xf0, 0x75, 0x11, 0x3e, 0x8b, 0xe3, 0x28, 0x56, 0xc3, 0xf7,
		0xe3, 0x47, 0x81, 0xee, 0x81, 0xee, 0x81, 0xee, 0x81, 0xee, 0x81, 0xee, 0x81, 0xee, 0x8f, 0x18,
		0xdd, 0xbf, 0x97, 0xf1, 0x86, 0xc0, 0xf6, 0x9b, 0xc6, 0x10, 0xc8, 0x1e, 0xc8, 0x1e, 0xc8, 0x5e,
		0x17, 0xd9, 0xf7, 0x06, 0x5d, 0xc1, 0xf5, 0xf2, 0x7a, 0x16, 0x9a, 0x00, 0xd2, 0x07, 0xd2, 0xb7,
		0x8b, 0xf4, 0x91, 0xd7, 0x03, 0xa4, 0x8f, 0xbc, 0x1e, 0x60, 0xfe, 0x7d, 0xc8, 0xeb, 0xb9, 0x9e,
		0x38, 0x4b, 0xe4, 0xf5, 0x68, 0xf0, 0x80, 0x6d, 0xe3, 0x0a, 0x6e, 0x00, 0x6e, 0x00, 0x6e, 0xa0,
		0xcb, 0x0d, 0xa2, 0xb6, 0x60, 0x8a, 0x9c, 0x60, 0xfc, 0x28, 0xb8, 0x00, 0xb8, 0x00, 0xb8, 0x00,
		0xb8, 0x00, 0xb8, 0x00, 0xb8, 0x00, 0xf4, 0xff, 0x14, 0xa8, 0x7e, 0x92, 0xf1, 0x8c, 0x40, 0xfe,
		0x9b, 0x47, 0x11, 0x38, 0x1f, 0x38, 0x1f, 0x38, 0x5f, 0x17, 0xe7, 0x0f, 0x42, 0xcd, 0x08, 0xc0,
		0x5c, 0x03, 0xc0, 0xfc, 0xc0, 0xfc, 0xc0, 0xfc, 0xc0, 0xfc, 0xc0, 0xfc, 0xc0, 0xfc, 0xc0, 0xfc,
		0x29, 0x5a, 0xfd, 0x0f, 0x04, 0x7f, 0x1a, 0xd8, 0xff, 0x1f, 0x28, 0xfc, 0x40, 0xfe, 0x40, 0xfe,
		0x84, 0xc8, 0x3f, 0xbd, 0x28, 0xc9, 0xed, 0xc7, 0x91, 0x88, 0x54, 0xb1, 0xff, 0x5c, 0x13, 0x40,
		0xff, 0x40, 0xff, 0x76, 0xd1, 0x3f, 0xf2, 0xfc, 0x81, 0xfe, 0x91, 0xe7, 0x0f, 0xcc, 0x5f, 0x20,
		0xcc, 0xff, 0x31, 0xfc, 0xcf, 0xc8, 0x2b, 0xde, 0xc8, 0x38, 0x45, 0xa0, 0xfe, 0x1c, 0x43, 0x09,
		0xdc, 0x0f, 0xdc, 0x0f, 0xdc, 0xaf, 0x85, 0xfb, 0xa3, 0x81, 0xd0, 0x2e, 0xe7, 0xb9, 0xa2, 0x0d,
		0x20, 0x7f, 0x20, 0x7f, 0xbb, 0xc8, 0x1f, 0xba, 0x3f, 0x90, 0x3f, 0x74, 0x7f, 0x70, 0x80, 0xe2,
		0xe7, 0xfd, 0x7f, 0x1a, 0x08, 0x14, 0xf4, 0xa4, 0x60, 0x04, 0x5b, 0x07, 0x16, 0xfc, 0x00, 0xfc,
		0x00, 0xfc, 0x40, 0x9b, 0x1f, 0xa8, 0x97, 0xf4, 0x9c, 0x7b, 0x1a, 0x9c, 0x00, 0x9c, 0xc0, 0x2e,
		0x27, 0x40, 0x34, 0x00, 0x9c, 0x00, 0xd1, 0x00, 0x30, 0x81, 0xa2, 0x30, 0x01, 0x87, 0x77, 0x3e,
		0x0d, 0x04, 0x8a, 0x7a, 0x6a, 0xe2, 0xfe, 0x85, 0x61, 0x04, 0xca, 0x07, 0xca, 0x07, 0xca, 0xd7,
		0x46, 0xf9, 0xaa, 0x65, 0x3d, 0x67, 0x9e, 0x05, 0xc2, 0x07, 0xc2, 0x07, 0xc2, 0x07, 0xc2, 0x07,
		0xc2, 0x07, 0xc2, 0x3f, 0x66, 0x84, 0x8f, 0xc2, 0x9e, 0x04, 0xf8, 0x1e, 0x95, 0x3d, 0x81, 0xee,
		0x81, 0xee, 0xa9, 0xd0, 0xbd, 0x6e, 0x69, 0xcf, 0x15, 0x6d, 0x00, 0xed, 0x03, 0xed, 0xdb, 0x45,
		0xfb, 0xc8, 0xf1, 0x01, 0xda, 0x47, 0x8e, 0x0f, 0x70, 0xff, 0x5e, 0xe4, 0xf8, 0xa0, 0xb8, 0x27,
		0x05, 0x17, 0xd8, 0x3a, 0xb0, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xda, 0xfc, 0x40, 0xb5, 0xbc,
		0xe7, 0xcc, 0xb3, 0xe0, 0x03, 0xe0, 0x03, 0xe0, 0x03, 0xe0, 0x03, 0xe0, 0x03, 0xe0, 0x03, 0x88,
		0x03, 0x8c, 0xb0, 0x2a, 0x0a, 0x7c, 0x6a, 0xa1, 0xff, 0x85, 0x61, 0x04, 0xd6, 0x07, 0xd6, 0x07,
		0xd6, 0xd7, 0xc6, 0xfa, 0x7a, 0x25, 0x3e, 0x97, 0x5a, 0x00, 0xee, 0x07, 0xee, 0x07, 0xee, 0x07,
		0xee, 0x07, 0xee, 0x07, 0xee, 0x07, 0xee, 0x1f, 0x01, 0x56, 0x14, 0xf9, 0xa4, 0x82, 0xfe, 0xa8,
		0xf2, 0x09, 0xf4, 0x0f, 0xf4, 0x9f, 0x07, 0xfd, 0x9f, 0x68, 0x58, 0x65, 0x15, 0x6b, 0x2c, 0xbb,
		0xb6, 0x15, 0xf0, 0x9e, 0xd2, 0x5a, 0xa6, 0xc0, 0xe7, 0x4a, 0x6b, 0x97, 0x16, 0x9f, 0xab, 0xac,
		0xd5, 0x17, 0xa2, 0xb5, 0x74, 0xa7, 0xb5, 0x96, 0xae, 0xc2, 0x30, 0x12, 0xfe, 0x10, 0x0b, 0xe5,
		0x5c, 0x47, 0xed, 0x47, 0xd6, 0xf3, 0xfb, 0xbe, 0x78, 0x1c, 0xbe, 0xf7, 0x19, 0x67, 0xa2, 0xe3,
		0xf2, 0xcc, 0x29, 0x9c, 0x4d, 0xff, 0xea, 0x0e, 0xa7, 0x85, 0x4d, 0x7f, 0x71, 0x36, 0xfc, 0x99,
		0x27, 0x82, 0xb7, 0xf3, 0x4c, 0x55, 0x29, 0x11, 0xf1, 0xa0, 0x2d, 0xc2, 0xf1, 0xda, 0xfa, 0xf8,
		0xfe, 0xf6, 0xc3, 0xd4, 0xf5, 0x7c, 0x9f, 0xfe, 0xf5, 0xcb, 0xb0, 0x93, 0xe9, 0xcf, 0xdf, 0xbf,
		0x4c, 0x3b, 0x39, 0x51, 0x1b, 0xd6, 0x0d, 0x03, 0x56, 0x12, 0x79, 0xc8, 0x50, 0xb6, 0x21, 0xd2,
		0x4f, 0x6f, 0x19, 0xfe, 0x7c, 0x44, 0x3b, 0x37, 0xc1, 0x96, 0x21, 0xd6, 0x72, 0x84, 0x5a, 0x76,
		0xa3, 0x2a, 0x13, 0x68, 0xe5, 0x8d, 0x29, 0x4d, 0x98, 0xf5, 0x8c, 0xf0, 0xb5, 0x1f, 0x06, 0xbe,
		0x88, 0xe2, 0xe7, 0x21, 0x33, 0xd9, 0xf2, 0xd9, 0xdc, 0x24, 0x7a, 0x3a, 0x27, 0x01, 0x0b, 0x05,
		0x17, 0xcf, 0x31, 0xcb, 0x35, 0x39, 0xe3, 0x65, 0x94, 0x87, 0x0f, 0x95, 0x3e, 0x8e, 0x9b, 0x7e,
		0xeb, 0x27, 0x4c, 0xa5, 0x70, 0xf4, 0x78, 0xab, 0xb9, 0xe9, 0xf2, 0x2e, 0xa0, 0xa7, 0x93, 0xe7,
		0x1b, 0x0a, 0xce, 0x2e, 0x27, 0x2a, 0xbe, 0xdd, 0x6e, 0x02, 0xa8, 0xbd, 0xa1, 0x2a, 0x8b, 0xa0,
		0x75, 0x88, 0x32, 0xe3, 0x63, 0xdf, 0x63, 0x9e, 0x02, 0x2f, 0x01, 0x2f, 0x49, 0x03, 0x83, 0x13,
		0x09, 0x0b, 0x36, 0x1c, 0xef, 0xe1, 0x8b, 0xa6, 0x00, 0x66, 0xcd, 0x47, 0xfe, 0xe0, 0x89, 0xb8,
		0x12, 0x22, 0xde, 0x38, 0x99, 0xa5, 0x6b, 0x1e, 0xbe, 0xef, 0xb2, 0xe1, 0xc0, 0x6d, 0xd1, 0xa9,
		0x4a, 0xd7, 0xfe, 0xcf, 0x99, 0x4f, 0xca, 0xa9, 0x65, 0xa5, 0x4f, 0x71, 0xc0, 0x62, 0x16, 0xbc,
		0x1d, 0x7e, 0xeb, 0x70, 0xd0, 0xed, 0x4a, 0xbd, 0xac, 0x84, 0x99, 0xce, 0xbb, 0xb1, 0x24, 0x7c,
		0xa5, 0xd4, 0x46, 0xd2, 0xc1, 0x31, 0x52, 0x1b, 0x87, 0x06, 0xc7, 0xc8, 0x6c, 0x94, 0x17, 0xc5,
		0x85, 0x7d, 0x27, 0x35, 0xd7, 0x39, 0x09, 0x83, 0x3a, 0x51, 0xd8, 0x30, 0xbe, 0x8a, 0xac, 0x60,
		0xf5, 0xd0, 0x2d, 0x0f, 0xc8, 0xfc, 0x6f, 0x16, 0x06, 0x20, 0xcf, 0x22, 0xdf, 0xb6, 0xb8, 0x37,
		0x0c, 0x97, 0xd4, 0x62, 0xce, 0xbb, 0x88, 0xa5, 0x17, 0xaf, 0xf4, 0xa2, 0x95, 0x5e, 0xac, 0x2f,
		0x39, 0xe7, 0xe2, 0x6e, 0xe3, 0x5c, 0x6c, 0x59, 0x84, 0xb2, 0x8b, 0x6f, 0xc5, 0xa8, 0x48, 0x2d,
		0xb5, 0xf9, 0xd7, 0x9d, 0xbe, 0xcc, 0xe8, 0x6f, 0xe3, 0x2f, 0xbf, 0xee, 0x4b, 0x97, 0x78, 0xf2,
		0xc1, 0xff, 0x8b, 0x7d, 0x8e, 0xa2, 0xe5, 0x21, 0x5f, 0x7c, 0x91, 0xd2, 0xec, 0x3f, 0xcd, 0x7d,
		0xc1, 0x77, 0xec, 0x89, 0x4f, 0x56, 0xfa, 0xcb, 0xc9, 0xcb, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff,
		0x01, 0x00, 0x00, 0xff, 0xff, 0xf5, 0xd5, 0x69, 0xfa, 0x71, 0x5e, 0x0c, 0x00,
	}
)


// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
func initΛEnumTypes(){
  ΛEnumTypes = map[string][]reflect.Type{
	"/bridges/bridge/bridge-type": []reflect.Type{
		reflect.TypeOf((E_Ieee802Dot1QBridge_TypeOfBridge)(0)),
	},
	"/bridges/bridge/component/bridge-vlan/fid-to-vid-allocation/allocation-type": []reflect.Type{
		reflect.TypeOf((E_Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_FidToVidAllocation_AllocationType)(0)),
	},
	"/bridges/bridge/component/bridge-vlan/protocol-group-database/frame-format-type": []reflect.Type{
		reflect.TypeOf((E_Ieee802Dot1QBridge_ProtocolFrameFormatType)(0)),
	},
	"/bridges/bridge/component/bridge-vlan/protocol-template": []reflect.Type{
		reflect.TypeOf((E_Ieee802Dot1QBridge_ProtocolFrameFormatType)(0)),
	},
	"/bridges/bridge/component/bridge-vlan/vid-to-fid-allocation/allocation-type": []reflect.Type{
		reflect.TypeOf((E_Ieee802Dot1QBridge_Bridges_Bridge_Component_BridgeVlan_VidToFidAllocation_AllocationType)(0)),
	},
	"/bridges/bridge/component/filtering-database/filtering-entry/entry-type": []reflect.Type{
		reflect.TypeOf((E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_EntryType)(0)),
	},
	"/bridges/bridge/component/filtering-database/filtering-entry/port-map/map-type/dynamic-filtering-entries/dynamic-filtering-entries/control-element": []reflect.Type{
		reflect.TypeOf((E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicFilteringEntries_ControlElement)(0)),
	},
	"/bridges/bridge/component/filtering-database/filtering-entry/port-map/map-type/dynamic-reservation-entries/dynamic-reservation-entries/control-element": []reflect.Type{
		reflect.TypeOf((E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicReservationEntries_ControlElement)(0)),
	},
	"/bridges/bridge/component/filtering-database/filtering-entry/port-map/map-type/dynamic-vlan-registration-entries/dynamic-vlan-registration-entries/control-element": []reflect.Type{
		reflect.TypeOf((E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicVlanRegistrationEntries_ControlElement)(0)),
	},
	"/bridges/bridge/component/filtering-database/filtering-entry/port-map/map-type/mac-address-registration-entries/mac-address-registration-entries/control-element": []reflect.Type{
		reflect.TypeOf((E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_MacAddressRegistrationEntries_ControlElement)(0)),
	},
	"/bridges/bridge/component/filtering-database/filtering-entry/port-map/map-type/static-filtering-entries/static-filtering-entries/control-element": []reflect.Type{
		reflect.TypeOf((E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticFilteringEntries_ControlElement)(0)),
	},
	"/bridges/bridge/component/filtering-database/filtering-entry/port-map/map-type/static-vlan-registration-entries/static-vlan-registration-entries/registrar-admin-control": []reflect.Type{
		reflect.TypeOf((E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_RegistrarAdminControl)(0)),
	},
	"/bridges/bridge/component/filtering-database/filtering-entry/port-map/map-type/static-vlan-registration-entries/static-vlan-registration-entries/vlan-transmitted": []reflect.Type{
		reflect.TypeOf((E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_VlanTransmitted)(0)),
	},
	"/bridges/bridge/component/filtering-database/filtering-entry/status": []reflect.Type{
		reflect.TypeOf((E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_Status)(0)),
	},
	"/bridges/bridge/component/filtering-database/vlan-registration-entry/entry-type": []reflect.Type{
		reflect.TypeOf((E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_VlanRegistrationEntry_EntryType)(0)),
	},
	"/bridges/bridge/component/filtering-database/vlan-registration-entry/port-map/map-type/dynamic-filtering-entries/dynamic-filtering-entries/control-element": []reflect.Type{
		reflect.TypeOf((E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicFilteringEntries_ControlElement)(0)),
	},
	"/bridges/bridge/component/filtering-database/vlan-registration-entry/port-map/map-type/dynamic-reservation-entries/dynamic-reservation-entries/control-element": []reflect.Type{
		reflect.TypeOf((E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicReservationEntries_ControlElement)(0)),
	},
	"/bridges/bridge/component/filtering-database/vlan-registration-entry/port-map/map-type/dynamic-vlan-registration-entries/dynamic-vlan-registration-entries/control-element": []reflect.Type{
		reflect.TypeOf((E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicVlanRegistrationEntries_ControlElement)(0)),
	},
	"/bridges/bridge/component/filtering-database/vlan-registration-entry/port-map/map-type/mac-address-registration-entries/mac-address-registration-entries/control-element": []reflect.Type{
		reflect.TypeOf((E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_MacAddressRegistrationEntries_ControlElement)(0)),
	},
	"/bridges/bridge/component/filtering-database/vlan-registration-entry/port-map/map-type/static-filtering-entries/static-filtering-entries/control-element": []reflect.Type{
		reflect.TypeOf((E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticFilteringEntries_ControlElement)(0)),
	},
	"/bridges/bridge/component/filtering-database/vlan-registration-entry/port-map/map-type/static-vlan-registration-entries/static-vlan-registration-entries/registrar-admin-control": []reflect.Type{
		reflect.TypeOf((E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_RegistrarAdminControl)(0)),
	},
	"/bridges/bridge/component/filtering-database/vlan-registration-entry/port-map/map-type/static-vlan-registration-entries/static-vlan-registration-entries/vlan-transmitted": []reflect.Type{
		reflect.TypeOf((E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_VlanTransmitted)(0)),
	},
	"/bridges/bridge/component/permanent-database/filtering-entry/port-map/map-type/dynamic-filtering-entries/dynamic-filtering-entries/control-element": []reflect.Type{
		reflect.TypeOf((E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicFilteringEntries_ControlElement)(0)),
	},
	"/bridges/bridge/component/permanent-database/filtering-entry/port-map/map-type/dynamic-reservation-entries/dynamic-reservation-entries/control-element": []reflect.Type{
		reflect.TypeOf((E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicReservationEntries_ControlElement)(0)),
	},
	"/bridges/bridge/component/permanent-database/filtering-entry/port-map/map-type/dynamic-vlan-registration-entries/dynamic-vlan-registration-entries/control-element": []reflect.Type{
		reflect.TypeOf((E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_DynamicVlanRegistrationEntries_ControlElement)(0)),
	},
	"/bridges/bridge/component/permanent-database/filtering-entry/port-map/map-type/mac-address-registration-entries/mac-address-registration-entries/control-element": []reflect.Type{
		reflect.TypeOf((E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_MacAddressRegistrationEntries_ControlElement)(0)),
	},
	"/bridges/bridge/component/permanent-database/filtering-entry/port-map/map-type/static-filtering-entries/static-filtering-entries/control-element": []reflect.Type{
		reflect.TypeOf((E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticFilteringEntries_ControlElement)(0)),
	},
	"/bridges/bridge/component/permanent-database/filtering-entry/port-map/map-type/static-vlan-registration-entries/static-vlan-registration-entries/registrar-admin-control": []reflect.Type{
		reflect.TypeOf((E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_RegistrarAdminControl)(0)),
	},
	"/bridges/bridge/component/permanent-database/filtering-entry/port-map/map-type/static-vlan-registration-entries/static-vlan-registration-entries/vlan-transmitted": []reflect.Type{
		reflect.TypeOf((E_Ieee802Dot1QBridge_Bridges_Bridge_Component_FilteringDatabase_FilteringEntry_PortMap_StaticVlanRegistrationEntries_VlanTransmitted)(0)),
	},
	"/bridges/bridge/component/permanent-database/filtering-entry/status": []reflect.Type{
		reflect.TypeOf((E_Ieee802Dot1QBridge_Bridges_Bridge_Component_PermanentDatabase_FilteringEntry_Status)(0)),
	},
	"/bridges/bridge/component/type": []reflect.Type{
		reflect.TypeOf((E_Ieee802Dot1QBridge_TypeOfComponent)(0)),
	},
	"/interfaces-state/interface/admin-status": []reflect.Type{
		reflect.TypeOf((E_IETFInterfaces_InterfacesState_Interface_AdminStatus)(0)),
	},
	"/interfaces-state/interface/oper-status": []reflect.Type{
		reflect.TypeOf((E_IETFInterfaces_InterfacesState_Interface_OperStatus)(0)),
	},
	"/interfaces-state/interface/type": []reflect.Type{
		reflect.TypeOf((E_IETFInterfaces_InterfaceType)(0)),
	},
	"/interfaces/interface/admin-status": []reflect.Type{
		reflect.TypeOf((E_IETFInterfaces_Interfaces_Interface_AdminStatus)(0)),
	},
	"/interfaces/interface/bridge-port/acceptable-frame": []reflect.Type{
		reflect.TypeOf((E_IETFInterfaces_Interfaces_Interface_BridgePort_AcceptableFrame)(0)),
	},
	"/interfaces/interface/bridge-port/admin-point-to-point": []reflect.Type{
		reflect.TypeOf((E_IETFInterfaces_Interfaces_Interface_BridgePort_AdminPointToPoint)(0)),
	},
	"/interfaces/interface/bridge-port/pcp-decoding-table/pcp-decoding-map/pcp": []reflect.Type{
		reflect.TypeOf((E_Ieee802Dot1QTypes_PcpSelectionType)(0)),
	},
	"/interfaces/interface/bridge-port/pcp-encoding-table/pcp-encoding-map/pcp": []reflect.Type{
		reflect.TypeOf((E_Ieee802Dot1QTypes_PcpSelectionType)(0)),
	},
	"/interfaces/interface/bridge-port/pcp-selection": []reflect.Type{
		reflect.TypeOf((E_Ieee802Dot1QBridge_PcpSelectionType)(0)),
	},
	"/interfaces/interface/bridge-port/port-type": []reflect.Type{
		reflect.TypeOf((E_Ieee802Dot1QBridge_TypeOfPort)(0)),
	},
	"/interfaces/interface/link-up-down-trap-enable": []reflect.Type{
		reflect.TypeOf((E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable)(0)),
	},
	"/interfaces/interface/oper-status": []reflect.Type{
		reflect.TypeOf((E_IETFInterfaces_Interfaces_Interface_OperStatus)(0)),
	},
	"/interfaces/interface/type": []reflect.Type{
		reflect.TypeOf((E_IETFInterfaces_InterfaceType)(0)),
	},
  }
}

