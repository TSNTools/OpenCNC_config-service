/*
Package ietf_routing is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by C:/Users/hamza/go/pkg/mod/github.com/openconfig/ygot@v0.27.0/genutil/names.go
using the following YANG input files:
	- ietf-routing@2018-03-13.yang
Imported modules were sourced from:
	- ...
*/
package ietf_routing

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

var (
	SchemaTree map[string]*yang.Entry
	ΛEnumTypes map[string][]reflect.Type
)

func init() {
	var err error
	initΛEnumTypes()
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " +  err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root: &Device{},
		SchemaTree: uzp,
		Unmarshal: Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn )
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// Device represents the /device YANG schema element.
type Device struct {
	Interfaces	*IETFInterfaces_Interfaces	`path:"interfaces" module:"ietf-interfaces"`
	InterfacesState	*IETFInterfaces_InterfacesState	`path:"interfaces-state" module:"ietf-interfaces"`
	Routing	*IETFRouting_Routing	`path:"routing" module:"ietf-routing"`
	RoutingState	*IETFRouting_RoutingState	`path:"routing-state" module:"ietf-routing"`
}

// IsYANGGoStruct ensures that Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Device) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Device"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Device) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Device.
func (*Device) ΛBelongingModule() string {
	return ""
}


// IETFInterfaces_Interfaces represents the /ietf-interfaces/interfaces YANG schema element.
type IETFInterfaces_Interfaces struct {
	Interface	map[string]*IETFInterfaces_Interfaces_Interface	`path:"interface" module:"ietf-interfaces"`
}

// IsYANGGoStruct ensures that IETFInterfaces_Interfaces implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_Interfaces) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// IETFInterfaces_Interfaces struct. The keys of the list are populated from the input
// arguments.
func (t *IETFInterfaces_Interfaces) NewInterface(Name string) (*IETFInterfaces_Interfaces_Interface, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*IETFInterfaces_Interfaces_Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &IETFInterfaces_Interfaces_Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_Interfaces"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_Interfaces) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_Interfaces.
func (*IETFInterfaces_Interfaces) ΛBelongingModule() string {
	return "ietf-interfaces"
}


// IETFInterfaces_InterfacesState represents the /ietf-interfaces/interfaces-state YANG schema element.
type IETFInterfaces_InterfacesState struct {
	Interface	map[string]*IETFInterfaces_InterfacesState_Interface	`path:"interface" module:"ietf-interfaces"`
}

// IsYANGGoStruct ensures that IETFInterfaces_InterfacesState implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_InterfacesState) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// IETFInterfaces_InterfacesState struct. The keys of the list are populated from the input
// arguments.
func (t *IETFInterfaces_InterfacesState) NewInterface(Name string) (*IETFInterfaces_InterfacesState_Interface, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*IETFInterfaces_InterfacesState_Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &IETFInterfaces_InterfacesState_Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_InterfacesState) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_InterfacesState"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_InterfacesState) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_InterfacesState) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_InterfacesState.
func (*IETFInterfaces_InterfacesState) ΛBelongingModule() string {
	return "ietf-interfaces"
}


// IETFInterfaces_InterfacesState_Interface represents the /ietf-interfaces/interfaces-state/interface YANG schema element.
type IETFInterfaces_InterfacesState_Interface struct {
	AdminStatus	E_IETFInterfaces_InterfacesState_Interface_AdminStatus	`path:"admin-status" module:"ietf-interfaces"`
	HigherLayerIf	[]string	`path:"higher-layer-if" module:"ietf-interfaces"`
	IfIndex	*int32	`path:"if-index" module:"ietf-interfaces"`
	LastChange	*string	`path:"last-change" module:"ietf-interfaces"`
	LowerLayerIf	[]string	`path:"lower-layer-if" module:"ietf-interfaces"`
	Name	*string	`path:"name" module:"ietf-interfaces"`
	OperStatus	E_IETFInterfaces_InterfacesState_Interface_OperStatus	`path:"oper-status" module:"ietf-interfaces"`
	PhysAddress	*string	`path:"phys-address" module:"ietf-interfaces"`
	Speed	*uint64	`path:"speed" module:"ietf-interfaces"`
	Statistics	*IETFInterfaces_InterfacesState_Interface_Statistics	`path:"statistics" module:"ietf-interfaces"`
	Type	E_IETFInterfaces_InterfaceType	`path:"type" module:"ietf-interfaces"`
}

// IsYANGGoStruct ensures that IETFInterfaces_InterfacesState_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_InterfacesState_Interface) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the IETFInterfaces_InterfacesState_Interface struct, which is a YANG list entry.
func (t *IETFInterfaces_InterfacesState_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_InterfacesState_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_InterfacesState_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_InterfacesState_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_InterfacesState_Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_InterfacesState_Interface.
func (*IETFInterfaces_InterfacesState_Interface) ΛBelongingModule() string {
	return "ietf-interfaces"
}


// IETFInterfaces_InterfacesState_Interface_Statistics represents the /ietf-interfaces/interfaces-state/interface/statistics YANG schema element.
type IETFInterfaces_InterfacesState_Interface_Statistics struct {
	DiscontinuityTime	*string	`path:"discontinuity-time" module:"ietf-interfaces"`
	InBroadcastPkts	*uint64	`path:"in-broadcast-pkts" module:"ietf-interfaces"`
	InDiscards	*uint32	`path:"in-discards" module:"ietf-interfaces"`
	InErrors	*uint32	`path:"in-errors" module:"ietf-interfaces"`
	InMulticastPkts	*uint64	`path:"in-multicast-pkts" module:"ietf-interfaces"`
	InOctets	*uint64	`path:"in-octets" module:"ietf-interfaces"`
	InUnicastPkts	*uint64	`path:"in-unicast-pkts" module:"ietf-interfaces"`
	InUnknownProtos	*uint32	`path:"in-unknown-protos" module:"ietf-interfaces"`
	OutBroadcastPkts	*uint64	`path:"out-broadcast-pkts" module:"ietf-interfaces"`
	OutDiscards	*uint32	`path:"out-discards" module:"ietf-interfaces"`
	OutErrors	*uint32	`path:"out-errors" module:"ietf-interfaces"`
	OutMulticastPkts	*uint64	`path:"out-multicast-pkts" module:"ietf-interfaces"`
	OutOctets	*uint64	`path:"out-octets" module:"ietf-interfaces"`
	OutUnicastPkts	*uint64	`path:"out-unicast-pkts" module:"ietf-interfaces"`
}

// IsYANGGoStruct ensures that IETFInterfaces_InterfacesState_Interface_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_InterfacesState_Interface_Statistics) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_InterfacesState_Interface_Statistics) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_InterfacesState_Interface_Statistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_InterfacesState_Interface_Statistics) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_InterfacesState_Interface_Statistics) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_InterfacesState_Interface_Statistics.
func (*IETFInterfaces_InterfacesState_Interface_Statistics) ΛBelongingModule() string {
	return "ietf-interfaces"
}


// IETFInterfaces_Interfaces_Interface represents the /ietf-interfaces/interfaces/interface YANG schema element.
type IETFInterfaces_Interfaces_Interface struct {
	AdminStatus	E_IETFInterfaces_Interfaces_Interface_AdminStatus	`path:"admin-status" module:"ietf-interfaces"`
	Description	*string	`path:"description" module:"ietf-interfaces"`
	Enabled	*bool	`path:"enabled" module:"ietf-interfaces"`
	HigherLayerIf	[]string	`path:"higher-layer-if" module:"ietf-interfaces"`
	IfIndex	*int32	`path:"if-index" module:"ietf-interfaces"`
	LastChange	*string	`path:"last-change" module:"ietf-interfaces"`
	LinkUpDownTrapEnable	E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable	`path:"link-up-down-trap-enable" module:"ietf-interfaces"`
	LowerLayerIf	[]string	`path:"lower-layer-if" module:"ietf-interfaces"`
	Name	*string	`path:"name" module:"ietf-interfaces"`
	OperStatus	E_IETFInterfaces_Interfaces_Interface_OperStatus	`path:"oper-status" module:"ietf-interfaces"`
	PhysAddress	*string	`path:"phys-address" module:"ietf-interfaces"`
	Speed	*uint64	`path:"speed" module:"ietf-interfaces"`
	Statistics	*IETFInterfaces_Interfaces_Interface_Statistics	`path:"statistics" module:"ietf-interfaces"`
	Type	E_IETFInterfaces_InterfaceType	`path:"type" module:"ietf-interfaces"`
}

// IsYANGGoStruct ensures that IETFInterfaces_Interfaces_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_Interfaces_Interface) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the IETFInterfaces_Interfaces_Interface struct, which is a YANG list entry.
func (t *IETFInterfaces_Interfaces_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_Interfaces_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_Interfaces_Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_Interfaces_Interface.
func (*IETFInterfaces_Interfaces_Interface) ΛBelongingModule() string {
	return "ietf-interfaces"
}


// IETFInterfaces_Interfaces_Interface_Statistics represents the /ietf-interfaces/interfaces/interface/statistics YANG schema element.
type IETFInterfaces_Interfaces_Interface_Statistics struct {
	DiscontinuityTime	*string	`path:"discontinuity-time" module:"ietf-interfaces"`
	InBroadcastPkts	*uint64	`path:"in-broadcast-pkts" module:"ietf-interfaces"`
	InDiscards	*uint32	`path:"in-discards" module:"ietf-interfaces"`
	InErrors	*uint32	`path:"in-errors" module:"ietf-interfaces"`
	InMulticastPkts	*uint64	`path:"in-multicast-pkts" module:"ietf-interfaces"`
	InOctets	*uint64	`path:"in-octets" module:"ietf-interfaces"`
	InUnicastPkts	*uint64	`path:"in-unicast-pkts" module:"ietf-interfaces"`
	InUnknownProtos	*uint32	`path:"in-unknown-protos" module:"ietf-interfaces"`
	OutBroadcastPkts	*uint64	`path:"out-broadcast-pkts" module:"ietf-interfaces"`
	OutDiscards	*uint32	`path:"out-discards" module:"ietf-interfaces"`
	OutErrors	*uint32	`path:"out-errors" module:"ietf-interfaces"`
	OutMulticastPkts	*uint64	`path:"out-multicast-pkts" module:"ietf-interfaces"`
	OutOctets	*uint64	`path:"out-octets" module:"ietf-interfaces"`
	OutUnicastPkts	*uint64	`path:"out-unicast-pkts" module:"ietf-interfaces"`
}

// IsYANGGoStruct ensures that IETFInterfaces_Interfaces_Interface_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_Interfaces_Interface_Statistics) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_Statistics) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_Interfaces_Interface_Statistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_Statistics) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_Interfaces_Interface_Statistics) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_Interfaces_Interface_Statistics.
func (*IETFInterfaces_Interfaces_Interface_Statistics) ΛBelongingModule() string {
	return "ietf-interfaces"
}


// IETFRouting_Routing represents the /ietf-routing/routing YANG schema element.
type IETFRouting_Routing struct {
	ControlPlaneProtocols	*IETFRouting_Routing_ControlPlaneProtocols	`path:"control-plane-protocols" module:"ietf-routing"`
	Interfaces	*IETFRouting_Routing_Interfaces	`path:"interfaces" module:"ietf-routing"`
	Ribs	*IETFRouting_Routing_Ribs	`path:"ribs" module:"ietf-routing"`
	RouterId	*string	`path:"router-id" module:"ietf-routing"`
}

// IsYANGGoStruct ensures that IETFRouting_Routing implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFRouting_Routing) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFRouting_Routing) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFRouting_Routing"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFRouting_Routing) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFRouting_Routing) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFRouting_Routing.
func (*IETFRouting_Routing) ΛBelongingModule() string {
	return "ietf-routing"
}


// IETFRouting_RoutingState represents the /ietf-routing/routing-state YANG schema element.
type IETFRouting_RoutingState struct {
	ControlPlaneProtocols	*IETFRouting_RoutingState_ControlPlaneProtocols	`path:"control-plane-protocols" module:"ietf-routing"`
	Interfaces	*IETFRouting_RoutingState_Interfaces	`path:"interfaces" module:"ietf-routing"`
	Ribs	*IETFRouting_RoutingState_Ribs	`path:"ribs" module:"ietf-routing"`
	RouterId	*string	`path:"router-id" module:"ietf-routing"`
}

// IsYANGGoStruct ensures that IETFRouting_RoutingState implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFRouting_RoutingState) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFRouting_RoutingState) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFRouting_RoutingState"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFRouting_RoutingState) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFRouting_RoutingState) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFRouting_RoutingState.
func (*IETFRouting_RoutingState) ΛBelongingModule() string {
	return "ietf-routing"
}


// IETFRouting_RoutingState_ControlPlaneProtocols represents the /ietf-routing/routing-state/control-plane-protocols YANG schema element.
type IETFRouting_RoutingState_ControlPlaneProtocols struct {
	ControlPlaneProtocol	map[IETFRouting_RoutingState_ControlPlaneProtocols_ControlPlaneProtocol_Key]*IETFRouting_RoutingState_ControlPlaneProtocols_ControlPlaneProtocol	`path:"control-plane-protocol" module:"ietf-routing"`
}

// IsYANGGoStruct ensures that IETFRouting_RoutingState_ControlPlaneProtocols implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFRouting_RoutingState_ControlPlaneProtocols) IsYANGGoStruct() {}

// IETFRouting_RoutingState_ControlPlaneProtocols_ControlPlaneProtocol_Key represents the key for list ControlPlaneProtocol of element /ietf-routing/routing-state/control-plane-protocols.
type IETFRouting_RoutingState_ControlPlaneProtocols_ControlPlaneProtocol_Key struct {
	Type	E_IETFRouting_ControlPlaneProtocol	`path:"type"`
	Name	string	`path:"name"`
}

// IsYANGGoKeyStruct ensures that IETFRouting_RoutingState_ControlPlaneProtocols_ControlPlaneProtocol_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (IETFRouting_RoutingState_ControlPlaneProtocols_ControlPlaneProtocol_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the IETFRouting_RoutingState_ControlPlaneProtocols_ControlPlaneProtocol_Key key struct.
func (t IETFRouting_RoutingState_ControlPlaneProtocols_ControlPlaneProtocol_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"type": t.Type,
		"name": t.Name,
	}, nil
}

// NewControlPlaneProtocol creates a new entry in the ControlPlaneProtocol list of the
// IETFRouting_RoutingState_ControlPlaneProtocols struct. The keys of the list are populated from the input
// arguments.
func (t *IETFRouting_RoutingState_ControlPlaneProtocols) NewControlPlaneProtocol(Type E_IETFRouting_ControlPlaneProtocol, Name string) (*IETFRouting_RoutingState_ControlPlaneProtocols_ControlPlaneProtocol, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ControlPlaneProtocol == nil {
		t.ControlPlaneProtocol = make(map[IETFRouting_RoutingState_ControlPlaneProtocols_ControlPlaneProtocol_Key]*IETFRouting_RoutingState_ControlPlaneProtocols_ControlPlaneProtocol)
	}

	key := IETFRouting_RoutingState_ControlPlaneProtocols_ControlPlaneProtocol_Key{
		Type: Type,
		Name: Name,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ControlPlaneProtocol[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ControlPlaneProtocol", key)
	}

	t.ControlPlaneProtocol[key] = &IETFRouting_RoutingState_ControlPlaneProtocols_ControlPlaneProtocol{
		Type: Type,
		Name: &Name,
	}

	return t.ControlPlaneProtocol[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFRouting_RoutingState_ControlPlaneProtocols) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFRouting_RoutingState_ControlPlaneProtocols"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFRouting_RoutingState_ControlPlaneProtocols) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFRouting_RoutingState_ControlPlaneProtocols) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFRouting_RoutingState_ControlPlaneProtocols.
func (*IETFRouting_RoutingState_ControlPlaneProtocols) ΛBelongingModule() string {
	return "ietf-routing"
}


// IETFRouting_RoutingState_ControlPlaneProtocols_ControlPlaneProtocol represents the /ietf-routing/routing-state/control-plane-protocols/control-plane-protocol YANG schema element.
type IETFRouting_RoutingState_ControlPlaneProtocols_ControlPlaneProtocol struct {
	Name	*string	`path:"name" module:"ietf-routing"`
	Type	E_IETFRouting_ControlPlaneProtocol	`path:"type" module:"ietf-routing"`
}

// IsYANGGoStruct ensures that IETFRouting_RoutingState_ControlPlaneProtocols_ControlPlaneProtocol implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFRouting_RoutingState_ControlPlaneProtocols_ControlPlaneProtocol) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the IETFRouting_RoutingState_ControlPlaneProtocols_ControlPlaneProtocol struct, which is a YANG list entry.
func (t *IETFRouting_RoutingState_ControlPlaneProtocols_ControlPlaneProtocol) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}


	return map[string]interface{}{
		"name": *t.Name,
		"type": t.Type,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFRouting_RoutingState_ControlPlaneProtocols_ControlPlaneProtocol) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFRouting_RoutingState_ControlPlaneProtocols_ControlPlaneProtocol"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFRouting_RoutingState_ControlPlaneProtocols_ControlPlaneProtocol) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFRouting_RoutingState_ControlPlaneProtocols_ControlPlaneProtocol) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFRouting_RoutingState_ControlPlaneProtocols_ControlPlaneProtocol.
func (*IETFRouting_RoutingState_ControlPlaneProtocols_ControlPlaneProtocol) ΛBelongingModule() string {
	return "ietf-routing"
}


// IETFRouting_RoutingState_Interfaces represents the /ietf-routing/routing-state/interfaces YANG schema element.
type IETFRouting_RoutingState_Interfaces struct {
	Interface	[]string	`path:"interface" module:"ietf-routing"`
}

// IsYANGGoStruct ensures that IETFRouting_RoutingState_Interfaces implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFRouting_RoutingState_Interfaces) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFRouting_RoutingState_Interfaces) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFRouting_RoutingState_Interfaces"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFRouting_RoutingState_Interfaces) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFRouting_RoutingState_Interfaces) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFRouting_RoutingState_Interfaces.
func (*IETFRouting_RoutingState_Interfaces) ΛBelongingModule() string {
	return "ietf-routing"
}


// IETFRouting_RoutingState_Ribs represents the /ietf-routing/routing-state/ribs YANG schema element.
type IETFRouting_RoutingState_Ribs struct {
	Rib	map[string]*IETFRouting_RoutingState_Ribs_Rib	`path:"rib" module:"ietf-routing"`
}

// IsYANGGoStruct ensures that IETFRouting_RoutingState_Ribs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFRouting_RoutingState_Ribs) IsYANGGoStruct() {}

// NewRib creates a new entry in the Rib list of the
// IETFRouting_RoutingState_Ribs struct. The keys of the list are populated from the input
// arguments.
func (t *IETFRouting_RoutingState_Ribs) NewRib(Name string) (*IETFRouting_RoutingState_Ribs_Rib, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Rib == nil {
		t.Rib = make(map[string]*IETFRouting_RoutingState_Ribs_Rib)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Rib[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Rib", key)
	}

	t.Rib[key] = &IETFRouting_RoutingState_Ribs_Rib{
		Name: &Name,
	}

	return t.Rib[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFRouting_RoutingState_Ribs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFRouting_RoutingState_Ribs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFRouting_RoutingState_Ribs) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFRouting_RoutingState_Ribs) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFRouting_RoutingState_Ribs.
func (*IETFRouting_RoutingState_Ribs) ΛBelongingModule() string {
	return "ietf-routing"
}


// IETFRouting_RoutingState_Ribs_Rib represents the /ietf-routing/routing-state/ribs/rib YANG schema element.
type IETFRouting_RoutingState_Ribs_Rib struct {
	AddressFamily	E_IETFRouting_AddressFamily	`path:"address-family" module:"ietf-routing"`
	DefaultRib	*bool	`path:"default-rib" module:"ietf-routing"`
	Name	*string	`path:"name" module:"ietf-routing"`
	Routes	*IETFRouting_RoutingState_Ribs_Rib_Routes	`path:"routes" module:"ietf-routing"`
}

// IsYANGGoStruct ensures that IETFRouting_RoutingState_Ribs_Rib implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFRouting_RoutingState_Ribs_Rib) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the IETFRouting_RoutingState_Ribs_Rib struct, which is a YANG list entry.
func (t *IETFRouting_RoutingState_Ribs_Rib) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFRouting_RoutingState_Ribs_Rib) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFRouting_RoutingState_Ribs_Rib"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFRouting_RoutingState_Ribs_Rib) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFRouting_RoutingState_Ribs_Rib) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFRouting_RoutingState_Ribs_Rib.
func (*IETFRouting_RoutingState_Ribs_Rib) ΛBelongingModule() string {
	return "ietf-routing"
}


// IETFRouting_RoutingState_Ribs_Rib_Routes represents the /ietf-routing/routing-state/ribs/rib/routes YANG schema element.
type IETFRouting_RoutingState_Ribs_Rib_Routes struct {
	Route	[]*IETFRouting_RoutingState_Ribs_Rib_Routes_Route	`path:"route" module:"ietf-routing"`
}

// IsYANGGoStruct ensures that IETFRouting_RoutingState_Ribs_Rib_Routes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFRouting_RoutingState_Ribs_Rib_Routes) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFRouting_RoutingState_Ribs_Rib_Routes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFRouting_RoutingState_Ribs_Rib_Routes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFRouting_RoutingState_Ribs_Rib_Routes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFRouting_RoutingState_Ribs_Rib_Routes) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFRouting_RoutingState_Ribs_Rib_Routes.
func (*IETFRouting_RoutingState_Ribs_Rib_Routes) ΛBelongingModule() string {
	return "ietf-routing"
}


// IETFRouting_RoutingState_Ribs_Rib_Routes_Route represents the /ietf-routing/routing-state/ribs/rib/routes/route YANG schema element.
type IETFRouting_RoutingState_Ribs_Rib_Routes_Route struct {
	Active	YANGEmpty	`path:"active" module:"ietf-routing"`
	LastUpdated	*string	`path:"last-updated" module:"ietf-routing"`
	NextHop	*IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop	`path:"next-hop" module:"ietf-routing"`
	RoutePreference	*uint32	`path:"route-preference" module:"ietf-routing"`
	SourceProtocol	E_IETFRouting_RoutingProtocol	`path:"source-protocol" module:"ietf-routing"`
}

// IsYANGGoStruct ensures that IETFRouting_RoutingState_Ribs_Rib_Routes_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFRouting_RoutingState_Ribs_Rib_Routes_Route) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFRouting_RoutingState_Ribs_Rib_Routes_Route) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFRouting_RoutingState_Ribs_Rib_Routes_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFRouting_RoutingState_Ribs_Rib_Routes_Route) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFRouting_RoutingState_Ribs_Rib_Routes_Route) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFRouting_RoutingState_Ribs_Rib_Routes_Route.
func (*IETFRouting_RoutingState_Ribs_Rib_Routes_Route) ΛBelongingModule() string {
	return "ietf-routing"
}


// IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop represents the /ietf-routing/routing-state/ribs/rib/routes/route/next-hop YANG schema element.
type IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop struct {
	NextHopList	*IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop_NextHopList	`path:"next-hop-list" module:"ietf-routing"`
	OutgoingInterface	*string	`path:"outgoing-interface" module:"ietf-routing"`
	SpecialNextHop	E_IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop_SpecialNextHop	`path:"special-next-hop" module:"ietf-routing"`
}

// IsYANGGoStruct ensures that IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop.
func (*IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop) ΛBelongingModule() string {
	return "ietf-routing"
}


// IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop_NextHopList represents the /ietf-routing/routing-state/ribs/rib/routes/route/next-hop/next-hop-list YANG schema element.
type IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop_NextHopList struct {
	NextHop	[]*IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop_NextHopList_NextHop	`path:"next-hop" module:"ietf-routing"`
}

// IsYANGGoStruct ensures that IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop_NextHopList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop_NextHopList) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop_NextHopList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop_NextHopList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop_NextHopList) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop_NextHopList) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop_NextHopList.
func (*IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop_NextHopList) ΛBelongingModule() string {
	return "ietf-routing"
}


// IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop_NextHopList_NextHop represents the /ietf-routing/routing-state/ribs/rib/routes/route/next-hop/next-hop-list/next-hop YANG schema element.
type IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop_NextHopList_NextHop struct {
	OutgoingInterface	*string	`path:"outgoing-interface" module:"ietf-routing"`
}

// IsYANGGoStruct ensures that IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop_NextHopList_NextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop_NextHopList_NextHop) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop_NextHopList_NextHop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop_NextHopList_NextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop_NextHopList_NextHop) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop_NextHopList_NextHop) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop_NextHopList_NextHop.
func (*IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop_NextHopList_NextHop) ΛBelongingModule() string {
	return "ietf-routing"
}


// IETFRouting_Routing_ControlPlaneProtocols represents the /ietf-routing/routing/control-plane-protocols YANG schema element.
type IETFRouting_Routing_ControlPlaneProtocols struct {
	ControlPlaneProtocol	map[IETFRouting_Routing_ControlPlaneProtocols_ControlPlaneProtocol_Key]*IETFRouting_Routing_ControlPlaneProtocols_ControlPlaneProtocol	`path:"control-plane-protocol" module:"ietf-routing"`
}

// IsYANGGoStruct ensures that IETFRouting_Routing_ControlPlaneProtocols implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFRouting_Routing_ControlPlaneProtocols) IsYANGGoStruct() {}

// IETFRouting_Routing_ControlPlaneProtocols_ControlPlaneProtocol_Key represents the key for list ControlPlaneProtocol of element /ietf-routing/routing/control-plane-protocols.
type IETFRouting_Routing_ControlPlaneProtocols_ControlPlaneProtocol_Key struct {
	Type	E_IETFRouting_ControlPlaneProtocol	`path:"type"`
	Name	string	`path:"name"`
}

// IsYANGGoKeyStruct ensures that IETFRouting_Routing_ControlPlaneProtocols_ControlPlaneProtocol_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (IETFRouting_Routing_ControlPlaneProtocols_ControlPlaneProtocol_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the IETFRouting_Routing_ControlPlaneProtocols_ControlPlaneProtocol_Key key struct.
func (t IETFRouting_Routing_ControlPlaneProtocols_ControlPlaneProtocol_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"type": t.Type,
		"name": t.Name,
	}, nil
}

// NewControlPlaneProtocol creates a new entry in the ControlPlaneProtocol list of the
// IETFRouting_Routing_ControlPlaneProtocols struct. The keys of the list are populated from the input
// arguments.
func (t *IETFRouting_Routing_ControlPlaneProtocols) NewControlPlaneProtocol(Type E_IETFRouting_ControlPlaneProtocol, Name string) (*IETFRouting_Routing_ControlPlaneProtocols_ControlPlaneProtocol, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ControlPlaneProtocol == nil {
		t.ControlPlaneProtocol = make(map[IETFRouting_Routing_ControlPlaneProtocols_ControlPlaneProtocol_Key]*IETFRouting_Routing_ControlPlaneProtocols_ControlPlaneProtocol)
	}

	key := IETFRouting_Routing_ControlPlaneProtocols_ControlPlaneProtocol_Key{
		Type: Type,
		Name: Name,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ControlPlaneProtocol[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ControlPlaneProtocol", key)
	}

	t.ControlPlaneProtocol[key] = &IETFRouting_Routing_ControlPlaneProtocols_ControlPlaneProtocol{
		Type: Type,
		Name: &Name,
	}

	return t.ControlPlaneProtocol[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFRouting_Routing_ControlPlaneProtocols) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFRouting_Routing_ControlPlaneProtocols"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFRouting_Routing_ControlPlaneProtocols) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFRouting_Routing_ControlPlaneProtocols) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFRouting_Routing_ControlPlaneProtocols.
func (*IETFRouting_Routing_ControlPlaneProtocols) ΛBelongingModule() string {
	return "ietf-routing"
}


// IETFRouting_Routing_ControlPlaneProtocols_ControlPlaneProtocol represents the /ietf-routing/routing/control-plane-protocols/control-plane-protocol YANG schema element.
type IETFRouting_Routing_ControlPlaneProtocols_ControlPlaneProtocol struct {
	Description	*string	`path:"description" module:"ietf-routing"`
	Name	*string	`path:"name" module:"ietf-routing"`
	StaticRoutes	*IETFRouting_Routing_ControlPlaneProtocols_ControlPlaneProtocol_StaticRoutes	`path:"static-routes" module:"ietf-routing"`
	Type	E_IETFRouting_ControlPlaneProtocol	`path:"type" module:"ietf-routing"`
}

// IsYANGGoStruct ensures that IETFRouting_Routing_ControlPlaneProtocols_ControlPlaneProtocol implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFRouting_Routing_ControlPlaneProtocols_ControlPlaneProtocol) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the IETFRouting_Routing_ControlPlaneProtocols_ControlPlaneProtocol struct, which is a YANG list entry.
func (t *IETFRouting_Routing_ControlPlaneProtocols_ControlPlaneProtocol) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}


	return map[string]interface{}{
		"name": *t.Name,
		"type": t.Type,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFRouting_Routing_ControlPlaneProtocols_ControlPlaneProtocol) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFRouting_Routing_ControlPlaneProtocols_ControlPlaneProtocol"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFRouting_Routing_ControlPlaneProtocols_ControlPlaneProtocol) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFRouting_Routing_ControlPlaneProtocols_ControlPlaneProtocol) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFRouting_Routing_ControlPlaneProtocols_ControlPlaneProtocol.
func (*IETFRouting_Routing_ControlPlaneProtocols_ControlPlaneProtocol) ΛBelongingModule() string {
	return "ietf-routing"
}


// IETFRouting_Routing_ControlPlaneProtocols_ControlPlaneProtocol_StaticRoutes represents the /ietf-routing/routing/control-plane-protocols/control-plane-protocol/static-routes YANG schema element.
type IETFRouting_Routing_ControlPlaneProtocols_ControlPlaneProtocol_StaticRoutes struct {
}

// IsYANGGoStruct ensures that IETFRouting_Routing_ControlPlaneProtocols_ControlPlaneProtocol_StaticRoutes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFRouting_Routing_ControlPlaneProtocols_ControlPlaneProtocol_StaticRoutes) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFRouting_Routing_ControlPlaneProtocols_ControlPlaneProtocol_StaticRoutes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFRouting_Routing_ControlPlaneProtocols_ControlPlaneProtocol_StaticRoutes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFRouting_Routing_ControlPlaneProtocols_ControlPlaneProtocol_StaticRoutes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFRouting_Routing_ControlPlaneProtocols_ControlPlaneProtocol_StaticRoutes) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFRouting_Routing_ControlPlaneProtocols_ControlPlaneProtocol_StaticRoutes.
func (*IETFRouting_Routing_ControlPlaneProtocols_ControlPlaneProtocol_StaticRoutes) ΛBelongingModule() string {
	return "ietf-routing"
}


// IETFRouting_Routing_Interfaces represents the /ietf-routing/routing/interfaces YANG schema element.
type IETFRouting_Routing_Interfaces struct {
	Interface	[]string	`path:"interface" module:"ietf-routing"`
}

// IsYANGGoStruct ensures that IETFRouting_Routing_Interfaces implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFRouting_Routing_Interfaces) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFRouting_Routing_Interfaces) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFRouting_Routing_Interfaces"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFRouting_Routing_Interfaces) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFRouting_Routing_Interfaces) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFRouting_Routing_Interfaces.
func (*IETFRouting_Routing_Interfaces) ΛBelongingModule() string {
	return "ietf-routing"
}


// IETFRouting_Routing_Ribs represents the /ietf-routing/routing/ribs YANG schema element.
type IETFRouting_Routing_Ribs struct {
	Rib	map[string]*IETFRouting_Routing_Ribs_Rib	`path:"rib" module:"ietf-routing"`
}

// IsYANGGoStruct ensures that IETFRouting_Routing_Ribs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFRouting_Routing_Ribs) IsYANGGoStruct() {}

// NewRib creates a new entry in the Rib list of the
// IETFRouting_Routing_Ribs struct. The keys of the list are populated from the input
// arguments.
func (t *IETFRouting_Routing_Ribs) NewRib(Name string) (*IETFRouting_Routing_Ribs_Rib, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Rib == nil {
		t.Rib = make(map[string]*IETFRouting_Routing_Ribs_Rib)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Rib[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Rib", key)
	}

	t.Rib[key] = &IETFRouting_Routing_Ribs_Rib{
		Name: &Name,
	}

	return t.Rib[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFRouting_Routing_Ribs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFRouting_Routing_Ribs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFRouting_Routing_Ribs) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFRouting_Routing_Ribs) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFRouting_Routing_Ribs.
func (*IETFRouting_Routing_Ribs) ΛBelongingModule() string {
	return "ietf-routing"
}


// IETFRouting_Routing_Ribs_Rib represents the /ietf-routing/routing/ribs/rib YANG schema element.
type IETFRouting_Routing_Ribs_Rib struct {
	AddressFamily	E_IETFRouting_AddressFamily	`path:"address-family" module:"ietf-routing"`
	DefaultRib	*bool	`path:"default-rib" module:"ietf-routing"`
	Description	*string	`path:"description" module:"ietf-routing"`
	Name	*string	`path:"name" module:"ietf-routing"`
	Routes	*IETFRouting_Routing_Ribs_Rib_Routes	`path:"routes" module:"ietf-routing"`
}

// IsYANGGoStruct ensures that IETFRouting_Routing_Ribs_Rib implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFRouting_Routing_Ribs_Rib) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the IETFRouting_Routing_Ribs_Rib struct, which is a YANG list entry.
func (t *IETFRouting_Routing_Ribs_Rib) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFRouting_Routing_Ribs_Rib) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFRouting_Routing_Ribs_Rib"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFRouting_Routing_Ribs_Rib) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFRouting_Routing_Ribs_Rib) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFRouting_Routing_Ribs_Rib.
func (*IETFRouting_Routing_Ribs_Rib) ΛBelongingModule() string {
	return "ietf-routing"
}


// IETFRouting_Routing_Ribs_Rib_Routes represents the /ietf-routing/routing/ribs/rib/routes YANG schema element.
type IETFRouting_Routing_Ribs_Rib_Routes struct {
	Route	[]*IETFRouting_Routing_Ribs_Rib_Routes_Route	`path:"route" module:"ietf-routing"`
}

// IsYANGGoStruct ensures that IETFRouting_Routing_Ribs_Rib_Routes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFRouting_Routing_Ribs_Rib_Routes) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFRouting_Routing_Ribs_Rib_Routes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFRouting_Routing_Ribs_Rib_Routes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFRouting_Routing_Ribs_Rib_Routes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFRouting_Routing_Ribs_Rib_Routes) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFRouting_Routing_Ribs_Rib_Routes.
func (*IETFRouting_Routing_Ribs_Rib_Routes) ΛBelongingModule() string {
	return "ietf-routing"
}


// IETFRouting_Routing_Ribs_Rib_Routes_Route represents the /ietf-routing/routing/ribs/rib/routes/route YANG schema element.
type IETFRouting_Routing_Ribs_Rib_Routes_Route struct {
	Active	YANGEmpty	`path:"active" module:"ietf-routing"`
	LastUpdated	*string	`path:"last-updated" module:"ietf-routing"`
	NextHop	*IETFRouting_Routing_Ribs_Rib_Routes_Route_NextHop	`path:"next-hop" module:"ietf-routing"`
	RoutePreference	*uint32	`path:"route-preference" module:"ietf-routing"`
	SourceProtocol	E_IETFRouting_RoutingProtocol	`path:"source-protocol" module:"ietf-routing"`
}

// IsYANGGoStruct ensures that IETFRouting_Routing_Ribs_Rib_Routes_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFRouting_Routing_Ribs_Rib_Routes_Route) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFRouting_Routing_Ribs_Rib_Routes_Route) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFRouting_Routing_Ribs_Rib_Routes_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFRouting_Routing_Ribs_Rib_Routes_Route) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFRouting_Routing_Ribs_Rib_Routes_Route) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFRouting_Routing_Ribs_Rib_Routes_Route.
func (*IETFRouting_Routing_Ribs_Rib_Routes_Route) ΛBelongingModule() string {
	return "ietf-routing"
}


// IETFRouting_Routing_Ribs_Rib_Routes_Route_NextHop represents the /ietf-routing/routing/ribs/rib/routes/route/next-hop YANG schema element.
type IETFRouting_Routing_Ribs_Rib_Routes_Route_NextHop struct {
	NextHopList	*IETFRouting_Routing_Ribs_Rib_Routes_Route_NextHop_NextHopList	`path:"next-hop-list" module:"ietf-routing"`
	OutgoingInterface	*string	`path:"outgoing-interface" module:"ietf-routing"`
	SpecialNextHop	E_IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop_SpecialNextHop	`path:"special-next-hop" module:"ietf-routing"`
}

// IsYANGGoStruct ensures that IETFRouting_Routing_Ribs_Rib_Routes_Route_NextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFRouting_Routing_Ribs_Rib_Routes_Route_NextHop) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFRouting_Routing_Ribs_Rib_Routes_Route_NextHop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFRouting_Routing_Ribs_Rib_Routes_Route_NextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFRouting_Routing_Ribs_Rib_Routes_Route_NextHop) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFRouting_Routing_Ribs_Rib_Routes_Route_NextHop) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFRouting_Routing_Ribs_Rib_Routes_Route_NextHop.
func (*IETFRouting_Routing_Ribs_Rib_Routes_Route_NextHop) ΛBelongingModule() string {
	return "ietf-routing"
}


// IETFRouting_Routing_Ribs_Rib_Routes_Route_NextHop_NextHopList represents the /ietf-routing/routing/ribs/rib/routes/route/next-hop/next-hop-list YANG schema element.
type IETFRouting_Routing_Ribs_Rib_Routes_Route_NextHop_NextHopList struct {
	NextHop	[]*IETFRouting_Routing_Ribs_Rib_Routes_Route_NextHop_NextHopList_NextHop	`path:"next-hop" module:"ietf-routing"`
}

// IsYANGGoStruct ensures that IETFRouting_Routing_Ribs_Rib_Routes_Route_NextHop_NextHopList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFRouting_Routing_Ribs_Rib_Routes_Route_NextHop_NextHopList) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFRouting_Routing_Ribs_Rib_Routes_Route_NextHop_NextHopList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFRouting_Routing_Ribs_Rib_Routes_Route_NextHop_NextHopList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFRouting_Routing_Ribs_Rib_Routes_Route_NextHop_NextHopList) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFRouting_Routing_Ribs_Rib_Routes_Route_NextHop_NextHopList) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFRouting_Routing_Ribs_Rib_Routes_Route_NextHop_NextHopList.
func (*IETFRouting_Routing_Ribs_Rib_Routes_Route_NextHop_NextHopList) ΛBelongingModule() string {
	return "ietf-routing"
}


// IETFRouting_Routing_Ribs_Rib_Routes_Route_NextHop_NextHopList_NextHop represents the /ietf-routing/routing/ribs/rib/routes/route/next-hop/next-hop-list/next-hop YANG schema element.
type IETFRouting_Routing_Ribs_Rib_Routes_Route_NextHop_NextHopList_NextHop struct {
	OutgoingInterface	*string	`path:"outgoing-interface" module:"ietf-routing"`
}

// IsYANGGoStruct ensures that IETFRouting_Routing_Ribs_Rib_Routes_Route_NextHop_NextHopList_NextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFRouting_Routing_Ribs_Rib_Routes_Route_NextHop_NextHopList_NextHop) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFRouting_Routing_Ribs_Rib_Routes_Route_NextHop_NextHopList_NextHop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFRouting_Routing_Ribs_Rib_Routes_Route_NextHop_NextHopList_NextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFRouting_Routing_Ribs_Rib_Routes_Route_NextHop_NextHopList_NextHop) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFRouting_Routing_Ribs_Rib_Routes_Route_NextHop_NextHopList_NextHop) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFRouting_Routing_Ribs_Rib_Routes_Route_NextHop_NextHopList_NextHop.
func (*IETFRouting_Routing_Ribs_Rib_Routes_Route_NextHop_NextHopList_NextHop) ΛBelongingModule() string {
	return "ietf-routing"
}


// E_IETFInterfaces_InterfaceType is a derived int64 type which is used to represent
// the enumerated node IETFInterfaces_InterfaceType. An additional value named
// IETFInterfaces_InterfaceType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFInterfaces_InterfaceType int64

// IsYANGGoEnum ensures that IETFInterfaces_InterfaceType implements the yang.GoEnum
// interface. This ensures that IETFInterfaces_InterfaceType can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFInterfaces_InterfaceType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFInterfaces_InterfaceType.
func (E_IETFInterfaces_InterfaceType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_IETFInterfaces_InterfaceType.
func (e E_IETFInterfaces_InterfaceType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFInterfaces_InterfaceType")
}

const (
	// IETFInterfaces_InterfaceType_UNSET corresponds to the value UNSET of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_UNSET E_IETFInterfaces_InterfaceType = 0
)


// E_IETFInterfaces_InterfacesState_Interface_AdminStatus is a derived int64 type which is used to represent
// the enumerated node IETFInterfaces_InterfacesState_Interface_AdminStatus. An additional value named
// IETFInterfaces_InterfacesState_Interface_AdminStatus_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFInterfaces_InterfacesState_Interface_AdminStatus int64

// IsYANGGoEnum ensures that IETFInterfaces_InterfacesState_Interface_AdminStatus implements the yang.GoEnum
// interface. This ensures that IETFInterfaces_InterfacesState_Interface_AdminStatus can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFInterfaces_InterfacesState_Interface_AdminStatus) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFInterfaces_InterfacesState_Interface_AdminStatus.
func (E_IETFInterfaces_InterfacesState_Interface_AdminStatus) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_IETFInterfaces_InterfacesState_Interface_AdminStatus.
func (e E_IETFInterfaces_InterfacesState_Interface_AdminStatus) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFInterfaces_InterfacesState_Interface_AdminStatus")
}

const (
	// IETFInterfaces_InterfacesState_Interface_AdminStatus_UNSET corresponds to the value UNSET of IETFInterfaces_InterfacesState_Interface_AdminStatus
	IETFInterfaces_InterfacesState_Interface_AdminStatus_UNSET E_IETFInterfaces_InterfacesState_Interface_AdminStatus = 0
	// IETFInterfaces_InterfacesState_Interface_AdminStatus_up corresponds to the value up of IETFInterfaces_InterfacesState_Interface_AdminStatus
	IETFInterfaces_InterfacesState_Interface_AdminStatus_up E_IETFInterfaces_InterfacesState_Interface_AdminStatus = 1
	// IETFInterfaces_InterfacesState_Interface_AdminStatus_down corresponds to the value down of IETFInterfaces_InterfacesState_Interface_AdminStatus
	IETFInterfaces_InterfacesState_Interface_AdminStatus_down E_IETFInterfaces_InterfacesState_Interface_AdminStatus = 2
	// IETFInterfaces_InterfacesState_Interface_AdminStatus_testing corresponds to the value testing of IETFInterfaces_InterfacesState_Interface_AdminStatus
	IETFInterfaces_InterfacesState_Interface_AdminStatus_testing E_IETFInterfaces_InterfacesState_Interface_AdminStatus = 3
)


// E_IETFInterfaces_InterfacesState_Interface_OperStatus is a derived int64 type which is used to represent
// the enumerated node IETFInterfaces_InterfacesState_Interface_OperStatus. An additional value named
// IETFInterfaces_InterfacesState_Interface_OperStatus_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFInterfaces_InterfacesState_Interface_OperStatus int64

// IsYANGGoEnum ensures that IETFInterfaces_InterfacesState_Interface_OperStatus implements the yang.GoEnum
// interface. This ensures that IETFInterfaces_InterfacesState_Interface_OperStatus can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFInterfaces_InterfacesState_Interface_OperStatus) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFInterfaces_InterfacesState_Interface_OperStatus.
func (E_IETFInterfaces_InterfacesState_Interface_OperStatus) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_IETFInterfaces_InterfacesState_Interface_OperStatus.
func (e E_IETFInterfaces_InterfacesState_Interface_OperStatus) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFInterfaces_InterfacesState_Interface_OperStatus")
}

const (
	// IETFInterfaces_InterfacesState_Interface_OperStatus_UNSET corresponds to the value UNSET of IETFInterfaces_InterfacesState_Interface_OperStatus
	IETFInterfaces_InterfacesState_Interface_OperStatus_UNSET E_IETFInterfaces_InterfacesState_Interface_OperStatus = 0
	// IETFInterfaces_InterfacesState_Interface_OperStatus_up corresponds to the value up of IETFInterfaces_InterfacesState_Interface_OperStatus
	IETFInterfaces_InterfacesState_Interface_OperStatus_up E_IETFInterfaces_InterfacesState_Interface_OperStatus = 1
	// IETFInterfaces_InterfacesState_Interface_OperStatus_down corresponds to the value down of IETFInterfaces_InterfacesState_Interface_OperStatus
	IETFInterfaces_InterfacesState_Interface_OperStatus_down E_IETFInterfaces_InterfacesState_Interface_OperStatus = 2
	// IETFInterfaces_InterfacesState_Interface_OperStatus_testing corresponds to the value testing of IETFInterfaces_InterfacesState_Interface_OperStatus
	IETFInterfaces_InterfacesState_Interface_OperStatus_testing E_IETFInterfaces_InterfacesState_Interface_OperStatus = 3
	// IETFInterfaces_InterfacesState_Interface_OperStatus_unknown corresponds to the value unknown of IETFInterfaces_InterfacesState_Interface_OperStatus
	IETFInterfaces_InterfacesState_Interface_OperStatus_unknown E_IETFInterfaces_InterfacesState_Interface_OperStatus = 4
	// IETFInterfaces_InterfacesState_Interface_OperStatus_dormant corresponds to the value dormant of IETFInterfaces_InterfacesState_Interface_OperStatus
	IETFInterfaces_InterfacesState_Interface_OperStatus_dormant E_IETFInterfaces_InterfacesState_Interface_OperStatus = 5
	// IETFInterfaces_InterfacesState_Interface_OperStatus_not_present corresponds to the value not_present of IETFInterfaces_InterfacesState_Interface_OperStatus
	IETFInterfaces_InterfacesState_Interface_OperStatus_not_present E_IETFInterfaces_InterfacesState_Interface_OperStatus = 6
	// IETFInterfaces_InterfacesState_Interface_OperStatus_lower_layer_down corresponds to the value lower_layer_down of IETFInterfaces_InterfacesState_Interface_OperStatus
	IETFInterfaces_InterfacesState_Interface_OperStatus_lower_layer_down E_IETFInterfaces_InterfacesState_Interface_OperStatus = 7
)


// E_IETFInterfaces_Interfaces_Interface_AdminStatus is a derived int64 type which is used to represent
// the enumerated node IETFInterfaces_Interfaces_Interface_AdminStatus. An additional value named
// IETFInterfaces_Interfaces_Interface_AdminStatus_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFInterfaces_Interfaces_Interface_AdminStatus int64

// IsYANGGoEnum ensures that IETFInterfaces_Interfaces_Interface_AdminStatus implements the yang.GoEnum
// interface. This ensures that IETFInterfaces_Interfaces_Interface_AdminStatus can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFInterfaces_Interfaces_Interface_AdminStatus) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFInterfaces_Interfaces_Interface_AdminStatus.
func (E_IETFInterfaces_Interfaces_Interface_AdminStatus) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_IETFInterfaces_Interfaces_Interface_AdminStatus.
func (e E_IETFInterfaces_Interfaces_Interface_AdminStatus) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFInterfaces_Interfaces_Interface_AdminStatus")
}

const (
	// IETFInterfaces_Interfaces_Interface_AdminStatus_UNSET corresponds to the value UNSET of IETFInterfaces_Interfaces_Interface_AdminStatus
	IETFInterfaces_Interfaces_Interface_AdminStatus_UNSET E_IETFInterfaces_Interfaces_Interface_AdminStatus = 0
	// IETFInterfaces_Interfaces_Interface_AdminStatus_up corresponds to the value up of IETFInterfaces_Interfaces_Interface_AdminStatus
	IETFInterfaces_Interfaces_Interface_AdminStatus_up E_IETFInterfaces_Interfaces_Interface_AdminStatus = 1
	// IETFInterfaces_Interfaces_Interface_AdminStatus_down corresponds to the value down of IETFInterfaces_Interfaces_Interface_AdminStatus
	IETFInterfaces_Interfaces_Interface_AdminStatus_down E_IETFInterfaces_Interfaces_Interface_AdminStatus = 2
	// IETFInterfaces_Interfaces_Interface_AdminStatus_testing corresponds to the value testing of IETFInterfaces_Interfaces_Interface_AdminStatus
	IETFInterfaces_Interfaces_Interface_AdminStatus_testing E_IETFInterfaces_Interfaces_Interface_AdminStatus = 3
)


// E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable is a derived int64 type which is used to represent
// the enumerated node IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable. An additional value named
// IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable int64

// IsYANGGoEnum ensures that IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable implements the yang.GoEnum
// interface. This ensures that IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable.
func (E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable.
func (e E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable")
}

const (
	// IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable_UNSET corresponds to the value UNSET of IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable
	IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable_UNSET E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable = 0
	// IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable_enabled corresponds to the value enabled of IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable
	IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable_enabled E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable = 1
	// IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable_disabled corresponds to the value disabled of IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable
	IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable_disabled E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable = 2
)


// E_IETFInterfaces_Interfaces_Interface_OperStatus is a derived int64 type which is used to represent
// the enumerated node IETFInterfaces_Interfaces_Interface_OperStatus. An additional value named
// IETFInterfaces_Interfaces_Interface_OperStatus_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFInterfaces_Interfaces_Interface_OperStatus int64

// IsYANGGoEnum ensures that IETFInterfaces_Interfaces_Interface_OperStatus implements the yang.GoEnum
// interface. This ensures that IETFInterfaces_Interfaces_Interface_OperStatus can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFInterfaces_Interfaces_Interface_OperStatus) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFInterfaces_Interfaces_Interface_OperStatus.
func (E_IETFInterfaces_Interfaces_Interface_OperStatus) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_IETFInterfaces_Interfaces_Interface_OperStatus.
func (e E_IETFInterfaces_Interfaces_Interface_OperStatus) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFInterfaces_Interfaces_Interface_OperStatus")
}

const (
	// IETFInterfaces_Interfaces_Interface_OperStatus_UNSET corresponds to the value UNSET of IETFInterfaces_Interfaces_Interface_OperStatus
	IETFInterfaces_Interfaces_Interface_OperStatus_UNSET E_IETFInterfaces_Interfaces_Interface_OperStatus = 0
	// IETFInterfaces_Interfaces_Interface_OperStatus_up corresponds to the value up of IETFInterfaces_Interfaces_Interface_OperStatus
	IETFInterfaces_Interfaces_Interface_OperStatus_up E_IETFInterfaces_Interfaces_Interface_OperStatus = 1
	// IETFInterfaces_Interfaces_Interface_OperStatus_down corresponds to the value down of IETFInterfaces_Interfaces_Interface_OperStatus
	IETFInterfaces_Interfaces_Interface_OperStatus_down E_IETFInterfaces_Interfaces_Interface_OperStatus = 2
	// IETFInterfaces_Interfaces_Interface_OperStatus_testing corresponds to the value testing of IETFInterfaces_Interfaces_Interface_OperStatus
	IETFInterfaces_Interfaces_Interface_OperStatus_testing E_IETFInterfaces_Interfaces_Interface_OperStatus = 3
	// IETFInterfaces_Interfaces_Interface_OperStatus_unknown corresponds to the value unknown of IETFInterfaces_Interfaces_Interface_OperStatus
	IETFInterfaces_Interfaces_Interface_OperStatus_unknown E_IETFInterfaces_Interfaces_Interface_OperStatus = 4
	// IETFInterfaces_Interfaces_Interface_OperStatus_dormant corresponds to the value dormant of IETFInterfaces_Interfaces_Interface_OperStatus
	IETFInterfaces_Interfaces_Interface_OperStatus_dormant E_IETFInterfaces_Interfaces_Interface_OperStatus = 5
	// IETFInterfaces_Interfaces_Interface_OperStatus_not_present corresponds to the value not_present of IETFInterfaces_Interfaces_Interface_OperStatus
	IETFInterfaces_Interfaces_Interface_OperStatus_not_present E_IETFInterfaces_Interfaces_Interface_OperStatus = 6
	// IETFInterfaces_Interfaces_Interface_OperStatus_lower_layer_down corresponds to the value lower_layer_down of IETFInterfaces_Interfaces_Interface_OperStatus
	IETFInterfaces_Interfaces_Interface_OperStatus_lower_layer_down E_IETFInterfaces_Interfaces_Interface_OperStatus = 7
)


// E_IETFRouting_AddressFamily is a derived int64 type which is used to represent
// the enumerated node IETFRouting_AddressFamily. An additional value named
// IETFRouting_AddressFamily_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFRouting_AddressFamily int64

// IsYANGGoEnum ensures that IETFRouting_AddressFamily implements the yang.GoEnum
// interface. This ensures that IETFRouting_AddressFamily can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFRouting_AddressFamily) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFRouting_AddressFamily.
func (E_IETFRouting_AddressFamily) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_IETFRouting_AddressFamily.
func (e E_IETFRouting_AddressFamily) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFRouting_AddressFamily")
}

const (
	// IETFRouting_AddressFamily_UNSET corresponds to the value UNSET of IETFRouting_AddressFamily
	IETFRouting_AddressFamily_UNSET E_IETFRouting_AddressFamily = 0
	// IETFRouting_AddressFamily_ipv4 corresponds to the value ipv4 of IETFRouting_AddressFamily
	IETFRouting_AddressFamily_ipv4 E_IETFRouting_AddressFamily = 1
	// IETFRouting_AddressFamily_ipv6 corresponds to the value ipv6 of IETFRouting_AddressFamily
	IETFRouting_AddressFamily_ipv6 E_IETFRouting_AddressFamily = 2
)


// E_IETFRouting_ControlPlaneProtocol is a derived int64 type which is used to represent
// the enumerated node IETFRouting_ControlPlaneProtocol. An additional value named
// IETFRouting_ControlPlaneProtocol_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFRouting_ControlPlaneProtocol int64

// IsYANGGoEnum ensures that IETFRouting_ControlPlaneProtocol implements the yang.GoEnum
// interface. This ensures that IETFRouting_ControlPlaneProtocol can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFRouting_ControlPlaneProtocol) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFRouting_ControlPlaneProtocol.
func (E_IETFRouting_ControlPlaneProtocol) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_IETFRouting_ControlPlaneProtocol.
func (e E_IETFRouting_ControlPlaneProtocol) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFRouting_ControlPlaneProtocol")
}

const (
	// IETFRouting_ControlPlaneProtocol_UNSET corresponds to the value UNSET of IETFRouting_ControlPlaneProtocol
	IETFRouting_ControlPlaneProtocol_UNSET E_IETFRouting_ControlPlaneProtocol = 0
	// IETFRouting_ControlPlaneProtocol_direct corresponds to the value direct of IETFRouting_ControlPlaneProtocol
	IETFRouting_ControlPlaneProtocol_direct E_IETFRouting_ControlPlaneProtocol = 1
	// IETFRouting_ControlPlaneProtocol_routing_protocol corresponds to the value routing_protocol of IETFRouting_ControlPlaneProtocol
	IETFRouting_ControlPlaneProtocol_routing_protocol E_IETFRouting_ControlPlaneProtocol = 2
	// IETFRouting_ControlPlaneProtocol_static corresponds to the value static of IETFRouting_ControlPlaneProtocol
	IETFRouting_ControlPlaneProtocol_static E_IETFRouting_ControlPlaneProtocol = 3
)


// E_IETFRouting_RoutingProtocol is a derived int64 type which is used to represent
// the enumerated node IETFRouting_RoutingProtocol. An additional value named
// IETFRouting_RoutingProtocol_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFRouting_RoutingProtocol int64

// IsYANGGoEnum ensures that IETFRouting_RoutingProtocol implements the yang.GoEnum
// interface. This ensures that IETFRouting_RoutingProtocol can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFRouting_RoutingProtocol) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFRouting_RoutingProtocol.
func (E_IETFRouting_RoutingProtocol) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_IETFRouting_RoutingProtocol.
func (e E_IETFRouting_RoutingProtocol) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFRouting_RoutingProtocol")
}

const (
	// IETFRouting_RoutingProtocol_UNSET corresponds to the value UNSET of IETFRouting_RoutingProtocol
	IETFRouting_RoutingProtocol_UNSET E_IETFRouting_RoutingProtocol = 0
	// IETFRouting_RoutingProtocol_direct corresponds to the value direct of IETFRouting_RoutingProtocol
	IETFRouting_RoutingProtocol_direct E_IETFRouting_RoutingProtocol = 1
	// IETFRouting_RoutingProtocol_static corresponds to the value static of IETFRouting_RoutingProtocol
	IETFRouting_RoutingProtocol_static E_IETFRouting_RoutingProtocol = 2
)


// E_IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop_SpecialNextHop is a derived int64 type which is used to represent
// the enumerated node IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop_SpecialNextHop. An additional value named
// IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop_SpecialNextHop_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop_SpecialNextHop int64

// IsYANGGoEnum ensures that IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop_SpecialNextHop implements the yang.GoEnum
// interface. This ensures that IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop_SpecialNextHop can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop_SpecialNextHop) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop_SpecialNextHop.
func (E_IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop_SpecialNextHop) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop_SpecialNextHop.
func (e E_IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop_SpecialNextHop) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop_SpecialNextHop")
}

const (
	// IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop_SpecialNextHop_UNSET corresponds to the value UNSET of IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop_SpecialNextHop
	IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop_SpecialNextHop_UNSET E_IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop_SpecialNextHop = 0
	// IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop_SpecialNextHop_blackhole corresponds to the value blackhole of IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop_SpecialNextHop
	IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop_SpecialNextHop_blackhole E_IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop_SpecialNextHop = 1
	// IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop_SpecialNextHop_unreachable corresponds to the value unreachable of IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop_SpecialNextHop
	IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop_SpecialNextHop_unreachable E_IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop_SpecialNextHop = 2
	// IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop_SpecialNextHop_prohibit corresponds to the value prohibit of IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop_SpecialNextHop
	IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop_SpecialNextHop_prohibit E_IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop_SpecialNextHop = 3
	// IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop_SpecialNextHop_receive corresponds to the value receive of IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop_SpecialNextHop
	IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop_SpecialNextHop_receive E_IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop_SpecialNextHop = 4
)


// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_IETFInterfaces_InterfaceType": {
	},
	"E_IETFInterfaces_InterfacesState_Interface_AdminStatus": {
		1: {Name: "up"},
		2: {Name: "down"},
		3: {Name: "testing"},
	},
	"E_IETFInterfaces_InterfacesState_Interface_OperStatus": {
		1: {Name: "up"},
		2: {Name: "down"},
		3: {Name: "testing"},
		4: {Name: "unknown"},
		5: {Name: "dormant"},
		6: {Name: "not-present"},
		7: {Name: "lower-layer-down"},
	},
	"E_IETFInterfaces_Interfaces_Interface_AdminStatus": {
		1: {Name: "up"},
		2: {Name: "down"},
		3: {Name: "testing"},
	},
	"E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable": {
		1: {Name: "enabled"},
		2: {Name: "disabled"},
	},
	"E_IETFInterfaces_Interfaces_Interface_OperStatus": {
		1: {Name: "up"},
		2: {Name: "down"},
		3: {Name: "testing"},
		4: {Name: "unknown"},
		5: {Name: "dormant"},
		6: {Name: "not-present"},
		7: {Name: "lower-layer-down"},
	},
	"E_IETFRouting_AddressFamily": {
		1: {Name: "ipv4", DefiningModule: "ietf-routing"},
		2: {Name: "ipv6", DefiningModule: "ietf-routing"},
	},
	"E_IETFRouting_ControlPlaneProtocol": {
		1: {Name: "direct", DefiningModule: "ietf-routing"},
		2: {Name: "routing-protocol", DefiningModule: "ietf-routing"},
		3: {Name: "static", DefiningModule: "ietf-routing"},
	},
	"E_IETFRouting_RoutingProtocol": {
		1: {Name: "direct", DefiningModule: "ietf-routing"},
		2: {Name: "static", DefiningModule: "ietf-routing"},
	},
	"E_IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop_SpecialNextHop": {
		1: {Name: "blackhole"},
		2: {Name: "unreachable"},
		3: {Name: "prohibit"},
		4: {Name: "receive"},
	},
}


var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x7d, 0x59, 0x73, 0xdb, 0x38,
		0xb3, 0xf6, 0xbd, 0x7f, 0x05, 0x8a, 0x37, 0x93, 0x9c, 0x31, 0xbd, 0x67, 0xf3, 0xcd, 0x54, 0xd6,
		0x6f, 0x5c, 0xdf, 0x64, 0x92, 0x8a, 0x3d, 0xef, 0xc5, 0x1b, 0xaa, 0x52, 0x30, 0x09, 0x49, 0xa8,
		0x48, 0x20, 0x0f, 0x08, 0xc6, 0x71, 0x65, 0xfc, 0xdf, 0x4f, 0x71, 0xd1, 0xbe, 0x61, 0x17, 0x65,
		0x75, 0x2e, 0x22, 0x5b, 0x26, 0xb8, 0x34, 0x1a, 0x4f, 0x3f, 0xdd, 0x68, 0x76, 0xff, 0x3a, 0x40,
		0x08, 0xa1, 0xe0, 0x6f, 0x3c, 0x24, 0xc1, 0x25, 0x0a, 0x12, 0xf2, 0x83, 0xc6, 0x24, 0x38, 0xac,
		0xbf, 0xfd, 0xff, 0x94, 0x25, 0xc1, 0x25, 0x3a, 0x6d, 0x7e, 0x7d, 0x9b, 0xb2, 0x2e, 0xed, 0x05,
		0x97, 0xe8, 0xa4, 0xf9, 0xe2, 0x1d, 0xe5, 0xc1, 0x25, 0xaa, 0x4f, 0x51, 0x7d, 0x41, 0x99, 0x20,
		0xbc, 0x8b, 0x63, 0x92, 0xcf, 0x7c, 0x3f, 0x73, 0x89, 0xa9, 0x63, 0x0e, 0x67, 0x8f, 0x98, 0xbd,
		0xdc, 0xf8, 0xeb, 0xf9, 0xcb, 0x8e, 0xff, 0xf0, 0x99, 0x93, 0x2e, 0xfd, 0xb9, 0x70, 0xa5, 0xd9,
		0xab, 0x75, 0xe7, 0xae, 0x52, 0xfd, 0xf5, 0x3a, 0x2d, 0x78, 0x4c, 0x96, 0x8e, 0xac, 0xef, 0x84,
		0xdc, 0xdf, 0xa5, 0xbc, 0xbc, 0x99, 0x20, 0xab, 0x2f, 0x72, 0xb8, 0xfc, 0xc0, 0x3f, 0x71, 0xfe,
		0x9a, 0xf7, 0x8a, 0x21, 0x61, 0x22, 0xb8, 0x44, 0x82, 0x17, 0x64, 0xc5, 0x81, 0x53, 0x47, 0x95,
		0xf7, 0xb4, 0x70, 0xd0, 0xc3, 0xcc, 0x37, 0x0f, 0x73, 0x4f, 0x3a, 0x2f, 0xe8, 0x45, 0x81, 0xaf,
		0x7e, 0x96, 0x05, 0xb9, 0xaf, 0x7a, 0x96, 0xe5, 0xe2, 0xdf, 0x38, 0x0d, 0x32, 0xd3, 0x21, 0x37,
		0x2d, 0xb2, 0xd3, 0xa3, 0x3c, 0x4d, 0xca, 0xd3, 0x25, 0x3d, 0x6d, 0xcb, 0xa7, 0x6f, 0xc5, 0x34,
		0x6e, 0x9c, 0xce, 0xf1, 0x01, 0x38, 0x19, 0x52, 0x16, 0xe6, 0x02, 0x8b, 0x22, 0xdf, 0x2c, 0x86,
		0x91, 0x50, 0x67, 0x46, 0x6d, 0x78, 0xb0, 0x66, 0xb2, 0x4f, 0x36, 0x1c, 0x36, 0x9e, 0xf4, 0xb3,
		0x0d, 0x07, 0x4a, 0x4c, 0xbe, 0x9a, 0x12, 0xa8, 0x2a, 0x83, 0xb6, 0x52, 0x68, 0x2b, 0x87, 0xb2,
		0x92, 0xac, 0x57, 0x96, 0x0d, 0x4a, 0x33, 0xbe, 0xda, 0x47, 0xcc, 0x12, 0x2c, 0x52, 0x7e, 0xbf,
		0x7a, 0xad, 0x8e, 0x8f, 0xbd, 0xb9, 0xcf, 0x88, 0xda, 0x9c, 0x10, 0x56, 0x0c, 0x09, 0xc7, 0x82,
		0xa6, 0x4c, 0x66, 0x72, 0x46, 0x98, 0x71, 0x21, 0x71, 0xec, 0x7b, 0x56, 0x0c, 0xe5, 0xa7, 0xf1,
		0x26, 0xbd, 0x16, 0x9c, 0xb2, 0x9e, 0xf4, 0x88, 0x6a, 0xd4, 0x69, 0xf9, 0x0c, 0x45, 0x26, 0x39,
		0xe5, 0xd5, 0x90, 0xb3, 0xca, 0xee, 0xa5, 0x77, 0x4c, 0x65, 0xd0, 0x79, 0x39, 0x48, 0x90, 0x5c,
		0x94, 0x77, 0x28, 0x35, 0xec, 0xe1, 0x50, 0xf6, 0xb9, 0xaf, 0x2a, 0x4d, 0x52, 0x78, 0xe8, 0xea,
		0xe6, 0x37, 0x2e, 0xd1, 0x99, 0x21, 0xa3, 0x5b, 0xbf, 0x44, 0xe7, 0x0a, 0xa3, 0x8a, 0xac, 0x9c,
		0x6b, 0xb9, 0xc7, 0x75, 0xbc, 0x0a, 0xc8, 0x4f, 0xc1, 0x71, 0x58, 0xb0, 0x5c, 0xe0, 0xdb, 0x81,
		0xa4, 0x8e, 0xd3, 0x6e, 0xd8, 0x25, 0x58, 0x14, 0xbc, 0x3c, 0xfe, 0xab, 0xd4, 0x63, 0x28, 0xcc,
		0xc2, 0x04, 0xd5, 0xc2, 0x21, 0xbd, 0x55, 0x51, 0x26, 0x45, 0x84, 0x5b, 0x86, 0x74, 0x53, 0x8f,
		0x76, 0xa8, 0x76, 0x12, 0x5d, 0xd4, 0x5b, 0x81, 0x7e, 0xd5, 0xb3, 0x4b, 0x9f, 0xe0, 0xc1, 0x92,
		0x2e, 0x75, 0x24, 0xe0, 0x87, 0x93, 0x2e, 0xe1, 0x84, 0xc5, 0x4e, 0x27, 0xff, 0xcb, 0x87, 0xb7,
		0xe8, 0xec, 0xe5, 0xf3, 0xf3, 0x4b, 0x74, 0xd3, 0x27, 0xe8, 0x6a, 0x4c, 0x75, 0xd1, 0xff, 0xe3,
		0x69, 0x91, 0xa1, 0x8f, 0x57, 0x6f, 0x50, 0x88, 0x68, 0xf7, 0x75, 0x69, 0xa9, 0xaf, 0x65, 0x0c,
		0xb5, 0x6d, 0x45, 0x99, 0x48, 0x61, 0x9b, 0x7a, 0xa2, 0x21, 0x26, 0xff, 0x3a, 0x75, 0xa0, 0x37,
		0x7e, 0x0d, 0x72, 0x05, 0x09, 0xc9, 0x63, 0x4e, 0xb3, 0xca, 0xba, 0x4a, 0xd3, 0xba, 0xe9, 0x41,
		0x96, 0x59, 0xdd, 0x09, 0xb0, 0xba, 0x96, 0xb0, 0x3a, 0x75, 0xa6, 0x96, 0xd7, 0xf4, 0x48, 0x81,
		0xa4, 0xbd, 0xf4, 0x6e, 0x71, 0x5b, 0x85, 0xb9, 0x03, 0x8a, 0x01, 0x6d, 0x37, 0x0a, 0xe8, 0x51,
		0xe0, 0x2c, 0x61, 0xa5, 0x8e, 0x26, 0xf2, 0x18, 0x3b, 0x1a, 0xb0, 0x61, 0x0d, 0xbc, 0x23, 0x5d,
		0x5c, 0x0c, 0x84, 0x94, 0x36, 0x07, 0xe5, 0xac, 0xad, 0x17, 0x67, 0x07, 0xe0, 0x1c, 0xe0, 0xbc,
		0x91, 0xf3, 0x6d, 0x9a, 0x0e, 0x08, 0x56, 0x72, 0xba, 0x4f, 0xf7, 0x1b, 0xcf, 0x81, 0x43, 0xef,
		0x25, 0x87, 0xee, 0xd3, 0x5e, 0x9f, 0xf0, 0x70, 0x80, 0xef, 0x09, 0x0f, 0x69, 0x57, 0x1e, 0xe3,
		0xe7, 0x07, 0x42, 0x84, 0x14, 0xc0, 0x77, 0x7e, 0x6f, 0x24, 0xe4, 0xa4, 0xab, 0x02, 0xc1, 0x2f,
		0x24, 0x8e, 0xfd, 0x8c, 0x45, 0xbf, 0xbc, 0xc8, 0x31, 0xed, 0x5e, 0x4e, 0x36, 0xbf, 0x66, 0x7e,
		0x2b, 0x7f, 0x61, 0xe5, 0xbd, 0x18, 0x3d, 0xf7, 0x5f, 0x34, 0x17, 0xaf, 0x85, 0xe0, 0x72, 0xcf,
		0xfe, 0x91, 0xb2, 0xf7, 0x03, 0x52, 0xce, 0x4a, 0xbe, 0x59, 0xcd, 0x9b, 0xc8, 0xf3, 0xcf, 0xa9,
		0x11, 0xa7, 0x2f, 0x2f, 0x2e, 0x9e, 0xbf, 0xb8, 0xb8, 0x38, 0x79, 0x71, 0xfe, 0xe2, 0xe4, 0xd5,
		0xb3, 0x67, 0xa7, 0xcf, 0x4f, 0x9f, 0x49, 0x9c, 0xe4, 0x13, 0x4f, 0x08, 0x27, 0xc9, 0x9b, 0xfb,
		0xe0, 0x12, 0xb1, 0x62, 0x30, 0xd8, 0x6b, 0x1b, 0x76, 0x2d, 0x70, 0xfc, 0xfd, 0xa6, 0xba, 0x77,
		0x30, 0x61, 0x32, 0x52, 0x7a, 0x14, 0x16, 0x8c, 0x76, 0x43, 0xca, 0x12, 0xf2, 0x53, 0xde, 0x74,
		0x8d, 0x47, 0x80, 0xcd, 0x82, 0x5d, 0x3d, 0x3d, 0xfb, 0x76, 0x7e, 0xa6, 0x60, 0xd7, 0x24, 0x36,
		0x85, 0x82, 0x2f, 0x98, 0xf5, 0x9c, 0x60, 0xe8, 0x47, 0xca, 0xd4, 0xb1, 0xed, 0x3f, 0x78, 0x50,
		0x90, 0xcd, 0xb2, 0x5b, 0x18, 0xf7, 0x81, 0xe3, 0x58, 0xd0, 0x94, 0xbd, 0xa3, 0x3d, 0x2a, 0x6b,
		0x08, 0x67, 0x45, 0x4c, 0x7a, 0x58, 0xd0, 0x1f, 0xe5, 0xb5, 0xbb, 0x78, 0x90, 0x13, 0x79, 0x84,
		0x52, 0x40, 0xfc, 0x8f, 0xf8, 0xa7, 0xbe, 0x48, 0xce, 0x4e, 0x2f, 0x5e, 0x5c, 0xbc, 0x3c, 0x7f,
		0x7e, 0xf1, 0x62, 0x77, 0x64, 0xe3, 0x07, 0xbd, 0x61, 0x8f, 0x51, 0x05, 0x77, 0x61, 0x8f, 0x71,
		0xa7, 0xb8, 0xe5, 0x95, 0x04, 0x61, 0xd8, 0x6b, 0x5a, 0x59, 0x0b, 0xe8, 0x51, 0x30, 0xca, 0x01,
		0xce, 0x45, 0x18, 0xf7, 0x1b, 0x8b, 0x2c, 0x49, 0x2a, 0xa7, 0x07, 0x01, 0xaf, 0x84, 0x58, 0xc8,
		0x68, 0xbb, 0x19, 0x0b, 0x12, 0x62, 0x96, 0x84, 0x82, 0x0e, 0x89, 0xd2, 0xf6, 0xa2, 0x5c, 0x2c,
		0x44, 0x10, 0xce, 0xa4, 0xe1, 0x31, 0x88, 0xa2, 0xe4, 0xd7, 0xc5, 0x43, 0x58, 0x7e, 0x9c, 0x8d,
		0x3e, 0x6e, 0xea, 0x8f, 0xcb, 0x99, 0x8f, 0x27, 0x51, 0x74, 0x14, 0x45, 0xc9, 0xef, 0x4f, 0xff,
		0x78, 0xf2, 0xdf, 0x7f, 0xbf, 0x46, 0xd1, 0xef, 0x51, 0x14, 0x76, 0x66, 0x8e, 0x78, 0x1a, 0xb4,
		0x90, 0x2f, 0xb4, 0xc9, 0x62, 0xfc, 0x85, 0x73, 0xf1, 0x56, 0x06, 0x0f, 0xf6, 0xda, 0x6c, 0x4c,
		0x49, 0xe9, 0x71, 0xd8, 0x0e, 0xca, 0xbe, 0x87, 0x45, 0x16, 0x26, 0xe9, 0x1d, 0x0b, 0x05, 0xc7,
		0x59, 0x58, 0x6f, 0x86, 0x2a, 0x18, 0x92, 0x55, 0x67, 0x80, 0xed, 0x4d, 0xb0, 0x2a, 0x8f, 0x28,
		0xaf, 0x58, 0x2e, 0x49, 0x60, 0x66, 0x5c, 0x9d, 0x5c, 0x4c, 0xf3, 0x7a, 0xe0, 0xd6, 0x13, 0x85,
		0x47, 0x37, 0xa2, 0x96, 0x2c, 0x3c, 0xc9, 0xa6, 0x80, 0xdc, 0x5f, 0xf0, 0xcb, 0xc1, 0x2f, 0x37,
		0x60, 0x59, 0x11, 0x9b, 0x0c, 0xa4, 0xdd, 0xbf, 0x28, 0xfb, 0xfe, 0x4f, 0xf6, 0x2e, 0xbd, 0x63,
		0x37, 0x1c, 0x67, 0xef, 0x19, 0x6c, 0x04, 0x99, 0x89, 0xee, 0x71, 0xf0, 0xb1, 0xf4, 0x4e, 0x2b,
		0xbd, 0x61, 0x6e, 0x1c, 0x78, 0xf4, 0xc0, 0xbd, 0x20, 0xbb, 0x01, 0xb2, 0x1b, 0xb6, 0x18, 0x4f,
		0x80, 0xec, 0x86, 0x7d, 0xcc, 0x6e, 0x60, 0xb5, 0x92, 0x48, 0x5a, 0xad, 0xea, 0x68, 0x88, 0x13,
		0x80, 0xad, 0x82, 0xb7, 0x5a, 0xb4, 0x30, 0xf6, 0x6f, 0x3c, 0x04, 0x74, 0xdd, 0x24, 0x9f, 0x47,
		0x81, 0xab, 0x69, 0x46, 0xb8, 0x72, 0x49, 0x88, 0xe9, 0x41, 0xe0, 0x11, 0x40, 0xee, 0x18, 0x54,
		0x84, 0x90, 0x0e, 0xda, 0x9a, 0x54, 0x84, 0x50, 0x18, 0x77, 0x51, 0xdd, 0x1f, 0xfb, 0xce, 0x14,
		0xaf, 0xf7, 0xac, 0xbe, 0x49, 0x3e, 0xc4, 0x4c, 0xa8, 0x8c, 0x7b, 0x5e, 0xb1, 0xae, 0x54, 0x84,
		0x19, 0x27, 0x39, 0x51, 0x1b, 0xfb, 0x62, 0x3e, 0xce, 0x50, 0x09, 0x69, 0xfb, 0xe5, 0x2f, 0x6a,
		0x21, 0x5c, 0xa2, 0x67, 0x87, 0x4e, 0x8b, 0x66, 0x2c, 0x3c, 0xf9, 0x25, 0x52, 0x48, 0xa9, 0x9b,
		0x11, 0xfa, 0x25, 0x7a, 0xee, 0xbe, 0x5a, 0x47, 0xa3, 0x54, 0x97, 0xe8, 0x62, 0x7f, 0x6a, 0x7c,
		0xb4, 0x89, 0x9b, 0x7d, 0xca, 0x08, 0x87, 0x17, 0xd4, 0x14, 0xa4, 0xf4, 0x28, 0x78, 0x5a, 0xd6,
		0xbf, 0xcf, 0x43, 0x9c, 0x24, 0x9c, 0xe4, 0x0a, 0x44, 0x6d, 0x66, 0x14, 0x30, 0x35, 0xf0, 0x87,
		0xd5, 0xf5, 0x02, 0x39, 0x4f, 0xc6, 0x7a, 0xf2, 0xf5, 0x24, 0x7c, 0x85, 0xc3, 0xee, 0xeb, 0xf0,
		0x43, 0xe7, 0xd7, 0xd9, 0xc3, 0x93, 0xcb, 0xd9, 0xdf, 0x9f, 0xfe, 0xcf, 0xd3, 0x3f, 0x20, 0xc7,
		0x6a, 0x3d, 0xda, 0x7d, 0xee, 0xdf, 0xe7, 0xaf, 0xa5, 0xa7, 0x73, 0x6f, 0x8d, 0xc2, 0xb4, 0x98,
		0x1e, 0x85, 0x55, 0xc8, 0x33, 0xa2, 0x52, 0x8f, 0xa2, 0x3e, 0x1c, 0xec, 0x00, 0xd8, 0x81, 0x46,
		0xce, 0x3d, 0x5c, 0xf4, 0xc8, 0xf3, 0x0b, 0x05, 0x13, 0xf0, 0x72, 0x67, 0xdf, 0xe1, 0x3a, 0x81,
		0x77, 0xb8, 0xe6, 0x45, 0xa2, 0xb7, 0x1d, 0xd9, 0x16, 0x29, 0xed, 0xec, 0xdb, 0x5c, 0x2d, 0xcd,
		0x1b, 0xba, 0x2e, 0xad, 0xc3, 0x21, 0xa2, 0xdd, 0x3f, 0x69, 0xaf, 0x7f, 0x2d, 0x61, 0x2a, 0xf6,
		0x97, 0x4b, 0x6c, 0x14, 0xdc, 0xe3, 0x60, 0x17, 0x02, 0x0b, 0x9a, 0x0b, 0x1a, 0x2b, 0x78, 0x9c,
		0x53, 0x63, 0xe4, 0x78, 0xc6, 0x29, 0xf0, 0x8c, 0x5d, 0xe3, 0x19, 0x9b, 0x0a, 0x8d, 0x4f, 0xa2,
		0xa1, 0x34, 0x8f, 0x53, 0x26, 0x28, 0x2b, 0xa8, 0xb8, 0xaf, 0xdf, 0xfc, 0x91, 0x16, 0xe2, 0xf8,
		0xc5, 0xa1, 0xc5, 0x73, 0x48, 0x0a, 0x45, 0x8e, 0xc8, 0x2e, 0x2a, 0x9a, 0xec, 0x00, 0x05, 0x85,
		0xd3, 0x53, 0x3c, 0x9b, 0xd8, 0xaa, 0xa4, 0x88, 0x6e, 0x80, 0x55, 0x46, 0x31, 0x15, 0x61, 0x51,
		0x72, 0xa6, 0x14, 0xb6, 0xb2, 0xd4, 0xc9, 0xf4, 0xa2, 0xc6, 0x2a, 0xbe, 0xea, 0xa6, 0x13, 0x65,
		0xd1, 0x8e, 0xb6, 0x8c, 0x07, 0xfa, 0x7d, 0x05, 0x4e, 0xce, 0x4c, 0x29, 0x6c, 0x01, 0x48, 0xc0,
		0x36, 0x65, 0xe1, 0x2d, 0x4f, 0x71, 0x12, 0xe3, 0x5c, 0x84, 0xd9, 0x77, 0x91, 0xab, 0x83, 0xcf,
		0xe2, 0x29, 0x00, 0x7b, 0x00, 0x7b, 0x94, 0xb0, 0x47, 0x1f, 0x47, 0xe2, 0xb4, 0x28, 0xc9, 0xa7,
		0x94, 0x7b, 0xae, 0xe1, 0xa6, 0x6b, 0xba, 0xeb, 0xea, 0x2e, 0x89, 0x91, 0xfb, 0x6e, 0xea, 0xc6,
		0x5b, 0x73, 0x54, 0xcd, 0x1d, 0x56, 0x0d, 0xf7, 0xde, 0xc8, 0xcd, 0x77, 0xe0, 0xee, 0xb7, 0x51,
		0x9a, 0x07, 0x6e, 0x8e, 0xee, 0x58, 0x45, 0x01, 0x8d, 0x30, 0x81, 0x41, 0xb8, 0xc0, 0x60, 0x8d,
		0xea, 0x87, 0x0f, 0xfe, 0x7c, 0x7b, 0xc5, 0xde, 0x8c, 0x8c, 0xe5, 0x67, 0x79, 0x5b, 0x69, 0xc3,
		0xda, 0xd8, 0x8c, 0x26, 0x58, 0x33, 0x40, 0x96, 0xa2, 0x0b, 0x8b, 0x72, 0xdd, 0xb5, 0x35, 0x62,
		0x8b, 0xcd, 0x95, 0xae, 0x20, 0xe6, 0x89, 0x1e, 0x8f, 0x1b, 0x0f, 0x06, 0x06, 0x07, 0x0c, 0xce,
		0x2f, 0x83, 0x93, 0x2a, 0x92, 0x37, 0xaf, 0x78, 0x2f, 0x80, 0xc1, 0x01, 0x83, 0x9b, 0x17, 0xdd,
		0xc5, 0xd9, 0xab, 0x8b, 0x57, 0xcf, 0x5f, 0x9c, 0xbd, 0x02, 0xde, 0x06, 0xbc, 0x4d, 0x9b, 0xb7,
		0x55, 0x55, 0xca, 0xde, 0xa9, 0xd9, 0x43, 0x60, 0x69, 0xeb, 0xa5, 0xb8, 0xaf, 0x9c, 0x8c, 0x70,
		0x9e, 0x72, 0x3d, 0x46, 0xd6, 0x0c, 0x05, 0x3e, 0x06, 0x7c, 0x0c, 0xf8, 0x18, 0xf0, 0x31, 0xe0,
		0x63, 0xc0, 0xc7, 0xf6, 0x98, 0x8f, 0xbd, 0x57, 0xb1, 0x86, 0xc0, 0xc6, 0xd6, 0xc9, 0x70, 0x5f,
		0xb9, 0xd8, 0xb0, 0x18, 0x08, 0x6a, 0xb6, 0xdb, 0x39, 0x77, 0x0a, 0xe0, 0x66, 0xc0, 0xcd, 0xfc,
		0x72, 0x33, 0xd8, 0xed, 0x04, 0x6e, 0x06, 0xbb, 0x9d, 0xc0, 0xd2, 0x76, 0x61, 0xb7, 0xf3, 0xe3,
		0xc8, 0x58, 0xc2, 0x6e, 0xa7, 0x01, 0x73, 0xdb, 0x24, 0xd7, 0x7d, 0x65, 0x73, 0x69, 0x2c, 0x88,
		0x26, 0x8b, 0x6b, 0x86, 0x02, 0x7b, 0x03, 0xf6, 0x06, 0xec, 0x0d, 0xd8, 0x1b, 0xb0, 0x37, 0x60,
		0x6f, 0x10, 0x63, 0xab, 0xa8, 0xc5, 0x27, 0x15, 0xcb, 0x08, 0x5c, 0x6d, 0xbd, 0x14, 0xf7, 0x95,
		0x99, 0x15, 0xcc, 0x30, 0xca, 0x36, 0x73, 0x02, 0x60, 0x69, 0xc0, 0xd2, 0x80, 0xa5, 0x01, 0x4b,
		0x03, 0x96, 0x06, 0x2c, 0x0d, 0x58, 0x5a, 0xc5, 0x2f, 0xfe, 0x81, 0xa0, 0x9a, 0x1d, 0xa2, 0xf6,
		0xcf, 0xde, 0x47, 0xd1, 0x9a, 0x72, 0x95, 0x61, 0xc6, 0x53, 0x91, 0xea, 0xb2, 0xb5, 0x99, 0x53,
		0x00, 0x5f, 0x03, 0xbe, 0xe6, 0x97, 0xaf, 0x41, 0xbe, 0x1a, 0xf0, 0x35, 0xc8, 0x57, 0x03, 0x96,
		0xd6, 0x22, 0x96, 0x76, 0xc5, 0xfe, 0xa9, 0xad, 0xe2, 0x67, 0x15, 0xa3, 0x08, 0x3c, 0x4d, 0x42,
		0x94, 0x7b, 0xc9, 0xd4, 0xd2, 0x42, 0x18, 0x17, 0xeb, 0x58, 0x72, 0x0e, 0xe0, 0x6a, 0xc0, 0xd5,
		0x20, 0xb6, 0x06, 0x5c, 0x0d, 0x62, 0x6b, 0xc0, 0xda, 0x20, 0x7f, 0x6d, 0x32, 0x90, 0x76, 0xff,
		0x7c, 0xfb, 0xa9, 0x10, 0x50, 0xae, 0xc3, 0x06, 0x87, 0xdb, 0x28, 0xd8, 0xbd, 0x65, 0x74, 0xfa,
		0x05, 0x3b, 0x66, 0x46, 0x03, 0x8b, 0x03, 0x16, 0x07, 0x11, 0x37, 0x60, 0x71, 0x10, 0x71, 0x03,
		0xee, 0xb6, 0xb7, 0x11, 0xb7, 0x4f, 0x85, 0x80, 0x92, 0x1d, 0xe6, 0xd1, 0xb6, 0x69, 0x31, 0xee,
		0x2d, 0x2f, 0xd3, 0x2d, 0xda, 0x31, 0x35, 0x16, 0x38, 0x19, 0x70, 0x32, 0xe0, 0x64, 0xc0, 0xc9,
		0x80, 0x93, 0x01, 0x27, 0xdb, 0x67, 0x4e, 0x06, 0x65, 0x3b, 0x2c, 0x30, 0xb2, 0x7d, 0xae, 0xdb,
		0x51, 0x72, 0x2a, 0xd3, 0xc2, 0x1d, 0x4b, 0xce, 0x01, 0xfc, 0x0c, 0xf8, 0x99, 0x5f, 0x7e, 0x06,
		0x3b, 0x9f, 0xc0, 0xcf, 0x60, 0xe7, 0x13, 0x98, 0xda, 0x4e, 0xec, 0x7c, 0x42, 0xe9, 0x0e, 0x1b,
		0xec, 0x6d, 0xa3, 0x60, 0xf7, 0x96, 0xd1, 0xe9, 0x16, 0xef, 0x98, 0x1a, 0x0b, 0x0c, 0x0e, 0x18,
		0x1c, 0x30, 0x38, 0x60, 0x70, 0xc0, 0xe0, 0x80, 0xc1, 0x41, 0xac, 0xad, 0x66, 0x17, 0x50, 0xbe,
		0xc3, 0x34, 0xda, 0x36, 0x2d, 0xc6, 0xbd, 0x65, 0x67, 0x66, 0x05, 0x3c, 0x16, 0xce, 0x00, 0x4c,
		0x0d, 0x98, 0x1a, 0x30, 0x35, 0x60, 0x6a, 0xc0, 0xd4, 0x80, 0xa9, 0x01, 0x53, 0xab, 0x29, 0x06,
		0x94, 0xf0, 0xb0, 0x45, 0xd6, 0x1e, 0x73, 0x0d, 0x8f, 0x03, 0x83, 0x75, 0x14, 0xbc, 0x66, 0x2c,
		0x15, 0xb8, 0x44, 0x1c, 0x29, 0x4d, 0x09, 0xf2, 0xb8, 0x4f, 0x86, 0x38, 0xc3, 0xa2, 0x5f, 0x4e,
		0xc1, 0x31, 0x25, 0xa2, 0x1b, 0xd2, 0xb1, 0xe8, 0x8f, 0x97, 0xfd, 0x78, 0x9c, 0x97, 0x17, 0xc8,
		0x05, 0x8d, 0x65, 0xf4, 0x38, 0xc8, 0x05, 0x2f, 0x62, 0xc1, 0x9a, 0xe5, 0x72, 0xf5, 0xfe, 0xe6,
		0xc3, 0x64, 0x6a, 0xbf, 0x2d, 0xfb, 0xf1, 0xdb, 0xf5, 0xe4, 0xfc, 0x07, 0x7a, 0x92, 0x5a, 0x23,
		0xa5, 0x40, 0xc8, 0xf0, 0x8c, 0xf1, 0xf2, 0xae, 0x8e, 0xde, 0x20, 0x73, 0x39, 0x0e, 0x2b, 0xcd,
		0x5d, 0x55, 0x38, 0xab, 0x1a, 0x57, 0x55, 0xc5, 0x10, 0x6d, 0x6e, 0xaa, 0x0d, 0x10, 0xca, 0x5c,
		0xd4, 0x6c, 0xb5, 0x7c, 0xc4, 0x2c, 0xc1, 0x22, 0xe5, 0xf7, 0xa5, 0xd1, 0xdf, 0x70, 0xac, 0x34,
		0x3f, 0x9d, 0xcc, 0x49, 0x42, 0x98, 0xa0, 0xe2, 0x9e, 0x13, 0xa9, 0xc9, 0x69, 0xd4, 0x48, 0x86,
		0x6a, 0x04, 0x57, 0xcd, 0xa9, 0xdf, 0xe0, 0x9c, 0xe8, 0xd4, 0xef, 0x69, 0x96, 0x5a, 0x58, 0xa9,
		0xb7, 0x63, 0x21, 0x6b, 0x98, 0x74, 0x0d, 0x53, 0xae, 0xe1, 0x37, 0x48, 0x1a, 0x9c, 0x9b, 0xcd,
		0x10, 0x60, 0xdb, 0x11, 0xd4, 0x35, 0xd0, 0x76, 0x7d, 0x41, 0x15, 0xf9, 0xd8, 0x76, 0x1a, 0x0f,
		0xcc, 0xcc, 0xed, 0x1a, 0xd3, 0x70, 0xa0, 0xa0, 0xc3, 0xe5, 0x9c, 0x94, 0x92, 0xa8, 0xac, 0xd7,
		0x8a, 0x43, 0xfe, 0xa2, 0xb9, 0x78, 0x2d, 0x04, 0x5f, 0x3b, 0xe1, 0xa5, 0x4b, 0xf7, 0x7e, 0x40,
		0x4a, 0xc9, 0x6e, 0x70, 0x02, 0x4a, 0x0f, 0x66, 0xea, 0x48, 0x35, 0x57, 0x24, 0xf8, 0xc4, 0x13,
		0xc2, 0x49, 0xf2, 0xa6, 0xbc, 0x6b, 0x56, 0x0c, 0x06, 0x4a, 0x0f, 0x2b, 0xc9, 0x1d, 0x74, 0x38,
		0xc3, 0x1a, 0x3d, 0x56, 0x27, 0x08, 0xcb, 0x95, 0x6d, 0x71, 0x62, 0x67, 0xbf, 0x99, 0x7b, 0xea,
		0x4d, 0x4f, 0x2b, 0xff, 0x94, 0x4b, 0x9e, 0x4d, 0xf6, 0x99, 0x66, 0x9f, 0x64, 0x72, 0xbf, 0x53,
		0xf7, 0x3a, 0x01, 0xeb, 0x3c, 0x2c, 0x89, 0xd7, 0x22, 0xb0, 0x2c, 0xc2, 0xfa, 0xe8, 0xc8, 0xb9,
		0x27, 0x1e, 0x19, 0x98, 0xb9, 0xaf, 0xc7, 0xbc, 0xe4, 0x6c, 0xee, 0x0f, 0x6b, 0x78, 0xc8, 0x7a,
		0xde, 0xb1, 0x09, 0x02, 0xa5, 0x79, 0x85, 0x34, 0x9e, 0x6d, 0xe4, 0x0d, 0xeb, 0x75, 0xe1, 0x1d,
		0x5d, 0xbe, 0x7c, 0x27, 0x22, 0x5d, 0xfd, 0x2c, 0x0b, 0xd2, 0x5f, 0xf5, 0x2c, 0xcb, 0xc5, 0x2f,
		0x4d, 0x0f, 0x65, 0x68, 0xa1, 0x1c, 0x1d, 0x94, 0xb5, 0x50, 0xca, 0xf4, 0x4f, 0xd9, 0xfc, 0x48,
		0xd3, 0x3d, 0x35, 0xd4, 0x5e, 0x35, 0x9d, 0xe3, 0x03, 0x70, 0x32, 0xa4, 0xac, 0x5a, 0x24, 0x45,
		0x2e, 0xef, 0x0b, 0xcc, 0x8c, 0x02, 0x9f, 0x00, 0x7c, 0x02, 0x0d, 0x9f, 0x80, 0xb0, 0x62, 0x48,
		0x78, 0x6d, 0x76, 0x14, 0x7c, 0x82, 0x0b, 0x89, 0x63, 0xdf, 0xb3, 0x62, 0x28, 0x3f, 0x8d, 0x37,
		0xe9, 0xb5, 0xe0, 0x94, 0xf5, 0xd4, 0x42, 0x6c, 0xa7, 0xe5, 0x33, 0x14, 0x99, 0x0a, 0x1d, 0x3e,
		0x2b, 0x87, 0x24, 0xe9, 0x1d, 0x53, 0x19, 0x74, 0x5e, 0xf9, 0xde, 0x24, 0x17, 0xe5, 0x1d, 0xda,
		0xdd, 0x66, 0x48, 0xaf, 0x2a, 0x4d, 0x52, 0x78, 0xe8, 0xea, 0xe6, 0x17, 0xcc, 0xe3, 0xda, 0x21,
		0xa3, 0x5b, 0xbf, 0x44, 0xe7, 0x0a, 0xa3, 0x8a, 0xac, 0x9c, 0xeb, 0x56, 0xc4, 0x91, 0x74, 0x9c,
		0x36, 0xda, 0x0d, 0xbb, 0x04, 0x8b, 0x82, 0x3b, 0xf5, 0xda, 0x68, 0x37, 0x1c, 0xd2, 0x5b, 0xcf,
		0x0e, 0xd9, 0xd4, 0xa3, 0x6d, 0x77, 0x77, 0xae, 0x7a, 0x76, 0xff, 0xce, 0xd6, 0xe1, 0x6e, 0xb9,
		0xec, 0xaf, 0x4b, 0x4b, 0x7d, 0x2d, 0x63, 0xa8, 0xf7, 0xda, 0x73, 0x9f, 0x16, 0x53, 0x2b, 0x75,
		0x6a, 0xcc, 0xd0, 0x9c, 0x29, 0x54, 0x42, 0x32, 0x4e, 0x62, 0x2c, 0x48, 0xe2, 0x59, 0x51, 0x72,
		0x55, 0xed, 0xb4, 0xaf, 0x25, 0x53, 0xcf, 0xbe, 0x3b, 0xe1, 0x9b, 0x35, 0x6e, 0x4d, 0x9f, 0xf6,
		0xfa, 0x84, 0x87, 0x03, 0x7c, 0x4f, 0x78, 0x48, 0xbb, 0xf2, 0xc4, 0x7e, 0x7e, 0x20, 0x70, 0xfb,
		0x47, 0xca, 0xed, 0x35, 0x62, 0xf8, 0xe3, 0x50, 0x79, 0x15, 0x52, 0x09, 0x15, 0x63, 0xf9, 0x12,
		0xaf, 0xda, 0x07, 0x9f, 0xc7, 0x21, 0xa6, 0xee, 0xe5, 0x7c, 0x08, 0x67, 0xe6, 0xbb, 0xf2, 0x97,
		0x2a, 0xa4, 0x64, 0x24, 0x03, 0xa9, 0x78, 0xa5, 0x7a, 0xdc, 0xd2, 0x4a, 0xfc, 0x52, 0x2d, 0x8e,
		0xb9, 0x2f, 0x1b, 0x10, 0xd7, 0x02, 0xc7, 0xdf, 0x6f, 0xaa, 0x7b, 0x07, 0x32, 0x23, 0x23, 0x25,
		0xe0, 0x32, 0xc0, 0x65, 0x76, 0x9c, 0xcb, 0xd0, 0x6e, 0x48, 0x59, 0x42, 0x7e, 0xca, 0x93, 0x98,
		0xf1, 0x08, 0x60, 0x2f, 0x10, 0x99, 0xd4, 0x63, 0x3a, 0x52, 0xd5, 0x84, 0x46, 0x0a, 0x24, 0x11,
		0xd8, 0x52, 0xcc, 0x98, 0x55, 0x80, 0x3c, 0x9d, 0x0c, 0xd9, 0x49, 0x7a, 0xa7, 0x22, 0xce, 0x98,
		0xe6, 0x70, 0xea, 0xe7, 0x6e, 0x2a, 0x64, 0xc0, 0x6a, 0x65, 0xbe, 0x8e, 0x45, 0x72, 0x76, 0x7a,
		0xf1, 0xe2, 0xe2, 0xe5, 0xf9, 0xf3, 0x8b, 0x17, 0xbb, 0x23, 0x1b, 0x3f, 0xe8, 0x0d, 0x71, 0x52,
		0x88, 0x93, 0x3e, 0xda, 0x38, 0xe9, 0x95, 0x04, 0x61, 0xd8, 0x6b, 0xa7, 0xa2, 0x16, 0x10, 0xf8,
		0x13, 0xe0, 0x4f, 0xec, 0xb8, 0x3f, 0x31, 0xc0, 0xb9, 0x08, 0xe3, 0x7e, 0xc3, 0xc7, 0x24, 0x5d,
		0x8a, 0xe9, 0x41, 0xe0, 0x55, 0x40, 0x4c, 0x74, 0x84, 0x0b, 0x58, 0x90, 0x10, 0xb3, 0x24, 0x14,
		0x74, 0x48, 0x54, 0xa2, 0xa1, 0x2f, 0xe5, 0xa2, 0xa1, 0x82, 0x70, 0x26, 0x8d, 0x6b, 0x41, 0x14,
		0x25, 0xbf, 0x2e, 0x1e, 0xc2, 0xf2, 0xe3, 0x6c, 0xf4, 0x71, 0x53, 0x7f, 0x5c, 0xce, 0x7c, 0x3c,
		0x89, 0xa2, 0xa3, 0x28, 0x4a, 0x7e, 0x7f, 0xfa, 0xc7, 0x93, 0xff, 0xfe, 0xfb, 0x35, 0x8a, 0x7e,
		0x8f, 0xa2, 0xb0, 0x33, 0x73, 0xc4, 0xd3, 0xa0, 0x85, 0x6c, 0xb1, 0x4d, 0x7c, 0xe1, 0x2f, 0x9c,
		0x8b, 0xb7, 0x32, 0x78, 0xb0, 0xd7, 0xa4, 0x61, 0x4a, 0x4a, 0xc0, 0x1c, 0x80, 0x39, 0xec, 0x3a,
		0x73, 0x48, 0xef, 0xb4, 0x36, 0x55, 0xe7, 0xc6, 0x01, 0x7f, 0x00, 0xfe, 0x00, 0x7b, 0xaa, 0x08,
		0xf6, 0x54, 0x61, 0x4f, 0x15, 0xf6, 0x54, 0x81, 0xc9, 0x00, 0x93, 0xf1, 0xcf, 0x64, 0x9a, 0xd7,
		0xb1, 0x24, 0xf9, 0xcb, 0x9a, 0x77, 0xfe, 0x80, 0xb5, 0xec, 0x21, 0x6b, 0xc9, 0xeb, 0xd7, 0x25,
		0x54, 0xc2, 0x1d, 0x7b, 0x6d, 0x61, 0xff, 0xc6, 0x43, 0xb0, 0xad, 0x9b, 0xe4, 0x03, 0x56, 0x15,
		0xac, 0xea, 0x8e, 0x5b, 0xd5, 0x34, 0x23, 0x5c, 0xf9, 0x55, 0xca, 0xe9, 0x41, 0x60, 0x63, 0x21,
		0x5f, 0x09, 0xde, 0xa4, 0x94, 0x18, 0x62, 0xfe, 0x26, 0xa5, 0xc2, 0xb8, 0x8b, 0xea, 0xfe, 0xd8,
		0x77, 0xa6, 0x78, 0xbd, 0x67, 0xf5, 0x4d, 0xf2, 0x21, 0x66, 0x42, 0x65, 0xdc, 0xf3, 0x8a, 0x73,
		0xa7, 0x22, 0xcc, 0x38, 0xc9, 0x89, 0xda, 0xd8, 0x17, 0xf3, 0xf1, 0xc6, 0x4a, 0x48, 0xdb, 0x7f,
		0x6d, 0xb4, 0x16, 0xc2, 0x25, 0x52, 0x28, 0x1e, 0xa8, 0xf3, 0xb2, 0xe9, 0xc2, 0x93, 0xab, 0xb5,
		0xf8, 0x9b, 0x16, 0xfa, 0x25, 0x7a, 0xee, 0xfe, 0x2d, 0xd7, 0x46, 0xa9, 0x2e, 0xd1, 0xc5, 0xfe,
		0xbc, 0x1b, 0xdb, 0x26, 0x66, 0xfe, 0x29, 0x23, 0x1c, 0x5e, 0x8e, 0x54, 0x90, 0x12, 0xb0, 0x74,
		0x60, 0xe9, 0x3b, 0xce, 0xd2, 0xb3, 0xfe, 0x7d, 0x1e, 0xe2, 0x24, 0xe1, 0x24, 0x57, 0xa0, 0xe9,
		0x33, 0xa3, 0x80, 0xa7, 0x43, 0x2c, 0x4c, 0x5d, 0x2f, 0x90, 0xf3, 0x04, 0xa0, 0x27, 0x5f, 0x4f,
		0xc2, 0x57, 0x38, 0xec, 0xbe, 0x0e, 0x3f, 0x74, 0x7e, 0x9d, 0x3d, 0x3c, 0xb9, 0x9c, 0xfd, 0xfd,
		0xe9, 0xff, 0x3c, 0xfd, 0x03, 0xf2, 0x7a, 0xd6, 0xdb, 0xba, 0xcf, 0xfd, 0xfb, 0xfc, 0xb5, 0xf4,
		0x74, 0xee, 0x2d, 0x25, 0x98, 0x16, 0x13, 0x70, 0x02, 0xe0, 0x04, 0x3b, 0xce, 0x09, 0xf2, 0x8c,
		0x90, 0x44, 0x9e, 0x0c, 0xd4, 0x87, 0x03, 0x0b, 0x00, 0x16, 0xd0, 0xc8, 0xb9, 0x87, 0x8b, 0x1e,
		0x91, 0xea, 0xba, 0xa1, 0xd0, 0x6d, 0xa3, 0xa5, 0xef, 0x0c, 0x9e, 0xc0, 0x3b, 0x83, 0xf3, 0x22,
		0x31, 0xef, 0x92, 0x01, 0x6f, 0x0f, 0xee, 0x32, 0x6f, 0x9c, 0x6d, 0x74, 0x7a, 0x5d, 0x5a, 0x87,
		0x43, 0x44, 0xbb, 0x7f, 0xd2, 0x5e, 0xff, 0x5a, 0xc2, 0x54, 0xec, 0x2f, 0x93, 0xdc, 0x28, 0x38,
		0xe0, 0x96, 0xc0, 0x2d, 0x77, 0x9d, 0x5b, 0x4e, 0x7a, 0x78, 0xc8, 0x13, 0x4c, 0xd9, 0xbe, 0x22,
		0x1b, 0x4a, 0x29, 0x03, 0xcb, 0x6c, 0x2f, 0xcb, 0xdc, 0x54, 0x9a, 0x79, 0x7c, 0x60, 0x42, 0xf3,
		0x38, 0x65, 0x82, 0xb2, 0x82, 0x8a, 0xfb, 0xfa, 0x4d, 0x33, 0xe5, 0x3e, 0x17, 0x4b, 0xce, 0x01,
		0x6d, 0x09, 0xd5, 0xe1, 0x71, 0xaf, 0xdb, 0x12, 0x2a, 0x24, 0x31, 0xa8, 0xbb, 0x52, 0x8b, 0x1a,
		0xab, 0xf8, 0x6a, 0xa5, 0x4e, 0x84, 0x55, 0x3b, 0xd2, 0x3a, 0x1e, 0xe8, 0xf7, 0x95, 0x4b, 0x39,
		0x33, 0xa5, 0x3a, 0xaf, 0x26, 0x8d, 0xe6, 0x14, 0xa9, 0x90, 0x3a, 0x25, 0xb2, 0x43, 0x8d, 0x4c,
		0x31, 0xc0, 0x1a, 0x55, 0xb2, 0x86, 0x09, 0xd6, 0xa8, 0x93, 0x1a, 0x56, 0xa8, 0x1f, 0xed, 0xb3,
		0x79, 0x2f, 0x65, 0xe1, 0x2d, 0x4f, 0x71, 0x62, 0xd0, 0xbd, 0x77, 0xf1, 0x14, 0x60, 0x27, 0xc1,
		0x4e, 0x2a, 0xe1, 0x29, 0xb4, 0xef, 0x35, 0x0a, 0x34, 0x9a, 0x06, 0x1c, 0xad, 0x85, 0xd4, 0xcc,
		0x43, 0x6b, 0x1a, 0x81, 0x48, 0xa3, 0x80, 0xa4, 0x83, 0xc0, 0x64, 0x1b, 0xa5, 0x09, 0xed, 0x7b,
		0x5d, 0x10, 0x2b, 0xf5, 0x78, 0xdd, 0x9f, 0x6f, 0xaf, 0xd8, 0x9b, 0x91, 0xb1, 0x84, 0x66, 0xbe,
		0xd6, 0xe2, 0xa0, 0x8b, 0x72, 0x6d, 0xcf, 0x1a, 0x39, 0x04, 0xdf, 0x00, 0x7c, 0x83, 0x1d, 0xf5,
		0x0d, 0x12, 0x9a, 0xc7, 0x98, 0x27, 0x7a, 0x5e, 0xc1, 0x78, 0x30, 0xf8, 0x03, 0xe0, 0x0f, 0xf8,
		0xf5, 0x07, 0xa4, 0x8a, 0x11, 0xcf, 0x2b, 0xde, 0x0b, 0xf0, 0x07, 0xc0, 0x1f, 0x98, 0x17, 0xdd,
		0xc5, 0xd9, 0xab, 0x8b, 0x57, 0xcf, 0x5f, 0x9c, 0xbd, 0x02, 0x2f, 0x00, 0xbc, 0x00, 0x6d, 0x2f,
		0xa0, 0xaa, 0x06, 0xfb, 0x4e, 0xcd, 0x1e, 0x02, 0xe7, 0x5f, 0x2f, 0x45, 0x60, 0xf8, 0xc0, 0xf0,
		0x81, 0xe1, 0x9b, 0x32, 0x7c, 0xc2, 0x79, 0xca, 0xf5, 0xf8, 0x7d, 0x33, 0x14, 0xd8, 0x3d, 0xb0,
		0x7b, 0x60, 0xf7, 0xc0, 0xee, 0x81, 0xdd, 0x03, 0xbb, 0xdf, 0x63, 0x76, 0xff, 0x5e, 0xc5, 0x1a,
		0x02, 0xb7, 0x5f, 0x27, 0x43, 0x60, 0xf6, 0xc0, 0xec, 0x81, 0xd9, 0x9b, 0x32, 0xfb, 0x61, 0x31,
		0x10, 0xd4, 0x2c, 0xaf, 0x67, 0xee, 0x14, 0xc0, 0xf4, 0x81, 0xe9, 0xfb, 0x65, 0xfa, 0x90, 0xd7,
		0x03, 0x4c, 0x1f, 0xf2, 0x7a, 0x80, 0xf3, 0xef, 0x42, 0x5e, 0xcf, 0xc7, 0x91, 0xb1, 0x84, 0xbc,
		0x1e, 0x03, 0x3f, 0x60, 0x93, 0x5c, 0xc1, 0x37, 0x00, 0xdf, 0x00, 0x7c, 0x03, 0x53, 0xdf, 0x20,
		0x8d, 0x05, 0xd1, 0xf4, 0x09, 0x9a, 0xa1, 0xe0, 0x0b, 0x80, 0x2f, 0x00, 0xbe, 0x00, 0xf8, 0x02,
		0xe0, 0x0b, 0x80, 0x2f, 0x00, 0xf1, 0xff, 0x8a, 0xa8, 0x7e, 0x52, 0xb1, 0x8c, 0xc0, 0xfc, 0xd7,
		0x4b, 0x11, 0x78, 0x3e, 0xf0, 0x7c, 0xe0, 0xf9, 0xa6, 0x3c, 0xbf, 0x60, 0x86, 0x3b, 0x00, 0x33,
		0x27, 0x00, 0xce, 0x0f, 0x9c, 0x1f, 0x38, 0x3f, 0x70, 0x7e, 0xe0, 0xfc, 0xc0, 0xf9, 0x81, 0xf3,
		0x57, 0x6c, 0xf5, 0x1f, 0x08, 0xf8, 0xdb, 0xa1, 0xfd, 0xff, 0x40, 0x84, 0x1f, 0x98, 0x3f, 0x30,
		0x7f, 0x8b, 0xcc, 0xbf, 0x6a, 0x94, 0x14, 0x66, 0x3c, 0x15, 0xa9, 0x2e, 0xf7, 0x9f, 0x39, 0x05,
		0xb0, 0x7f, 0x60, 0xff, 0x7e, 0xd9, 0x3f, 0xe4, 0xf9, 0x03, 0xfb, 0x87, 0x3c, 0x7f, 0xe0, 0xfc,
		0x2d, 0xe2, 0xfc, 0x57, 0xec, 0x9f, 0xda, 0x2a, 0x7e, 0x56, 0x31, 0x8a, 0xc0, 0xfa, 0x25, 0x44,
		0x09, 0xbc, 0x1f, 0x78, 0x3f, 0xf0, 0x7e, 0x23, 0xde, 0x9f, 0x16, 0xc2, 0xb8, 0x9c, 0xe7, 0x92,
		0x73, 0x00, 0xf3, 0x07, 0xe6, 0xef, 0x97, 0xf9, 0x43, 0xdc, 0x1f, 0x98, 0x3f, 0xc4, 0xfd, 0xc1,
		0x07, 0x68, 0x7f, 0xde, 0xff, 0xa7, 0x42, 0x40, 0x41, 0x4f, 0x1b, 0x1e, 0xc1, 0x46, 0xc1, 0x82,
		0x7f, 0x00, 0xfe, 0x01, 0xf8, 0x07, 0xc6, 0xfe, 0x81, 0x7e, 0x49, 0xcf, 0x99, 0xd1, 0xe0, 0x13,
		0x80, 0x4f, 0xe0, 0xd7, 0x27, 0x80, 0xdd, 0x00, 0xf0, 0x09, 0x60, 0x37, 0x00, 0x3c, 0x81, 0xb6,
		0x78, 0x02, 0x88, 0x76, 0x3f, 0x15, 0x02, 0x8a, 0x7a, 0x1a, 0xf2, 0xfe, 0x39, 0x31, 0x02, 0xcb,
		0x07, 0x96, 0x0f, 0x2c, 0xdf, 0x98, 0xe5, 0xeb, 0x96, 0xf5, 0x9c, 0x1a, 0x0b, 0x0c, 0x1f, 0x18,
		0x3e, 0x30, 0x7c, 0x60, 0xf8, 0xc0, 0xf0, 0x81, 0xe1, 0xef, 0x33, 0xc3, 0x87, 0xc2, 0x9e, 0x16,
		0xf8, 0x3d, 0x54, 0xf6, 0x04, 0x76, 0x0f, 0xec, 0xde, 0x16, 0xbb, 0x37, 0x2d, 0xed, 0xb9, 0xe4,
		0x1c, 0xc0, 0xf6, 0x81, 0xed, 0xfb, 0x65, 0xfb, 0x90, 0xe3, 0x03, 0x6c, 0x1f, 0x72, 0x7c, 0x80,
		0xf7, 0xef, 0x44, 0x8e, 0x0f, 0x14, 0xf7, 0xb4, 0xe1, 0x0b, 0x6c, 0x14, 0x2c, 0xf8, 0x07, 0xe0,
		0x1f, 0x80, 0x7f, 0x60, 0xec, 0x1f, 0xe8, 0x96, 0xf7, 0x9c, 0x1a, 0x0b, 0xfe, 0x00, 0xf8, 0x03,
		0xe0, 0x0f, 0x80, 0x3f, 0x00, 0xfe, 0x00, 0xf8, 0x03, 0xb0, 0x0f, 0x50, 0x73, 0x55, 0x28, 0xf0,
		0x69, 0xc4, 0xfe, 0xe7, 0xc4, 0x08, 0x5c, 0x1f, 0xb8, 0x3e, 0x70, 0x7d, 0x63, 0xae, 0x6f, 0x56,
		0xe2, 0x73, 0xe1, 0x0c, 0xc0, 0xfb, 0x81, 0xf7, 0x03, 0xef, 0x07, 0xde, 0x0f, 0xbc, 0x1f, 0x78,
		0x3f, 0xf0, 0xfe, 0x9a, 0xb0, 0x42, 0x91, 0x4f, 0x5b, 0xd4, 0x1f, 0xaa, 0x7c, 0x02, 0xfb, 0x07,
		0xf6, 0x2f, 0xc3, 0xfe, 0x0f, 0x0c, 0x50, 0x59, 0x07, 0x8d, 0x55, 0x75, 0x5b, 0x83, 0xef, 0x69,
		0xe9, 0xb2, 0x0d, 0x7e, 0xae, 0xa5, 0xbb, 0x76, 0xf9, 0xb9, 0x8e, 0xae, 0x3e, 0x58, 0xd2, 0xa5,
		0x8e, 0x91, 0x2e, 0xbd, 0x66, 0x2c, 0x15, 0xb8, 0xe4, 0x42, 0x92, 0x7a, 0x14, 0xf7, 0xc9, 0x10,
		0x67, 0x58, 0xf4, 0xcb, 0xe7, 0x3e, 0xa6, 0x44, 0x74, 0x43, 0x3a, 0x36, 0x0a, 0xc7, 0x93, 0x1f,
		0xc3, 0x72, 0x5a, 0xc8, 0xe4, 0x8b, 0xe3, 0xf2, 0x77, 0x9a, 0x0b, 0x1a, 0xcb, 0x4c, 0x55, 0x90,
		0x0b, 0x5e, 0xc4, 0x82, 0x35, 0xba, 0x75, 0xf5, 0xfe, 0xe6, 0xc3, 0xc4, 0xf4, 0x7c, 0x9b, 0xfc,
		0x78, 0x5d, 0x5e, 0x64, 0xf2, 0xfb, 0xb7, 0xeb, 0xc9, 0x45, 0x0e, 0xf4, 0xc4, 0xba, 0x46, 0x60,
		0x81, 0x90, 0x71, 0x86, 0xc6, 0x0b, 0xa2, 0x3a, 0x7a, 0x83, 0xf8, 0xe5, 0x1c, 0x6d, 0x69, 0x07,
		0x5b, 0xc5, 0xb1, 0x56, 0x73, 0xa8, 0x55, 0x17, 0xaa, 0xb6, 0x03, 0xad, 0xbd, 0x30, 0x95, 0x1d,
		0x66, 0x33, 0x10, 0xfe, 0x88, 0x59, 0x82, 0x45, 0xca, 0xef, 0x4b, 0xcf, 0x64, 0xc3, 0xb1, 0xd2,
		0x4e, 0xf4, 0x64, 0x4e, 0x12, 0xc2, 0x04, 0x15, 0xf7, 0x9c, 0x48, 0x4d, 0x4e, 0xa3, 0x46, 0x32,
		0xfe, 0x50, 0x70, 0xd5, 0x9c, 0xfa, 0x0d, 0xce, 0x89, 0x4e, 0xe1, 0xe8, 0x66, 0xa9, 0x85, 0x95,
		0x7a, 0xb7, 0xd0, 0xd2, 0xa9, 0xfb, 0x1b, 0x1a, 0xc6, 0x4e, 0x92, 0x15, 0xdf, 0x6c, 0x86, 0x00,
		0xdb, 0xd6, 0x50, 0xd7, 0x8b, 0xb0, 0x6b, 0x10, 0x55, 0xe4, 0xe3, 0xdf, 0x62, 0x1e, 0x02, 0x5f,
		0x02, 0xbe, 0xa4, 0x4c, 0x0c, 0x0e, 0x14, 0x10, 0xac, 0x94, 0x77, 0xf9, 0xa0, 0x15, 0x81, 0x59,
		0x71, 0xc8, 0x5f, 0x34, 0x17, 0xaf, 0x85, 0xe0, 0x6b, 0x27, 0x33, 0xf8, 0x48, 0xd9, 0xfb, 0x01,
		0x29, 0x05, 0xb7, 0x21, 0x4e, 0x15, 0x7c, 0xc4, 0x3f, 0xa7, 0x8e, 0x54, 0x8b, 0x96, 0x05, 0x9f,
		0x78, 0x42, 0x38, 0x49, 0xde, 0x94, 0x77, 0xcd, 0x8a, 0xc1, 0x40, 0xe9, 0x61, 0x15, 0x60, 0x5a,
		0x76, 0x61, 0x29, 0xd8, 0x4a, 0xa5, 0x85, 0x64, 0xc2, 0x63, 0x94, 0x16, 0x8e, 0x1d, 0x1e, 0xa3,
		0xb2, 0x50, 0x1e, 0x34, 0x15, 0xbb, 0xa3, 0x34, 0xd7, 0x92, 0x0e, 0x83, 0xbe, 0xa3, 0xb0, 0x46,
		0xbe, 0x9a, 0x5e, 0xc1, 0x72, 0xd1, 0x2d, 0x0a, 0x64, 0xf6, 0x9b, 0x39, 0x01, 0xc8, 0x28, 0xf9,
		0x26, 0xe5, 0x5e, 0x23, 0x2e, 0x25, 0x65, 0x96, 0x55, 0x62, 0x65, 0xe5, 0x55, 0x56, 0x5a, 0x65,
		0x65, 0x7d, 0x90, 0x9c, 0x8b, 0xce, 0xda, 0xb9, 0xd8, 0xa0, 0x84, 0xaa, 0xca, 0xb7, 0x44, 0x2a,
		0x4a, 0xaa, 0x36, 0xfb, 0xb8, 0x93, 0x87, 0x99, 0xba, 0xed, 0x80, 0xa7, 0x85, 0xa0, 0xac, 0xb7,
		0x70, 0xbf, 0xe3, 0x99, 0x1f, 0x1d, 0x30, 0xf7, 0xa8, 0x23, 0x6a, 0x3f, 0xf7, 0xf5, 0x2a, 0x8f,
		0x70, 0x9d, 0x07, 0x38, 0xb9, 0x94, 0x58, 0xf6, 0xc4, 0x1b, 0x94, 0x4a, 0xda, 0xa3, 0x93, 0x56,
		0xa2, 0x19, 0xe5, 0xe1, 0x22, 0x50, 0x5c, 0x90, 0xef, 0xe8, 0x72, 0xd3, 0x19, 0xc4, 0x29, 0x13,
		0x3c, 0x1d, 0x84, 0xd9, 0x00, 0x33, 0x52, 0xf7, 0xb7, 0x89, 0xd3, 0xc1, 0xea, 0xed, 0xf3, 0xa9,
		0x2d, 0xcb, 0xe5, 0x03, 0x57, 0xd9, 0xf8, 0xa5, 0x53, 0x23, 0xed, 0xb4, 0xcb, 0x38, 0xeb, 0xeb,
		0xa7, 0xcc, 0x04, 0x0f, 0xa4, 0x9c, 0x72, 0x33, 0x3c, 0x58, 0x36, 0xa5, 0x7a, 0x6c, 0x6a, 0xd5,
		0x54, 0x6f, 0x98, 0x72, 0xf9, 0x58, 0xcd, 0x8a, 0xf1, 0x72, 0xd1, 0x9b, 0xd3, 0x6d, 0x46, 0x6f,
		0xd6, 0x2a, 0xc6, 0x8e, 0x46, 0x6f, 0xd6, 0x29, 0x8e, 0x9d, 0xc0, 0xc2, 0x26, 0x85, 0x1a, 0x1f,
		0x98, 0x90, 0x3c, 0xe6, 0x34, 0x93, 0x0e, 0x90, 0xce, 0x19, 0xf3, 0xc9, 0xe0, 0x47, 0x90, 0x79,
		0x23, 0xa5, 0x6a, 0x36, 0x3d, 0xd5, 0x16, 0x64, 0xde, 0xc8, 0xa8, 0xa2, 0xa2, 0x87, 0xea, 0x3c,
		0xf3, 0x26, 0x17, 0x7c, 0x91, 0x48, 0x48, 0x01, 0xd9, 0x4b, 0x8f, 0xd9, 0x6d, 0x0d, 0xb5, 0x52,
		0x5c, 0x52, 0x6b, 0x1c, 0x6a, 0x58, 0x4b, 0xb0, 0x96, 0xf6, 0x74, 0x2d, 0x55, 0x7b, 0x6b, 0x71,
		0x58, 0xba, 0x10, 0x44, 0x23, 0x4d, 0x74, 0x76, 0xb8, 0xda, 0xea, 0x3a, 0x85, 0xd5, 0xb5, 0xef,
		0xab, 0xcb, 0x24, 0x3b, 0xec, 0xae, 0x4f, 0x98, 0xdf, 0x8c, 0x1b, 0x4e, 0x7f, 0x90, 0x24, 0xec,
		0xf2, 0x74, 0x18, 0xa6, 0x3c, 0xcc, 0xc9, 0xa0, 0xfb, 0xe4, 0xe8, 0xe8, 0x58, 0xdc, 0x67, 0xe4,
		0x10, 0xfd, 0xc6, 0xc5, 0x65, 0xbd, 0x18, 0x7e, 0x7b, 0xba, 0xe5, 0x8c, 0x9c, 0x4a, 0x30, 0xed,
		0xca, 0xc7, 0x91, 0x96, 0x9c, 0x97, 0x9c, 0xd2, 0x77, 0x1a, 0xcc, 0x7c, 0xa5, 0x5a, 0xdc, 0xf4,
		0x69, 0x8e, 0x4a, 0x27, 0x10, 0x53, 0x46, 0x38, 0xa2, 0x39, 0x4a, 0xd9, 0xe0, 0x1e, 0xfd, 0xc0,
		0x03, 0x9a, 0xa0, 0x6e, 0xca, 0x91, 0xe8, 0x13, 0xf4, 0x5b, 0xf3, 0x80, 0xa8, 0x09, 0xd5, 0x44,
		0x6c, 0xe4, 0x28, 0x1e, 0xe9, 0xce, 0x94, 0xa1, 0xc2, 0xcc, 0x2b, 0x8d, 0xba, 0xc3, 0xe1, 0x54,
		0x7f, 0x16, 0x74, 0xc8, 0x58, 0xcc, 0x5a, 0xb7, 0xf1, 0xf0, 0x48, 0xb3, 0x72, 0x15, 0x73, 0x77,
		0xd6, 0x46, 0x47, 0x1b, 0x59, 0x1f, 0x8f, 0x3e, 0x57, 0x84, 0xc2, 0x56, 0x7c, 0x7f, 0xac, 0xc3,
		0x20, 0x56, 0x84, 0x59, 0xbf, 0xd4, 0x77, 0xf0, 0x6d, 0xf4, 0xf9, 0xb6, 0xbe, 0xe2, 0xe7, 0xf2,
		0x82, 0x9f, 0x47, 0xf7, 0xb1, 0xf4, 0xdb, 0x3a, 0xfb, 0x27, 0xfe, 0x52, 0xdf, 0x84, 0x47, 0xfa,
		0x25, 0x54, 0xe8, 0xa5, 0x4a, 0x7e, 0x10, 0xb8, 0x32, 0x40, 0xb6, 0xac, 0xb9, 0x32, 0x6a, 0x39,
		0x45, 0x0b, 0x3c, 0x5f, 0xe1, 0x5d, 0x0b, 0xbd, 0x1c, 0x23, 0x3b, 0x41, 0xd9, 0x85, 0xb3, 0x55,
		0xaf, 0x8f, 0xa8, 0x67, 0x75, 0xeb, 0xf1, 0xcc, 0x59, 0xae, 0x49, 0x39, 0x89, 0x85, 0x17, 0x36,
		0x64, 0x78, 0xa7, 0x0d, 0xea, 0xeb, 0xca, 0xd8, 0x86, 0xac, 0xcd, 0x9e, 0xc4, 0x9a, 0xec, 0x0d,
		0xe6, 0xc0, 0xf2, 0x13, 0xd4, 0x26, 0xd5, 0xe0, 0x09, 0xb4, 0x46, 0x76, 0x76, 0x40, 0x5b, 0x75,
		0x25, 0xa3, 0x26, 0x91, 0x8e, 0xf7, 0xcc, 0x24, 0xb3, 0x2d, 0x8d, 0x26, 0xe3, 0xa8, 0x64, 0x15,
		0x48, 0x22, 0x4a, 0x2a, 0x97, 0x7e, 0x34, 0x3e, 0x5a, 0x3a, 0x0d, 0x69, 0x32, 0xc2, 0x20, 0x1d,
		0x69, 0x7c, 0x12, 0xa9, 0xb4, 0x24, 0x59, 0x09, 0xd9, 0xc8, 0x75, 0x37, 0xe3, 0xc9, 0x7a, 0x99,
		0xef, 0xfa, 0x8c, 0x38, 0xf0, 0x92, 0xeb, 0x66, 0x92, 0x12, 0x24, 0x29, 0x4f, 0xb5, 0xa4, 0x20,
		0x29, 0x81, 0x49, 0x67, 0x05, 0x2d, 0x49, 0x95, 0x98, 0x24, 0x90, 0x6c, 0x4e, 0x2a, 0x98, 0x3a,
		0xd6, 0x30, 0x8f, 0xe0, 0x0c, 0xf2, 0x08, 0x0c, 0x35, 0x75, 0x63, 0x1e, 0xc1, 0x24, 0x0b, 0x4d,
		0x3a, 0x75, 0x40, 0x26, 0x71, 0x0d, 0xb5, 0xe5, 0x5d, 0x0f, 0xc8, 0x16, 0xd0, 0x31, 0x1c, 0x1a,
		0xef, 0x6f, 0x8c, 0x5f, 0x93, 0x50, 0x7c, 0x83, 0x43, 0xa2, 0xdf, 0x49, 0xf0, 0x79, 0x8c, 0xa0,
		0xdd, 0xcb, 0xe9, 0xac, 0xb6, 0xa9, 0xdf, 0xca, 0x5f, 0x2a, 0x44, 0x34, 0x7a, 0xee, 0x47, 0x48,
		0x11, 0x5a, 0x68, 0xf2, 0x36, 0x1a, 0x08, 0x49, 0x2b, 0x37, 0x49, 0x4a, 0x34, 0x31, 0x6d, 0x9c,
		0xde, 0x4a, 0x18, 0xb5, 0xea, 0x28, 0x48, 0x8b, 0x6b, 0xbb, 0x39, 0xe3, 0xf4, 0x56, 0xde, 0x90,
		0x95, 0x07, 0x43, 0xc2, 0xdb, 0xbe, 0x27, 0xbc, 0xe1, 0x58, 0xd0, 0x1f, 0xa4, 0x8e, 0xe4, 0xab,
		0xc7, 0xb4, 0x67, 0x46, 0x4b, 0x0a, 0x62, 0x76, 0x23, 0x2f, 0xf8, 0x42, 0x44, 0xc1, 0x59, 0xb5,
		0x13, 0x54, 0x9f, 0x0d, 0x7d, 0xb9, 0x7a, 0x53, 0xed, 0x05, 0x11, 0x24, 0xfa, 0x58, 0x20, 0x9a,
		0xa3, 0x22, 0x27, 0xe3, 0xfd, 0xa2, 0x88, 0x25, 0x24, 0x17, 0x94, 0x55, 0x68, 0x8c, 0x70, 0x92,
		0x70, 0x92, 0xe7, 0x47, 0x11, 0x8b, 0xd8, 0xeb, 0xfa, 0xe7, 0xb0, 0x8b, 0x87, 0x74, 0x70, 0x1f,
		0xe6, 0x19, 0x89, 0x69, 0x97, 0xc6, 0x68, 0x98, 0x26, 0xc5, 0x80, 0xe4, 0xe8, 0xe3, 0x3f, 0xd7,
		0x37, 0x08, 0x17, 0xbd, 0x72, 0x16, 0x10, 0x65, 0x59, 0x21, 0x22, 0x96, 0x61, 0x8e, 0x87, 0x44,
		0x10, 0x9e, 0xa3, 0x3b, 0x2a, 0xfa, 0x08, 0xa3, 0x01, 0xc1, 0xdd, 0xca, 0xa1, 0x4e, 0xd0, 0x6f,
		0x53, 0x57, 0x0a, 0x9b, 0x2b, 0xfd, 0x76, 0x04, 0x09, 0x13, 0x10, 0xc3, 0x57, 0x8b, 0xe1, 0x7f,
		0xf9, 0xfc, 0x56, 0x6d, 0x9a, 0xae, 0x4a, 0xe5, 0x6c, 0xf8, 0x8d, 0xc2, 0x3c, 0x7d, 0x2a, 0x44,
		0x3d, 0x4e, 0x33, 0x00, 0x9f, 0xd6, 0xe3, 0x15, 0x65, 0xac, 0x5e, 0xc3, 0x4b, 0x4b, 0xdf, 0x4d,
		0xf4, 0xde, 0x4c, 0xff, 0x4d, 0xd7, 0x81, 0xb5, 0xf5, 0x60, 0x6d, 0x5d, 0x18, 0xaf, 0x0f, 0xbd,
		0x10, 0xab, 0x62, 0xe8, 0x58, 0xda, 0x88, 0x2d, 0xf2, 0x20, 0x25, 0x6b, 0xb6, 0x76, 0x9b, 0x44,
		0xbb, 0x3a, 0xd3, 0x9c, 0x99, 0xbb, 0x59, 0x66, 0xdf, 0x46, 0x29, 0x10, 0x8d, 0xa9, 0x22, 0x09,
		0x9a, 0xb2, 0x38, 0x95, 0x4d, 0xbb, 0xea, 0x22, 0x96, 0x36, 0x47, 0x93, 0x9f, 0x34, 0x17, 0x39,
		0xa2, 0xb5, 0xb1, 0x2c, 0xcf, 0x32, 0x1a, 0x3f, 0x35, 0x2a, 0x62, 0x8d, 0xa1, 0x3a, 0x2c, 0x07,
		0xd6, 0x2b, 0xba, 0x34, 0xa1, 0xbc, 0x32, 0xb3, 0x24, 0x51, 0xb7, 0x94, 0xa2, 0x4f, 0xf3, 0x88,
		0x4d, 0xb2, 0x38, 0x6a, 0x3b, 0x99, 0x65, 0x3c, 0xcd, 0x38, 0xc5, 0x82, 0x34, 0x77, 0x57, 0x1e,
		0x50, 0x7a, 0x76, 0xda, 0xb9, 0x31, 0x6a, 0xf6, 0xd2, 0x1a, 0x9e, 0xd8, 0xc0, 0x15, 0x3b, 0xf8,
		0x62, 0x0b, 0x67, 0xac, 0xe3, 0x8d, 0x75, 0xdc, 0xb1, 0x86, 0x3f, 0x7a, 0x38, 0x64, 0xb0, 0x95,
		0x65, 0x84, 0x4b, 0x73, 0xa4, 0xdb, 0x7c, 0x82, 0x67, 0x69, 0xb8, 0xe9, 0xec, 0x2e, 0x41, 0xac,
		0x8c, 0x93, 0x9c, 0xb0, 0x98, 0xa0, 0xb4, 0x5b, 0xe1, 0x40, 0xcd, 0x8e, 0x29, 0x4b, 0x68, 0x8c,
		0x05, 0xc9, 0x6b, 0x82, 0x5e, 0x22, 0x50, 0x8d, 0x01, 0x25, 0x50, 0x64, 0x55, 0x45, 0x0a, 0x4e,
		0x12, 0x84, 0x87, 0x29, 0xeb, 0x21, 0x3c, 0x18, 0xd4, 0x7f, 0x1d, 0x23, 0x57, 0x8e, 0x87, 0x35,
		0x7c, 0x55, 0xa3, 0xfb, 0xf8, 0x07, 0xa9, 0x79, 0x7d, 0xf5, 0xfd, 0x34, 0xb9, 0xaf, 0x95, 0xf6,
		0xc8, 0xf4, 0xb9, 0xd4, 0x92, 0x69, 0x9c, 0x01, 0x8c, 0x4d, 0xa0, 0xb1, 0x0b, 0x38, 0xb6, 0x81,
		0xc7, 0x19, 0x00, 0x39, 0x03, 0x22, 0xeb, 0x80, 0x64, 0x06, 0x4c, 0x86, 0x00, 0xa5, 0x1e, 0xc8,
		0x96, 0xd6, 0x33, 0x32, 0xcc, 0xc4, 0xbd, 0x0d, 0x55, 0x1b, 0x59, 0xfb, 0xf3, 0x83, 0xed, 0x88,
		0xd7, 0x40, 0xb4, 0xc1, 0x00, 0xe7, 0x22, 0x2c, 0xb2, 0xa4, 0x7a, 0xf5, 0xdd, 0x1a, 0x88, 0xcf,
		0x9c, 0xd5, 0x32, 0x94, 0xd3, 0x21, 0xc9, 0x05, 0x1e, 0x66, 0x35, 0x8e, 0x13, 0x54, 0x5e, 0xab,
		0x64, 0x7b, 0x25, 0xeb, 0xab, 0xb1, 0xb6, 0xf9, 0x43, 0x85, 0xd4, 0x47, 0x08, 0x5d, 0x75, 0x6b,
		0x4c, 0xae, 0x71, 0xfd, 0x0e, 0xe7, 0x88, 0x91, 0x1f, 0x84, 0x37, 0x63, 0x48, 0x72, 0x88, 0x68,
		0x45, 0x2b, 0xcb, 0x31, 0x82, 0x0e, 0x09, 0xba, 0xeb, 0x13, 0x36, 0x65, 0x09, 0xee, 0x70, 0x1e,
		0x31, 0xca, 0x72, 0xc2, 0x05, 0x49, 0x10, 0x65, 0x22, 0x1d, 0x91, 0x56, 0x80, 0x73, 0x80, 0x73,
		0x80, 0xf3, 0x96, 0xc0, 0x79, 0x09, 0x36, 0x21, 0x66, 0x49, 0x58, 0xae, 0x61, 0x9b, 0xb0, 0xfe,
		0xd2, 0xc2, 0xb9, 0x3e, 0x63, 0x21, 0x08, 0x67, 0x46, 0xe9, 0x85, 0x33, 0x27, 0x8c, 0xa2, 0xe4,
		0xd7, 0xc5, 0x43, 0x58, 0x7e, 0x9c, 0x8d, 0x3e, 0x6e, 0xea, 0x8f, 0xcb, 0x99, 0x8f, 0x27, 0x51,
		0x74, 0x14, 0x45, 0xc9, 0xef, 0x4f, 0xff, 0x78, 0xf2, 0xdf, 0x7f, 0xbf, 0x46, 0xd1, 0xef, 0x51,
		0x14, 0x76, 0x66, 0x8e, 0x78, 0x6a, 0xae, 0x4b, 0x9d, 0x1d, 0xb4, 0x7c, 0x8c, 0xfc, 0x14, 0x61,
		0x3f, 0xcd, 0xec, 0x59, 0xbd, 0xf1, 0x19, 0xed, 0x5a, 0xbc, 0xea, 0xa5, 0x80, 0xdf, 0x4a, 0xab,
		0x55, 0x9f, 0x1e, 0x61, 0x21, 0x38, 0xbd, 0x2d, 0x8d, 0x9b, 0x25, 0xfb, 0x73, 0x0a, 0xf6, 0x07,
		0xec, 0xcf, 0x7e, 0xd9, 0x1f, 0xd3, 0xb8, 0xc7, 0x02, 0x8c, 0x84, 0x69, 0xb5, 0x60, 0x73, 0x7b,
		0x2a, 0x32, 0x0f, 0x2b, 0xe3, 0x2b, 0x58, 0x9a, 0xd0, 0x39, 0x98, 0xf9, 0x54, 0x9f, 0xbd, 0x0a,
		0xc4, 0x96, 0x97, 0x44, 0xfd, 0x34, 0xab, 0x37, 0x23, 0xaf, 0x2a, 0x7a, 0x4c, 0x7e, 0x66, 0x24,
		0x2e, 0x19, 0x70, 0x15, 0xea, 0xe8, 0x16, 0x5c, 0xf4, 0x09, 0x47, 0x31, 0xce, 0x49, 0x8e, 0xee,
		0xe8, 0x60, 0x80, 0x6e, 0x09, 0xc2, 0x49, 0x52, 0x1d, 0xc0, 0xd3, 0xa2, 0xd7, 0x8f, 0x58, 0x13,
		0x76, 0xcd, 0x51, 0x97, 0xa7, 0x43, 0x94, 0x56, 0x03, 0x9a, 0xb8, 0xec, 0x21, 0x22, 0x47, 0xbd,
		0xa3, 0xc3, 0xea, 0x6a, 0x9c, 0xc4, 0x05, 0xcf, 0xe9, 0x0f, 0x12, 0xb1, 0xc9, 0x85, 0x6d, 0x3d,
		0x65, 0x03, 0x71, 0xcf, 0x2c, 0x9d, 0xce, 0x16, 0xd4, 0xb9, 0x80, 0x3c, 0x37, 0xd0, 0xe7, 0x0a,
		0x02, 0x9d, 0x43, 0xa1, 0x73, 0x48, 0x74, 0x06, 0x8d, 0x76, 0x20, 0xd2, 0x12, 0x54, 0x8e, 0x9f,
		0x52, 0xa1, 0x6c, 0xb4, 0x77, 0x18, 0x5e, 0x84, 0xe3, 0x01, 0xcd, 0x85, 0x7d, 0x5d, 0x5d, 0xc0,
		0xe4, 0xea, 0x32, 0x96, 0xd5, 0xa9, 0x81, 0xac, 0x0b, 0xcb, 0xa7, 0xb5, 0x0d, 0x5d, 0x2e, 0x21,
		0xcc, 0x2d, 0x94, 0xb9, 0x86, 0x34, 0x6f, 0xd0, 0xe6, 0x0d, 0xe2, 0x9c, 0x43, 0x9d, 0x5d, 0xc8,
		0xb3, 0x0c, 0x7d, 0xce, 0xe0, 0xca, 0x13, 0x6c, 0x79, 0x85, 0xaf, 0x55, 0xfc, 0xf2, 0xed, 0x78,
		0xd7, 0xbd, 0xe4, 0x7c, 0xc3, 0x62, 0x20, 0x68, 0x36, 0x20, 0xc8, 0x3a, 0xe3, 0x73, 0xe4, 0xe4,
		0x7a, 0x87, 0x55, 0x1f, 0xf0, 0xea, 0x07, 0x66, 0x7d, 0xc1, 0xad, 0x77, 0xd8, 0xf5, 0x0e, 0xbf,
		0xde, 0x60, 0xd8, 0x0d, 0x1c, 0x3b, 0x82, 0x65, 0xe7, 0xf0, 0x6c, 0x3f, 0x66, 0xe8, 0x3b, 0xa6,
		0xa8, 0x0a, 0xd6, 0xaf, 0x19, 0x22, 0x4c, 0xf0, 0x7b, 0x44, 0x19, 0xc2, 0x93, 0xc8, 0x63, 0x69,
		0x2e, 0xaa, 0x90, 0xc0, 0xc7, 0x26, 0xbb, 0xaa, 0x84, 0xf2, 0x26, 0x49, 0x0b, 0x55, 0x19, 0x58,
		0x74, 0x59, 0xca, 0x55, 0x35, 0x2e, 0x62, 0xd3, 0x59, 0xc9, 0x4d, 0x0e, 0x16, 0x65, 0xbd, 0xe9,
		0xf3, 0x8f, 0x4e, 0x55, 0xed, 0xe0, 0x61, 0x31, 0x4e, 0x00, 0xab, 0xcf, 0x7d, 0x7f, 0xe4, 0x5a,
		0x0a, 0x6e, 0x4d, 0x85, 0x37, 0x93, 0xe1, 0xd3, 0x74, 0xf8, 0x35, 0x21, 0xbe, 0x4d, 0xc9, 0xd6,
		0x4c, 0xca, 0xd6, 0x4c, 0x8b, 0x77, 0x13, 0xe3, 0xd6, 0xd4, 0x38, 0x36, 0x39, 0xde, 0x4c, 0xcf,
		0xf8, 0x42, 0x69, 0x21, 0x7a, 0x29, 0x65, 0xbd, 0x50, 0xfe, 0x7d, 0x5f, 0xeb, 0x4b, 0x7c, 0xc9,
		0x3d, 0x78, 0x52, 0xca, 0x39, 0x33, 0x55, 0xde, 0xd0, 0x28, 0xdd, 0x63, 0x74, 0x53, 0x68, 0x7c,
		0x53, 0x47, 0xbe, 0xee, 0xca, 0x4e, 0x1a, 0x47, 0xeb, 0xcc, 0xc7, 0x36, 0xcc, 0xc8, 0x76, 0xcc,
		0xc9, 0xb6, 0xcc, 0xca, 0xd6, 0xcd, 0xcb, 0xd6, 0xcd, 0xcc, 0xd6, 0xcc, 0x8d, 0x1f, 0xb3, 0xe3,
		0xc9, 0xfc, 0x8c, 0xa5, 0x68, 0x2d, 0xad, 0x46, 0x79, 0x9d, 0xaa, 0x96, 0x0d, 0xb0, 0xce, 0xd9,
		0x5f, 0x78, 0xbc, 0xa6, 0xb5, 0x32, 0x06, 0xbb, 0xa3, 0xc5, 0xbb, 0x4d, 0xcf, 0x94, 0xca, 0x41,
		0x18, 0x5f, 0x4d, 0xb9, 0x9c, 0x84, 0xf9, 0x15, 0x2d, 0x94, 0xa3, 0x30, 0xbe, 0x09, 0xa5, 0x72,
		0x16, 0xed, 0xd5, 0x47, 0x47, 0x31, 0xaf, 0xb6, 0x6f, 0x95, 0x1c, 0xb4, 0x70, 0x2d, 0x07, 0x39,
		0x1d, 0x66, 0x03, 0x12, 0x3a, 0x8b, 0xbb, 0x4d, 0x0a, 0xf3, 0xcd, 0x5d, 0xc8, 0xf6, 0xc6, 0xd1,
		0xfc, 0xfb, 0x48, 0x34, 0xaf, 0x52, 0x67, 0x10, 0x27, 0xf5, 0x7b, 0x49, 0x22, 0x47, 0x18, 0xd5,
		0x37, 0x31, 0xde, 0x12, 0x41, 0x71, 0xca, 0x72, 0x9a, 0x8b, 0xd2, 0xa9, 0x49, 0x9b, 0x24, 0xf6,
		0x85, 0x50, 0x19, 0x66, 0xc9, 0x71, 0xca, 0x97, 0x79, 0x3f, 0x1a, 0x71, 0xba, 0xea, 0x96, 0xea,
		0x30, 0x5d, 0xc4, 0xe4, 0xe3, 0x74, 0xa3, 0xdf, 0x23, 0xe6, 0x26, 0x4e, 0x07, 0x3b, 0xe2, 0xbe,
		0x1c, 0x23, 0xd8, 0x11, 0x6f, 0x9d, 0xe3, 0xb2, 0xa7, 0x3b, 0xe2, 0x1e, 0xe3, 0x5c, 0xfe, 0xe3,
		0x5a, 0xed, 0x88, 0x63, 0x39, 0x8e, 0x5b, 0xc1, 0xce, 0x78, 0xeb, 0xe2, 0x4e, 0xb0, 0x33, 0xde,
		0x76, 0x2f, 0xc1, 0xd1, 0x4a, 0x71, 0x1e, 0x17, 0xf2, 0x1e, 0x07, 0xf2, 0x11, 0xf7, 0xd9, 0x7e,
		0x9c, 0x07, 0xbc, 0x46, 0x2d, 0xaf, 0x31, 0x23, 0x31, 0xc5, 0x03, 0x1f, 0x6e, 0xe3, 0xfc, 0x95,
		0xc0, 0xf1, 0x01, 0xc7, 0x07, 0x1c, 0x1f, 0x70, 0x7c, 0x5a, 0x0c, 0x5e, 0xbe, 0x41, 0x6c, 0x95,
		0xd3, 0x33, 0xfd, 0xc2, 0x59, 0x73, 0x0b, 0xfe, 0xb2, 0x81, 0xc1, 0xe7, 0x01, 0x9f, 0x07, 0x7c,
		0x1e, 0xf0, 0x79, 0xac, 0xac, 0x13, 0xc2, 0x8a, 0x21, 0xe1, 0xd8, 0xb0, 0x77, 0xa5, 0xb4, 0xc7,
		0x73, 0xe1, 0xf0, 0x1a, 0xef, 0x59, 0x31, 0x74, 0xbf, 0x24, 0x6f, 0xd2, 0xeb, 0xba, 0x39, 0xb5,
		0x97, 0xed, 0xd8, 0x93, 0x72, 0x8e, 0x6e, 0x07, 0x38, 0xfe, 0xde, 0x4f, 0x07, 0x3e, 0x52, 0xd5,
		0x82, 0xd3, 0xf2, 0x8a, 0x05, 0xe3, 0x04, 0xc7, 0xfd, 0xaa, 0xb1, 0xb0, 0x87, 0x6b, 0x9e, 0xd5,
		0x00, 0x97, 0xf6, 0xe9, 0x2d, 0xf5, 0x92, 0x82, 0x7b, 0x5e, 0xc1, 0x0d, 0x89, 0x09, 0xfd, 0xe1,
		0x38, 0xcb, 0xc1, 0x75, 0x76, 0xc0, 0x4d, 0x7a, 0xc5, 0x84, 0x1f, 0x5d, 0x9c, 0xa8, 0xa1, 0x9f,
		0xc4, 0x80, 0xb1, 0x42, 0xac, 0xec, 0xc1, 0x63, 0xf5, 0x72, 0x23, 0x75, 0xb8, 0x44, 0xe7, 0x1e,
		0xae, 0x36, 0xbd, 0xc2, 0x2e, 0xd1, 0x29, 0xe4, 0x1b, 0xec, 0x67, 0xe4, 0xe8, 0xa0, 0x1d, 0x67,
		0x79, 0xd8, 0xc1, 0x22, 0x48, 0x79, 0xc5, 0xc1, 0x27, 0x4d, 0xde, 0xac, 0xd5, 0x42, 0x9a, 0x3f,
		0xb1, 0xe5, 0x22, 0x80, 0xf7, 0x19, 0x99, 0x2e, 0xf3, 0x47, 0x59, 0x0f, 0x8d, 0x2e, 0x55, 0x17,
		0x1b, 0xb9, 0xeb, 0xd3, 0xb8, 0x3f, 0x29, 0xe2, 0x17, 0xb1, 0x94, 0xd3, 0x1e, 0x65, 0x58, 0x90,
		0x04, 0xaa, 0xf6, 0xf9, 0x72, 0xfd, 0xa0, 0x6a, 0xd2, 0x23, 0xab, 0x9a, 0x64, 0xb1, 0x04, 0x88,
		0x83, 0x0a, 0x80, 0x7a, 0x5d, 0xa2, 0x37, 0xba, 0x5b, 0x16, 0x52, 0x27, 0xcd, 0xba, 0x4a, 0x6f,
		0x5e, 0xac, 0x76, 0x7a, 0x20, 0x2f, 0x9c, 0xdf, 0x42, 0x4f, 0xe4, 0xf9, 0x7f, 0x8e, 0xf6, 0x61,
		0x4c, 0x7b, 0x26, 0x3b, 0xf4, 0x38, 0x5c, 0xed, 0x3c, 0x19, 0xf6, 0x58, 0x76, 0xc3, 0xa2, 0x3a,
		0xbb, 0xcb, 0xa2, 0x0e, 0xfc, 0x8c, 0x52, 0x6c, 0x33, 0xe2, 0xbf, 0x93, 0xb3, 0x44, 0x87, 0x32,
		0x3c, 0xd3, 0x73, 0x43, 0xa3, 0xd5, 0xd6, 0xec, 0x78, 0xb5, 0x26, 0x54, 0x27, 0xd0, 0x84, 0x6a,
		0xdf, 0x9b, 0x50, 0x69, 0xd0, 0x10, 0x75, 0xba, 0x61, 0x48, 0x2b, 0x74, 0xe8, 0x83, 0x19, 0x4d,
		0x30, 0x5b, 0x5e, 0x36, 0x8c, 0xbe, 0x61, 0x8f, 0x22, 0x9a, 0xfd, 0xb8, 0x08, 0x76, 0xa0, 0x89,
		0x3f, 0xcd, 0x7e, 0x3c, 0x7f, 0x84, 0x2d, 0xfc, 0x25, 0x80, 0x3f, 0x21, 0x5d, 0x5c, 0x0c, 0x44,
		0x28, 0xd3, 0x9c, 0x73, 0x91, 0xa3, 0x4d, 0x0d, 0x96, 0xee, 0xaf, 0x58, 0x0d, 0x51, 0x52, 0xc6,
		0xa0, 0x84, 0x35, 0xb9, 0xe9, 0xe9, 0x38, 0xb6, 0x3c, 0x67, 0x60, 0x79, 0x1e, 0x99, 0xe5, 0xd1,
		0xb7, 0x22, 0xb7, 0x69, 0x3a, 0x20, 0x98, 0xe9, 0x58, 0x90, 0x53, 0xab, 0x8f, 0x40, 0x7e, 0x0a,
		0x8e, 0xc3, 0x82, 0xe5, 0xa2, 0x89, 0x9b, 0x2b, 0x3c, 0x0c, 0xed, 0x86, 0x5d, 0x82, 0x45, 0xc1,
		0x89, 0xb2, 0x7d, 0x30, 0xe8, 0x70, 0x38, 0xaa, 0x15, 0x17, 0xae, 0x69, 0xdd, 0xec, 0x32, 0x0c,
		0x35, 0xad, 0xfd, 0x53, 0x12, 0x68, 0x53, 0xc3, 0xc3, 0x59, 0x11, 0xb5, 0xc6, 0x29, 0xe9, 0x78,
		0xb5, 0x4d, 0xd3, 0x21, 0x62, 0x65, 0xdb, 0x34, 0x19, 0x0c, 0xee, 0x08, 0x18, 0x05, 0x4f, 0x46,
		0x21, 0xaf, 0xb3, 0x20, 0x34, 0x6c, 0xc2, 0x4b, 0x8f, 0x2b, 0xab, 0xe9, 0xdc, 0xaf, 0xb8, 0xa4,
		0xaa, 0x51, 0xb0, 0x96, 0x60, 0x2d, 0xc1, 0x5a, 0x9a, 0xba, 0x66, 0xdd, 0x3e, 0x52, 0x7d, 0x35,
		0x35, 0xe3, 0x1c, 0xf7, 0x6b, 0x07, 0x87, 0xe5, 0xb1, 0xad, 0x27, 0xd5, 0x34, 0x75, 0xcd, 0x7e,
		0xd3, 0x46, 0x7d, 0xa6, 0x35, 0xcb, 0x6e, 0x42, 0xdb, 0x75, 0x68, 0xbb, 0x6e, 0x5b, 0xfd, 0xc7,
		0x03, 0x0d, 0xdb, 0x1a, 0xdb, 0x69, 0x67, 0x6c, 0x98, 0x69, 0x02, 0x7d, 0xc4, 0xdd, 0x2d, 0x20,
		0xeb, 0x0b, 0xc9, 0xda, 0x82, 0xd2, 0x5b, 0x58, 0x9a, 0x0b, 0x4c, 0x9f, 0xb7, 0xad, 0xd4, 0x13,
		0xd3, 0xb6, 0xbc, 0x86, 0xed, 0x78, 0x1f, 0x7c, 0x6c, 0x40, 0xd8, 0x69, 0xbb, 0x6b, 0xb3, 0xdd,
		0x2e, 0x40, 0x0d, 0x40, 0xcd, 0xde, 0x41, 0x8d, 0xad, 0x96, 0xb1, 0x36, 0x5a, 0xc5, 0x5a, 0x6b,
		0x11, 0xdb, 0x92, 0xd6, 0xb0, 0x9d, 0x16, 0xa3, 0xaf, 0xf1, 0xab, 0xb5, 0xb6, 0xda, 0x33, 0x18,
		0x36, 0x1c, 0x00, 0xd4, 0x05, 0xd4, 0xf5, 0x85, 0xba, 0xa6, 0xef, 0xbb, 0xdb, 0x6f, 0x94, 0xea,
		0xaa, 0x41, 0xaa, 0xa5, 0x96, 0xa1, 0x90, 0xdf, 0xbf, 0xfd, 0xc5, 0xeb, 0x6c, 0x11, 0x5b, 0x5f,
		0xcc, 0x66, 0x8b, 0xda, 0x70, 0x71, 0x8f, 0x9f, 0xc6, 0x66, 0x7e, 0xbf, 0xfd, 0x0e, 0xcb, 0x56,
		0x7b, 0xe3, 0x39, 0xed, 0x85, 0x67, 0xb9, 0x6e, 0x0f, 0x74, 0x1d, 0x86, 0xae, 0xc3, 0xee, 0xa1,
		0xc7, 0x0e, 0x04, 0x59, 0x82, 0x22, 0xeb, 0x30, 0xe2, 0x18, 0x4e, 0xbc, 0xc0, 0x8a, 0x25, 0xb7,
		0xc1, 0x1b, 0xcc, 0xb8, 0x84, 0x1b, 0xb7, 0xb0, 0xe3, 0x1a, 0x7e, 0xbc, 0xc1, 0x90, 0x37, 0x38,
		0x72, 0x0e, 0x4b, 0x76, 0xe1, 0xc9, 0x32, 0x4c, 0x39, 0x83, 0x2b, 0x7b, 0x31, 0x0b, 0x5f, 0x31,
		0x8d, 0x2d, 0x81, 0x97, 0x73, 0x10, 0xf3, 0x01, 0x66, 0x7e, 0x40, 0xcd, 0x17, 0xb8, 0x79, 0x07,
		0x39, 0xef, 0x60, 0xe7, 0x0d, 0xf4, 0xdc, 0x80, 0x9f, 0x23, 0x10, 0x74, 0x0e, 0x86, 0xe3, 0x0b,
		0x6c, 0xa1, 0x19, 0xe2, 0xf6, 0x9a, 0x20, 0x7a, 0x6a, 0x33, 0x08, 0xdd, 0x69, 0x77, 0x06, 0x58,
		0xb7, 0x06, 0xb0, 0x5b, 0x03, 0x5a, 0xef, 0x80, 0xeb, 0x16, 0x78, 0x1d, 0x03, 0xf0, 0x58, 0x5a,
		0xde, 0xda, 0x02, 0x6e, 0xad, 0x1d, 0xa0, 0xcf, 0x36, 0x80, 0xed, 0x69, 0xff, 0xf7, 0x00, 0x44,
		0x03, 0x79, 0x6b, 0xef, 0xe7, 0xaf, 0xad, 0xdf, 0x56, 0xdb, 0xf9, 0xf9, 0x69, 0xe3, 0xe7, 0x4a,
		0x13, 0x5e, 0x33, 0x96, 0x0a, 0xac, 0xf4, 0x12, 0x98, 0xd6, 0x75, 0xf2, 0xb8, 0x4f, 0x86, 0x38,
		0x1b, 0x03, 0x01, 0x11, 0xdd, 0xb0, 0x29, 0xc3, 0x73, 0x3c, 0xfe, 0xa4, 0xb7, 0x79, 0xf9, 0xdf,
		0x71, 0x9d, 0xbc, 0x5f, 0x7f, 0x1c, 0x8f, 0xdc, 0xeb, 0xe3, 0xf9, 0x6d, 0xcb, 0xe3, 0x99, 0x90,
		0xe1, 0x8a, 0xdf, 0x5c, 0xba, 0x83, 0xb9, 0xe0, 0x45, 0x2c, 0x9a, 0xb7, 0x7d, 0x82, 0xab, 0xf7,
		0x37, 0x1f, 0xbe, 0xd4, 0x4f, 0xf2, 0x6d, 0xfc, 0x49, 0x6f, 0xf3, 0xf2, 0xbf, 0xea, 0x0b, 0x92,
		0xd7, 0x1f, 0xdf, 0xfe, 0x26, 0x3f, 0xc5, 0x9f, 0x69, 0x36, 0xfa, 0x2c, 0x17, 0xe3, 0xe8, 0xe7,
		0x3d, 0xed, 0x8a, 0x61, 0x3b, 0xd2, 0xef, 0x56, 0xa9, 0x7d, 0x2b, 0xb3, 0x8b, 0x38, 0xad, 0x45,
		0xdd, 0x0d, 0x1e, 0x77, 0x9d, 0x4b, 0x5b, 0x1b, 0xdf, 0x6e, 0x74, 0xd2, 0xbd, 0x2e, 0x06, 0x6d,
		0x29, 0x17, 0x6a, 0x21, 0xff, 0xc2, 0x55, 0x7b, 0x54, 0xc7, 0x6d, 0x51, 0x61, 0x7b, 0xbc, 0xed,
		0x91, 0x06, 0xd8, 0x1e, 0xdf, 0x11, 0x18, 0xb6, 0xbe, 0x3d, 0xee, 0x21, 0xa4, 0xea, 0x2f, 0x84,
		0xea, 0x28, 0x64, 0x0a, 0x1b, 0xe5, 0xde, 0x43, 0x9e, 0xb0, 0x51, 0xfe, 0xc8, 0x7c, 0x1a, 0x67,
		0x21, 0x49, 0x6f, 0x21, 0x48, 0x97, 0x21, 0xc7, 0xed, 0x85, 0x18, 0xc1, 0x5f, 0xd9, 0xbe, 0xbf,
		0x32, 0xcf, 0xba, 0x1f, 0x93, 0xc7, 0xe2, 0xaa, 0xbb, 0x9d, 0xeb, 0x6e, 0x76, 0xe0, 0xb3, 0x80,
		0xcf, 0x02, 0x3e, 0x4b, 0x3b, 0x7d, 0x96, 0x47, 0xd7, 0xef, 0x17, 0xfc, 0x15, 0xf0, 0x57, 0xc0,
		0x5f, 0xd9, 0x33, 0x7f, 0xc5, 0x6d, 0x17, 0x49, 0x97, 0xdd, 0x23, 0xdd, 0x76, 0x8d, 0xf4, 0xd3,
		0x2d, 0xd2, 0x5f, 0x97, 0x48, 0x9f, 0xdd, 0x21, 0xbd, 0x75, 0x85, 0xf4, 0xd0, 0x0d, 0xd2, 0x59,
		0x9f, 0x58, 0xe7, 0xdd, 0x1f, 0x7d, 0x75, 0x7d, 0xf4, 0xd4, 0xed, 0xd1, 0x4f, 0x97, 0x47, 0x2f,
		0xdd, 0x1d, 0xa1, 0x4b, 0x22, 0x44, 0x63, 0x36, 0x46, 0x63, 0xe6, 0x39, 0xff, 0xe3, 0xe8, 0x37,
		0x69, 0x5a, 0xc5, 0xc2, 0xee, 0x0c, 0xba, 0x98, 0xb9, 0x60, 0xb7, 0x5a, 0x49, 0xe9, 0x16, 0x60,
		0xb4, 0x33, 0x11, 0x16, 0x26, 0xc0, 0xa4, 0xfc, 0x8b, 0x61, 0xfe, 0x4e, 0xd0, 0xe2, 0x6a, 0x43,
		0x95, 0x90, 0xc2, 0xd2, 0x09, 0x24, 0x9c, 0xb0, 0xd8, 0x42, 0x51, 0xc9, 0x85, 0x33, 0x42, 0xcd,
		0x37, 0xa8, 0x3e, 0xe4, 0xd9, 0x8b, 0xdf, 0xd5, 0x9a, 0x6f, 0x96, 0xd6, 0xce, 0xf4, 0xfa, 0x31,
		0xd8, 0xff, 0x0b, 0xbe, 0x60, 0xd6, 0x23, 0xc6, 0x35, 0xdf, 0x2c, 0xd8, 0xdf, 0x8f, 0xd4, 0x1e,
		0x15, 0xab, 0x7b, 0x88, 0x59, 0xdc, 0xdb, 0xf8, 0xc0, 0x71, 0x5c, 0x5a, 0xb8, 0x77, 0xb4, 0x47,
		0x6d, 0x26, 0xdf, 0x07, 0x7f, 0x93, 0x1e, 0x6e, 0x0a, 0xfd, 0x76, 0xf1, 0x20, 0x27, 0xad, 0xd8,
		0x23, 0xfb, 0x88, 0x7f, 0xda, 0x9f, 0x8a, 0x8b, 0xb3, 0x57, 0x17, 0xaf, 0x9e, 0xbf, 0x38, 0x7b,
		0xf5, 0x6c, 0xff, 0xe6, 0x64, 0x4b, 0x3c, 0xb0, 0xcd, 0x25, 0x10, 0x6d, 0x35, 0x7e, 0xb7, 0xdc,
		0xf0, 0x1d, 0x28, 0x09, 0x50, 0x92, 0x1d, 0xa1, 0x24, 0x16, 0x6a, 0xa5, 0x59, 0xa4, 0x35, 0x76,
		0x7a, 0x9f, 0xdb, 0xe8, 0x79, 0x6e, 0xb7, 0xd7, 0xb9, 0xab, 0x1e, 0xe7, 0x36, 0x7b, 0x9b, 0x5b,
		0x4e, 0x60, 0xb1, 0xd5, 0xcb, 0xdc, 0x02, 0x15, 0xb1, 0x9d, 0x9a, 0x63, 0xa9, 0x67, 0xb9, 0x99,
		0x41, 0xef, 0x3c, 0xb6, 0x1e, 0xe1, 0x8a, 0x3d, 0x31, 0x8c, 0x5e, 0x96, 0x35, 0x7f, 0x09, 0xd6,
		0xc9, 0xcb, 0xad, 0x66, 0x2f, 0xad, 0xaa, 0x4a, 0xd0, 0x30, 0xe4, 0xa6, 0x1f, 0x6a, 0xd3, 0x69,
		0x39, 0xa3, 0x19, 0x59, 0x0b, 0xb6, 0xdb, 0xa7, 0x5e, 0xb2, 0xbd, 0x91, 0xe6, 0x4c, 0xe8, 0xcc,
		0x80, 0x4a, 0xd7, 0x2a, 0x65, 0x99, 0x07, 0xb6, 0x5a, 0x90, 0x1d, 0x18, 0x48, 0xb5, 0xa4, 0x8a,
		0x92, 0x9d, 0xfb, 0xd4, 0x40, 0x44, 0x1d, 0x34, 0xac, 0x80, 0x84, 0x1a, 0x28, 0x6c, 0x12, 0x8e,
		0xa2, 0xaa, 0x29, 0xa9, 0x98, 0x84, 0x6e, 0x29, 0xe8, 0xd4, 0x7a, 0x65, 0x5a, 0xad, 0x22, 0xcb,
		0xff, 0xb2, 0x42, 0x2e, 0xb2, 0xf2, 0x90, 0x96, 0xc3, 0x1a, 0x19, 0x48, 0x3e, 0xfb, 0xf2, 0xe7,
		0x5e, 0x7c, 0xaa, 0x25, 0x4f, 0x54, 0x87, 0x05, 0x79, 0x48, 0x57, 0x77, 0x63, 0x99, 0x8d, 0x20,
		0x56, 0x87, 0xae, 0x90, 0xcc, 0x7a, 0x1f, 0x76, 0xa3, 0x8f, 0x2a, 0xe3, 0x83, 0xca, 0xf9, 0x98,
		0xb2, 0x3e, 0xa4, 0xb2, 0x8f, 0xa8, 0xec, 0x03, 0x4a, 0xfb, 0x78, 0x6a, 0x3a, 0xb8, 0xd1, 0x7f,
		0x9a, 0x90, 0xea, 0x54, 0x08, 0x92, 0x84, 0xff, 0x5b, 0xe0, 0x75, 0x1d, 0x72, 0x64, 0x1a, 0x79,
		0x48, 0x37, 0xea, 0x08, 0x9e, 0x3c, 0xf9, 0x7a, 0x12, 0xbe, 0xea, 0xfc, 0xfb, 0xf5, 0x34, 0x7c,
		0xd5, 0xa9, 0x7f, 0x3c, 0xad, 0x3e, 0xea, 0x9f, 0xcf, 0xbe, 0x9e, 0x84, 0x17, 0xa3, 0x9f, 0x9f,
		0x7d, 0x3d, 0x09, 0x9f, 0x75, 0x9e, 0x46, 0xd1, 0xd1, 0xd3, 0x5f, 0xe7, 0x0f, 0xea, 0x03, 0x57,
		0x4b, 0xb4, 0xa3, 0x24, 0x51, 0x85, 0xee, 0xe0, 0xc1, 0xf4, 0x8e, 0xd6, 0x7a, 0x51, 0x48, 0xc0,
		0xe5, 0x68, 0xa2, 0xbe, 0x7c, 0x78, 0x8b, 0xce, 0xce, 0xcf, 0x5e, 0x5e, 0xa2, 0x4f, 0xd7, 0x9f,
		0x3f, 0xa0, 0xff, 0x10, 0x9e, 0xd3, 0x94, 0xa1, 0x33, 0x19, 0x88, 0x54, 0x0c, 0x99, 0x4c, 0xab,
		0xbd, 0xea, 0x7e, 0x80, 0x76, 0x14, 0x64, 0x66, 0x25, 0xac, 0x7c, 0x58, 0x53, 0x43, 0xaf, 0xaa,
		0x0d, 0x07, 0xeb, 0xbf, 0x99, 0xd3, 0x96, 0x4d, 0xd8, 0x2f, 0x83, 0xf9, 0x4b, 0xe4, 0xbc, 0x19,
		0xe6, 0x67, 0xe5, 0x32, 0xb9, 0xc7, 0xa9, 0xfb, 0x1b, 0x07, 0x0a, 0x4a, 0x67, 0x73, 0x51, 0x17,
		0x16, 0xe2, 0x09, 0xf5, 0x61, 0x73, 0xcf, 0xb7, 0xbc, 0x44, 0xe9, 0xca, 0x3e, 0xa9, 0xeb, 0x10,
		0x7b, 0x3d, 0x52, 0x6f, 0x52, 0x59, 0x69, 0x64, 0x96, 0xd6, 0xc7, 0x8d, 0x48, 0xbc, 0x7e, 0xe6,
		0x57, 0xe5, 0xee, 0x07, 0x71, 0xca, 0x04, 0x4f, 0x07, 0x61, 0x36, 0xc0, 0x6c, 0x12, 0x06, 0xce,
		0x37, 0x9b, 0xd3, 0x55, 0x03, 0xd7, 0x1b, 0xd7, 0x53, 0x30, 0xae, 0xae, 0x8d, 0xeb, 0xa6, 0xd7,
		0x34, 0x56, 0xcc, 0xdc, 0x66, 0x81, 0xac, 0x9f, 0xf9, 0x4d, 0xd2, 0x91, 0x2b, 0x1f, 0x2c, 0xbd,
		0x13, 0xa0, 0x12, 0xf1, 0x57, 0x8b, 0xec, 0x9b, 0x98, 0x23, 0xa5, 0x48, 0xbd, 0x1d, 0x5b, 0x24,
		0x13, 0x79, 0x37, 0x73, 0x2f, 0x65, 0xdf, 0xfb, 0x81, 0x86, 0xf3, 0xd0, 0x20, 0xdb, 0x5b, 0x04,
		0xa9, 0xc5, 0x0d, 0xe7, 0x25, 0x9f, 0x40, 0x81, 0xb2, 0x2f, 0x61, 0x5c, 0x58, 0x14, 0xea, 0xbb,
		0x20, 0x06, 0x7d, 0xb3, 0xd3, 0xdb, 0x3c, 0x1d, 0x10, 0xbd, 0x50, 0xa6, 0xc5, 0xee, 0xd9, 0xcd,
		0x83, 0xb7, 0xa9, 0x7b, 0xf6, 0x58, 0x32, 0xae, 0xf7, 0x0b, 0x0e, 0xec, 0xee, 0x94, 0x48, 0x44,
		0x25, 0x25, 0x8c, 0xa5, 0x50, 0x59, 0x87, 0x63, 0x6d, 0xaa, 0x46, 0x01, 0xe6, 0x03, 0xe6, 0x7b,
		0xc2, 0x7c, 0xbd, 0x6d, 0x76, 0x9d, 0x6d, 0x75, 0xb3, 0x6d, 0x74, 0x33, 0x8e, 0xbd, 0x70, 0x36,
		0x83, 0xcd, 0x72, 0xc3, 0xb4, 0x22, 0xdd, 0xcd, 0x70, 0x8d, 0xcd, 0x6f, 0x0b, 0x49, 0xd9, 0x16,
		0x12, 0x14, 0x6c, 0x24, 0x26, 0x58, 0x4a, 0xb9, 0x30, 0x4d, 0x44, 0x30, 0x48, 0x40, 0xb0, 0xf4,
		0x04, 0xa6, 0x09, 0x07, 0x7a, 0x1b, 0xfe, 0x9d, 0x1d, 0xd0, 0x56, 0x5d, 0xc9, 0xa8, 0x49, 0xa4,
		0xb3, 0x25, 0x80, 0x07, 0x4a, 0x0c, 0x94, 0xb8, 0xe5, 0x94, 0xd8, 0xc6, 0x46, 0x7d, 0xc9, 0x7e,
		0x11, 0xec, 0xd6, 0x5b, 0x42, 0x00, 0xd5, 0x95, 0xaf, 0x41, 0x1f, 0x35, 0x56, 0xba, 0x0d, 0xb2,
		0xaf, 0xb5, 0xb2, 0xed, 0x92, 0x7d, 0xf5, 0x95, 0xfc, 0x60, 0x69, 0xa5, 0x75, 0xda, 0x96, 0xf5,
		0x51, 0x6f, 0x39, 0x1d, 0xaf, 0xd8, 0xf7, 0x38, 0xd6, 0x66, 0xec, 0x9b, 0xb7, 0xcf, 0xae, 0xcb,
		0x0b, 0x7f, 0x7b, 0x5b, 0x5f, 0xe0, 0x73, 0x79, 0xfe, 0xcf, 0xa3, 0xcb, 0x2e, 0xfd, 0xd6, 0x4f,
		0x22, 0x89, 0xca, 0x96, 0xb3, 0xe4, 0x12, 0x55, 0x08, 0xe5, 0x2b, 0x2c, 0x49, 0x93, 0x80, 0xbe,
		0xd2, 0x12, 0xb4, 0x13, 0xd0, 0x97, 0x5f, 0x72, 0x96, 0x37, 0x93, 0xdd, 0x27, 0x0c, 0xad, 0x5f,
		0x42, 0x46, 0x99, 0x44, 0x6b, 0xd6, 0x88, 0x49, 0x7e, 0xd1, 0xa4, 0x86, 0xe7, 0xe6, 0x1d, 0xd1,
		0xa9, 0x63, 0x61, 0x13, 0xb4, 0xed, 0x9b, 0xa0, 0xf2, 0x65, 0xb2, 0x17, 0xe7, 0x57, 0x72, 0xab,
		0xf3, 0x04, 0xb6, 0x3a, 0xed, 0x22, 0xa3, 0xfb, 0xad, 0x4e, 0xe9, 0x08, 0xe3, 0x92, 0x6a, 0xc5,
		0x15, 0xb6, 0x49, 0xd6, 0x2c, 0x56, 0xa9, 0x41, 0xbc, 0xa2, 0xa6, 0x70, 0x83, 0xa5, 0xea, 0x95,
		0x85, 0x1f, 0xc0, 0xe9, 0x00, 0xa7, 0x03, 0x9c, 0x0e, 0x1d, 0xa7, 0x03, 0x98, 0x33, 0x30, 0xe7,
		0xad, 0x32, 0xe7, 0x8d, 0x14, 0x53, 0x85, 0x2c, 0x5f, 0x4d, 0x4e, 0x66, 0x92, 0x81, 0x4f, 0x6f,
		0x25, 0xb8, 0xf1, 0x9a, 0x37, 0x05, 0x80, 0x15, 0xb7, 0x87, 0x15, 0x73, 0x7a, 0x2b, 0xcf, 0x87,
		0x37, 0xbf, 0x00, 0x03, 0x49, 0x7f, 0x3b, 0xcb, 0x84, 0xa5, 0x93, 0xfe, 0x70, 0x2c, 0xe8, 0x0f,
		0x12, 0xd6, 0xef, 0x39, 0x2a, 0x27, 0x82, 0xcc, 0x8c, 0x96, 0x14, 0xc4, 0x3b, 0x92, 0xc7, 0x9c,
		0x66, 0x0d, 0xae, 0x06, 0x5f, 0x88, 0x28, 0x38, 0x43, 0xa2, 0x4f, 0x50, 0x7d, 0x36, 0xf4, 0xe5,
		0xea, 0x0d, 0xaa, 0xce, 0x88, 0x44, 0x1f, 0x0b, 0x44, 0x73, 0x54, 0xe4, 0x24, 0x41, 0xdd, 0x94,
		0x97, 0x47, 0x45, 0x2c, 0x21, 0xb9, 0xa0, 0xac, 0x02, 0x66, 0x84, 0x93, 0x84, 0x93, 0x3c, 0x3f,
		0x8a, 0x58, 0xc4, 0x5e, 0xd7, 0x3f, 0x87, 0x5d, 0x3c, 0xa4, 0x83, 0xfb, 0xb0, 0x2a, 0x20, 0xd8,
		0xa5, 0x31, 0x1a, 0xa6, 0x49, 0x31, 0x20, 0x39, 0xfa, 0xf8, 0xcf, 0xf5, 0x0d, 0xc2, 0x45, 0xaf,
		0x9c, 0x05, 0x44, 0x59, 0x56, 0x88, 0x88, 0x65, 0x98, 0xe3, 0x21, 0x11, 0x84, 0xe7, 0xe8, 0x8e,
		0x8a, 0x3e, 0xc2, 0x68, 0x40, 0x70, 0xb7, 0x8a, 0xee, 0x27, 0xe8, 0xb7, 0xa9, 0x2b, 0x85, 0xcd,
		0x95, 0x7e, 0x3b, 0x52, 0x4c, 0x7c, 0x39, 0x85, 0xc4, 0x97, 0x7d, 0x4f, 0x7c, 0xf9, 0xf2, 0xf9,
		0xad, 0xda, 0x34, 0x5d, 0x95, 0xca, 0xd9, 0xb8, 0x46, 0x0a, 0xf3, 0xf4, 0xa9, 0x10, 0xf5, 0x38,
		0xcd, 0xac, 0x95, 0xb4, 0x1e, 0xaf, 0x28, 0xe3, 0x46, 0xcf, 0x5f, 0x2a, 0x0e, 0xd3, 0xad, 0x19,
		0x63, 0x52, 0x2b, 0xc6, 0xac, 0x46, 0x8c, 0xcd, 0x5d, 0x5f, 0xa3, 0x9a, 0x30, 0x6e, 0x76, 0x7d,
		0x75, 0x6a, 0xc0, 0xb8, 0x2d, 0x99, 0xa0, 0xdb, 0xb1, 0x22, 0x50, 0xb3, 0x66, 0xab, 0xb5, 0x44,
		0xf3, 0xe5, 0xff, 0x65, 0x66, 0xee, 0x66, 0x99, 0x7d, 0x6b, 0x4c, 0x1a, 0x6a, 0x4c, 0x15, 0x49,
		0x66, 0x8c, 0x5b, 0x65, 0xd4, 0xae, 0xba, 0x88, 0xa5, 0xcd, 0xe1, 0xe4, 0x27, 0xcd, 0x45, 0x8e,
		0x68, 0x6d, 0x2d, 0xcb, 0xd3, 0x8c, 0x4e, 0x30, 0x35, 0x2a, 0x62, 0x8d, 0xa5, 0x3a, 0x2c, 0x07,
		0xd6, 0x4b, 0xba, 0xb4, 0xa1, 0xbc, 0xb2, 0xb3, 0x24, 0x51, 0x37, 0x95, 0xa2, 0x4f, 0xf3, 0x88,
		0xc5, 0x29, 0x13, 0x98, 0x32, 0xc2, 0x1b, 0x43, 0x99, 0x65, 0x3c, 0xcd, 0x38, 0xc5, 0x82, 0x34,
		0x77, 0x57, 0x1e, 0x40, 0x98, 0xc8, 0x8f, 0x0c, 0x8b, 0x50, 0x9d, 0x42, 0x11, 0x2a, 0x28, 0x42,
		0xe5, 0x16, 0x88, 0x34, 0x01, 0xc9, 0x18, 0x98, 0xe6, 0x58, 0xb7, 0xbd, 0x32, 0x4d, 0xcd, 0xf9,
		0x0c, 0x27, 0x63, 0x09, 0x64, 0x65, 0x9c, 0xe4, 0x84, 0xc5, 0x04, 0xa5, 0xdd, 0x0a, 0x07, 0x6a,
		0x7a, 0x4c, 0x59, 0x42, 0x63, 0x2c, 0x48, 0x5e, 0x33, 0xf4, 0x12, 0x81, 0x6a, 0x0c, 0x28, 0x81,
		0xa2, 0x2e, 0xf2, 0xc9, 0x49, 0x82, 0xf0, 0x30, 0x65, 0x3d, 0x84, 0x07, 0x83, 0xfa, 0xaf, 0x63,
		0xe4, 0xca, 0xf1, 0xb0, 0x86, 0xaf, 0x6a, 0x74, 0x1f, 0xff, 0x20, 0x35, 0xb1, 0xaf, 0xbe, 0x9f,
		0x66, 0xf7, 0xb5, 0xd2, 0x1e, 0x99, 0x3e, 0x97, 0x9d, 0xf6, 0x3e, 0xd6, 0xda, 0xf9, 0xd8, 0x6c,
		0xdf, 0x63, 0xb7, 0x5d, 0x8f, 0xed, 0xf6, 0x3c, 0xce, 0xda, 0xf1, 0x38, 0x6b, 0xbf, 0x63, 0xbd,
		0xdd, 0xce, 0x76, 0xcb, 0xc5, 0x5b, 0x6b, 0x9f, 0x33, 0x69, 0x97, 0x33, 0xcc, 0xc4, 0xbd, 0x0d,
		0x55, 0x1b, 0x59, 0xfb, 0xf3, 0x6d, 0x95, 0x8b, 0x37, 0xb0, 0xcf, 0x03, 0x9c, 0x8b, 0xb0, 0xc8,
		0x12, 0x2c, 0x48, 0x62, 0x0f, 0xc4, 0x67, 0xce, 0x6a, 0x19, 0xca, 0xe9, 0x90, 0xe4, 0x02, 0x0f,
		0xb3, 0x1a, 0xc7, 0x09, 0x2a, 0xaf, 0x55, 0xb2, 0xbd, 0x92, 0xf5, 0xd5, 0x58, 0xdb, 0xfc, 0xa1,
		0x42, 0xea, 0x23, 0x84, 0xae, 0xba, 0x35, 0x26, 0xd7, 0xb8, 0x7e, 0x87, 0x73, 0xc4, 0xc8, 0x0f,
		0xc2, 0x9b, 0x31, 0x24, 0x39, 0x44, 0xb4, 0xa2, 0x95, 0xe5, 0x18, 0x41, 0x87, 0x04, 0xdd, 0xf5,
		0x09, 0x9b, 0xb2, 0x04, 0x77, 0x38, 0x8f, 0x18, 0x65, 0x39, 0xe1, 0x82, 0x24, 0x88, 0x32, 0x91,
		0x8e, 0x48, 0x2b, 0xc0, 0x39, 0xc0, 0x39, 0xc0, 0x79, 0x4b, 0xe0, 0xbc, 0x04, 0x9b, 0x10, 0xb3,
		0x24, 0x2c, 0xd7, 0xb0, 0x4d, 0x58, 0x7f, 0x69, 0xe1, 0x5c, 0xb2, 0x25, 0x7f, 0xa4, 0x4f, 0x18,
		0x45, 0xc9, 0xaf, 0x8b, 0x87, 0xb0, 0xfc, 0x38, 0x1b, 0x7d, 0xdc, 0xd4, 0x1f, 0x97, 0x33, 0x1f,
		0x4f, 0xa2, 0xe8, 0x28, 0x8a, 0x92, 0xdf, 0x9f, 0xfe, 0xf1, 0xe4, 0xbf, 0xff, 0x7e, 0x8d, 0xa2,
		0xdf, 0xa3, 0x28, 0xec, 0xcc, 0x1c, 0xf1, 0xd4, 0x5c, 0x97, 0x3a, 0x3b, 0x68, 0xf9, 0xac, 0xf5,
		0xfa, 0x9c, 0xd4, 0x0f, 0xb0, 0xd3, 0xd3, 0x73, 0x61, 0x5b, 0xa1, 0xb4, 0x42, 0xbf, 0x95, 0x56,
		0xab, 0x3e, 0x3d, 0xc2, 0x42, 0x70, 0x7a, 0x5b, 0x1a, 0x37, 0x4b, 0xf6, 0xe7, 0x14, 0xec, 0x0f,
		0xd8, 0x9f, 0xfd, 0xb2, 0x3f, 0xb6, 0x5a, 0x08, 0x07, 0x0b, 0x3d, 0xa3, 0xac, 0xf7, 0x23, 0x5f,
		0xb8, 0x82, 0xad, 0x2e, 0xca, 0xb3, 0x30, 0xf3, 0xa9, 0x3e, 0x7b, 0x15, 0x88, 0x2d, 0x2f, 0x89,
		0xfa, 0x69, 0x56, 0xef, 0x46, 0x5e, 0x55, 0xf4, 0x98, 0xfc, 0xcc, 0x48, 0x5c, 0x32, 0xe0, 0x2a,
		0xd4, 0xd1, 0x2d, 0xb8, 0xe8, 0x13, 0x8e, 0x62, 0x9c, 0x93, 0x1c, 0xdd, 0xd1, 0xc1, 0x00, 0xdd,
		0x12, 0x84, 0x93, 0xa4, 0x3a, 0x80, 0xa7, 0x45, 0xaf, 0x1f, 0xb1, 0x26, 0xec, 0x9a, 0xa3, 0x2e,
		0x4f, 0x87, 0x28, 0xad, 0x06, 0x34, 0x71, 0xd9, 0x43, 0x44, 0x8e, 0x7a, 0x47, 0x87, 0xd5, 0xd5,
		0x38, 0x89, 0x0b, 0x9e, 0xd3, 0x1f, 0x24, 0x62, 0x93, 0x0b, 0x5b, 0xee, 0xba, 0xfe, 0x0c, 0xba,
		0xae, 0xb7, 0x0c, 0x02, 0x9d, 0x43, 0xa1, 0x73, 0x48, 0x74, 0x06, 0x8d, 0x76, 0x20, 0xd2, 0x12,
		0x54, 0x8e, 0x9f, 0xd2, 0x42, 0xbf, 0x02, 0x67, 0x30, 0xbc, 0x08, 0xc7, 0x03, 0x9a, 0x0b, 0x77,
		0x6d, 0xdc, 0x67, 0x2f, 0xe3, 0xa6, 0x87, 0xfb, 0x05, 0xf4, 0x70, 0x87, 0x1e, 0xee, 0x2d, 0x81,
		0x38, 0xe7, 0x50, 0x67, 0x17, 0xf2, 0x2c, 0x43, 0x9f, 0x33, 0xb8, 0xf2, 0x04, 0x5b, 0x5e, 0xe1,
		0x6b, 0x15, 0xbf, 0x7c, 0x3b, 0xde, 0x75, 0x2f, 0x39, 0xdf, 0xb0, 0x18, 0x08, 0x9a, 0x0d, 0x08,
		0xb2, 0xce, 0xf8, 0x1c, 0x39, 0xb9, 0xde, 0x61, 0xd5, 0x07, 0xbc, 0xfa, 0x81, 0x59, 0x5f, 0x70,
		0xeb, 0x1d, 0x76, 0xbd, 0xc3, 0xaf, 0x37, 0x18, 0x76, 0x03, 0xc7, 0x8e, 0x60, 0xd9, 0x39, 0x3c,
		0xdb, 0x8f, 0x19, 0xfa, 0x8e, 0x29, 0xaa, 0x82, 0xf5, 0x6b, 0x86, 0x08, 0x13, 0xfc, 0x1e, 0x51,
		0x86, 0xf0, 0x24, 0xf2, 0x58, 0x9a, 0x8b, 0x2a, 0x24, 0xf0, 0xb1, 0xc9, 0xae, 0x2a, 0xa1, 0xbc,
		0x49, 0xd2, 0x42, 0x55, 0x06, 0x16, 0x5d, 0x96, 0x72, 0x55, 0x8d, 0x8b, 0xd8, 0x74, 0x5a, 0x72,
		0x93, 0x83, 0x45, 0x59, 0x6f, 0xfa, 0xfc, 0xa3, 0x53, 0x55, 0x3b, 0x78, 0x58, 0x8c, 0x13, 0xc0,
		0xea, 0x73, 0xdf, 0x1f, 0xb9, 0x96, 0x82, 0x5b, 0x53, 0xe1, 0xcd, 0x64, 0xf8, 0x34, 0x1d, 0x7e,
		0x4d, 0x88, 0x6f, 0x53, 0xb2, 0x35, 0x93, 0xb2, 0x35, 0xd3, 0xe2, 0xdd, 0xc4, 0xb8, 0x35, 0x35,
		0x8e, 0x4d, 0x8e, 0x37, 0xd3, 0x33, 0xbe, 0x50, 0x5a, 0x88, 0x5e, 0x4a, 0x59, 0x2f, 0x94, 0xaf,
		0x1b, 0x60, 0x7d, 0x89, 0x2f, 0xb9, 0x07, 0x4f, 0x4a, 0x39, 0x67, 0xa6, 0xca, 0x1b, 0x1a, 0xa5,
		0x7b, 0x8c, 0x6e, 0x0a, 0x8d, 0x6f, 0xea, 0xc8, 0xd7, 0x5d, 0xd9, 0x49, 0xe3, 0x68, 0x9d, 0xf9,
		0xd8, 0x86, 0x19, 0xd9, 0x8e, 0x39, 0xd9, 0x96, 0x59, 0xd9, 0xba, 0x79, 0xd9, 0xba, 0x99, 0xd9,
		0x9a, 0xb9, 0xf1, 0x63, 0x76, 0x3c, 0x99, 0x9f, 0xb1, 0x14, 0xad, 0xa5, 0xd5, 0x28, 0xaf, 0xd3,
		0x49, 0xf9, 0x11, 0xb3, 0x0e, 0xc2, 0xda, 0x9c, 0xfd, 0x85, 0xc7, 0x6b, 0x2e, 0x2f, 0x84, 0xa2,
		0x51, 0x02, 0x65, 0x77, 0xb4, 0x78, 0xb7, 0xe9, 0x99, 0x51, 0xcb, 0x5a, 0xe5, 0xab, 0x19, 0xb7,
		0xb8, 0x55, 0xbf, 0xa2, 0x83, 0x96, 0xb8, 0xca, 0x37, 0x61, 0xd4, 0x42, 0xb7, 0x3d, 0xfa, 0xe8,
		0x28, 0xe6, 0xd5, 0xf6, 0xad, 0x92, 0x83, 0x16, 0xae, 0xe5, 0x20, 0xa7, 0xc3, 0x6c, 0x40, 0x42,
		0x67, 0x71, 0xb7, 0x49, 0x39, 0xeb, 0xb9, 0x0b, 0xd9, 0xde, 0x38, 0x9a, 0x7f, 0x1f, 0x89, 0xe6,
		0x55, 0xea, 0x0c, 0xe2, 0xa4, 0x7e, 0x2f, 0x49, 0xe4, 0x08, 0xa3, 0xfa, 0x26, 0xc6, 0x5b, 0x22,
		0x28, 0x4e, 0x59, 0x4e, 0x73, 0x51, 0x3a, 0x35, 0x69, 0x93, 0xc4, 0xbe, 0x10, 0x2a, 0xc3, 0x2c,
		0x39, 0x4e, 0xf9, 0x32, 0xef, 0x47, 0x23, 0x4e, 0x57, 0xdd, 0x52, 0x1d, 0xa6, 0x8b, 0x98, 0x7c,
		0x9c, 0x6e, 0xf4, 0x7b, 0xc4, 0xdc, 0xc4, 0xe9, 0x60, 0x47, 0xdc, 0x97, 0x63, 0x04, 0x3b, 0xe2,
		0xad, 0x73, 0x5c, 0xf6, 0x74, 0x47, 0xdc, 0x63, 0x9c, 0xcb, 0x7f, 0x5c, 0xab, 0x1d, 0x71, 0x2c,
		0xc7, 0x71, 0x2b, 0xd8, 0x19, 0x6f, 0x5d, 0xdc, 0x09, 0x76, 0xc6, 0xdb, 0xee, 0x25, 0x38, 0x5a,
		0x29, 0xce, 0xe3, 0x42, 0xde, 0xe3, 0x40, 0x3e, 0xe2, 0x3e, 0xdb, 0x8f, 0xf3, 0x80, 0xd7, 0xa8,
		0xe5, 0x35, 0x66, 0x24, 0xa6, 0x78, 0xe0, 0xc3, 0x6d, 0x9c, 0xbf, 0x12, 0x38, 0x3e, 0xe0, 0xf8,
		0x80, 0xe3, 0x03, 0x8e, 0x4f, 0x8b, 0xc1, 0xcb, 0x37, 0x88, 0xad, 0x72, 0x7a, 0xa6, 0x5f, 0x38,
		0x6b, 0x6e, 0xc1, 0x5f, 0x36, 0x30, 0xf8, 0x3c, 0xe0, 0xf3, 0x80, 0xcf, 0x03, 0x3e, 0x8f, 0x95,
		0x75, 0x42, 0x58, 0x31, 0x24, 0xbc, 0xae, 0xaf, 0xee, 0xc1, 0xe3, 0xb9, 0x70, 0x78, 0x8d, 0xf7,
		0xac, 0x18, 0xba, 0x5f, 0x92, 0x37, 0xe9, 0x75, 0xdd, 0xfb, 0xde, 0xcb, 0x76, 0xec, 0x49, 0x39,
		0x47, 0xb7, 0x03, 0x1c, 0x7f, 0xef, 0xa7, 0x03, 0x1f, 0xa9, 0x6a, 0xc1, 0x69, 0x79, 0xc5, 0x82,
		0x71, 0x82, 0xe3, 0x7e, 0xd5, 0x59, 0xc1, 0xc3, 0x35, 0xcf, 0x6a, 0x80, 0x4b, 0xfb, 0xf4, 0x96,
		0x7a, 0x49, 0xc1, 0x3d, 0xaf, 0xe0, 0x86, 0xc4, 0x84, 0xfe, 0x70, 0x9c, 0xe5, 0xe0, 0x3a, 0x3b,
		0xe0, 0x26, 0xbd, 0x62, 0xc2, 0x8f, 0x2e, 0x4e, 0xd4, 0xd0, 0x4f, 0x62, 0xc0, 0x58, 0x21, 0x2e,
		0xd1, 0x99, 0x87, 0xcb, 0x8d, 0xd4, 0xe1, 0x12, 0x9d, 0x7b, 0xb8, 0xda, 0xf4, 0x0a, 0xbb, 0x44,
		0xa7, 0x90, 0x6f, 0xb0, 0x9f, 0x91, 0xa3, 0x83, 0x76, 0x9c, 0x65, 0xbb, 0x05, 0x4d, 0x0c, 0x3a,
		0x56, 0xaf, 0x76, 0x45, 0xf5, 0x3a, 0x59, 0xaf, 0xfa, 0xe7, 0xa0, 0xc2, 0x85, 0x41, 0xe7, 0x6b,
		0xdf, 0x7e, 0x89, 0xb5, 0x4e, 0xd9, 0x5b, 0xf3, 0x3b, 0x2c, 0x75, 0xd6, 0x6e, 0xfb, 0x3a, 0xde,
		0xc5, 0x62, 0x66, 0x79, 0xa5, 0xb3, 0x93, 0x66, 0xbf, 0xd6, 0x6a, 0x9a, 0xcd, 0x9f, 0xd8, 0x72,
		0x31, 0xcf, 0xfb, 0x8c, 0x4c, 0x97, 0xeb, 0xa4, 0xac, 0x87, 0x46, 0x97, 0xaa, 0x8b, 0x06, 0xdd,
		0xf5, 0x69, 0xdc, 0x9f, 0x14, 0xe3, 0x8c, 0x58, 0xca, 0x69, 0x8f, 0x32, 0x2c, 0x48, 0x02, 0xd5,
		0x37, 0x7d, 0x85, 0x70, 0xa0, 0xfa, 0xd9, 0x23, 0xab, 0x7e, 0x66, 0xb1, 0x94, 0x8f, 0x83, 0x4a,
		0x9e, 0x34, 0x21, 0x4c, 0x50, 0x71, 0x6f, 0x67, 0x03, 0x79, 0x1c, 0x36, 0xb1, 0x90, 0x02, 0x1d,
		0x5c, 0x35, 0xb7, 0xf6, 0x06, 0xe7, 0xc4, 0x7e, 0xa5, 0xb7, 0x51, 0x8b, 0x3d, 0x4b, 0x68, 0x3b,
		0x3e, 0xff, 0x7f, 0xf0, 0xa0, 0x20, 0xf6, 0x78, 0x9c, 0x5d, 0x2e, 0x37, 0x23, 0x81, 0x84, 0x72,
		0x12, 0xdb, 0xac, 0xa0, 0x75, 0xd8, 0xf6, 0x27, 0x2e, 0xa9, 0x20, 0x8d, 0xdb, 0xc6, 0xa2, 0x3a,
		0xdb, 0x06, 0xb8, 0x1d, 0x69, 0x9f, 0x61, 0xd1, 0xeb, 0xb2, 0xe5, 0x6d, 0x59, 0x04, 0x62, 0x8b,
		0xde, 0x95, 0x4b, 0x0a, 0x61, 0xd5, 0x9b, 0xf2, 0x43, 0x21, 0xec, 0x79, 0x4f, 0xdb, 0x5a, 0x67,
		0x7a, 0x08, 0xf1, 0xe0, 0xba, 0x2f, 0xd7, 0x96, 0xfa, 0xe2, 0x19, 0xe0, 0x80, 0xee, 0xba, 0x37,
		0xe8, 0x19, 0x67, 0xb0, 0xae, 0x6d, 0x76, 0x8e, 0x33, 0x5a, 0xb7, 0x6e, 0x3a, 0xc7, 0xe9, 0xaf,
		0x4b, 0x57, 0x7a, 0xda, 0xb1, 0xd4, 0x50, 0x5c, 0x42, 0x93, 0x03, 0x3c, 0xd3, 0x4b, 0x4d, 0xa3,
		0x87, 0xea, 0xec, 0x78, 0xb5, 0xee, 0xa2, 0x27, 0xd0, 0x5d, 0x74, 0xdf, 0xbb, 0x8b, 0x6a, 0xb8,
		0xa5, 0xea, 0xee, 0xa7, 0xa1, 0x9b, 0xa9, 0xe3, 0x4e, 0x9a, 0xb9, 0x8d, 0x66, 0xcb, 0xcb, 0x86,
		0x13, 0x68, 0xd8, 0x7c, 0x92, 0x66, 0x3f, 0x2e, 0x34, 0x00, 0xf5, 0x70, 0x0b, 0xf7, 0xf9, 0xdc,
		0x35, 0xf0, 0x77, 0x6c, 0x2f, 0x2d, 0x2b, 0xc0, 0x9f, 0x90, 0x2e, 0x2e, 0x06, 0x22, 0x94, 0xe9,
		0xba, 0xbe, 0xe8, 0xb3, 0x4f, 0x0d, 0x96, 0x6e, 0x9c, 0x5d, 0x0d, 0x51, 0x52, 0xc6, 0xa0, 0x84,
		0x35, 0xb9, 0xe9, 0xe9, 0x80, 0xe5, 0x01, 0xcb, 0xa3, 0x64, 0x79, 0xf4, 0xad, 0xc8, 0x6d, 0x9a,
		0x0e, 0x08, 0x66, 0x3a, 0x16, 0xe4, 0xb4, 0x35, 0x2e, 0x08, 0xed, 0x86, 0x5d, 0x82, 0x45, 0xc1,
		0x89, 0x4f, 0x37, 0x64, 0x54, 0x03, 0xb8, 0x44, 0x8e, 0x7c, 0xcb, 0xbe, 0xc8, 0x94, 0x04, 0xda,
		0xe4, 0x8f, 0xcc, 0x8a, 0xa8, 0x3d, 0x4e, 0xc9, 0x21, 0xb8, 0xb7, 0xe0, 0xde, 0xee, 0x9a, 0x7b,
		0xcb, 0x6a, 0xfd, 0x50, 0xa4, 0x37, 0xd5, 0x28, 0x20, 0x14, 0x40, 0x28, 0x3c, 0x11, 0x8a, 0xbc,
		0xce, 0x8c, 0xd6, 0xe0, 0x13, 0x2f, 0x21, 0xa4, 0x09, 0x98, 0x0f, 0x98, 0x3f, 0x23, 0x89, 0xba,
		0x5d, 0xbb, 0x3a, 0xea, 0x37, 0xe3, 0xd4, 0x70, 0xff, 0x14, 0x70, 0x7f, 0xdf, 0x71, 0x5f, 0xf5,
		0xb5, 0xd0, 0x5a, 0xd1, 0xf4, 0x63, 0x82, 0xf5, 0x70, 0x45, 0x51, 0xe9, 0x95, 0xb9, 0xd7, 0x4e,
		0x74, 0x33, 0x49, 0x6c, 0x33, 0x4b, 0x64, 0xb3, 0x09, 0xed, 0x46, 0x89, 0x6a, 0x6e, 0xa0, 0x5d,
		0x27, 0x11, 0x4d, 0x11, 0xd4, 0x15, 0x67, 0x5a, 0xf7, 0xad, 0xe8, 0x00, 0xc7, 0xa2, 0x7e, 0x6f,
		0xc4, 0x30, 0x86, 0xdb, 0x9c, 0x47, 0x53, 0xb8, 0x66, 0x19, 0xa1, 0xc6, 0x99, 0xa0, 0x36, 0x32,
		0x40, 0xed, 0x64, 0x7e, 0xda, 0x4a, 0xd7, 0xb0, 0x9e, 0xe9, 0x69, 0x3d, 0x3d, 0xc3, 0x5a, 0x66,
		0xa7, 0xdf, 0xc4, 0x23, 0xe3, 0xac, 0xcb, 0xc9, 0xcb, 0xab, 0xc3, 0x4c, 0xdc, 0x9b, 0xa8, 0xca,
		0xc8, 0x9a, 0x9c, 0xfb, 0xca, 0x08, 0xd1, 0xb0, 0x03, 0x03, 0x9c, 0x8b, 0xb0, 0xc8, 0x12, 0x2c,
		0x48, 0x62, 0x0e, 0x32, 0x33, 0x67, 0x03, 0xa8, 0x01, 0xa8, 0x01, 0xa8, 0x91, 0xd2, 0x93, 0x72,
		0xc1, 0x84, 0x98, 0x25, 0xa1, 0xa0, 0x43, 0x62, 0x03, 0x72, 0x5e, 0x1a, 0x9c, 0xe3, 0x33, 0x16,
		0x82, 0x70, 0x66, 0x9c, 0x6f, 0x19, 0x44, 0x51, 0xf2, 0xeb, 0xe2, 0x21, 0x2c, 0x3f, 0xce, 0x46,
		0x1f, 0x37, 0xf5, 0xc7, 0xe5, 0xcc, 0xc7, 0x93, 0x28, 0x3a, 0x8a, 0xa2, 0xe4, 0xf7, 0xa7, 0x7f,
		0x3c, 0xf9, 0xef, 0xbf, 0x5f, 0xa3, 0xe8, 0xf7, 0x28, 0x0a, 0x3b, 0x33, 0x47, 0x3c, 0x0d, 0xda,
		0x9f, 0x8f, 0xa7, 0x81, 0xbe, 0xc6, 0xa5, 0x6c, 0x6c, 0xb5, 0x43, 0x33, 0x6c, 0xf0, 0x05, 0xa8,
		0x0b, 0xa8, 0xeb, 0x0b, 0x75, 0x4d, 0xeb, 0x4b, 0x4d, 0x7a, 0xbc, 0xa6, 0x75, 0x9d, 0x25, 0x7b,
		0xef, 0x04, 0x2e, 0x9c, 0xd9, 0xce, 0x7b, 0x78, 0xcf, 0xe0, 0x3d, 0x3c, 0x4f, 0x8b, 0xd6, 0xd9,
		0xe2, 0x75, 0xb6, 0x88, 0xad, 0x2f, 0x66, 0xb3, 0x45, 0x6d, 0xb8, 0xb8, 0xc7, 0x4f, 0x63, 0xf3,
		0x3d, 0x3c, 0x5b, 0x05, 0xe9, 0x1c, 0xf5, 0xa2, 0x76, 0xda, 0x7b, 0xda, 0x72, 0x9d, 0x4c, 0xeb,
		0x55, 0xdc, 0x5c, 0x54, 0x6d, 0x73, 0x53, 0xa5, 0xcd, 0x47, 0xf5, 0x03, 0x27, 0x55, 0xd8, 0xfc,
		0x56, 0x3f, 0xb0, 0x59, 0x65, 0xcd, 0x52, 0xdd, 0x03, 0x4b, 0x9a, 0x6a, 0xbb, 0xae, 0xa5, 0xe3,
		0xd6, 0xf6, 0x5e, 0x5a, 0xda, 0x3b, 0xea, 0x0b, 0x0c, 0x65, 0x78, 0xbd, 0xc1, 0x8f, 0x37, 0x18,
		0xf2, 0x06, 0x47, 0xce, 0x61, 0xc9, 0x2e, 0x3c, 0x59, 0x86, 0x29, 0x67, 0x70, 0x65, 0x2f, 0x66,
		0xe1, 0x2b, 0xa6, 0xb1, 0x25, 0xf0, 0x72, 0x0e, 0x62, 0x3e, 0xc0, 0xcc, 0x0f, 0xa8, 0xf9, 0x02,
		0x37, 0xef, 0x20, 0xe7, 0x1d, 0xec, 0xbc, 0x81, 0x9e, 0x1b, 0xf0, 0x73, 0x04, 0x82, 0xce, 0xc1,
		0x70, 0x7c, 0x81, 0x2d, 0x34, 0x1f, 0xdf, 0x5e, 0xd3, 0x71, 0x4f, 0x6d, 0xbd, 0xbd, 0xb5, 0xf3,
		0xf6, 0xd9, 0xc6, 0xdb, 0x6f, 0xfb, 0x6e, 0xdf, 0x6d, 0xbb, 0xb7, 0xd6, 0xae, 0x7b, 0x6b, 0x6d,
		0xba, 0xbd, 0xb7, 0xe7, 0xde, 0xed, 0x76, 0xc3, 0xde, 0xda, 0x70, 0x6f, 0xad, 0xfd, 0xb6, 0xcf,
		0xb6, 0xdb, 0xed, 0x69, 0xb7, 0xfd, 0x00, 0x44, 0x03, 0x79, 0x6b, 0xa7, 0xed, 0xaf, 0x8d, 0xf6,
		0x56, 0xdb, 0x67, 0xfb, 0x69, 0x9b, 0xed, 0x4a, 0x13, 0x5e, 0x33, 0x96, 0x0a, 0xdc, 0xd4, 0xf3,
		0x74, 0xa8, 0x0b, 0x79, 0xdc, 0x27, 0x43, 0x9c, 0x8d, 0x81, 0x80, 0x88, 0x6e, 0xd8, 0x94, 0xcb,
		0x3b, 0x1e, 0x95, 0xcd, 0xcb, 0x05, 0x16, 0xe4, 0x98, 0xd3, 0xdb, 0xbc, 0xfc, 0xef, 0xb8, 0x4e,
		0xe1, 0xaf, 0x3f, 0x8e, 0x47, 0x4e, 0xf6, 0xf1, 0xfc, 0xe6, 0xe5, 0xf1, 0x4c, 0xe0, 0x70, 0xc5,
		0x6f, 0x2e, 0x9d, 0xc2, 0x5c, 0xf0, 0x22, 0x16, 0xcd, 0xbb, 0x69, 0xc1, 0xd5, 0xfb, 0x9b, 0x0f,
		0x5f, 0xea, 0xe7, 0xf9, 0xd6, 0x7c, 0x5e, 0x97, 0x8f, 0xf5, 0xed, 0x0b, 0xbd, 0xcd, 0xcb, 0xff,
		0xaa, 0x6f, 0x49, 0x5e, 0x7f, 0x7c, 0xfb, 0x9b, 0xfc, 0x14, 0x7f, 0xa6, 0xd9, 0xe8, 0xb3, 0x5c,
		0x97, 0xa3, 0x9f, 0xf7, 0xb4, 0x21, 0x9d, 0xed, 0xa0, 0xbf, 0x5b, 0xfd, 0xde, 0x8e, 0x5e, 0xbb,
		0x08, 0xdc, 0xda, 0x56, 0xe3, 0xe0, 0x71, 0x57, 0x9b, 0xb7, 0xb5, 0x1d, 0xee, 0x46, 0x3d, 0x7d,
		0xa9, 0x65, 0xd0, 0x96, 0xd2, 0xfd, 0x16, 0x72, 0x33, 0xea, 0xe6, 0xfd, 0xf6, 0xdb, 0xb6, 0x4d,
		0x5e, 0x0c, 0x9d, 0xbb, 0x00, 0x6c, 0x9d, 0xb7, 0x2b, 0x3a, 0x01, 0x5b, 0xe7, 0xde, 0xa3, 0x07,
		0x8f, 0x7c, 0xeb, 0xdc, 0x43, 0xb8, 0xd5, 0x5f, 0x78, 0xd5, 0x51, 0x38, 0x15, 0x36, 0xd1, 0xbd,
		0x87, 0x43, 0x61, 0x13, 0xfd, 0x91, 0x39, 0x39, 0xce, 0xc2, 0x95, 0xde, 0xc2, 0x93, 0x2e, 0xc3,
		0x91, 0xdb, 0x0b, 0x3f, 0x82, 0xd7, 0xd2, 0x16, 0xaf, 0x65, 0x9e, 0x7b, 0x3f, 0x26, 0xbf, 0xc5,
		0x55, 0xbf, 0x69, 0xd7, 0xfd, 0xa5, 0xc1, 0x73, 0x01, 0xcf, 0x05, 0x3c, 0x97, 0x76, 0x7a, 0x2e,
		0xce, 0x9b, 0xd8, 0xfb, 0x6a, 0x5e, 0x0f, 0x5e, 0x0b, 0x78, 0x2d, 0xe0, 0xb5, 0xec, 0xa9, 0xd7,
		0xe2, 0xb6, 0xaf, 0xbb, 0xcb, 0x7e, 0xee, 0x6e, 0xfb, 0xb8, 0xfb, 0xe9, 0xdf, 0xee, 0xaf, 0x6f,
		0xbb, 0xcf, 0x7e, 0xed, 0xde, 0xfa, 0xb4, 0x7b, 0xe8, 0xcf, 0xee, 0x2a, 0xa9, 0xc0, 0x7d, 0x3f,
		0x76, 0x5f, 0x7d, 0xd8, 0x3d, 0xf5, 0x5f, 0xf7, 0xd3, 0x77, 0xdd, 0x4b, 0xbf, 0x75, 0xe8, 0x5b,
		0x0e, 0x31, 0x19, 0xc9, 0x98, 0xcc, 0x3c, 0xf3, 0x87, 0x3e, 0xf0, 0xf6, 0xe7, 0xd1, 0xdd, 0xfc,
		0x05, 0xd0, 0x20, 0x52, 0x75, 0x2a, 0xa0, 0x41, 0xa4, 0x9e, 0xbb, 0x07, 0x0d, 0x22, 0xb7, 0x30,
		0xba, 0xe3, 0x75, 0x9d, 0x59, 0x82, 0x3d, 0x6b, 0x70, 0x67, 0x52, 0x9a, 0xc9, 0x46, 0x2a, 0x5d,
		0xd0, 0xe2, 0x72, 0x60, 0x95, 0xa4, 0xc2, 0x8c, 0x93, 0x2e, 0xe1, 0x84, 0xc5, 0x16, 0xaa, 0xbe,
		0x2e, 0x9c, 0x11, 0x8a, 0x32, 0x42, 0x79, 0x30, 0xcf, 0x41, 0xb4, 0x5d, 0x2d, 0xca, 0x68, 0x69,
		0xed, 0x4c, 0xaf, 0x1f, 0x83, 0x4d, 0xf8, 0xe0, 0x0b, 0x66, 0x3d, 0xd2, 0x06, 0x8e, 0xf3, 0x91,
		0xda, 0xf3, 0x84, 0xea, 0xe6, 0x8b, 0x16, 0xb7, 0x16, 0x3f, 0x70, 0x1c, 0x97, 0xc6, 0xee, 0x1d,
		0xed, 0x51, 0x9b, 0x6f, 0xc7, 0x04, 0x7f, 0x93, 0x1e, 0x6e, 0x2a, 0x71, 0x77, 0xf1, 0x20, 0x27,
		0xad, 0xd8, 0xa2, 0xfe, 0x88, 0x7f, 0xda, 0x9f, 0x8a, 0x8b, 0xb3, 0x57, 0x17, 0xaf, 0x9e, 0xbf,
		0x38, 0x7b, 0xf5, 0x6c, 0xff, 0xe6, 0x64, 0x2f, 0x28, 0x21, 0xb8, 0x5e, 0xe0, 0x7a, 0x81, 0xeb,
		0xd5, 0x36, 0xf2, 0x9f, 0x57, 0xba, 0x16, 0x66, 0x3c, 0x15, 0x69, 0x9c, 0x0e, 0xcc, 0xb9, 0xff,
		0xfc, 0x09, 0x81, 0xfa, 0x03, 0xf5, 0x7f, 0xd4, 0xd4, 0xdf, 0x42, 0xd1, 0x50, 0x8b, 0xee, 0x83,
		0x5e, 0x17, 0xf5, 0x55, 0xcb, 0xcf, 0xe4, 0x45, 0x6b, 0xb3, 0x2e, 0xeb, 0x6b, 0xfd, 0x23, 0xca,
		0x7a, 0xa6, 0x00, 0x33, 0xcb, 0x3f, 0xcd, 0xa9, 0x84, 0x1d, 0x3a, 0x31, 0xf3, 0xa4, 0x09, 0xe5,
		0x24, 0xb6, 0x51, 0x53, 0xf7, 0xb0, 0x6d, 0x4f, 0x56, 0xb2, 0x10, 0x1a, 0x6f, 0xdb, 0xa0, 0x77,
		0x7c, 0x03, 0x4c, 0xcb, 0x9a, 0x43, 0x19, 0x55, 0x8d, 0x30, 0xaf, 0x06, 0xe1, 0xa4, 0xca, 0x83,
		0x59, 0xf5, 0x06, 0x55, 0x09, 0x5a, 0x70, 0x69, 0x4c, 0x5d, 0x19, 0x0b, 0x26, 0xc3, 0x82, 0xeb,
		0xe2, 0x82, 0xa4, 0x58, 0x71, 0x55, 0xdc, 0x92, 0x14, 0x73, 0xd7, 0xc4, 0x17, 0x92, 0x74, 0x9c,
		0xae, 0x03, 0xc3, 0xdd, 0x1e, 0xd3, 0x5d, 0x1e, 0x9d, 0x4e, 0x84, 0x26, 0x9b, 0x3a, 0x81, 0xa3,
		0x46, 0xac, 0x0f, 0xd0, 0x30, 0x18, 0x1a, 0x06, 0xa3, 0x47, 0xd3, 0x30, 0x58, 0x52, 0x4f, 0x35,
		0xc1, 0x43, 0x1f, 0x34, 0x54, 0xfa, 0xef, 0xea, 0xc1, 0x44, 0x60, 0xab, 0xa3, 0xf2, 0x81, 0x81,
		0x80, 0x4b, 0xb5, 0x96, 0x6c, 0x98, 0xaf, 0x46, 0x05, 0xe7, 0xa8, 0x9f, 0x84, 0xcf, 0x6b, 0x85,
		0xea, 0xa9, 0x51, 0xbb, 0x4d, 0xc2, 0xd1, 0x40, 0x47, 0x55, 0x54, 0xd4, 0x68, 0x0e, 0xad, 0x81,
		0x82, 0x36, 0x5a, 0x44, 0x6b, 0xa1, 0x9e, 0xdd, 0x16, 0xd1, 0xea, 0x28, 0xf7, 0x60, 0x69, 0x91,
		0x75, 0x8c, 0xf4, 0x48, 0x11, 0xbd, 0x34, 0x50, 0x4b, 0x62, 0x5a, 0x54, 0x61, 0x6a, 0xbd, 0x90,
		0x57, 0x8b, 0x6c, 0xf9, 0x5f, 0x56, 0x88, 0x48, 0x65, 0x89, 0xc9, 0x2e, 0x2d, 0x09, 0x01, 0x6b,
		0x2c, 0x25, 0xd5, 0x25, 0xa4, 0xbd, 0x74, 0xb4, 0x97, 0x8c, 0xe6, 0x52, 0x79, 0xd0, 0x9c, 0xe7,
		0x8e, 0xd2, 0x3c, 0x4b, 0x2e, 0x01, 0x45, 0xd5, 0x5f, 0x23, 0x52, 0x15, 0x75, 0x5f, 0x2e, 0xa4,
		0xc5, 0x47, 0x5f, 0xf2, 0x70, 0x75, 0x2a, 0x06, 0x0f, 0xe9, 0xea, 0x16, 0xb5, 0xb3, 0x59, 0x1b,
		0xd5, 0xa1, 0x2b, 0x84, 0xb4, 0x7e, 0x3f, 0x63, 0xe3, 0x7e, 0x85, 0xcc, 0x7e, 0x84, 0xdc, 0x7e,
		0x83, 0xac, 0xb2, 0x2b, 0xef, 0x17, 0x28, 0x2b, 0xb7, 0x74, 0xbc, 0x5f, 0x0d, 0x76, 0x36, 0xc6,
		0xd2, 0x27, 0x01, 0xd6, 0x54, 0x08, 0x92, 0x84, 0xff, 0x5b, 0xe0, 0x75, 0x6d, 0x83, 0x65, 0xba,
		0x9b, 0x4a, 0x77, 0x2f, 0x0d, 0x9e, 0x3c, 0xf9, 0x7a, 0x12, 0xbe, 0xea, 0xfc, 0xfb, 0xf5, 0x34,
		0x7c, 0xd5, 0xa9, 0x7f, 0x3c, 0xad, 0x3e, 0xea, 0x9f, 0xcf, 0xbe, 0x9e, 0x84, 0x17, 0xa3, 0x9f,
		0x9f, 0x7d, 0x3d, 0x09, 0x9f, 0x75, 0x9e, 0x46, 0xd1, 0xd1, 0xd3, 0x5f, 0xe7, 0x0f, 0xea, 0x03,
		0x03, 0x4b, 0x0b, 0x5c, 0x05, 0xc8, 0xa7, 0xb3, 0x08, 0xad, 0x61, 0xf9, 0x97, 0x0f, 0x6f, 0xd1,
		0xd9, 0xf9, 0xd9, 0xcb, 0x4b, 0xf4, 0xe9, 0xfa, 0xf3, 0x07, 0xf4, 0x1f, 0xc2, 0x73, 0x9a, 0x32,
		0x74, 0xe6, 0x18, 0xdb, 0x55, 0x73, 0xb0, 0xec, 0xc0, 0xfb, 0xca, 0x87, 0xf5, 0x0d, 0xf7, 0x07,
		0xeb, 0xbf, 0x99, 0xd3, 0x16, 0x19, 0x2d, 0xd9, 0x64, 0xe6, 0x25, 0xd6, 0xac, 0x84, 0x59, 0xd7,
		0x41, 0x38, 0x29, 0x33, 0x6e, 0x86, 0x70, 0x9b, 0xcd, 0xf6, 0x83, 0xe4, 0x3c, 0x74, 0xd6, 0xce,
		0xc3, 0x06, 0x73, 0x2c, 0x6f, 0x86, 0x97, 0x48, 0x43, 0xd2, 0xf2, 0xce, 0x3e, 0xe2, 0xe4, 0x01,
		0xea, 0x9f, 0x9a, 0x1b, 0x5e, 0x75, 0xa3, 0x01, 0xcd, 0x3f, 0xe0, 0xef, 0xe4, 0x4b, 0x9a, 0x2e,
		0x0a, 0x79, 0xfe, 0xe6, 0x83, 0xe9, 0x3f, 0xcd, 0xdc, 0xda, 0x3b, 0xf2, 0x83, 0xc6, 0xcd, 0x8d,
		0x3c, 0x1c, 0x3c, 0xfc, 0x1f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0xe0,
		0xf1, 0x5e, 0x57, 0xd6, 0x5e, 0x04, 0x00,
	}
)


// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
func initΛEnumTypes(){
  ΛEnumTypes = map[string][]reflect.Type{
	"/interfaces-state/interface/admin-status": []reflect.Type{
		reflect.TypeOf((E_IETFInterfaces_InterfacesState_Interface_AdminStatus)(0)),
	},
	"/interfaces-state/interface/oper-status": []reflect.Type{
		reflect.TypeOf((E_IETFInterfaces_InterfacesState_Interface_OperStatus)(0)),
	},
	"/interfaces-state/interface/type": []reflect.Type{
		reflect.TypeOf((E_IETFInterfaces_InterfaceType)(0)),
	},
	"/interfaces/interface/admin-status": []reflect.Type{
		reflect.TypeOf((E_IETFInterfaces_Interfaces_Interface_AdminStatus)(0)),
	},
	"/interfaces/interface/link-up-down-trap-enable": []reflect.Type{
		reflect.TypeOf((E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable)(0)),
	},
	"/interfaces/interface/oper-status": []reflect.Type{
		reflect.TypeOf((E_IETFInterfaces_Interfaces_Interface_OperStatus)(0)),
	},
	"/interfaces/interface/type": []reflect.Type{
		reflect.TypeOf((E_IETFInterfaces_InterfaceType)(0)),
	},
	"/routing-state/control-plane-protocols/control-plane-protocol/type": []reflect.Type{
		reflect.TypeOf((E_IETFRouting_ControlPlaneProtocol)(0)),
	},
	"/routing-state/ribs/rib/address-family": []reflect.Type{
		reflect.TypeOf((E_IETFRouting_AddressFamily)(0)),
	},
	"/routing-state/ribs/rib/routes/route/next-hop/next-hop-options/special-next-hop/special-next-hop": []reflect.Type{
		reflect.TypeOf((E_IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop_SpecialNextHop)(0)),
	},
	"/routing-state/ribs/rib/routes/route/source-protocol": []reflect.Type{
		reflect.TypeOf((E_IETFRouting_RoutingProtocol)(0)),
	},
	"/routing/control-plane-protocols/control-plane-protocol/type": []reflect.Type{
		reflect.TypeOf((E_IETFRouting_ControlPlaneProtocol)(0)),
	},
	"/routing/ribs/rib/address-family": []reflect.Type{
		reflect.TypeOf((E_IETFRouting_AddressFamily)(0)),
	},
	"/routing/ribs/rib/routes/route/next-hop/next-hop-options/special-next-hop/special-next-hop": []reflect.Type{
		reflect.TypeOf((E_IETFRouting_RoutingState_Ribs_Rib_Routes_Route_NextHop_SpecialNextHop)(0)),
	},
	"/routing/ribs/rib/routes/route/source-protocol": []reflect.Type{
		reflect.TypeOf((E_IETFRouting_RoutingProtocol)(0)),
	},
  }
}

