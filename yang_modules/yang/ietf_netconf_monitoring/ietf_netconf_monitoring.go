/*
Package ietf_netconf_monitoring is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by C:/Users/hamza/go/pkg/mod/github.com/openconfig/ygot@v0.27.0/genutil/names.go
using the following YANG input files:
	- ietf-netconf-monitoring@2010-10-04.yang
Imported modules were sourced from:
	- ...
*/
package ietf_netconf_monitoring

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

var (
	SchemaTree map[string]*yang.Entry
	ΛEnumTypes map[string][]reflect.Type
)

func init() {
	var err error
	initΛEnumTypes()
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " +  err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root: &Device{},
		SchemaTree: uzp,
		Unmarshal: Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn )
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// Device represents the /device YANG schema element.
type Device struct {
	NetconfState	*IETFNetconfMonitoring_NetconfState	`path:"netconf-state" module:"ietf-netconf-monitoring"`
}

// IsYANGGoStruct ensures that Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Device) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Device"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Device) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Device.
func (*Device) ΛBelongingModule() string {
	return ""
}


// IETFNetconfMonitoring_NetconfState represents the /ietf-netconf-monitoring/netconf-state YANG schema element.
type IETFNetconfMonitoring_NetconfState struct {
	Capabilities	*IETFNetconfMonitoring_NetconfState_Capabilities	`path:"capabilities" module:"ietf-netconf-monitoring"`
	Datastores	*IETFNetconfMonitoring_NetconfState_Datastores	`path:"datastores" module:"ietf-netconf-monitoring"`
	Schemas	*IETFNetconfMonitoring_NetconfState_Schemas	`path:"schemas" module:"ietf-netconf-monitoring"`
	Sessions	*IETFNetconfMonitoring_NetconfState_Sessions	`path:"sessions" module:"ietf-netconf-monitoring"`
	Statistics	*IETFNetconfMonitoring_NetconfState_Statistics	`path:"statistics" module:"ietf-netconf-monitoring"`
}

// IsYANGGoStruct ensures that IETFNetconfMonitoring_NetconfState implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFNetconfMonitoring_NetconfState) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFNetconfMonitoring_NetconfState) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFNetconfMonitoring_NetconfState"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFNetconfMonitoring_NetconfState) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFNetconfMonitoring_NetconfState) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFNetconfMonitoring_NetconfState.
func (*IETFNetconfMonitoring_NetconfState) ΛBelongingModule() string {
	return "ietf-netconf-monitoring"
}


// IETFNetconfMonitoring_NetconfState_Capabilities represents the /ietf-netconf-monitoring/netconf-state/capabilities YANG schema element.
type IETFNetconfMonitoring_NetconfState_Capabilities struct {
	Capability	[]string	`path:"capability" module:"ietf-netconf-monitoring"`
}

// IsYANGGoStruct ensures that IETFNetconfMonitoring_NetconfState_Capabilities implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFNetconfMonitoring_NetconfState_Capabilities) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFNetconfMonitoring_NetconfState_Capabilities) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFNetconfMonitoring_NetconfState_Capabilities"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFNetconfMonitoring_NetconfState_Capabilities) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFNetconfMonitoring_NetconfState_Capabilities) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFNetconfMonitoring_NetconfState_Capabilities.
func (*IETFNetconfMonitoring_NetconfState_Capabilities) ΛBelongingModule() string {
	return "ietf-netconf-monitoring"
}


// IETFNetconfMonitoring_NetconfState_Datastores represents the /ietf-netconf-monitoring/netconf-state/datastores YANG schema element.
type IETFNetconfMonitoring_NetconfState_Datastores struct {
	Datastore	map[E_IETFNetconfMonitoring_NetconfDatastoreType]*IETFNetconfMonitoring_NetconfState_Datastores_Datastore	`path:"datastore" module:"ietf-netconf-monitoring"`
}

// IsYANGGoStruct ensures that IETFNetconfMonitoring_NetconfState_Datastores implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFNetconfMonitoring_NetconfState_Datastores) IsYANGGoStruct() {}

// NewDatastore creates a new entry in the Datastore list of the
// IETFNetconfMonitoring_NetconfState_Datastores struct. The keys of the list are populated from the input
// arguments.
func (t *IETFNetconfMonitoring_NetconfState_Datastores) NewDatastore(Name E_IETFNetconfMonitoring_NetconfDatastoreType) (*IETFNetconfMonitoring_NetconfState_Datastores_Datastore, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Datastore == nil {
		t.Datastore = make(map[E_IETFNetconfMonitoring_NetconfDatastoreType]*IETFNetconfMonitoring_NetconfState_Datastores_Datastore)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Datastore[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Datastore", key)
	}

	t.Datastore[key] = &IETFNetconfMonitoring_NetconfState_Datastores_Datastore{
		Name: Name,
	}

	return t.Datastore[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFNetconfMonitoring_NetconfState_Datastores) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFNetconfMonitoring_NetconfState_Datastores"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFNetconfMonitoring_NetconfState_Datastores) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFNetconfMonitoring_NetconfState_Datastores) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFNetconfMonitoring_NetconfState_Datastores.
func (*IETFNetconfMonitoring_NetconfState_Datastores) ΛBelongingModule() string {
	return "ietf-netconf-monitoring"
}


// IETFNetconfMonitoring_NetconfState_Datastores_Datastore represents the /ietf-netconf-monitoring/netconf-state/datastores/datastore YANG schema element.
type IETFNetconfMonitoring_NetconfState_Datastores_Datastore struct {
	Locks	*IETFNetconfMonitoring_NetconfState_Datastores_Datastore_Locks	`path:"locks" module:"ietf-netconf-monitoring"`
	Name	E_IETFNetconfMonitoring_NetconfDatastoreType	`path:"name" module:"ietf-netconf-monitoring"`
}

// IsYANGGoStruct ensures that IETFNetconfMonitoring_NetconfState_Datastores_Datastore implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFNetconfMonitoring_NetconfState_Datastores_Datastore) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the IETFNetconfMonitoring_NetconfState_Datastores_Datastore struct, which is a YANG list entry.
func (t *IETFNetconfMonitoring_NetconfState_Datastores_Datastore) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"name": t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFNetconfMonitoring_NetconfState_Datastores_Datastore) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFNetconfMonitoring_NetconfState_Datastores_Datastore"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFNetconfMonitoring_NetconfState_Datastores_Datastore) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFNetconfMonitoring_NetconfState_Datastores_Datastore) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFNetconfMonitoring_NetconfState_Datastores_Datastore.
func (*IETFNetconfMonitoring_NetconfState_Datastores_Datastore) ΛBelongingModule() string {
	return "ietf-netconf-monitoring"
}


// IETFNetconfMonitoring_NetconfState_Datastores_Datastore_Locks represents the /ietf-netconf-monitoring/netconf-state/datastores/datastore/locks YANG schema element.
type IETFNetconfMonitoring_NetconfState_Datastores_Datastore_Locks struct {
	GlobalLock	*IETFNetconfMonitoring_NetconfState_Datastores_Datastore_Locks_GlobalLock	`path:"global-lock" module:"ietf-netconf-monitoring"`
	PartialLock	map[uint32]*IETFNetconfMonitoring_NetconfState_Datastores_Datastore_Locks_PartialLock	`path:"partial-lock" module:"ietf-netconf-monitoring"`
}

// IsYANGGoStruct ensures that IETFNetconfMonitoring_NetconfState_Datastores_Datastore_Locks implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFNetconfMonitoring_NetconfState_Datastores_Datastore_Locks) IsYANGGoStruct() {}

// NewPartialLock creates a new entry in the PartialLock list of the
// IETFNetconfMonitoring_NetconfState_Datastores_Datastore_Locks struct. The keys of the list are populated from the input
// arguments.
func (t *IETFNetconfMonitoring_NetconfState_Datastores_Datastore_Locks) NewPartialLock(LockId uint32) (*IETFNetconfMonitoring_NetconfState_Datastores_Datastore_Locks_PartialLock, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PartialLock == nil {
		t.PartialLock = make(map[uint32]*IETFNetconfMonitoring_NetconfState_Datastores_Datastore_Locks_PartialLock)
	}

	key := LockId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PartialLock[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PartialLock", key)
	}

	t.PartialLock[key] = &IETFNetconfMonitoring_NetconfState_Datastores_Datastore_Locks_PartialLock{
		LockId: &LockId,
	}

	return t.PartialLock[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFNetconfMonitoring_NetconfState_Datastores_Datastore_Locks) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFNetconfMonitoring_NetconfState_Datastores_Datastore_Locks"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFNetconfMonitoring_NetconfState_Datastores_Datastore_Locks) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFNetconfMonitoring_NetconfState_Datastores_Datastore_Locks) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFNetconfMonitoring_NetconfState_Datastores_Datastore_Locks.
func (*IETFNetconfMonitoring_NetconfState_Datastores_Datastore_Locks) ΛBelongingModule() string {
	return "ietf-netconf-monitoring"
}


// IETFNetconfMonitoring_NetconfState_Datastores_Datastore_Locks_GlobalLock represents the /ietf-netconf-monitoring/netconf-state/datastores/datastore/locks/global-lock YANG schema element.
type IETFNetconfMonitoring_NetconfState_Datastores_Datastore_Locks_GlobalLock struct {
	LockedBySession	*uint32	`path:"locked-by-session" module:"ietf-netconf-monitoring"`
	LockedTime	*string	`path:"locked-time" module:"ietf-netconf-monitoring"`
}

// IsYANGGoStruct ensures that IETFNetconfMonitoring_NetconfState_Datastores_Datastore_Locks_GlobalLock implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFNetconfMonitoring_NetconfState_Datastores_Datastore_Locks_GlobalLock) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFNetconfMonitoring_NetconfState_Datastores_Datastore_Locks_GlobalLock) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFNetconfMonitoring_NetconfState_Datastores_Datastore_Locks_GlobalLock"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFNetconfMonitoring_NetconfState_Datastores_Datastore_Locks_GlobalLock) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFNetconfMonitoring_NetconfState_Datastores_Datastore_Locks_GlobalLock) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFNetconfMonitoring_NetconfState_Datastores_Datastore_Locks_GlobalLock.
func (*IETFNetconfMonitoring_NetconfState_Datastores_Datastore_Locks_GlobalLock) ΛBelongingModule() string {
	return "ietf-netconf-monitoring"
}


// IETFNetconfMonitoring_NetconfState_Datastores_Datastore_Locks_PartialLock represents the /ietf-netconf-monitoring/netconf-state/datastores/datastore/locks/partial-lock YANG schema element.
type IETFNetconfMonitoring_NetconfState_Datastores_Datastore_Locks_PartialLock struct {
	LockId	*uint32	`path:"lock-id" module:"ietf-netconf-monitoring"`
	LockedBySession	*uint32	`path:"locked-by-session" module:"ietf-netconf-monitoring"`
	LockedNode	[]interface{}	`path:"locked-node" module:"ietf-netconf-monitoring"`
	LockedTime	*string	`path:"locked-time" module:"ietf-netconf-monitoring"`
	Select	[]string	`path:"select" module:"ietf-netconf-monitoring"`
}

// IsYANGGoStruct ensures that IETFNetconfMonitoring_NetconfState_Datastores_Datastore_Locks_PartialLock implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFNetconfMonitoring_NetconfState_Datastores_Datastore_Locks_PartialLock) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the IETFNetconfMonitoring_NetconfState_Datastores_Datastore_Locks_PartialLock struct, which is a YANG list entry.
func (t *IETFNetconfMonitoring_NetconfState_Datastores_Datastore_Locks_PartialLock) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LockId == nil {
		return nil, fmt.Errorf("nil value for key LockId")
	}

	return map[string]interface{}{
		"lock-id": *t.LockId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFNetconfMonitoring_NetconfState_Datastores_Datastore_Locks_PartialLock) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFNetconfMonitoring_NetconfState_Datastores_Datastore_Locks_PartialLock"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFNetconfMonitoring_NetconfState_Datastores_Datastore_Locks_PartialLock) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFNetconfMonitoring_NetconfState_Datastores_Datastore_Locks_PartialLock) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFNetconfMonitoring_NetconfState_Datastores_Datastore_Locks_PartialLock.
func (*IETFNetconfMonitoring_NetconfState_Datastores_Datastore_Locks_PartialLock) ΛBelongingModule() string {
	return "ietf-netconf-monitoring"
}


// IETFNetconfMonitoring_NetconfState_Schemas represents the /ietf-netconf-monitoring/netconf-state/schemas YANG schema element.
type IETFNetconfMonitoring_NetconfState_Schemas struct {
	Schema	map[IETFNetconfMonitoring_NetconfState_Schemas_Schema_Key]*IETFNetconfMonitoring_NetconfState_Schemas_Schema	`path:"schema" module:"ietf-netconf-monitoring"`
}

// IsYANGGoStruct ensures that IETFNetconfMonitoring_NetconfState_Schemas implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFNetconfMonitoring_NetconfState_Schemas) IsYANGGoStruct() {}

// IETFNetconfMonitoring_NetconfState_Schemas_Schema_Key represents the key for list Schema of element /ietf-netconf-monitoring/netconf-state/schemas.
type IETFNetconfMonitoring_NetconfState_Schemas_Schema_Key struct {
	Identifier	string	`path:"identifier"`
	Version	string	`path:"version"`
	Format	E_IETFNetconfMonitoring_SchemaFormat	`path:"format"`
}

// IsYANGGoKeyStruct ensures that IETFNetconfMonitoring_NetconfState_Schemas_Schema_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (IETFNetconfMonitoring_NetconfState_Schemas_Schema_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the IETFNetconfMonitoring_NetconfState_Schemas_Schema_Key key struct.
func (t IETFNetconfMonitoring_NetconfState_Schemas_Schema_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"identifier": t.Identifier,
		"version": t.Version,
		"format": t.Format,
	}, nil
}

// NewSchema creates a new entry in the Schema list of the
// IETFNetconfMonitoring_NetconfState_Schemas struct. The keys of the list are populated from the input
// arguments.
func (t *IETFNetconfMonitoring_NetconfState_Schemas) NewSchema(Identifier string, Version string, Format E_IETFNetconfMonitoring_SchemaFormat) (*IETFNetconfMonitoring_NetconfState_Schemas_Schema, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Schema == nil {
		t.Schema = make(map[IETFNetconfMonitoring_NetconfState_Schemas_Schema_Key]*IETFNetconfMonitoring_NetconfState_Schemas_Schema)
	}

	key := IETFNetconfMonitoring_NetconfState_Schemas_Schema_Key{
		Identifier: Identifier,
		Version: Version,
		Format: Format,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Schema[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Schema", key)
	}

	t.Schema[key] = &IETFNetconfMonitoring_NetconfState_Schemas_Schema{
		Identifier: &Identifier,
		Version: &Version,
		Format: Format,
	}

	return t.Schema[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFNetconfMonitoring_NetconfState_Schemas) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFNetconfMonitoring_NetconfState_Schemas"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFNetconfMonitoring_NetconfState_Schemas) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFNetconfMonitoring_NetconfState_Schemas) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFNetconfMonitoring_NetconfState_Schemas.
func (*IETFNetconfMonitoring_NetconfState_Schemas) ΛBelongingModule() string {
	return "ietf-netconf-monitoring"
}


// IETFNetconfMonitoring_NetconfState_Schemas_Schema represents the /ietf-netconf-monitoring/netconf-state/schemas/schema YANG schema element.
type IETFNetconfMonitoring_NetconfState_Schemas_Schema struct {
	Format	E_IETFNetconfMonitoring_SchemaFormat	`path:"format" module:"ietf-netconf-monitoring"`
	Identifier	*string	`path:"identifier" module:"ietf-netconf-monitoring"`
	Location	[]IETFNetconfMonitoring_NetconfState_Schemas_Schema_Location_Union	`path:"location" module:"ietf-netconf-monitoring"`
	Namespace	*string	`path:"namespace" module:"ietf-netconf-monitoring"`
	Version	*string	`path:"version" module:"ietf-netconf-monitoring"`
}

// IsYANGGoStruct ensures that IETFNetconfMonitoring_NetconfState_Schemas_Schema implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFNetconfMonitoring_NetconfState_Schemas_Schema) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the IETFNetconfMonitoring_NetconfState_Schemas_Schema struct, which is a YANG list entry.
func (t *IETFNetconfMonitoring_NetconfState_Schemas_Schema) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Identifier == nil {
		return nil, fmt.Errorf("nil value for key Identifier")
	}

	if t.Version == nil {
		return nil, fmt.Errorf("nil value for key Version")
	}

	return map[string]interface{}{
		"format": t.Format,
		"identifier": *t.Identifier,
		"version": *t.Version,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFNetconfMonitoring_NetconfState_Schemas_Schema) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFNetconfMonitoring_NetconfState_Schemas_Schema"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFNetconfMonitoring_NetconfState_Schemas_Schema) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFNetconfMonitoring_NetconfState_Schemas_Schema) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFNetconfMonitoring_NetconfState_Schemas_Schema.
func (*IETFNetconfMonitoring_NetconfState_Schemas_Schema) ΛBelongingModule() string {
	return "ietf-netconf-monitoring"
}

// IETFNetconfMonitoring_NetconfState_Schemas_Schema_Location_Union is an interface that is implemented by valid types for the union
// for the leaf /ietf-netconf-monitoring/netconf-state/schemas/schema/location within the YANG schema.
type IETFNetconfMonitoring_NetconfState_Schemas_Schema_Location_Union interface {
	Is_IETFNetconfMonitoring_NetconfState_Schemas_Schema_Location_Union()
}

// IETFNetconfMonitoring_NetconfState_Schemas_Schema_Location_Union_E_IETFNetconfMonitoring_NetconfState_Schemas_Schema_Location is used when /ietf-netconf-monitoring/netconf-state/schemas/schema/location
// is to be set to a E_IETFNetconfMonitoring_NetconfState_Schemas_Schema_Location value.
type IETFNetconfMonitoring_NetconfState_Schemas_Schema_Location_Union_E_IETFNetconfMonitoring_NetconfState_Schemas_Schema_Location struct {
	E_IETFNetconfMonitoring_NetconfState_Schemas_Schema_Location	E_IETFNetconfMonitoring_NetconfState_Schemas_Schema_Location
}

// Is_IETFNetconfMonitoring_NetconfState_Schemas_Schema_Location_Union ensures that IETFNetconfMonitoring_NetconfState_Schemas_Schema_Location_Union_E_IETFNetconfMonitoring_NetconfState_Schemas_Schema_Location
// implements the IETFNetconfMonitoring_NetconfState_Schemas_Schema_Location_Union interface.
func (*IETFNetconfMonitoring_NetconfState_Schemas_Schema_Location_Union_E_IETFNetconfMonitoring_NetconfState_Schemas_Schema_Location) Is_IETFNetconfMonitoring_NetconfState_Schemas_Schema_Location_Union() {}

// IETFNetconfMonitoring_NetconfState_Schemas_Schema_Location_Union_String is used when /ietf-netconf-monitoring/netconf-state/schemas/schema/location
// is to be set to a string value.
type IETFNetconfMonitoring_NetconfState_Schemas_Schema_Location_Union_String struct {
	String	string
}

// Is_IETFNetconfMonitoring_NetconfState_Schemas_Schema_Location_Union ensures that IETFNetconfMonitoring_NetconfState_Schemas_Schema_Location_Union_String
// implements the IETFNetconfMonitoring_NetconfState_Schemas_Schema_Location_Union interface.
func (*IETFNetconfMonitoring_NetconfState_Schemas_Schema_Location_Union_String) Is_IETFNetconfMonitoring_NetconfState_Schemas_Schema_Location_Union() {}

// To_IETFNetconfMonitoring_NetconfState_Schemas_Schema_Location_Union takes an input interface{} and attempts to convert it to a struct
// which implements the IETFNetconfMonitoring_NetconfState_Schemas_Schema_Location_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *IETFNetconfMonitoring_NetconfState_Schemas_Schema) To_IETFNetconfMonitoring_NetconfState_Schemas_Schema_Location_Union(i interface{}) (IETFNetconfMonitoring_NetconfState_Schemas_Schema_Location_Union, error) {
	switch v := i.(type) {
	case E_IETFNetconfMonitoring_NetconfState_Schemas_Schema_Location:
		return &IETFNetconfMonitoring_NetconfState_Schemas_Schema_Location_Union_E_IETFNetconfMonitoring_NetconfState_Schemas_Schema_Location{v}, nil
	case string:
		return &IETFNetconfMonitoring_NetconfState_Schemas_Schema_Location_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to IETFNetconfMonitoring_NetconfState_Schemas_Schema_Location_Union, unknown union type, got: %T, want any of [E_IETFNetconfMonitoring_NetconfState_Schemas_Schema_Location, string]", i, i)
	}
}


// IETFNetconfMonitoring_NetconfState_Sessions represents the /ietf-netconf-monitoring/netconf-state/sessions YANG schema element.
type IETFNetconfMonitoring_NetconfState_Sessions struct {
	Session	map[uint32]*IETFNetconfMonitoring_NetconfState_Sessions_Session	`path:"session" module:"ietf-netconf-monitoring"`
}

// IsYANGGoStruct ensures that IETFNetconfMonitoring_NetconfState_Sessions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFNetconfMonitoring_NetconfState_Sessions) IsYANGGoStruct() {}

// NewSession creates a new entry in the Session list of the
// IETFNetconfMonitoring_NetconfState_Sessions struct. The keys of the list are populated from the input
// arguments.
func (t *IETFNetconfMonitoring_NetconfState_Sessions) NewSession(SessionId uint32) (*IETFNetconfMonitoring_NetconfState_Sessions_Session, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Session == nil {
		t.Session = make(map[uint32]*IETFNetconfMonitoring_NetconfState_Sessions_Session)
	}

	key := SessionId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Session[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Session", key)
	}

	t.Session[key] = &IETFNetconfMonitoring_NetconfState_Sessions_Session{
		SessionId: &SessionId,
	}

	return t.Session[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFNetconfMonitoring_NetconfState_Sessions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFNetconfMonitoring_NetconfState_Sessions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFNetconfMonitoring_NetconfState_Sessions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFNetconfMonitoring_NetconfState_Sessions) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFNetconfMonitoring_NetconfState_Sessions.
func (*IETFNetconfMonitoring_NetconfState_Sessions) ΛBelongingModule() string {
	return "ietf-netconf-monitoring"
}


// IETFNetconfMonitoring_NetconfState_Sessions_Session represents the /ietf-netconf-monitoring/netconf-state/sessions/session YANG schema element.
type IETFNetconfMonitoring_NetconfState_Sessions_Session struct {
	InBadRpcs	*uint32	`path:"in-bad-rpcs" module:"ietf-netconf-monitoring"`
	InRpcs	*uint32	`path:"in-rpcs" module:"ietf-netconf-monitoring"`
	LoginTime	*string	`path:"login-time" module:"ietf-netconf-monitoring"`
	OutNotifications	*uint32	`path:"out-notifications" module:"ietf-netconf-monitoring"`
	OutRpcErrors	*uint32	`path:"out-rpc-errors" module:"ietf-netconf-monitoring"`
	SessionId	*uint32	`path:"session-id" module:"ietf-netconf-monitoring"`
	SourceHost	*string	`path:"source-host" module:"ietf-netconf-monitoring"`
	Transport	E_IETFNetconfMonitoring_Transport	`path:"transport" module:"ietf-netconf-monitoring"`
	Username	*string	`path:"username" module:"ietf-netconf-monitoring"`
}

// IsYANGGoStruct ensures that IETFNetconfMonitoring_NetconfState_Sessions_Session implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFNetconfMonitoring_NetconfState_Sessions_Session) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the IETFNetconfMonitoring_NetconfState_Sessions_Session struct, which is a YANG list entry.
func (t *IETFNetconfMonitoring_NetconfState_Sessions_Session) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SessionId == nil {
		return nil, fmt.Errorf("nil value for key SessionId")
	}

	return map[string]interface{}{
		"session-id": *t.SessionId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFNetconfMonitoring_NetconfState_Sessions_Session) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFNetconfMonitoring_NetconfState_Sessions_Session"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFNetconfMonitoring_NetconfState_Sessions_Session) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFNetconfMonitoring_NetconfState_Sessions_Session) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFNetconfMonitoring_NetconfState_Sessions_Session.
func (*IETFNetconfMonitoring_NetconfState_Sessions_Session) ΛBelongingModule() string {
	return "ietf-netconf-monitoring"
}


// IETFNetconfMonitoring_NetconfState_Statistics represents the /ietf-netconf-monitoring/netconf-state/statistics YANG schema element.
type IETFNetconfMonitoring_NetconfState_Statistics struct {
	DroppedSessions	*uint32	`path:"dropped-sessions" module:"ietf-netconf-monitoring"`
	InBadHellos	*uint32	`path:"in-bad-hellos" module:"ietf-netconf-monitoring"`
	InBadRpcs	*uint32	`path:"in-bad-rpcs" module:"ietf-netconf-monitoring"`
	InRpcs	*uint32	`path:"in-rpcs" module:"ietf-netconf-monitoring"`
	InSessions	*uint32	`path:"in-sessions" module:"ietf-netconf-monitoring"`
	NetconfStartTime	*string	`path:"netconf-start-time" module:"ietf-netconf-monitoring"`
	OutNotifications	*uint32	`path:"out-notifications" module:"ietf-netconf-monitoring"`
	OutRpcErrors	*uint32	`path:"out-rpc-errors" module:"ietf-netconf-monitoring"`
}

// IsYANGGoStruct ensures that IETFNetconfMonitoring_NetconfState_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFNetconfMonitoring_NetconfState_Statistics) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFNetconfMonitoring_NetconfState_Statistics) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFNetconfMonitoring_NetconfState_Statistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFNetconfMonitoring_NetconfState_Statistics) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFNetconfMonitoring_NetconfState_Statistics) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFNetconfMonitoring_NetconfState_Statistics.
func (*IETFNetconfMonitoring_NetconfState_Statistics) ΛBelongingModule() string {
	return "ietf-netconf-monitoring"
}


// E_IETFNetconfMonitoring_NetconfDatastoreType is a derived int64 type which is used to represent
// the enumerated node IETFNetconfMonitoring_NetconfDatastoreType. An additional value named
// IETFNetconfMonitoring_NetconfDatastoreType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFNetconfMonitoring_NetconfDatastoreType int64

// IsYANGGoEnum ensures that IETFNetconfMonitoring_NetconfDatastoreType implements the yang.GoEnum
// interface. This ensures that IETFNetconfMonitoring_NetconfDatastoreType can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFNetconfMonitoring_NetconfDatastoreType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFNetconfMonitoring_NetconfDatastoreType.
func (E_IETFNetconfMonitoring_NetconfDatastoreType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_IETFNetconfMonitoring_NetconfDatastoreType.
func (e E_IETFNetconfMonitoring_NetconfDatastoreType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFNetconfMonitoring_NetconfDatastoreType")
}

const (
	// IETFNetconfMonitoring_NetconfDatastoreType_UNSET corresponds to the value UNSET of IETFNetconfMonitoring_NetconfDatastoreType
	IETFNetconfMonitoring_NetconfDatastoreType_UNSET E_IETFNetconfMonitoring_NetconfDatastoreType = 0
	// IETFNetconfMonitoring_NetconfDatastoreType_running corresponds to the value running of IETFNetconfMonitoring_NetconfDatastoreType
	IETFNetconfMonitoring_NetconfDatastoreType_running E_IETFNetconfMonitoring_NetconfDatastoreType = 1
	// IETFNetconfMonitoring_NetconfDatastoreType_candidate corresponds to the value candidate of IETFNetconfMonitoring_NetconfDatastoreType
	IETFNetconfMonitoring_NetconfDatastoreType_candidate E_IETFNetconfMonitoring_NetconfDatastoreType = 2
	// IETFNetconfMonitoring_NetconfDatastoreType_startup corresponds to the value startup of IETFNetconfMonitoring_NetconfDatastoreType
	IETFNetconfMonitoring_NetconfDatastoreType_startup E_IETFNetconfMonitoring_NetconfDatastoreType = 3
)


// E_IETFNetconfMonitoring_NetconfState_Schemas_Schema_Location is a derived int64 type which is used to represent
// the enumerated node IETFNetconfMonitoring_NetconfState_Schemas_Schema_Location. An additional value named
// IETFNetconfMonitoring_NetconfState_Schemas_Schema_Location_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFNetconfMonitoring_NetconfState_Schemas_Schema_Location int64

// IsYANGGoEnum ensures that IETFNetconfMonitoring_NetconfState_Schemas_Schema_Location implements the yang.GoEnum
// interface. This ensures that IETFNetconfMonitoring_NetconfState_Schemas_Schema_Location can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFNetconfMonitoring_NetconfState_Schemas_Schema_Location) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFNetconfMonitoring_NetconfState_Schemas_Schema_Location.
func (E_IETFNetconfMonitoring_NetconfState_Schemas_Schema_Location) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_IETFNetconfMonitoring_NetconfState_Schemas_Schema_Location.
func (e E_IETFNetconfMonitoring_NetconfState_Schemas_Schema_Location) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFNetconfMonitoring_NetconfState_Schemas_Schema_Location")
}

const (
	// IETFNetconfMonitoring_NetconfState_Schemas_Schema_Location_UNSET corresponds to the value UNSET of IETFNetconfMonitoring_NetconfState_Schemas_Schema_Location
	IETFNetconfMonitoring_NetconfState_Schemas_Schema_Location_UNSET E_IETFNetconfMonitoring_NetconfState_Schemas_Schema_Location = 0
	// IETFNetconfMonitoring_NetconfState_Schemas_Schema_Location_NETCONF corresponds to the value NETCONF of IETFNetconfMonitoring_NetconfState_Schemas_Schema_Location
	IETFNetconfMonitoring_NetconfState_Schemas_Schema_Location_NETCONF E_IETFNetconfMonitoring_NetconfState_Schemas_Schema_Location = 1
)


// E_IETFNetconfMonitoring_SchemaFormat is a derived int64 type which is used to represent
// the enumerated node IETFNetconfMonitoring_SchemaFormat. An additional value named
// IETFNetconfMonitoring_SchemaFormat_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFNetconfMonitoring_SchemaFormat int64

// IsYANGGoEnum ensures that IETFNetconfMonitoring_SchemaFormat implements the yang.GoEnum
// interface. This ensures that IETFNetconfMonitoring_SchemaFormat can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFNetconfMonitoring_SchemaFormat) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFNetconfMonitoring_SchemaFormat.
func (E_IETFNetconfMonitoring_SchemaFormat) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_IETFNetconfMonitoring_SchemaFormat.
func (e E_IETFNetconfMonitoring_SchemaFormat) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFNetconfMonitoring_SchemaFormat")
}

const (
	// IETFNetconfMonitoring_SchemaFormat_UNSET corresponds to the value UNSET of IETFNetconfMonitoring_SchemaFormat
	IETFNetconfMonitoring_SchemaFormat_UNSET E_IETFNetconfMonitoring_SchemaFormat = 0
	// IETFNetconfMonitoring_SchemaFormat_rnc corresponds to the value rnc of IETFNetconfMonitoring_SchemaFormat
	IETFNetconfMonitoring_SchemaFormat_rnc E_IETFNetconfMonitoring_SchemaFormat = 1
	// IETFNetconfMonitoring_SchemaFormat_rng corresponds to the value rng of IETFNetconfMonitoring_SchemaFormat
	IETFNetconfMonitoring_SchemaFormat_rng E_IETFNetconfMonitoring_SchemaFormat = 2
	// IETFNetconfMonitoring_SchemaFormat_xsd corresponds to the value xsd of IETFNetconfMonitoring_SchemaFormat
	IETFNetconfMonitoring_SchemaFormat_xsd E_IETFNetconfMonitoring_SchemaFormat = 3
	// IETFNetconfMonitoring_SchemaFormat_yang corresponds to the value yang of IETFNetconfMonitoring_SchemaFormat
	IETFNetconfMonitoring_SchemaFormat_yang E_IETFNetconfMonitoring_SchemaFormat = 4
	// IETFNetconfMonitoring_SchemaFormat_yin corresponds to the value yin of IETFNetconfMonitoring_SchemaFormat
	IETFNetconfMonitoring_SchemaFormat_yin E_IETFNetconfMonitoring_SchemaFormat = 5
)


// E_IETFNetconfMonitoring_Transport is a derived int64 type which is used to represent
// the enumerated node IETFNetconfMonitoring_Transport. An additional value named
// IETFNetconfMonitoring_Transport_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFNetconfMonitoring_Transport int64

// IsYANGGoEnum ensures that IETFNetconfMonitoring_Transport implements the yang.GoEnum
// interface. This ensures that IETFNetconfMonitoring_Transport can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFNetconfMonitoring_Transport) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFNetconfMonitoring_Transport.
func (E_IETFNetconfMonitoring_Transport) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_IETFNetconfMonitoring_Transport.
func (e E_IETFNetconfMonitoring_Transport) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFNetconfMonitoring_Transport")
}

const (
	// IETFNetconfMonitoring_Transport_UNSET corresponds to the value UNSET of IETFNetconfMonitoring_Transport
	IETFNetconfMonitoring_Transport_UNSET E_IETFNetconfMonitoring_Transport = 0
	// IETFNetconfMonitoring_Transport_netconf_beep corresponds to the value netconf_beep of IETFNetconfMonitoring_Transport
	IETFNetconfMonitoring_Transport_netconf_beep E_IETFNetconfMonitoring_Transport = 1
	// IETFNetconfMonitoring_Transport_netconf_soap_over_beep corresponds to the value netconf_soap_over_beep of IETFNetconfMonitoring_Transport
	IETFNetconfMonitoring_Transport_netconf_soap_over_beep E_IETFNetconfMonitoring_Transport = 2
	// IETFNetconfMonitoring_Transport_netconf_soap_over_https corresponds to the value netconf_soap_over_https of IETFNetconfMonitoring_Transport
	IETFNetconfMonitoring_Transport_netconf_soap_over_https E_IETFNetconfMonitoring_Transport = 3
	// IETFNetconfMonitoring_Transport_netconf_ssh corresponds to the value netconf_ssh of IETFNetconfMonitoring_Transport
	IETFNetconfMonitoring_Transport_netconf_ssh E_IETFNetconfMonitoring_Transport = 4
	// IETFNetconfMonitoring_Transport_netconf_tls corresponds to the value netconf_tls of IETFNetconfMonitoring_Transport
	IETFNetconfMonitoring_Transport_netconf_tls E_IETFNetconfMonitoring_Transport = 5
)


// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_IETFNetconfMonitoring_NetconfDatastoreType": {
		1: {Name: "running"},
		2: {Name: "candidate"},
		3: {Name: "startup"},
	},
	"E_IETFNetconfMonitoring_NetconfState_Schemas_Schema_Location": {
		1: {Name: "NETCONF"},
	},
	"E_IETFNetconfMonitoring_SchemaFormat": {
		1: {Name: "rnc", DefiningModule: "ietf-netconf-monitoring"},
		2: {Name: "rng", DefiningModule: "ietf-netconf-monitoring"},
		3: {Name: "xsd", DefiningModule: "ietf-netconf-monitoring"},
		4: {Name: "yang", DefiningModule: "ietf-netconf-monitoring"},
		5: {Name: "yin", DefiningModule: "ietf-netconf-monitoring"},
	},
	"E_IETFNetconfMonitoring_Transport": {
		1: {Name: "netconf-beep", DefiningModule: "ietf-netconf-monitoring"},
		2: {Name: "netconf-soap-over-beep", DefiningModule: "ietf-netconf-monitoring"},
		3: {Name: "netconf-soap-over-https", DefiningModule: "ietf-netconf-monitoring"},
		4: {Name: "netconf-ssh", DefiningModule: "ietf-netconf-monitoring"},
		5: {Name: "netconf-tls", DefiningModule: "ietf-netconf-monitoring"},
	},
}


var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5d, 0x5f, 0x4f, 0xe3, 0xb8,
		0x16, 0x7f, 0xe7, 0x53, 0x44, 0x91, 0x56, 0x6a, 0x67, 0x08, 0xb4, 0x4c, 0x81, 0xa1, 0x2f, 0x68,
		0x96, 0x19, 0xee, 0x5d, 0xed, 0xec, 0x2c, 0x62, 0xd0, 0x7d, 0x58, 0xd2, 0x8b, 0x4c, 0xe2, 0x82,
		0xb5, 0xa9, 0x53, 0x39, 0x0e, 0x97, 0x2e, 0xf4, 0xbb, 0x5f, 0xa5, 0x49, 0xd3, 0x86, 0x16, 0xea,
		0x7f, 0x49, 0x9b, 0x72, 0x5e, 0x68, 0x68, 0x6d, 0xc7, 0x3e, 0x7f, 0xfc, 0x3b, 0xb6, 0x8f, 0xcf,
		0x79, 0xda, 0xb1, 0x2c, 0xcb, 0xb2, 0x7f, 0xa0, 0x01, 0xb6, 0xbb, 0x96, 0xed, 0xe3, 0x07, 0xe2,
		0x61, 0x7b, 0x37, 0xfd, 0xf6, 0x77, 0x42, 0x7d, 0xbb, 0x6b, 0xb5, 0xb3, 0x7f, 0xcf, 0x42, 0xda,
		0x27, 0x77, 0x76, 0xd7, 0x6a, 0x65, 0x5f, 0x7c, 0x25, 0xcc, 0xee, 0x5a, 0x69, 0x13, 0x93, 0x2f,
		0x28, 0xe6, 0x5e, 0x48, 0xfb, 0x4e, 0xc4, 0x11, 0xc7, 0x85, 0x9f, 0x0a, 0x6f, 0x29, 0x16, 0xdb,
		0x2d, 0x16, 0x2a, 0xbe, 0x34, 0xff, 0x3a, 0x7f, 0xf9, 0xc1, 0x8b, 0x1f, 0x2e, 0x18, 0xee, 0x93,
		0xc7, 0x85, 0x97, 0x15, 0x5f, 0xe8, 0x0d, 0x5e, 0xbc, 0x66, 0xf2, 0xf3, 0xcf, 0x30, 0x66, 0x1e,
		0x5e, 0x5a, 0x35, 0xed, 0x0a, 0x1e, 0xfd, 0x2f, 0x64, 0x49, 0x6f, 0xec, 0x61, 0xfa, 0x96, 0xdd,
		0xe5, 0x05, 0xff, 0x8d, 0xa2, 0x2f, 0xec, 0x2e, 0x1e, 0x60, 0xca, 0xed, 0xae, 0xc5, 0x59, 0x8c,
		0x5f, 0x29, 0x38, 0x57, 0x6a, 0xd2, 0xa9, 0x85, 0x52, 0xe3, 0xc2, 0x37, 0xe3, 0x17, 0x63, 0x7d,
		0x49, 0xf0, 0xfc, 0x07, 0x0f, 0x0d, 0xd1, 0x2d, 0x09, 0x08, 0x27, 0x38, 0x7a, 0x7d, 0x3c, 0x53,
		0x72, 0x14, 0x4a, 0xbf, 0xd2, 0xd3, 0xe5, 0x6c, 0x58, 0x64, 0x47, 0xeb, 0x95, 0x02, 0x6f, 0xb0,
		0x45, 0x90, 0x3d, 0xa2, 0x6c, 0x92, 0x66, 0x97, 0x34, 0xdb, 0xc4, 0xd9, 0xb7, 0x9c, 0x8d, 0xaf,
		0xb0, 0x73, 0x25, 0x5b, 0x17, 0xd9, 0x3b, 0x5a, 0x4d, 0x85, 0x05, 0x26, 0x8f, 0x56, 0x91, 0x21,
		0x63, 0x75, 0x6b, 0x45, 0xb1, 0x55, 0x2c, 0x97, 0x61, 0xbd, 0xa4, 0x08, 0xc8, 0x8a, 0x82, 0xb2,
		0x48, 0x28, 0x8b, 0x86, 0xbc, 0x88, 0xbc, 0x2d, 0x2a, 0x2b, 0x44, 0x26, 0x7f, 0xdd, 0xd5, 0x68,
		0x88, 0xe5, 0x28, 0x1d, 0x33, 0x22, 0x42, 0xe9, 0xa9, 0xfe, 0x7f, 0xd6, 0xea, 0xde, 0x77, 0x12,
		0xf1, 0x2f, 0x9c, 0x33, 0xb1, 0x2e, 0xfe, 0x41, 0xe8, 0xb7, 0x00, 0x27, 0xd4, 0x8b, 0x56, 0x8b,
		0x59, 0x5a, 0x03, 0x3d, 0xce, 0xd5, 0x68, 0x7f, 0xee, 0x74, 0x8e, 0x8e, 0x3b, 0x9d, 0xd6, 0xf1,
		0xa7, 0xe3, 0xd6, 0xc9, 0xe1, 0x61, 0xfb, 0xa8, 0x7d, 0x28, 0xd0, 0xc8, 0x9f, 0xcc, 0xc7, 0x0c,
		0xfb, 0xbf, 0x26, 0xca, 0x45, 0xe3, 0x20, 0xd8, 0x51, 0x63, 0x97, 0x9c, 0xce, 0x7f, 0xa1, 0x34,
		0xe4, 0x88, 0x93, 0x90, 0xbe, 0xad, 0xfa, 0x91, 0x77, 0x8f, 0x07, 0x68, 0x88, 0xf8, 0x7d, 0xc2,
		0xbc, 0x7d, 0x82, 0x79, 0xdf, 0x99, 0xe2, 0xe7, 0x20, 0xa4, 0x84, 0x87, 0x8c, 0xd0, 0xbb, 0xfd,
		0x02, 0xa4, 0xee, 0x0b, 0x4c, 0xf0, 0x69, 0xe3, 0x9c, 0xc5, 0x1e, 0xa7, 0x99, 0x64, 0xfc, 0xf6,
		0xed, 0xea, 0xfc, 0x47, 0xda, 0xce, 0x1f, 0x79, 0xcb, 0x37, 0xd9, 0x37, 0x3f, 0x93, 0x86, 0x6f,
		0xce, 0xe6, 0x1b, 0xde, 0x11, 0xa3, 0xc2, 0x12, 0x0a, 0xd8, 0x3e, 0xe2, 0x28, 0xe2, 0x21, 0x13,
		0x41, 0xab, 0xb9, 0xb2, 0x80, 0x55, 0x9b, 0x8f, 0x55, 0x39, 0xbb, 0xc4, 0xa1, 0x6a, 0x56, 0x45,
		0x0c, 0xa9, 0xda, 0x80, 0x54, 0xf5, 0x43, 0xaa, 0x55, 0x82, 0x93, 0x17, 0x0c, 0x42, 0xef, 0xef,
		0x48, 0x9c, 0x70, 0x53, 0xbe, 0xa4, 0xd5, 0x04, 0xc7, 0x2e, 0x26, 0x48, 0xd2, 0x02, 0xa5, 0x22,
		0x58, 0x8a, 0x02, 0xa6, 0x2a, 0x68, 0xda, 0x02, 0xa7, 0x2d, 0x78, 0xea, 0x02, 0x28, 0x26, 0x88,
		0x82, 0x02, 0x29, 0x2d, 0x98, 0x05, 0x01, 0x75, 0xb8, 0xa8, 0xe1, 0xf5, 0xaa, 0xb0, 0xa6, 0x4d,
		0x48, 0xd2, 0x2c, 0x13, 0xdc, 0x43, 0xc9, 0x6a, 0xb2, 0x02, 0xac, 0x23, 0xc8, 0x9a, 0x02, 0xad,
		0x2b, 0xd8, 0xc6, 0x04, 0xdc, 0x98, 0xa0, 0xeb, 0x0b, 0xbc, 0x9c, 0xe0, 0x4b, 0x2a, 0x80, 0xb2,
		0x22, 0xe4, 0x15, 0xef, 0x82, 0xf0, 0x16, 0x05, 0x4e, 0x22, 0xd4, 0xea, 0xec, 0x9a, 0x4a, 0xcb,
		0x7c, 0x63, 0x8a, 0x74, 0xce, 0x94, 0xa4, 0xa3, 0x58, 0x5d, 0x55, 0x59, 0x4c, 0x28, 0x8d, 0x21,
		0xe5, 0x31, 0xa5, 0x44, 0xc6, 0x95, 0xc9, 0xb8, 0x52, 0x99, 0x53, 0x2e, 0x35, 0x25, 0x53, 0x54,
		0x36, 0x6d, 0xa5, 0x33, 0xaa, 0x7c, 0x25, 0x28, 0xa1, 0xa2, 0xa9, 0x55, 0x9a, 0x52, 0x9a, 0x54,
		0x4e, 0xc3, 0x4a, 0x6a, 0x5a, 0x59, 0x4b, 0x53, 0xda, 0xd2, 0x94, 0xd7, 0xbc, 0x12, 0xeb, 0x29,
		0xb3, 0xa6, 0x52, 0x1b, 0x53, 0xee, 0x82, 0xc9, 0x89, 0x7d, 0xe7, 0x76, 0xe4, 0x44, 0x38, 0x8a,
		0x56, 0x6d, 0x1a, 0x29, 0x9b, 0xa4, 0xc5, 0x57, 0x18, 0xe2, 0xa9, 0xd8, 0xf6, 0x72, 0xe5, 0x13,
		0x41, 0x19, 0x13, 0x42, 0x49, 0x13, 0x43, 0x59, 0x13, 0x44, 0xe9, 0x13, 0x45, 0xe9, 0x13, 0x46,
		0x79, 0x13, 0x87, 0x99, 0x09, 0xc4, 0xd0, 0x44, 0x92, 0x0f, 0xf3, 0x0f, 0x44, 0x7d, 0xc4, 0x43,
		0x36, 0xd2, 0x47, 0xd4, 0xbc, 0xcd, 0x2b, 0x95, 0x95, 0xac, 0x90, 0xf4, 0xc7, 0x84, 0xf2, 0x4f,
		0x07, 0x26, 0x15, 0x20, 0x9b, 0x4b, 0x8e, 0x0d, 0x36, 0x79, 0x89, 0xe8, 0x5d, 0xd2, 0xdb, 0x6b,
		0xa3, 0x02, 0x69, 0x56, 0x41, 0xad, 0xec, 0x74, 0xc4, 0xb8, 0xe6, 0xe7, 0x8d, 0xff, 0x07, 0x05,
		0x31, 0x36, 0x37, 0xa9, 0x2e, 0xb4, 0x7f, 0xce, 0x90, 0xc7, 0x49, 0x48, 0xbf, 0x92, 0x3b, 0x22,
		0x7a, 0xba, 0xa3, 0x26, 0x7b, 0xf8, 0x0e, 0x71, 0xf2, 0x90, 0x8c, 0xa5, 0x8f, 0x82, 0x08, 0x1b,
		0x7f, 0xcb, 0x78, 0xb7, 0x04, 0xd6, 0xa2, 0xc7, 0xf2, 0x59, 0xdb, 0x39, 0x38, 0xe9, 0x9c, 0x1c,
		0x1d, 0x1f, 0x9c, 0x1c, 0x02, 0x8f, 0x2b, 0x99, 0xf4, 0xcd, 0xb7, 0xd6, 0xdb, 0x28, 0x30, 0xc2,
		0x8f, 0x9c, 0x21, 0x27, 0xa6, 0x11, 0x47, 0xb7, 0x81, 0x61, 0x08, 0x61, 0xb8, 0x8f, 0x19, 0xa6,
		0x5e, 0x2d, 0x66, 0xe6, 0x29, 0xde, 0x5d, 0x9e, 0x9f, 0x59, 0x9d, 0xe3, 0x4e, 0xbb, 0x6b, 0xfd,
		0xf8, 0x76, 0x75, 0xf6, 0xe7, 0x8f, 0x73, 0x2b, 0x35, 0x56, 0x63, 0x36, 0x39, 0xe8, 0xb5, 0x2e,
		0x58, 0xc8, 0x43, 0x2f, 0x0c, 0xec, 0x12, 0xa6, 0x90, 0x92, 0x4c, 0xc3, 0x65, 0x26, 0xe2, 0x8c,
		0x37, 0x25, 0xe9, 0x77, 0xd9, 0xd6, 0xe2, 0x52, 0xab, 0x51, 0x98, 0x79, 0x30, 0xdb, 0x54, 0xdc,
		0x1f, 0x03, 0xf3, 0xd5, 0x74, 0x75, 0xcb, 0xc9, 0x00, 0x97, 0xb6, 0x74, 0x9e, 0x34, 0x0e, 0x8b,
		0x66, 0x58, 0x34, 0xc3, 0xa2, 0x19, 0x16, 0xcd, 0xca, 0xd2, 0xef, 0x23, 0x8e, 0x1d, 0x44, 0x8d,
		0x4e, 0x27, 0x56, 0xc1, 0xa3, 0xcf, 0x60, 0x9b, 0x17, 0x88, 0x73, 0xcc, 0xa8, 0x71, 0x23, 0xcd,
		0x76, 0x5d, 0xff, 0xa9, 0x33, 0x76, 0x92, 0x8f, 0x83, 0xe9, 0xc7, 0x55, 0xfa, 0xd1, 0x2d, 0x7c,
		0x34, 0x5c, 0x77, 0xcf, 0x75, 0xfd, 0x8f, 0xcd, 0xd3, 0xc6, 0x5f, 0xcf, 0xd7, 0xae, 0xfb, 0xd1,
		0x75, 0x9d, 0x5e, 0xa1, 0x44, 0xd3, 0xde, 0x3e, 0x44, 0x5c, 0xeb, 0xae, 0xb6, 0xa0, 0xeb, 0xa2,
		0x70, 0x7b, 0x4a, 0x2e, 0x8e, 0x33, 0xaf, 0xc0, 0xd9, 0xe3, 0xfe, 0xc4, 0x07, 0x68, 0x3f, 0x77,
		0xae, 0xd8, 0x9f, 0x3b, 0xc6, 0xda, 0x37, 0x77, 0xa4, 0x65, 0x29, 0xb9, 0x4e, 0x7e, 0xcd, 0x3b,
		0x3c, 0x7b, 0xbc, 0xf9, 0x9e, 0x74, 0xf8, 0xe6, 0x5f, 0x93, 0xae, 0x25, 0xcf, 0x7a, 0xa2, 0x3a,
		0xae, 0xc9, 0x99, 0xa7, 0x21, 0x01, 0xaa, 0x46, 0x70, 0xd4, 0x58, 0x22, 0x4f, 0x50, 0x05, 0x62,
		0xda, 0x43, 0xc4, 0x38, 0x31, 0xe6, 0x79, 0x51, 0x68, 0x0d, 0x5c, 0x2f, 0xc0, 0xf5, 0xa2, 0x72,
		0x3b, 0xb2, 0x66, 0xae, 0x17, 0x46, 0xd4, 0xaf, 0x0c, 0x35, 0x5c, 0xb0, 0xf9, 0xc0, 0xf9, 0xa2,
		0xea, 0x65, 0x22, 0x38, 0x5f, 0x6c, 0x95, 0xf3, 0x85, 0x43, 0xfc, 0x72, 0xf6, 0x8d, 0x92, 0x86,
		0x61, 0xcf, 0x08, 0xf6, 0x8c, 0x60, 0xcf, 0x68, 0xa3, 0xf6, 0x8c, 0xc0, 0x29, 0x02, 0x9c, 0x22,
		0xc0, 0x29, 0xa2, 0x6a, 0xb5, 0x2b, 0xb2, 0x16, 0x9c, 0x22, 0x36, 0x8b, 0xc7, 0x70, 0x4c, 0x59,
		0xb6, 0x0e, 0x80, 0x9f, 0x2f, 0x98, 0x9f, 0x60, 0x7e, 0x82, 0xf9, 0x09, 0x7e, 0xbe, 0x60, 0xd2,
		0x82, 0x49, 0x0b, 0x26, 0x2d, 0x98, 0xb4, 0x60, 0xd2, 0xae, 0x1f, 0x8c, 0xc0, 0xcf, 0xf7, 0x05,
		0xde, 0x81, 0x9f, 0x6f, 0x3d, 0xac, 0xc5, 0xa5, 0x56, 0x23, 0xf8, 0xf9, 0xbe, 0x83, 0x05, 0x34,
		0x0d, 0xfd, 0xf2, 0xfc, 0x7c, 0x27, 0x8d, 0xc3, 0xa2, 0x19, 0x16, 0xcd, 0xb0, 0x68, 0x7e, 0x27,
		0x67, 0x36, 0x24, 0xb1, 0x7d, 0xa8, 0x87, 0x1d, 0xe2, 0x63, 0xca, 0x49, 0x9f, 0x60, 0x56, 0x86,
		0x67, 0xee, 0xd1, 0x46, 0x91, 0x53, 0x2a, 0x76, 0xa7, 0xcc, 0xea, 0x56, 0x2e, 0xc6, 0xa7, 0xcc,
		0xe2, 0x4a, 0x3b, 0x16, 0xa8, 0xf0, 0xcb, 0xa4, 0x62, 0x86, 0xd6, 0x12, 0x42, 0xe1, 0xaa, 0x0c,
		0x40, 0x28, 0x40, 0xe8, 0x3b, 0x83, 0x50, 0xb8, 0x2a, 0x63, 0xc1, 0x55, 0x19, 0x58, 0x54, 0xbe,
		0xa0, 0x70, 0x84, 0x03, 0xec, 0x71, 0xf3, 0x60, 0x98, 0xb5, 0x0b, 0x38, 0x08, 0x38, 0x08, 0x38,
		0xf8, 0x4e, 0x96, 0x92, 0x8f, 0x43, 0xc4, 0xef, 0xdb, 0x7b, 0xad, 0x52, 0xe0, 0xea, 0xdd, 0xad,
		0x1f, 0xdb, 0xb0, 0x7e, 0x34, 0x8b, 0x96, 0x6b, 0xf5, 0xd8, 0xff, 0x1d, 0x8f, 0xcc, 0xb9, 0xc5,
		0x9b, 0x95, 0x3f, 0xf3, 0xfb, 0x16, 0x95, 0xc8, 0x9b, 0x59, 0x39, 0xd3, 0xe5, 0x6f, 0x09, 0x07,
		0x89, 0x25, 0x1c, 0x20, 0x96, 0x30, 0xe9, 0x5f, 0x9e, 0x9f, 0x59, 0x87, 0xc7, 0xed, 0xe3, 0xae,
		0x75, 0x91, 0x5e, 0xee, 0xb2, 0xbe, 0x87, 0xde, 0xdf, 0xd6, 0x25, 0x1e, 0x84, 0x1c, 0x5b, 0x17,
		0x2c, 0xf4, 0xb0, 0x1f, 0x33, 0x6c, 0x9d, 0xa1, 0x20, 0xb0, 0x1a, 0x97, 0x17, 0x67, 0x4d, 0xab,
		0x1f, 0x32, 0x97, 0xce, 0x9a, 0xca, 0xce, 0xaa, 0x6a, 0x66, 0xe4, 0x94, 0x75, 0x82, 0x58, 0xad,
		0x9d, 0x63, 0x8e, 0x7b, 0x9b, 0x66, 0x2d, 0xed, 0xac, 0x77, 0x95, 0xf7, 0x7e, 0x02, 0x11, 0xcc,
		0xdf, 0xe9, 0xdc, 0x37, 0x78, 0xc1, 0xd3, 0x32, 0x1d, 0x8a, 0x20, 0x93, 0x70, 0x88, 0x45, 0xb0,
		0x99, 0xb2, 0x53, 0x59, 0x30, 0x82, 0x52, 0x13, 0x4d, 0x68, 0xd2, 0xbc, 0x3c, 0x5a, 0xcb, 0x91,
		0x77, 0xbc, 0xa6, 0x84, 0x35, 0x1a, 0x66, 0x94, 0x3d, 0x64, 0x38, 0x52, 0xb2, 0x96, 0x34, 0xf2,
		0xbf, 0x5c, 0xdd, 0x93, 0xc8, 0xf2, 0x42, 0xca, 0x11, 0xa1, 0x98, 0x59, 0x24, 0xb2, 0xd2, 0x5e,
		0x70, 0x2b, 0xa4, 0xc1, 0xc8, 0x22, 0x7d, 0x8b, 0xdf, 0x63, 0x2b, 0x67, 0x8a, 0x4b, 0x49, 0x64,
		0xa5, 0xe7, 0x44, 0x7b, 0xeb, 0xcf, 0x1b, 0x13, 0x69, 0x98, 0x2f, 0xe5, 0x64, 0x8e, 0xd1, 0x21,
		0x67, 0xd9, 0x13, 0xc1, 0x8e, 0x59, 0xc3, 0x41, 0x54, 0x23, 0x14, 0x27, 0x14, 0xd3, 0x13, 0x89,
		0x4c, 0xda, 0x2e, 0x83, 0xa0, 0x2d, 0xc6, 0xd5, 0xd5, 0xbc, 0x11, 0xa0, 0xb6, 0x9d, 0x75, 0x58,
		0x32, 0x37, 0xdb, 0xa4, 0x96, 0x5c, 0x6a, 0xb6, 0x16, 0xa4, 0x66, 0x83, 0xd4, 0x6c, 0xd2, 0xdb,
		0xb0, 0x0b, 0x29, 0xc6, 0x73, 0x0d, 0x95, 0xcd, 0xb6, 0x96, 0x6f, 0xaa, 0x4a, 0x84, 0x32, 0xb2,
		0xbf, 0xd1, 0x78, 0x20, 0xcf, 0xee, 0xab, 0xf0, 0x27, 0x4f, 0xf4, 0x5d, 0xcd, 0x18, 0x6a, 0x4d,
		0x16, 0xda, 0x31, 0xa5, 0x49, 0x0b, 0x0a, 0x70, 0xd9, 0x4e, 0x93, 0x45, 0x53, 0x9f, 0xf8, 0x8b,
		0xd9, 0xd8, 0x85, 0x5a, 0x38, 0x98, 0x9c, 0x65, 0x71, 0xc4, 0x78, 0x3c, 0xb4, 0x4b, 0x35, 0x1c,
		0xaf, 0xc2, 0xdf, 0xa8, 0xda, 0x39, 0xdc, 0xdc, 0x08, 0x95, 0x76, 0x8d, 0x73, 0x0a, 0x2b, 0xed,
		0xfd, 0xe5, 0xd4, 0xe9, 0x5a, 0x07, 0xeb, 0x35, 0x31, 0x4b, 0x4e, 0xf2, 0x99, 0xed, 0xe0, 0x0a,
		0xcc, 0xf7, 0xdb, 0x98, 0x1a, 0x7a, 0x55, 0x46, 0x5e, 0x39, 0x2b, 0xc5, 0x9c, 0x75, 0x22, 0x92,
		0xaf, 0xd6, 0x88, 0x3d, 0x62, 0xd7, 0x3f, 0x75, 0xf6, 0xca, 0x6c, 0xd3, 0xba, 0xd4, 0xd2, 0x49,
		0x9b, 0x9d, 0x8e, 0x48, 0x20, 0x67, 0xf6, 0xb4, 0x20, 0x24, 0xcc, 0xde, 0xfc, 0x84, 0xd9, 0x29,
		0xaf, 0xc4, 0xb3, 0x65, 0x67, 0xe5, 0x21, 0x55, 0x36, 0xa4, 0xca, 0xee, 0x87, 0x6c, 0x80, 0xb8,
		0xfc, 0x7a, 0x2c, 0xab, 0x07, 0x2b, 0x32, 0x58, 0x91, 0x55, 0xb6, 0x22, 0x4b, 0xaf, 0x4e, 0xf0,
		0x11, 0xc3, 0x7d, 0x95, 0x65, 0x98, 0xc4, 0x61, 0xb8, 0xfd, 0x5b, 0xf6, 0xaa, 0x5f, 0x51, 0xa4,
		0x91, 0xa3, 0x3b, 0x9d, 0x67, 0x1d, 0x29, 0x5d, 0xc9, 0x1b, 0x99, 0x5c, 0xc6, 0x8e, 0x94, 0xce,
		0xa4, 0x35, 0xa3, 0xf8, 0x32, 0xea, 0xd9, 0x55, 0x04, 0x1f, 0xd6, 0xee, 0xe6, 0x5d, 0x1d, 0xba,
		0xf9, 0x18, 0xf9, 0x75, 0xe8, 0xe6, 0x08, 0xd5, 0x83, 0x9c, 0x23, 0x42, 0xcb, 0xde, 0x83, 0xee,
		0x55, 0xbf, 0x64, 0x16, 0xb0, 0x71, 0xe6, 0x2e, 0x8e, 0x49, 0xa3, 0xb5, 0xf4, 0xa5, 0x33, 0x40,
		0x6c, 0x40, 0x6c, 0x03, 0x88, 0x1d, 0xa5, 0xbb, 0x92, 0x0a, 0x60, 0xfd, 0xb9, 0x42, 0xcd, 0x0a,
		0x42, 0x4f, 0xee, 0xe4, 0x67, 0xfe, 0x2e, 0x5a, 0x5a, 0x13, 0xb4, 0x0a, 0xb4, 0xaa, 0x32, 0xad,
		0x8a, 0xa9, 0x5c, 0xcc, 0xbd, 0x5c, 0xa9, 0x4e, 0x24, 0xea, 0x64, 0xdd, 0xab, 0xec, 0x88, 0x1f,
		0xd3, 0x78, 0x80, 0x99, 0x8c, 0x36, 0x2d, 0x1d, 0xa2, 0x42, 0xda, 0x08, 0xb5, 0x33, 0x97, 0x19,
		0xa1, 0x74, 0xce, 0x5e, 0xf2, 0x56, 0x26, 0x67, 0x30, 0x5a, 0x4e, 0x7e, 0xaa, 0xee, 0x4b, 0xea,
		0x27, 0x22, 0x33, 0x1e, 0x66, 0xfd, 0xee, 0x5a, 0xad, 0x6d, 0xf0, 0x2e, 0xd2, 0x90, 0xe2, 0x98,
		0x11, 0x1d, 0xe9, 0xfd, 0x5c, 0x0b, 0x5f, 0x09, 0x25, 0xb7, 0x78, 0x75, 0xf7, 0x77, 0xa3, 0x6e,
		0xee, 0x6a, 0xee, 0xec, 0xe6, 0x3c, 0x1f, 0xa2, 0x21, 0xf2, 0x14, 0xdd, 0x1f, 0xd2, 0xaa, 0x60,
		0x69, 0x80, 0xa5, 0x21, 0xa9, 0xaf, 0x0a, 0x57, 0xb2, 0x75, 0xac, 0x13, 0xa9, 0x29, 0x70, 0x2d,
		0x06, 0xff, 0x03, 0x66, 0x91, 0x92, 0xbd, 0x3f, 0xad, 0x08, 0x4a, 0x08, 0x4a, 0xf8, 0x9e, 0x16,
		0xd1, 0x26, 0x3c, 0x3a, 0x66, 0x7b, 0x50, 0x56, 0xa6, 0x46, 0x96, 0xd0, 0xc6, 0x38, 0xb8, 0x79,
		0xac, 0x7c, 0xb9, 0x92, 0x9b, 0x42, 0x76, 0xc0, 0xbf, 0x2f, 0x74, 0x18, 0x6c, 0x29, 0xb9, 0x2c,
		0xfc, 0x4c, 0x5f, 0x91, 0x7d, 0x6e, 0x81, 0x6b, 0xc7, 0xdb, 0x4e, 0x11, 0x5a, 0x44, 0xd2, 0x72,
		0xea, 0x48, 0xc3, 0xf0, 0x8b, 0x78, 0x75, 0x4c, 0x4b, 0x82, 0x5b, 0x47, 0x0d, 0xdc, 0x3a, 0x04,
		0x13, 0x38, 0xbc, 0xe4, 0x2e, 0x38, 0x76, 0x80, 0x63, 0x87, 0x4d, 0xa8, 0x73, 0x8b, 0x7c, 0x87,
		0x0d, 0xbd, 0x48, 0xe1, 0xbc, 0x68, 0xae, 0x32, 0xd8, 0xba, 0x60, 0xeb, 0x56, 0x66, 0xeb, 0xfe,
		0x83, 0x59, 0xe8, 0xdc, 0xa2, 0x08, 0xfb, 0x8e, 0x17, 0xc6, 0x94, 0x63, 0x26, 0x95, 0x15, 0x42,
		0x21, 0xeb, 0x83, 0xfd, 0x15, 0xf7, 0x51, 0x1c, 0x4c, 0x48, 0x26, 0x13, 0x52, 0x25, 0x61, 0xd6,
		0xac, 0xaa, 0x1c, 0xaf, 0x14, 0x33, 0x49, 0x28, 0xec, 0x4b, 0xea, 0x64, 0x82, 0xd0, 0xcd, 0xf4,
		0x60, 0x2c, 0xca, 0xbf, 0x7e, 0x14, 0x7f, 0x95, 0xcc, 0xd8, 0x3a, 0x99, 0x16, 0x8c, 0x65, 0x52,
		0xd8, 0x24, 0x1a, 0xae, 0x77, 0x6f, 0xda, 0x8c, 0x0f, 0x05, 0x55, 0x07, 0x44, 0x00, 0x43, 0x00,
		0x43, 0x00, 0x43, 0x00, 0x43, 0x00, 0x43, 0x00, 0xc3, 0xad, 0x00, 0xc3, 0x20, 0xbc, 0x23, 0x54,
		0x2e, 0x48, 0xf7, 0x9c, 0xe3, 0x53, 0x5e, 0x17, 0x20, 0x11, 0x20, 0x51, 0x12, 0x12, 0xab, 0x3d,
		0x90, 0x54, 0x8d, 0xf1, 0xac, 0x12, 0xc3, 0x59, 0x39, 0x46, 0xf3, 0x9a, 0x62, 0x30, 0x57, 0x39,
		0xdf, 0x84, 0x31, 0x77, 0x68, 0xc8, 0x49, 0x9f, 0xa4, 0x4e, 0x93, 0x0a, 0x66, 0xf8, 0x62, 0x13,
		0x30, 0xfb, 0xc0, 0xec, 0x03, 0x06, 0x39, 0x18, 0xe4, 0x60, 0x90, 0x83, 0x41, 0x5e, 0x77, 0x83,
		0x3c, 0x41, 0x37, 0x36, 0xf4, 0x1c, 0xcc, 0x58, 0xc8, 0x14, 0xd1, 0x71, 0xae, 0x3e, 0x40, 0x23,
		0x40, 0x23, 0x40, 0x23, 0x40, 0x23, 0x40, 0x23, 0x40, 0x63, 0xdd, 0xa1, 0x31, 0xf3, 0x6c, 0x71,
		0x88, 0x2f, 0x0f, 0x8b, 0x73, 0x75, 0x01, 0x12, 0x01, 0x12, 0x2b, 0x83, 0xc4, 0x98, 0x50, 0x5e,
		0x3a, 0x08, 0xd6, 0x0b, 0x90, 0xda, 0x00, 0x48, 0x00, 0x48, 0x35, 0x89, 0x08, 0xac, 0x13, 0x23,
		0x5b, 0x3d, 0xa5, 0x88, 0xc6, 0xdd, 0x43, 0xe1, 0xb4, 0xf4, 0xeb, 0x8d, 0x88, 0xad, 0x9b, 0xd1,
		0xa3, 0x9c, 0x90, 0xd8, 0xe5, 0xe5, 0xf4, 0xdf, 0x0a, 0xf3, 0x6b, 0xc2, 0x7e, 0xe7, 0x3e, 0x8c,
		0x14, 0x42, 0x85, 0xcd, 0x57, 0x06, 0x03, 0x0c, 0x0c, 0xb0, 0xca, 0x0c, 0x30, 0x09, 0x89, 0xb3,
		0xea, 0x12, 0x26, 0x81, 0x0c, 0x1d, 0xe4, 0xfb, 0x0c, 0x47, 0x91, 0xce, 0x3d, 0xf3, 0x13, 0x85,
		0xba, 0x4a, 0x23, 0x55, 0x1f, 0xf1, 0x92, 0x91, 0x3f, 0x74, 0x34, 0xc6, 0xbe, 0x40, 0x03, 0x8d,
		0xcc, 0xbc, 0xc6, 0x32, 0xf1, 0xda, 0x8d, 0xc6, 0x75, 0xcb, 0x39, 0xe9, 0x3d, 0x5f, 0xb7, 0x9d,
		0x93, 0x5e, 0xfa, 0xd8, 0x9e, 0x7c, 0xa4, 0xcf, 0x07, 0xd7, 0x2d, 0xa7, 0x33, 0x7d, 0x3e, 0xbc,
		0x6e, 0x39, 0x87, 0xbd, 0xa6, 0xeb, 0xee, 0x35, 0x9f, 0x3e, 0x8d, 0xe5, 0x2b, 0x36, 0x7e, 0xb9,
		0x76, 0xdd, 0xe1, 0xd3, 0x8f, 0x71, 0xf2, 0xf7, 0xfb, 0xb8, 0xf7, 0xb1, 0x79, 0xaa, 0x9e, 0xa0,
		0xa7, 0x57, 0x65, 0x8c, 0x0a, 0x33, 0xd2, 0x73, 0xb4, 0x85, 0xd2, 0xd3, 0x7d, 0x4e, 0x78, 0x8c,
		0x9c, 0xfe, 0x17, 0xe7, 0xbc, 0xf7, 0xd4, 0xda, 0xed, 0x8c, 0x9b, 0xdd, 0x66, 0xe3, 0xe5, 0x77,
		0xdd, 0xe6, 0x53, 0x6b, 0xf7, 0x70, 0xdc, 0x68, 0x2c, 0xf9, 0xe5, 0x74, 0x59, 0x1b, 0xcd, 0xe7,
		0x46, 0xa3, 0x91, 0xc9, 0x4d, 0x41, 0x96, 0xae, 0x5b, 0xed, 0xde, 0xe9, 0xe4, 0x31, 0xfd, 0x9b,
		0x4b, 0xa3, 0x50, 0xe1, 0xe6, 0x52, 0x19, 0xdc, 0xd5, 0x56, 0xa1, 0xff, 0x76, 0x7b, 0x1f, 0xbb,
		0xcd, 0xa7, 0xa3, 0xf1, 0xf4, 0x79, 0xf2, 0xb7, 0xf9, 0xdc, 0xd8, 0xfb, 0xe0, 0xba, 0x7b, 0x7b,
		0x1f, 0x9a, 0xe9, 0x80, 0xb2, 0x72, 0x1f, 0xd2, 0x5f, 0x4f, 0xbb, 0xdd, 0x85, 0xaf, 0x9a, 0x8d,
		0x5f, 0xf6, 0xd6, 0xa1, 0x16, 0x3b, 0xe5, 0xbe, 0xa7, 0xba, 0xf8, 0x27, 0x7e, 0x38, 0x40, 0x84,
		0x3a, 0x12, 0xd9, 0x3a, 0x4c, 0x69, 0x97, 0xfd, 0x1d, 0xd3, 0xbb, 0xc9, 0x65, 0xce, 0xca, 0x11,
		0x4a, 0x67, 0x6b, 0xc4, 0xd4, 0x16, 0x89, 0xf1, 0x65, 0xbe, 0xb9, 0xe5, 0xbe, 0xe6, 0xe4, 0xaf,
		0xbd, 0x85, 0xb2, 0x40, 0xe2, 0x83, 0xc3, 0x4f, 0xdb, 0x4b, 0xe4, 0xaa, 0x26, 0x20, 0x05, 0x0d,
		0xd5, 0xc5, 0x3d, 0x3b, 0x99, 0xc3, 0x91, 0xf3, 0xcf, 0x17, 0xe7, 0xaf, 0x96, 0x73, 0x72, 0xd3,
		0x9b, 0xfb, 0xc7, 0x75, 0x9d, 0x9b, 0x5e, 0x82, 0x72, 0x47, 0xed, 0x71, 0xf3, 0x74, 0xf6, 0x7d,
		0x2f, 0xc1, 0xa7, 0x0f, 0x2a, 0xb5, 0x4e, 0x9b, 0xcf, 0xae, 0xab, 0x90, 0xee, 0xaa, 0xb7, 0x05,
		0xcb, 0x7d, 0xce, 0x10, 0x8d, 0x86, 0x21, 0x53, 0x58, 0xec, 0xcf, 0xaa, 0xc2, 0x52, 0x1f, 0x96,
		0xfa, 0x92, 0x4b, 0xfd, 0x6a, 0xfd, 0x82, 0x6b, 0x17, 0x4e, 0x5c, 0x56, 0xb7, 0x8a, 0xc0, 0xb7,
		0x96, 0x50, 0xe2, 0xd3, 0xf0, 0x19, 0xb7, 0x18, 0x0f, 0xeb, 0x10, 0x5d, 0x3a, 0x0f, 0xf7, 0x11,
		0xa2, 0xa1, 0x13, 0x3e, 0x60, 0x56, 0xe3, 0x9e, 0xdf, 0x73, 0x3e, 0x8c, 0x6a, 0xd5, 0xf5, 0xe8,
		0xbe, 0x4e, 0xdd, 0xe5, 0x41, 0xf4, 0x3e, 0x23, 0x91, 0xc7, 0x11, 0x66, 0x6a, 0x59, 0x1c, 0xf3,
		0x9a, 0x60, 0x1c, 0x80, 0x71, 0xb0, 0xd1, 0xc6, 0xc1, 0x96, 0x04, 0x5d, 0x13, 0xf6, 0x7d, 0x82,
		0x28, 0x6b, 0x2b, 0x5f, 0xae, 0x16, 0x31, 0x2c, 0x0b, 0xb8, 0xb5, 0x2f, 0x16, 0x9b, 0xc9, 0x52,
		0x0b, 0x21, 0x96, 0xbd, 0x64, 0xfa, 0xb0, 0x0d, 0x91, 0xd6, 0xde, 0x0e, 0x54, 0xa6, 0x47, 0x27,
		0xad, 0x58, 0x6b, 0xc9, 0x90, 0x23, 0x4e, 0x3c, 0x91, 0x68, 0x6b, 0xb3, 0xb2, 0x10, 0x6f, 0x6d,
		0xf3, 0xe3, 0xad, 0xf9, 0x2c, 0x1c, 0x0e, 0xb1, 0xef, 0xac, 0x0c, 0xa7, 0xb7, 0xb8, 0xed, 0xfd,
		0xb2, 0xa6, 0x58, 0x04, 0xb6, 0x16, 0x44, 0x60, 0xd3, 0xb7, 0x53, 0xaa, 0x8e, 0xc0, 0x26, 0x6c,
		0x53, 0xe8, 0xde, 0x8d, 0x90, 0x70, 0x07, 0x95, 0xbd, 0x0b, 0xa1, 0x72, 0x07, 0x42, 0xd2, 0xd5,
		0x54, 0x2e, 0x32, 0xbc, 0xbc, 0x5d, 0xac, 0x78, 0xc7, 0x41, 0x7b, 0xeb, 0x5e, 0x7d, 0xab, 0x7e,
		0x2c, 0x17, 0xf2, 0x5e, 0x9d, 0x24, 0xaa, 0xae, 0xa2, 0xeb, 0xa4, 0x8d, 0x21, 0xa3, 0xb9, 0xa7,
		0x6a, 0xf9, 0xbc, 0x01, 0x8c, 0x59, 0x30, 0xc4, 0x7b, 0x1c, 0x04, 0xa1, 0x04, 0x26, 0x14, 0xab,
		0x01, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x6c, 0x0d, 0x20, 0x08, 0x45, 0x12,
		0x54, 0x08, 0xa9, 0x0b, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x50, 0x13, 0x30,
		0x90, 0x06, 0x02, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x81, 0xed, 0x01, 0x01,
		0xf9, 0x43, 0x83, 0xf9, 0x4a, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0xf5,
		0x07, 0x83, 0x39, 0x47, 0x06, 0xc6, 0xc5, 0xe2, 0x6b, 0x2f, 0xba, 0x42, 0xce, 0xea, 0x02, 0x34,
		0x00, 0x34, 0x28, 0xc7, 0xb2, 0x96, 0xb9, 0x51, 0x27, 0x7d, 0x3f, 0xa7, 0xe2, 0x98, 0xd5, 0x65,
		0xe8, 0xaa, 0x7c, 0x4c, 0x6a, 0xe5, 0x58, 0xd4, 0xa0, 0xa9, 0x60, 0xc4, 0x81, 0x11, 0x07, 0x46,
		0x1c, 0x18, 0x71, 0x75, 0x30, 0xe2, 0x24, 0x63, 0x31, 0xab, 0xc5, 0x60, 0x06, 0x48, 0x00, 0x48,
		0x00, 0x48, 0x00, 0x48, 0x00, 0x48, 0xd8, 0x18, 0x48, 0xd8, 0xa0, 0x1b, 0x10, 0xab, 0x2e, 0x0f,
		0x58, 0x6a, 0x77, 0x20, 0x66, 0xcd, 0x8a, 0xde, 0x82, 0xd8, 0x79, 0x83, 0x16, 0xab, 0x68, 0xa0,
		0x34, 0x76, 0x7b, 0xe9, 0xbd, 0x0b, 0xb9, 0x81, 0x16, 0x47, 0x37, 0x1b, 0x43, 0xfa, 0x94, 0x8d,
		0xe2, 0xb5, 0xde, 0xdb, 0x24, 0x3a, 0x47, 0x7f, 0xe3, 0xcb, 0x30, 0x5c, 0x9c, 0x17, 0x5f, 0x8e,
		0xc8, 0x9e, 0xff, 0xa9, 0xd0, 0xc9, 0xaf, 0xf8, 0x81, 0x78, 0x59, 0x47, 0xc6, 0x3b, 0xe3, 0xff,
		0x03, 0x00, 0x00, 0xff, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x8a, 0xfc, 0xba, 0x3e, 0x29, 0x25,
		0x01, 0x00,
	}
)


// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
func initΛEnumTypes(){
  ΛEnumTypes = map[string][]reflect.Type{
	"/netconf-state/datastores/datastore/name": []reflect.Type{
		reflect.TypeOf((E_IETFNetconfMonitoring_NetconfDatastoreType)(0)),
	},
	"/netconf-state/schemas/schema/format": []reflect.Type{
		reflect.TypeOf((E_IETFNetconfMonitoring_SchemaFormat)(0)),
	},
	"/netconf-state/schemas/schema/location": []reflect.Type{
		reflect.TypeOf((E_IETFNetconfMonitoring_NetconfState_Schemas_Schema_Location)(0)),
	},
	"/netconf-state/sessions/session/transport": []reflect.Type{
		reflect.TypeOf((E_IETFNetconfMonitoring_Transport)(0)),
	},
  }
}

