/*
Package ietf_yang_schema_mount is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by C:/Users/hamza/go/pkg/mod/github.com/openconfig/ygot@v0.27.0/genutil/names.go
using the following YANG input files:
	- ietf-yang-schema-mount@2019-01-14.yang
Imported modules were sourced from:
	- ...
*/
package ietf_yang_schema_mount

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

var (
	SchemaTree map[string]*yang.Entry
	ΛEnumTypes map[string][]reflect.Type
)

func init() {
	var err error
	initΛEnumTypes()
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " +  err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root: &Device{},
		SchemaTree: uzp,
		Unmarshal: Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn )
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// Device represents the /device YANG schema element.
type Device struct {
	SchemaMounts	*IETFYangSchemaMount_SchemaMounts	`path:"schema-mounts" module:"ietf-yang-schema-mount"`
}

// IsYANGGoStruct ensures that Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Device) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Device"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Device) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Device.
func (*Device) ΛBelongingModule() string {
	return ""
}


// IETFYangSchemaMount_SchemaMounts represents the /ietf-yang-schema-mount/schema-mounts YANG schema element.
type IETFYangSchemaMount_SchemaMounts struct {
	MountPoint	map[IETFYangSchemaMount_SchemaMounts_MountPoint_Key]*IETFYangSchemaMount_SchemaMounts_MountPoint	`path:"mount-point" module:"ietf-yang-schema-mount"`
	Namespace	map[string]*IETFYangSchemaMount_SchemaMounts_Namespace	`path:"namespace" module:"ietf-yang-schema-mount"`
}

// IsYANGGoStruct ensures that IETFYangSchemaMount_SchemaMounts implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFYangSchemaMount_SchemaMounts) IsYANGGoStruct() {}

// IETFYangSchemaMount_SchemaMounts_MountPoint_Key represents the key for list MountPoint of element /ietf-yang-schema-mount/schema-mounts.
type IETFYangSchemaMount_SchemaMounts_MountPoint_Key struct {
	Module	string	`path:"module"`
	Label	string	`path:"label"`
}

// IsYANGGoKeyStruct ensures that IETFYangSchemaMount_SchemaMounts_MountPoint_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (IETFYangSchemaMount_SchemaMounts_MountPoint_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the IETFYangSchemaMount_SchemaMounts_MountPoint_Key key struct.
func (t IETFYangSchemaMount_SchemaMounts_MountPoint_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"module": t.Module,
		"label": t.Label,
	}, nil
}

// NewMountPoint creates a new entry in the MountPoint list of the
// IETFYangSchemaMount_SchemaMounts struct. The keys of the list are populated from the input
// arguments.
func (t *IETFYangSchemaMount_SchemaMounts) NewMountPoint(Module string, Label string) (*IETFYangSchemaMount_SchemaMounts_MountPoint, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MountPoint == nil {
		t.MountPoint = make(map[IETFYangSchemaMount_SchemaMounts_MountPoint_Key]*IETFYangSchemaMount_SchemaMounts_MountPoint)
	}

	key := IETFYangSchemaMount_SchemaMounts_MountPoint_Key{
		Module: Module,
		Label: Label,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MountPoint[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MountPoint", key)
	}

	t.MountPoint[key] = &IETFYangSchemaMount_SchemaMounts_MountPoint{
		Module: &Module,
		Label: &Label,
	}

	return t.MountPoint[key], nil
}

// NewNamespace creates a new entry in the Namespace list of the
// IETFYangSchemaMount_SchemaMounts struct. The keys of the list are populated from the input
// arguments.
func (t *IETFYangSchemaMount_SchemaMounts) NewNamespace(Prefix string) (*IETFYangSchemaMount_SchemaMounts_Namespace, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Namespace == nil {
		t.Namespace = make(map[string]*IETFYangSchemaMount_SchemaMounts_Namespace)
	}

	key := Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Namespace[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Namespace", key)
	}

	t.Namespace[key] = &IETFYangSchemaMount_SchemaMounts_Namespace{
		Prefix: &Prefix,
	}

	return t.Namespace[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFYangSchemaMount_SchemaMounts) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFYangSchemaMount_SchemaMounts"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFYangSchemaMount_SchemaMounts) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFYangSchemaMount_SchemaMounts) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFYangSchemaMount_SchemaMounts.
func (*IETFYangSchemaMount_SchemaMounts) ΛBelongingModule() string {
	return "ietf-yang-schema-mount"
}


// IETFYangSchemaMount_SchemaMounts_MountPoint represents the /ietf-yang-schema-mount/schema-mounts/mount-point YANG schema element.
type IETFYangSchemaMount_SchemaMounts_MountPoint struct {
	Config	*bool	`path:"config" module:"ietf-yang-schema-mount"`
	Inline	*IETFYangSchemaMount_SchemaMounts_MountPoint_Inline	`path:"inline" module:"ietf-yang-schema-mount"`
	Label	*string	`path:"label" module:"ietf-yang-schema-mount"`
	Module	*string	`path:"module" module:"ietf-yang-schema-mount"`
	SharedSchema	*IETFYangSchemaMount_SchemaMounts_MountPoint_SharedSchema	`path:"shared-schema" module:"ietf-yang-schema-mount"`
}

// IsYANGGoStruct ensures that IETFYangSchemaMount_SchemaMounts_MountPoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFYangSchemaMount_SchemaMounts_MountPoint) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the IETFYangSchemaMount_SchemaMounts_MountPoint struct, which is a YANG list entry.
func (t *IETFYangSchemaMount_SchemaMounts_MountPoint) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Label == nil {
		return nil, fmt.Errorf("nil value for key Label")
	}

	if t.Module == nil {
		return nil, fmt.Errorf("nil value for key Module")
	}

	return map[string]interface{}{
		"label": *t.Label,
		"module": *t.Module,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFYangSchemaMount_SchemaMounts_MountPoint) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFYangSchemaMount_SchemaMounts_MountPoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFYangSchemaMount_SchemaMounts_MountPoint) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFYangSchemaMount_SchemaMounts_MountPoint) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFYangSchemaMount_SchemaMounts_MountPoint.
func (*IETFYangSchemaMount_SchemaMounts_MountPoint) ΛBelongingModule() string {
	return "ietf-yang-schema-mount"
}


// IETFYangSchemaMount_SchemaMounts_MountPoint_Inline represents the /ietf-yang-schema-mount/schema-mounts/mount-point/inline YANG schema element.
type IETFYangSchemaMount_SchemaMounts_MountPoint_Inline struct {
}

// IsYANGGoStruct ensures that IETFYangSchemaMount_SchemaMounts_MountPoint_Inline implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFYangSchemaMount_SchemaMounts_MountPoint_Inline) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFYangSchemaMount_SchemaMounts_MountPoint_Inline) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFYangSchemaMount_SchemaMounts_MountPoint_Inline"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFYangSchemaMount_SchemaMounts_MountPoint_Inline) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFYangSchemaMount_SchemaMounts_MountPoint_Inline) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFYangSchemaMount_SchemaMounts_MountPoint_Inline.
func (*IETFYangSchemaMount_SchemaMounts_MountPoint_Inline) ΛBelongingModule() string {
	return "ietf-yang-schema-mount"
}


// IETFYangSchemaMount_SchemaMounts_MountPoint_SharedSchema represents the /ietf-yang-schema-mount/schema-mounts/mount-point/shared-schema YANG schema element.
type IETFYangSchemaMount_SchemaMounts_MountPoint_SharedSchema struct {
	ParentReference	[]string	`path:"parent-reference" module:"ietf-yang-schema-mount"`
}

// IsYANGGoStruct ensures that IETFYangSchemaMount_SchemaMounts_MountPoint_SharedSchema implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFYangSchemaMount_SchemaMounts_MountPoint_SharedSchema) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFYangSchemaMount_SchemaMounts_MountPoint_SharedSchema) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFYangSchemaMount_SchemaMounts_MountPoint_SharedSchema"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFYangSchemaMount_SchemaMounts_MountPoint_SharedSchema) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFYangSchemaMount_SchemaMounts_MountPoint_SharedSchema) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFYangSchemaMount_SchemaMounts_MountPoint_SharedSchema.
func (*IETFYangSchemaMount_SchemaMounts_MountPoint_SharedSchema) ΛBelongingModule() string {
	return "ietf-yang-schema-mount"
}


// IETFYangSchemaMount_SchemaMounts_Namespace represents the /ietf-yang-schema-mount/schema-mounts/namespace YANG schema element.
type IETFYangSchemaMount_SchemaMounts_Namespace struct {
	Prefix	*string	`path:"prefix" module:"ietf-yang-schema-mount"`
	Uri	*string	`path:"uri" module:"ietf-yang-schema-mount"`
}

// IsYANGGoStruct ensures that IETFYangSchemaMount_SchemaMounts_Namespace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFYangSchemaMount_SchemaMounts_Namespace) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the IETFYangSchemaMount_SchemaMounts_Namespace struct, which is a YANG list entry.
func (t *IETFYangSchemaMount_SchemaMounts_Namespace) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"prefix": *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFYangSchemaMount_SchemaMounts_Namespace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFYangSchemaMount_SchemaMounts_Namespace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFYangSchemaMount_SchemaMounts_Namespace) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFYangSchemaMount_SchemaMounts_Namespace) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFYangSchemaMount_SchemaMounts_Namespace.
func (*IETFYangSchemaMount_SchemaMounts_Namespace) ΛBelongingModule() string {
	return "ietf-yang-schema-mount"
}



var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5c, 0x5f, 0x6f, 0xdb, 0x36,
		0x10, 0x7f, 0xf7, 0xa7, 0x20, 0xf8, 0x52, 0x20, 0x88, 0x64, 0x67, 0x4b, 0x9a, 0xd6, 0x6f, 0xd9,
		0xd2, 0x60, 0x45, 0x93, 0x2c, 0x58, 0x82, 0x61, 0x9b, 0xe3, 0x04, 0x8c, 0x75, 0xb6, 0x89, 0xca,
		0x94, 0x41, 0x51, 0xad, 0xbd, 0xc5, 0xdf, 0x7d, 0xd0, 0x1f, 0xcb, 0x96, 0x6d, 0x49, 0x14, 0x49,
		0x1b, 0x0d, 0xc0, 0xbc, 0x44, 0x96, 0x8e, 0x3c, 0xde, 0xdd, 0x8f, 0xbc, 0x3f, 0xa4, 0xf4, 0x5f,
		0x0b, 0x21, 0x84, 0xf0, 0x2d, 0x99, 0x00, 0xee, 0x22, 0xec, 0xc1, 0x37, 0x3a, 0x00, 0x7c, 0x9c,
		0xde, 0xfd, 0x42, 0x99, 0x87, 0xbb, 0xe8, 0x24, 0xfb, 0xf9, 0x6b, 0xc0, 0x86, 0x74, 0x84, 0xbb,
		0xa8, 0x93, 0xdd, 0xb8, 0xa4, 0x1c, 0x77, 0x51, 0xda, 0x45, 0x72, 0x23, 0x1c, 0x8c, 0x61, 0x42,
		0x9c, 0x49, 0x10, 0x31, 0x11, 0x16, 0x1e, 0x15, 0xb8, 0x14, 0xc9, 0x8e, 0x8b, 0x44, 0x45, 0xa6,
		0xf9, 0xed, 0x9c, 0xf9, 0x4f, 0x1b, 0x0f, 0xee, 0x38, 0x0c, 0xe9, 0x6c, 0x8b, 0x59, 0x81, 0xe1,
		0x9c, 0xb0, 0xd1, 0x84, 0x89, 0x0d, 0x56, 0x09, 0xc9, 0x7d, 0x10, 0xf1, 0x01, 0xec, 0x6c, 0x9e,
		0x0e, 0x07, 0xe6, 0xdf, 0x03, 0x1e, 0x8f, 0x08, 0x4f, 0x53, 0x4e, 0xc7, 0xbb, 0x09, 0x7f, 0x23,
		0xe1, 0x05, 0x1f, 0x45, 0x13, 0x60, 0x02, 0x77, 0x91, 0xe0, 0x11, 0x94, 0x10, 0xae, 0x51, 0xe5,
		0x03, 0xdb, 0xa2, 0x5c, 0x14, 0xee, 0x2c, 0x36, 0x64, 0xde, 0x54, 0x7c, 0xfe, 0x20, 0x51, 0xa9,
		0x33, 0x0d, 0x68, 0xd2, 0x7d, 0x89, 0x48, 0x4b, 0xad, 0xac, 0x13, 0x97, 0x8c, 0x75, 0xb7, 0x31,
		0xb6, 0x8d, 0xd2, 0x29, 0x21, 0xa8, 0x30, 0x4e, 0x03, 0x23, 0xc9, 0x1a, 0xab, 0xb1, 0xd1, 0x1a,
		0x1b, 0xaf, 0x99, 0x11, 0x77, 0x1b, 0xb3, 0xc4, 0xa8, 0xb5, 0xc6, 0xcd, 0x09, 0x06, 0x4b, 0xad,
		0xd7, 0x68, 0x61, 0xa9, 0xd8, 0x8c, 0xbe, 0x46, 0xa2, 0x4b, 0x18, 0x92, 0xc8, 0x8f, 0x05, 0xea,
		0x55, 0x12, 0x26, 0xc4, 0xb1, 0x86, 0x70, 0x25, 0x59, 0xbf, 0x86, 0x5d, 0x86, 0xac, 0x4e, 0x0d,
		0x59, 0x1d, 0xc2, 0x9a, 0x20, 0x4d, 0x01, 0x71, 0x4d, 0x91, 0xa7, 0x8c, 0x40, 0x65, 0x24, 0xaa,
		0x21, 0xb2, 0x1a, 0x99, 0x35, 0x08, 0xcd, 0x59, 0x3e, 0xcc, 0xa7, 0xd0, 0x4c, 0xe3, 0x2f, 0x41,
		0xe0, 0x03, 0x61, 0x32, 0x1a, 0x5f, 0x2e, 0x3d, 0x27, 0x2d, 0x35, 0x01, 0x2a, 0x06, 0x8f, 0x7d,
		0xf2, 0x02, 0xbe, 0xfc, 0x04, 0x4a, 0xc9, 0x2d, 0xa0, 0x2d, 0xa0, 0x77, 0x6a, 0xdc, 0xa1, 0x1e,
		0x30, 0x41, 0x87, 0x14, 0x78, 0x13, 0x60, 0x7f, 0x90, 0xa0, 0xbd, 0x06, 0x36, 0x12, 0x63, 0xa9,
		0x35, 0x39, 0xfe, 0x93, 0xb3, 0x65, 0xd2, 0xf3, 0x0d, 0x65, 0xd2, 0xc6, 0xcf, 0x1b, 0xfd, 0x49,
		0xfc, 0x08, 0xca, 0xe3, 0x81, 0xd2, 0x76, 0x57, 0x9c, 0x0c, 0x04, 0x0d, 0xd8, 0x25, 0x1d, 0xd1,
		0x24, 0x30, 0xec, 0x34, 0xec, 0xe0, 0x16, 0x46, 0x44, 0xd0, 0x6f, 0x31, 0xef, 0x21, 0xf1, 0x43,
		0x90, 0x6e, 0xbd, 0x38, 0x6e, 0xa0, 0x12, 0x32, 0xd3, 0x50, 0xc9, 0x87, 0xd3, 0xd3, 0xf7, 0xe7,
		0xa7, 0xa7, 0x9d, 0xf3, 0x9f, 0xcf, 0x3b, 0x1f, 0xcf, 0xce, 0x4e, 0xde, 0x9f, 0x9c, 0xbd, 0x1d,
		0x2d, 0xb5, 0xcc, 0x50, 0xf5, 0x25, 0x20, 0x7d, 0x47, 0x84, 0x00, 0xce, 0xa4, 0x31, 0x8d, 0x7b,
		0xc4, 0xf9, 0xf7, 0xc2, 0xf9, 0xe7, 0xb9, 0x9f, 0x5d, 0x74, 0x9c, 0x8f, 0x8f, 0x8f, 0xce, 0xb3,
		0xdb, 0x3f, 0x92, 0x5d, 0x82, 0xdc, 0x57, 0xd7, 0x7d, 0xed, 0x3d, 0xcd, 0xfe, 0xea, 0xbb, 0x47,
		0xaf, 0x6e, 0xef, 0x69, 0x72, 0x93, 0x5c, 0xb8, 0xbd, 0x27, 0xff, 0xba, 0xef, 0x1e, 0xd5, 0xaf,
		0x2a, 0xfd, 0x3d, 0xf8, 0xa0, 0x49, 0xe0, 0x45, 0x3e, 0xc8, 0x3b, 0xa1, 0x8c, 0xde, 0x7a, 0x21,
		0xeb, 0x85, 0xac, 0x17, 0xb2, 0x5e, 0xc8, 0x7a, 0x21, 0xeb, 0x85, 0x0c, 0x78, 0xa1, 0xac, 0x14,
		0xc7, 0x61, 0x28, 0xef, 0x89, 0xd6, 0xda, 0xc8, 0x79, 0xa3, 0x33, 0xeb, 0x8d, 0xde, 0xae, 0x37,
		0xba, 0x21, 0xcc, 0x23, 0x22, 0xe0, 0xf3, 0xfa, 0x15, 0xb7, 0xb6, 0x74, 0x95, 0x13, 0x52, 0xe6,
		0x53, 0xd6, 0x40, 0xd3, 0x4b, 0x63, 0x66, 0xed, 0x24, 0xb5, 0x95, 0xc1, 0xef, 0x54, 0x92, 0x5c,
		0x16, 0x86, 0x2a, 0x70, 0xd4, 0x80, 0xa5, 0x2a, 0x3c, 0xb5, 0x61, 0xaa, 0x0d, 0x57, 0x3d, 0xd8,
		0x36, 0x74, 0x0b, 0x92, 0x36, 0x93, 0x85, 0xa8, 0x2a, 0x54, 0xf5, 0x20, 0x2b, 0x59, 0x78, 0x37,
		0x06, 0x61, 0x1d, 0x28, 0x1b, 0x80, 0xb4, 0x2e, 0xb4, 0x8d, 0x41, 0xdc, 0x18, 0xd4, 0xcd, 0x40,
		0xbe, 0x19, 0xf4, 0x15, 0xa2, 0xcc, 0x64, 0x88, 0x30, 0x13, 0x9c, 0x38, 0x11, 0x0b, 0x05, 0x79,
		0xf1, 0xd5, 0x94, 0x1f, 0x6b, 0x3b, 0x04, 0x96, 0x98, 0xae, 0xa7, 0xa4, 0x28, 0x35, 0x83, 0x17,
		0x70, 0x77, 0x81, 0x06, 0xc1, 0x64, 0xea, 0x83, 0x00, 0x14, 0x82, 0x3f, 0x74, 0x06, 0x01, 0x13,
		0x84, 0x32, 0xf0, 0x50, 0x1a, 0xa9, 0x20, 0x1a, 0xa2, 0x64, 0xaf, 0x0b, 0x3c, 0x44, 0x04, 0x12,
		0x63, 0x78, 0x64, 0xc9, 0x6f, 0x94, 0xec, 0x7d, 0xb9, 0x8a, 0x58, 0x31, 0x01, 0xdc, 0x12, 0x00,
		0xa7, 0x2a, 0x3d, 0xd6, 0xeb, 0xd2, 0x14, 0x94, 0x77, 0x42, 0x5a, 0x5b, 0xe7, 0xca, 0x43, 0x59,
		0xb4, 0x0e, 0xd3, 0xaa, 0xbf, 0xd7, 0xb9, 0x77, 0xc1, 0x58, 0x20, 0x48, 0x9c, 0x67, 0xa9, 0xcd,
		0xbb, 0x54, 0xcb, 0x53, 0x92, 0xa4, 0xe5, 0xb8, 0x4d, 0x41, 0x0c, 0x9d, 0xa4, 0x0a, 0xb0, 0xbe,
		0xb7, 0xde, 0x2e, 0x6c, 0xb4, 0xb7, 0xd7, 0xf6, 0x7b, 0xdb, 0xab, 0x18, 0xbe, 0x9d, 0x3a, 0xa8,
		0xb6, 0x92, 0x9f, 0x4a, 0xc7, 0x22, 0x78, 0x34, 0x10, 0x2c, 0x9b, 0x8d, 0x9f, 0x3f, 0x3d, 0x5c,
		0xfd, 0x4d, 0xd8, 0xe8, 0x3e, 0xe1, 0x70, 0x13, 0xf3, 0x7c, 0x5e, 0xbb, 0x0e, 0x9f, 0x93, 0x7f,
		0x77, 0xf1, 0x28, 0x9e, 0x3f, 0xa7, 0x3c, 0x5b, 0xfb, 0xb1, 0xa4, 0xd9, 0xc0, 0x41, 0xd1, 0x62,
		0xe6, 0x2d, 0x85, 0x0d, 0xa5, 0xc9, 0x12, 0x82, 0xe3, 0x70, 0x4c, 0x38, 0x78, 0xd9, 0x50, 0x9b,
		0x87, 0xeb, 0xc5, 0xe6, 0x36, 0x6a, 0xb7, 0x51, 0xfb, 0xa1, 0xa2, 0x76, 0x35, 0xe0, 0x1a, 0x01,
		0xb0, 0x8d, 0xe1, 0x6d, 0x0c, 0x7f, 0xb0, 0x18, 0xbe, 0xe9, 0xc4, 0x58, 0x05, 0xee, 0x84, 0x03,
		0x13, 0xb1, 0x5b, 0x01, 0x9e, 0x05, 0xf0, 0x8a, 0x76, 0x5b, 0x42, 0x67, 0xab, 0x47, 0x45, 0xad,
		0xcb, 0x6d, 0x61, 0x19, 0x9f, 0x3e, 0x26, 0xa6, 0x91, 0xc1, 0xe9, 0xb4, 0xe7, 0x0c, 0x43, 0x7d,
		0x7a, 0x1d, 0x26, 0xbf, 0x50, 0x9e, 0x6e, 0x9a, 0x69, 0x82, 0x22, 0x66, 0xa4, 0xb7, 0xec, 0x6a,
		0x11, 0x33, 0x8b, 0x23, 0xc5, 0x13, 0xb7, 0xa3, 0x03, 0x99, 0x7c, 0x6f, 0xef, 0xa0, 0x3a, 0xb8,
		0xa6, 0xa1, 0xb8, 0x10, 0x82, 0xeb, 0xe9, 0xe1, 0x86, 0xb2, 0x4f, 0x3e, 0xc4, 0x30, 0x08, 0xd5,
		0xe7, 0x70, 0x56, 0xb8, 0x9e, 0xad, 0xf5, 0xa4, 0xbf, 0x33, 0x56, 0xe8, 0xfc, 0x77, 0xee, 0x01,
		0x07, 0xef, 0x97, 0x39, 0xee, 0x22, 0x16, 0xf9, 0xfe, 0x81, 0x92, 0x52, 0x5b, 0x10, 0x92, 0x99,
		0x43, 0x0f, 0x63, 0xc8, 0x8b, 0x0f, 0x59, 0x39, 0x42, 0x04, 0x23, 0x10, 0x63, 0xe0, 0xe8, 0x3b,
		0x15, 0x63, 0x24, 0xc6, 0x80, 0xde, 0x6d, 0xfa, 0xab, 0x77, 0x8f, 0x6c, 0x42, 0xbe, 0x02, 0x8a,
		0xa6, 0xc9, 0xf3, 0xac, 0xe1, 0x30, 0xe0, 0x48, 0x8c, 0x97, 0xd5, 0x0c, 0x5b, 0x31, 0x52, 0x5e,
		0xd1, 0xf7, 0x6f, 0x14, 0x5b, 0x52, 0xfa, 0x51, 0x4a, 0x4a, 0x85, 0xb4, 0xa9, 0xad, 0x93, 0x44,
		0x69, 0x16, 0x98, 0xee, 0x13, 0xd6, 0xe9, 0x53, 0x5b, 0x66, 0x52, 0xb1, 0x9e, 0xb1, 0x6a, 0x93,
		0xd6, 0x26, 0x74, 0x43, 0xad, 0x18, 0xd4, 0x06, 0x56, 0x3d, 0x74, 0xd1, 0xe8, 0x9d, 0x8f, 0x2f,
		0x30, 0x5f, 0x9d, 0xf1, 0x43, 0x55, 0xe7, 0xcd, 0xe5, 0xc2, 0x2c, 0xf9, 0x30, 0x4a, 0x2b, 0x4c,
		0x92, 0x0b, 0x83, 0xca, 0x84, 0x96, 0x34, 0xaa, 0xae, 0x31, 0xab, 0x5e, 0x28, 0x52, 0x5e, 0x59,
		0x76, 0xc3, 0x62, 0xdb, 0xe8, 0x3b, 0x64, 0xc7, 0x31, 0xbb, 0x70, 0x4a, 0xaa, 0xde, 0x3a, 0x5b,
		0x46, 0x32, 0x2b, 0x52, 0xfb, 0x82, 0xd6, 0xdb, 0x79, 0x41, 0x6b, 0x2a, 0x57, 0x41, 0x58, 0x55,
		0x4e, 0xa4, 0x54, 0x60, 0x8f, 0xf6, 0x9a, 0x8d, 0x5a, 0xed, 0xd1, 0x5e, 0x7b, 0xb4, 0x77, 0xa5,
		0x6e, 0x7b, 0xb4, 0x77, 0xaf, 0x5a, 0xb2, 0x47, 0x7b, 0x35, 0x32, 0x43, 0xb5, 0xa3, 0xbd, 0x11,
		0xa7, 0xf2, 0x2e, 0x28, 0x26, 0xb6, 0xfe, 0xc7, 0xfa, 0x1f, 0x05, 0x60, 0x34, 0x28, 0x39, 0x1b,
		0x4e, 0x97, 0xaa, 0x3f, 0xc8, 0x60, 0x13, 0x25, 0x99, 0x44, 0xa9, 0x2e, 0xc3, 0x50, 0x49, 0x93,
		0x6e, 0xf3, 0x3e, 0x65, 0xb3, 0xa4, 0xca, 0xaf, 0x5d, 0xd4, 0x88, 0xaf, 0x22, 0xf6, 0xae, 0x2f,
		0x81, 0x34, 0x13, 0xb2, 0x28, 0xda, 0x4a, 0x80, 0xf4, 0x2a, 0x13, 0xa1, 0x6c, 0xe8, 0x98, 0x86,
		0x57, 0xe4, 0x2b, 0xfc, 0x11, 0x04, 0xdb, 0x4b, 0xc6, 0xa6, 0x38, 0x78, 0xfd, 0x51, 0x61, 0x88,
		0x97, 0xe9, 0xc7, 0x5a, 0x52, 0x86, 0xad, 0xc5, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x01, 0x00,
		0x00, 0xff, 0xff, 0x83, 0xfe, 0x7d, 0x18, 0xcb, 0x45, 0x00, 0x00,
	}
)


// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
func initΛEnumTypes(){
  ΛEnumTypes = map[string][]reflect.Type{
  }
}

