/*
Package ieee802_dot1dc_sched_if is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by C:/Users/hamza/go/pkg/mod/github.com/openconfig/ygot@v0.27.0/genutil/names.go
using the following YANG input files:
	- ieee802-dot1dc-sched-if.yang
Imported modules were sourced from:
	- ...
*/
package ieee802_dot1dc_sched_if

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

var (
	SchemaTree map[string]*yang.Entry
	ΛEnumTypes map[string][]reflect.Type
)

func init() {
	var err error
	initΛEnumTypes()
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " +  err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root: &Device{},
		SchemaTree: uzp,
		Unmarshal: Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn )
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// Device represents the /device YANG schema element.
type Device struct {
	Interfaces	*IETFInterfaces_Interfaces	`path:"interfaces" module:"ietf-interfaces"`
	InterfacesState	*IETFInterfaces_InterfacesState	`path:"interfaces-state" module:"ietf-interfaces"`
}

// IsYANGGoStruct ensures that Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Device) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Device"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Device) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Device.
func (*Device) ΛBelongingModule() string {
	return ""
}


// IETFInterfaces_Interfaces represents the /ietf-interfaces/interfaces YANG schema element.
type IETFInterfaces_Interfaces struct {
	Interface	map[string]*IETFInterfaces_Interfaces_Interface	`path:"interface" module:"ietf-interfaces"`
}

// IsYANGGoStruct ensures that IETFInterfaces_Interfaces implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_Interfaces) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// IETFInterfaces_Interfaces struct. The keys of the list are populated from the input
// arguments.
func (t *IETFInterfaces_Interfaces) NewInterface(Name string) (*IETFInterfaces_Interfaces_Interface, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*IETFInterfaces_Interfaces_Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &IETFInterfaces_Interfaces_Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_Interfaces"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_Interfaces) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_Interfaces.
func (*IETFInterfaces_Interfaces) ΛBelongingModule() string {
	return "ietf-interfaces"
}


// IETFInterfaces_InterfacesState represents the /ietf-interfaces/interfaces-state YANG schema element.
type IETFInterfaces_InterfacesState struct {
	Interface	map[string]*IETFInterfaces_InterfacesState_Interface	`path:"interface" module:"ietf-interfaces"`
}

// IsYANGGoStruct ensures that IETFInterfaces_InterfacesState implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_InterfacesState) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// IETFInterfaces_InterfacesState struct. The keys of the list are populated from the input
// arguments.
func (t *IETFInterfaces_InterfacesState) NewInterface(Name string) (*IETFInterfaces_InterfacesState_Interface, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*IETFInterfaces_InterfacesState_Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &IETFInterfaces_InterfacesState_Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_InterfacesState) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_InterfacesState"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_InterfacesState) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_InterfacesState) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_InterfacesState.
func (*IETFInterfaces_InterfacesState) ΛBelongingModule() string {
	return "ietf-interfaces"
}


// IETFInterfaces_InterfacesState_Interface represents the /ietf-interfaces/interfaces-state/interface YANG schema element.
type IETFInterfaces_InterfacesState_Interface struct {
	AdminStatus	E_IETFInterfaces_InterfacesState_Interface_AdminStatus	`path:"admin-status" module:"ietf-interfaces"`
	HigherLayerIf	[]string	`path:"higher-layer-if" module:"ietf-interfaces"`
	IfIndex	*int32	`path:"if-index" module:"ietf-interfaces"`
	LastChange	*string	`path:"last-change" module:"ietf-interfaces"`
	LowerLayerIf	[]string	`path:"lower-layer-if" module:"ietf-interfaces"`
	Name	*string	`path:"name" module:"ietf-interfaces"`
	OperStatus	E_IETFInterfaces_InterfacesState_Interface_OperStatus	`path:"oper-status" module:"ietf-interfaces"`
	PhysAddress	*string	`path:"phys-address" module:"ietf-interfaces"`
	Speed	*uint64	`path:"speed" module:"ietf-interfaces"`
	Statistics	*IETFInterfaces_InterfacesState_Interface_Statistics	`path:"statistics" module:"ietf-interfaces"`
	Type	E_IETFInterfaces_InterfaceType	`path:"type" module:"ietf-interfaces"`
}

// IsYANGGoStruct ensures that IETFInterfaces_InterfacesState_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_InterfacesState_Interface) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the IETFInterfaces_InterfacesState_Interface struct, which is a YANG list entry.
func (t *IETFInterfaces_InterfacesState_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_InterfacesState_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_InterfacesState_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_InterfacesState_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_InterfacesState_Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_InterfacesState_Interface.
func (*IETFInterfaces_InterfacesState_Interface) ΛBelongingModule() string {
	return "ietf-interfaces"
}


// IETFInterfaces_InterfacesState_Interface_Statistics represents the /ietf-interfaces/interfaces-state/interface/statistics YANG schema element.
type IETFInterfaces_InterfacesState_Interface_Statistics struct {
	DiscontinuityTime	*string	`path:"discontinuity-time" module:"ietf-interfaces"`
	InBroadcastPkts	*uint64	`path:"in-broadcast-pkts" module:"ietf-interfaces"`
	InDiscards	*uint32	`path:"in-discards" module:"ietf-interfaces"`
	InErrors	*uint32	`path:"in-errors" module:"ietf-interfaces"`
	InMulticastPkts	*uint64	`path:"in-multicast-pkts" module:"ietf-interfaces"`
	InOctets	*uint64	`path:"in-octets" module:"ietf-interfaces"`
	InUnicastPkts	*uint64	`path:"in-unicast-pkts" module:"ietf-interfaces"`
	InUnknownProtos	*uint32	`path:"in-unknown-protos" module:"ietf-interfaces"`
	OutBroadcastPkts	*uint64	`path:"out-broadcast-pkts" module:"ietf-interfaces"`
	OutDiscards	*uint32	`path:"out-discards" module:"ietf-interfaces"`
	OutErrors	*uint32	`path:"out-errors" module:"ietf-interfaces"`
	OutMulticastPkts	*uint64	`path:"out-multicast-pkts" module:"ietf-interfaces"`
	OutOctets	*uint64	`path:"out-octets" module:"ietf-interfaces"`
	OutUnicastPkts	*uint64	`path:"out-unicast-pkts" module:"ietf-interfaces"`
}

// IsYANGGoStruct ensures that IETFInterfaces_InterfacesState_Interface_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_InterfacesState_Interface_Statistics) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_InterfacesState_Interface_Statistics) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_InterfacesState_Interface_Statistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_InterfacesState_Interface_Statistics) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_InterfacesState_Interface_Statistics) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_InterfacesState_Interface_Statistics.
func (*IETFInterfaces_InterfacesState_Interface_Statistics) ΛBelongingModule() string {
	return "ietf-interfaces"
}


// IETFInterfaces_Interfaces_Interface represents the /ietf-interfaces/interfaces/interface YANG schema element.
type IETFInterfaces_Interfaces_Interface struct {
	AdminStatus	E_IETFInterfaces_Interfaces_Interface_AdminStatus	`path:"admin-status" module:"ietf-interfaces"`
	Description	*string	`path:"description" module:"ietf-interfaces"`
	Enabled	*bool	`path:"enabled" module:"ietf-interfaces"`
	GateParameterTable	*IETFInterfaces_Interfaces_Interface_GateParameterTable	`path:"gate-parameter-table" module:"ieee802-dot1dc-sched-if"`
	HigherLayerIf	[]string	`path:"higher-layer-if" module:"ietf-interfaces"`
	IfIndex	*int32	`path:"if-index" module:"ietf-interfaces"`
	LastChange	*string	`path:"last-change" module:"ietf-interfaces"`
	LinkUpDownTrapEnable	E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable	`path:"link-up-down-trap-enable" module:"ietf-interfaces"`
	LowerLayerIf	[]string	`path:"lower-layer-if" module:"ietf-interfaces"`
	Name	*string	`path:"name" module:"ietf-interfaces"`
	OperStatus	E_IETFInterfaces_Interfaces_Interface_OperStatus	`path:"oper-status" module:"ietf-interfaces"`
	PhysAddress	*string	`path:"phys-address" module:"ietf-interfaces"`
	Speed	*uint64	`path:"speed" module:"ietf-interfaces"`
	Statistics	*IETFInterfaces_Interfaces_Interface_Statistics	`path:"statistics" module:"ietf-interfaces"`
	Type	E_IETFInterfaces_InterfaceType	`path:"type" module:"ietf-interfaces"`
}

// IsYANGGoStruct ensures that IETFInterfaces_Interfaces_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_Interfaces_Interface) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the IETFInterfaces_Interfaces_Interface struct, which is a YANG list entry.
func (t *IETFInterfaces_Interfaces_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_Interfaces_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_Interfaces_Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_Interfaces_Interface.
func (*IETFInterfaces_Interfaces_Interface) ΛBelongingModule() string {
	return "ietf-interfaces"
}


// IETFInterfaces_Interfaces_Interface_GateParameterTable represents the /ietf-interfaces/interfaces/interface/gate-parameter-table YANG schema element.
type IETFInterfaces_Interfaces_Interface_GateParameterTable struct {
	AdminBaseTime	*IETFInterfaces_Interfaces_Interface_GateParameterTable_AdminBaseTime	`path:"admin-base-time" module:"ieee802-dot1dc-sched-if"`
	AdminControlList	*IETFInterfaces_Interfaces_Interface_GateParameterTable_AdminControlList	`path:"admin-control-list" module:"ieee802-dot1dc-sched-if"`
	AdminCycleTime	*IETFInterfaces_Interfaces_Interface_GateParameterTable_AdminCycleTime	`path:"admin-cycle-time" module:"ieee802-dot1dc-sched-if"`
	AdminCycleTimeExtension	*uint32	`path:"admin-cycle-time-extension" module:"ieee802-dot1dc-sched-if"`
	AdminGateStates	*uint8	`path:"admin-gate-states" module:"ieee802-dot1dc-sched-if"`
	ConfigChange	*bool	`path:"config-change" module:"ieee802-dot1dc-sched-if"`
	ConfigChangeError	*uint64	`path:"config-change-error" module:"ieee802-dot1dc-sched-if"`
	ConfigChangeTime	*IETFInterfaces_Interfaces_Interface_GateParameterTable_ConfigChangeTime	`path:"config-change-time" module:"ieee802-dot1dc-sched-if"`
	ConfigPending	*bool	`path:"config-pending" module:"ieee802-dot1dc-sched-if"`
	CurrentTime	*IETFInterfaces_Interfaces_Interface_GateParameterTable_CurrentTime	`path:"current-time" module:"ieee802-dot1dc-sched-if"`
	GateEnabled	*bool	`path:"gate-enabled" module:"ieee802-dot1dc-sched-if"`
	OperBaseTime	*IETFInterfaces_Interfaces_Interface_GateParameterTable_OperBaseTime	`path:"oper-base-time" module:"ieee802-dot1dc-sched-if"`
	OperControlList	*IETFInterfaces_Interfaces_Interface_GateParameterTable_OperControlList	`path:"oper-control-list" module:"ieee802-dot1dc-sched-if"`
	OperCycleTime	*IETFInterfaces_Interfaces_Interface_GateParameterTable_OperCycleTime	`path:"oper-cycle-time" module:"ieee802-dot1dc-sched-if"`
	OperCycleTimeExtension	*uint32	`path:"oper-cycle-time-extension" module:"ieee802-dot1dc-sched-if"`
	OperGateStates	*uint8	`path:"oper-gate-states" module:"ieee802-dot1dc-sched-if"`
	QueueMaxSduTable	map[uint8]*IETFInterfaces_Interfaces_Interface_GateParameterTable_QueueMaxSduTable	`path:"queue-max-sdu-table" module:"ieee802-dot1dc-sched-if"`
	SupportedCycleMax	*IETFInterfaces_Interfaces_Interface_GateParameterTable_SupportedCycleMax	`path:"supported-cycle-max" module:"ieee802-dot1dc-sched-if"`
	SupportedIntervalMax	*uint32	`path:"supported-interval-max" module:"ieee802-dot1dc-sched-if"`
	SupportedListMax	*uint32	`path:"supported-list-max" module:"ieee802-dot1dc-sched-if"`
	TickGranularity	*uint32	`path:"tick-granularity" module:"ieee802-dot1dc-sched-if"`
}

// IsYANGGoStruct ensures that IETFInterfaces_Interfaces_Interface_GateParameterTable implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_Interfaces_Interface_GateParameterTable) IsYANGGoStruct() {}

// NewQueueMaxSduTable creates a new entry in the QueueMaxSduTable list of the
// IETFInterfaces_Interfaces_Interface_GateParameterTable struct. The keys of the list are populated from the input
// arguments.
func (t *IETFInterfaces_Interfaces_Interface_GateParameterTable) NewQueueMaxSduTable(TrafficClass uint8) (*IETFInterfaces_Interfaces_Interface_GateParameterTable_QueueMaxSduTable, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QueueMaxSduTable == nil {
		t.QueueMaxSduTable = make(map[uint8]*IETFInterfaces_Interfaces_Interface_GateParameterTable_QueueMaxSduTable)
	}

	key := TrafficClass

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.QueueMaxSduTable[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list QueueMaxSduTable", key)
	}

	t.QueueMaxSduTable[key] = &IETFInterfaces_Interfaces_Interface_GateParameterTable_QueueMaxSduTable{
		TrafficClass: &TrafficClass,
	}

	return t.QueueMaxSduTable[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_GateParameterTable) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_Interfaces_Interface_GateParameterTable"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_GateParameterTable) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_Interfaces_Interface_GateParameterTable) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_Interfaces_Interface_GateParameterTable.
func (*IETFInterfaces_Interfaces_Interface_GateParameterTable) ΛBelongingModule() string {
	return "ieee802-dot1dc-sched-if"
}


// IETFInterfaces_Interfaces_Interface_GateParameterTable_AdminBaseTime represents the /ietf-interfaces/interfaces/interface/gate-parameter-table/admin-base-time YANG schema element.
type IETFInterfaces_Interfaces_Interface_GateParameterTable_AdminBaseTime struct {
	Nanoseconds	*uint32	`path:"nanoseconds" module:"ieee802-dot1dc-sched-if"`
	Seconds	*uint64	`path:"seconds" module:"ieee802-dot1dc-sched-if"`
}

// IsYANGGoStruct ensures that IETFInterfaces_Interfaces_Interface_GateParameterTable_AdminBaseTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_Interfaces_Interface_GateParameterTable_AdminBaseTime) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_GateParameterTable_AdminBaseTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_Interfaces_Interface_GateParameterTable_AdminBaseTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_GateParameterTable_AdminBaseTime) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_Interfaces_Interface_GateParameterTable_AdminBaseTime) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_Interfaces_Interface_GateParameterTable_AdminBaseTime.
func (*IETFInterfaces_Interfaces_Interface_GateParameterTable_AdminBaseTime) ΛBelongingModule() string {
	return "ieee802-dot1dc-sched-if"
}


// IETFInterfaces_Interfaces_Interface_GateParameterTable_AdminControlList represents the /ietf-interfaces/interfaces/interface/gate-parameter-table/admin-control-list YANG schema element.
type IETFInterfaces_Interfaces_Interface_GateParameterTable_AdminControlList struct {
	GateControlEntry	map[uint32]*IETFInterfaces_Interfaces_Interface_GateParameterTable_AdminControlList_GateControlEntry	`path:"gate-control-entry" module:"ieee802-dot1dc-sched-if"`
}

// IsYANGGoStruct ensures that IETFInterfaces_Interfaces_Interface_GateParameterTable_AdminControlList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_Interfaces_Interface_GateParameterTable_AdminControlList) IsYANGGoStruct() {}

// NewGateControlEntry creates a new entry in the GateControlEntry list of the
// IETFInterfaces_Interfaces_Interface_GateParameterTable_AdminControlList struct. The keys of the list are populated from the input
// arguments.
func (t *IETFInterfaces_Interfaces_Interface_GateParameterTable_AdminControlList) NewGateControlEntry(Index uint32) (*IETFInterfaces_Interfaces_Interface_GateParameterTable_AdminControlList_GateControlEntry, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GateControlEntry == nil {
		t.GateControlEntry = make(map[uint32]*IETFInterfaces_Interfaces_Interface_GateParameterTable_AdminControlList_GateControlEntry)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GateControlEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GateControlEntry", key)
	}

	t.GateControlEntry[key] = &IETFInterfaces_Interfaces_Interface_GateParameterTable_AdminControlList_GateControlEntry{
		Index: &Index,
	}

	return t.GateControlEntry[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_GateParameterTable_AdminControlList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_Interfaces_Interface_GateParameterTable_AdminControlList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_GateParameterTable_AdminControlList) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_Interfaces_Interface_GateParameterTable_AdminControlList) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_Interfaces_Interface_GateParameterTable_AdminControlList.
func (*IETFInterfaces_Interfaces_Interface_GateParameterTable_AdminControlList) ΛBelongingModule() string {
	return "ieee802-dot1dc-sched-if"
}


// IETFInterfaces_Interfaces_Interface_GateParameterTable_AdminControlList_GateControlEntry represents the /ietf-interfaces/interfaces/interface/gate-parameter-table/admin-control-list/gate-control-entry YANG schema element.
type IETFInterfaces_Interfaces_Interface_GateParameterTable_AdminControlList_GateControlEntry struct {
	Index	*uint32	`path:"index" module:"ieee802-dot1dc-sched-if"`
	OperationName	E_Ieee802Dot1QTypes_TypeOfOperation	`path:"operation-name" module:"ieee802-dot1dc-sched-if"`
	TimeIntervalValue	*uint32	`path:"time-interval-value" module:"ieee802-dot1dc-sched-if"`
}

// IsYANGGoStruct ensures that IETFInterfaces_Interfaces_Interface_GateParameterTable_AdminControlList_GateControlEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_Interfaces_Interface_GateParameterTable_AdminControlList_GateControlEntry) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the IETFInterfaces_Interfaces_Interface_GateParameterTable_AdminControlList_GateControlEntry struct, which is a YANG list entry.
func (t *IETFInterfaces_Interfaces_Interface_GateParameterTable_AdminControlList_GateControlEntry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_GateParameterTable_AdminControlList_GateControlEntry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_Interfaces_Interface_GateParameterTable_AdminControlList_GateControlEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_GateParameterTable_AdminControlList_GateControlEntry) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_Interfaces_Interface_GateParameterTable_AdminControlList_GateControlEntry) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_Interfaces_Interface_GateParameterTable_AdminControlList_GateControlEntry.
func (*IETFInterfaces_Interfaces_Interface_GateParameterTable_AdminControlList_GateControlEntry) ΛBelongingModule() string {
	return "ieee802-dot1dc-sched-if"
}


// IETFInterfaces_Interfaces_Interface_GateParameterTable_AdminCycleTime represents the /ietf-interfaces/interfaces/interface/gate-parameter-table/admin-cycle-time YANG schema element.
type IETFInterfaces_Interfaces_Interface_GateParameterTable_AdminCycleTime struct {
	Denominator	*uint32	`path:"denominator" module:"ieee802-dot1dc-sched-if"`
	Numerator	*uint32	`path:"numerator" module:"ieee802-dot1dc-sched-if"`
}

// IsYANGGoStruct ensures that IETFInterfaces_Interfaces_Interface_GateParameterTable_AdminCycleTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_Interfaces_Interface_GateParameterTable_AdminCycleTime) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_GateParameterTable_AdminCycleTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_Interfaces_Interface_GateParameterTable_AdminCycleTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_GateParameterTable_AdminCycleTime) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_Interfaces_Interface_GateParameterTable_AdminCycleTime) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_Interfaces_Interface_GateParameterTable_AdminCycleTime.
func (*IETFInterfaces_Interfaces_Interface_GateParameterTable_AdminCycleTime) ΛBelongingModule() string {
	return "ieee802-dot1dc-sched-if"
}


// IETFInterfaces_Interfaces_Interface_GateParameterTable_ConfigChangeTime represents the /ietf-interfaces/interfaces/interface/gate-parameter-table/config-change-time YANG schema element.
type IETFInterfaces_Interfaces_Interface_GateParameterTable_ConfigChangeTime struct {
	Nanoseconds	*uint32	`path:"nanoseconds" module:"ieee802-dot1dc-sched-if"`
	Seconds	*uint64	`path:"seconds" module:"ieee802-dot1dc-sched-if"`
}

// IsYANGGoStruct ensures that IETFInterfaces_Interfaces_Interface_GateParameterTable_ConfigChangeTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_Interfaces_Interface_GateParameterTable_ConfigChangeTime) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_GateParameterTable_ConfigChangeTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_Interfaces_Interface_GateParameterTable_ConfigChangeTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_GateParameterTable_ConfigChangeTime) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_Interfaces_Interface_GateParameterTable_ConfigChangeTime) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_Interfaces_Interface_GateParameterTable_ConfigChangeTime.
func (*IETFInterfaces_Interfaces_Interface_GateParameterTable_ConfigChangeTime) ΛBelongingModule() string {
	return "ieee802-dot1dc-sched-if"
}


// IETFInterfaces_Interfaces_Interface_GateParameterTable_CurrentTime represents the /ietf-interfaces/interfaces/interface/gate-parameter-table/current-time YANG schema element.
type IETFInterfaces_Interfaces_Interface_GateParameterTable_CurrentTime struct {
	Nanoseconds	*uint32	`path:"nanoseconds" module:"ieee802-dot1dc-sched-if"`
	Seconds	*uint64	`path:"seconds" module:"ieee802-dot1dc-sched-if"`
}

// IsYANGGoStruct ensures that IETFInterfaces_Interfaces_Interface_GateParameterTable_CurrentTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_Interfaces_Interface_GateParameterTable_CurrentTime) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_GateParameterTable_CurrentTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_Interfaces_Interface_GateParameterTable_CurrentTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_GateParameterTable_CurrentTime) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_Interfaces_Interface_GateParameterTable_CurrentTime) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_Interfaces_Interface_GateParameterTable_CurrentTime.
func (*IETFInterfaces_Interfaces_Interface_GateParameterTable_CurrentTime) ΛBelongingModule() string {
	return "ieee802-dot1dc-sched-if"
}


// IETFInterfaces_Interfaces_Interface_GateParameterTable_OperBaseTime represents the /ietf-interfaces/interfaces/interface/gate-parameter-table/oper-base-time YANG schema element.
type IETFInterfaces_Interfaces_Interface_GateParameterTable_OperBaseTime struct {
	Nanoseconds	*uint32	`path:"nanoseconds" module:"ieee802-dot1dc-sched-if"`
	Seconds	*uint64	`path:"seconds" module:"ieee802-dot1dc-sched-if"`
}

// IsYANGGoStruct ensures that IETFInterfaces_Interfaces_Interface_GateParameterTable_OperBaseTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_Interfaces_Interface_GateParameterTable_OperBaseTime) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_GateParameterTable_OperBaseTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_Interfaces_Interface_GateParameterTable_OperBaseTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_GateParameterTable_OperBaseTime) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_Interfaces_Interface_GateParameterTable_OperBaseTime) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_Interfaces_Interface_GateParameterTable_OperBaseTime.
func (*IETFInterfaces_Interfaces_Interface_GateParameterTable_OperBaseTime) ΛBelongingModule() string {
	return "ieee802-dot1dc-sched-if"
}


// IETFInterfaces_Interfaces_Interface_GateParameterTable_OperControlList represents the /ietf-interfaces/interfaces/interface/gate-parameter-table/oper-control-list YANG schema element.
type IETFInterfaces_Interfaces_Interface_GateParameterTable_OperControlList struct {
	GateControlEntry	map[uint32]*IETFInterfaces_Interfaces_Interface_GateParameterTable_OperControlList_GateControlEntry	`path:"gate-control-entry" module:"ieee802-dot1dc-sched-if"`
}

// IsYANGGoStruct ensures that IETFInterfaces_Interfaces_Interface_GateParameterTable_OperControlList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_Interfaces_Interface_GateParameterTable_OperControlList) IsYANGGoStruct() {}

// NewGateControlEntry creates a new entry in the GateControlEntry list of the
// IETFInterfaces_Interfaces_Interface_GateParameterTable_OperControlList struct. The keys of the list are populated from the input
// arguments.
func (t *IETFInterfaces_Interfaces_Interface_GateParameterTable_OperControlList) NewGateControlEntry(Index uint32) (*IETFInterfaces_Interfaces_Interface_GateParameterTable_OperControlList_GateControlEntry, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GateControlEntry == nil {
		t.GateControlEntry = make(map[uint32]*IETFInterfaces_Interfaces_Interface_GateParameterTable_OperControlList_GateControlEntry)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GateControlEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GateControlEntry", key)
	}

	t.GateControlEntry[key] = &IETFInterfaces_Interfaces_Interface_GateParameterTable_OperControlList_GateControlEntry{
		Index: &Index,
	}

	return t.GateControlEntry[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_GateParameterTable_OperControlList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_Interfaces_Interface_GateParameterTable_OperControlList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_GateParameterTable_OperControlList) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_Interfaces_Interface_GateParameterTable_OperControlList) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_Interfaces_Interface_GateParameterTable_OperControlList.
func (*IETFInterfaces_Interfaces_Interface_GateParameterTable_OperControlList) ΛBelongingModule() string {
	return "ieee802-dot1dc-sched-if"
}


// IETFInterfaces_Interfaces_Interface_GateParameterTable_OperControlList_GateControlEntry represents the /ietf-interfaces/interfaces/interface/gate-parameter-table/oper-control-list/gate-control-entry YANG schema element.
type IETFInterfaces_Interfaces_Interface_GateParameterTable_OperControlList_GateControlEntry struct {
	Index	*uint32	`path:"index" module:"ieee802-dot1dc-sched-if"`
	OperationName	E_Ieee802Dot1QTypes_TypeOfOperation	`path:"operation-name" module:"ieee802-dot1dc-sched-if"`
	TimeIntervalValue	*uint32	`path:"time-interval-value" module:"ieee802-dot1dc-sched-if"`
}

// IsYANGGoStruct ensures that IETFInterfaces_Interfaces_Interface_GateParameterTable_OperControlList_GateControlEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_Interfaces_Interface_GateParameterTable_OperControlList_GateControlEntry) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the IETFInterfaces_Interfaces_Interface_GateParameterTable_OperControlList_GateControlEntry struct, which is a YANG list entry.
func (t *IETFInterfaces_Interfaces_Interface_GateParameterTable_OperControlList_GateControlEntry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_GateParameterTable_OperControlList_GateControlEntry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_Interfaces_Interface_GateParameterTable_OperControlList_GateControlEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_GateParameterTable_OperControlList_GateControlEntry) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_Interfaces_Interface_GateParameterTable_OperControlList_GateControlEntry) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_Interfaces_Interface_GateParameterTable_OperControlList_GateControlEntry.
func (*IETFInterfaces_Interfaces_Interface_GateParameterTable_OperControlList_GateControlEntry) ΛBelongingModule() string {
	return "ieee802-dot1dc-sched-if"
}


// IETFInterfaces_Interfaces_Interface_GateParameterTable_OperCycleTime represents the /ietf-interfaces/interfaces/interface/gate-parameter-table/oper-cycle-time YANG schema element.
type IETFInterfaces_Interfaces_Interface_GateParameterTable_OperCycleTime struct {
	Denominator	*uint32	`path:"denominator" module:"ieee802-dot1dc-sched-if"`
	Numerator	*uint32	`path:"numerator" module:"ieee802-dot1dc-sched-if"`
}

// IsYANGGoStruct ensures that IETFInterfaces_Interfaces_Interface_GateParameterTable_OperCycleTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_Interfaces_Interface_GateParameterTable_OperCycleTime) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_GateParameterTable_OperCycleTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_Interfaces_Interface_GateParameterTable_OperCycleTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_GateParameterTable_OperCycleTime) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_Interfaces_Interface_GateParameterTable_OperCycleTime) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_Interfaces_Interface_GateParameterTable_OperCycleTime.
func (*IETFInterfaces_Interfaces_Interface_GateParameterTable_OperCycleTime) ΛBelongingModule() string {
	return "ieee802-dot1dc-sched-if"
}


// IETFInterfaces_Interfaces_Interface_GateParameterTable_QueueMaxSduTable represents the /ietf-interfaces/interfaces/interface/gate-parameter-table/queue-max-sdu-table YANG schema element.
type IETFInterfaces_Interfaces_Interface_GateParameterTable_QueueMaxSduTable struct {
	QueueMaxSdu	*uint32	`path:"queue-max-sdu" module:"ieee802-dot1dc-sched-if"`
	TrafficClass	*uint8	`path:"traffic-class" module:"ieee802-dot1dc-sched-if"`
	TransmissionOverrun	*uint64	`path:"transmission-overrun" module:"ieee802-dot1dc-sched-if"`
}

// IsYANGGoStruct ensures that IETFInterfaces_Interfaces_Interface_GateParameterTable_QueueMaxSduTable implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_Interfaces_Interface_GateParameterTable_QueueMaxSduTable) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the IETFInterfaces_Interfaces_Interface_GateParameterTable_QueueMaxSduTable struct, which is a YANG list entry.
func (t *IETFInterfaces_Interfaces_Interface_GateParameterTable_QueueMaxSduTable) ΛListKeyMap() (map[string]interface{}, error) {
	if t.TrafficClass == nil {
		return nil, fmt.Errorf("nil value for key TrafficClass")
	}

	return map[string]interface{}{
		"traffic-class": *t.TrafficClass,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_GateParameterTable_QueueMaxSduTable) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_Interfaces_Interface_GateParameterTable_QueueMaxSduTable"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_GateParameterTable_QueueMaxSduTable) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_Interfaces_Interface_GateParameterTable_QueueMaxSduTable) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_Interfaces_Interface_GateParameterTable_QueueMaxSduTable.
func (*IETFInterfaces_Interfaces_Interface_GateParameterTable_QueueMaxSduTable) ΛBelongingModule() string {
	return "ieee802-dot1dc-sched-if"
}


// IETFInterfaces_Interfaces_Interface_GateParameterTable_SupportedCycleMax represents the /ietf-interfaces/interfaces/interface/gate-parameter-table/supported-cycle-max YANG schema element.
type IETFInterfaces_Interfaces_Interface_GateParameterTable_SupportedCycleMax struct {
	Denominator	*uint32	`path:"denominator" module:"ieee802-dot1dc-sched-if"`
	Numerator	*uint32	`path:"numerator" module:"ieee802-dot1dc-sched-if"`
}

// IsYANGGoStruct ensures that IETFInterfaces_Interfaces_Interface_GateParameterTable_SupportedCycleMax implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_Interfaces_Interface_GateParameterTable_SupportedCycleMax) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_GateParameterTable_SupportedCycleMax) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_Interfaces_Interface_GateParameterTable_SupportedCycleMax"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_GateParameterTable_SupportedCycleMax) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_Interfaces_Interface_GateParameterTable_SupportedCycleMax) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_Interfaces_Interface_GateParameterTable_SupportedCycleMax.
func (*IETFInterfaces_Interfaces_Interface_GateParameterTable_SupportedCycleMax) ΛBelongingModule() string {
	return "ieee802-dot1dc-sched-if"
}


// IETFInterfaces_Interfaces_Interface_Statistics represents the /ietf-interfaces/interfaces/interface/statistics YANG schema element.
type IETFInterfaces_Interfaces_Interface_Statistics struct {
	DiscontinuityTime	*string	`path:"discontinuity-time" module:"ietf-interfaces"`
	InBroadcastPkts	*uint64	`path:"in-broadcast-pkts" module:"ietf-interfaces"`
	InDiscards	*uint32	`path:"in-discards" module:"ietf-interfaces"`
	InErrors	*uint32	`path:"in-errors" module:"ietf-interfaces"`
	InMulticastPkts	*uint64	`path:"in-multicast-pkts" module:"ietf-interfaces"`
	InOctets	*uint64	`path:"in-octets" module:"ietf-interfaces"`
	InUnicastPkts	*uint64	`path:"in-unicast-pkts" module:"ietf-interfaces"`
	InUnknownProtos	*uint32	`path:"in-unknown-protos" module:"ietf-interfaces"`
	OutBroadcastPkts	*uint64	`path:"out-broadcast-pkts" module:"ietf-interfaces"`
	OutDiscards	*uint32	`path:"out-discards" module:"ietf-interfaces"`
	OutErrors	*uint32	`path:"out-errors" module:"ietf-interfaces"`
	OutMulticastPkts	*uint64	`path:"out-multicast-pkts" module:"ietf-interfaces"`
	OutOctets	*uint64	`path:"out-octets" module:"ietf-interfaces"`
	OutUnicastPkts	*uint64	`path:"out-unicast-pkts" module:"ietf-interfaces"`
}

// IsYANGGoStruct ensures that IETFInterfaces_Interfaces_Interface_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_Interfaces_Interface_Statistics) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_Statistics) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_Interfaces_Interface_Statistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_Statistics) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_Interfaces_Interface_Statistics) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_Interfaces_Interface_Statistics.
func (*IETFInterfaces_Interfaces_Interface_Statistics) ΛBelongingModule() string {
	return "ietf-interfaces"
}


// E_IETFInterfaces_InterfaceType is a derived int64 type which is used to represent
// the enumerated node IETFInterfaces_InterfaceType. An additional value named
// IETFInterfaces_InterfaceType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFInterfaces_InterfaceType int64

// IsYANGGoEnum ensures that IETFInterfaces_InterfaceType implements the yang.GoEnum
// interface. This ensures that IETFInterfaces_InterfaceType can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFInterfaces_InterfaceType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFInterfaces_InterfaceType.
func (E_IETFInterfaces_InterfaceType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_IETFInterfaces_InterfaceType.
func (e E_IETFInterfaces_InterfaceType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFInterfaces_InterfaceType")
}

const (
	// IETFInterfaces_InterfaceType_UNSET corresponds to the value UNSET of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_UNSET E_IETFInterfaces_InterfaceType = 0
)


// E_IETFInterfaces_InterfacesState_Interface_AdminStatus is a derived int64 type which is used to represent
// the enumerated node IETFInterfaces_InterfacesState_Interface_AdminStatus. An additional value named
// IETFInterfaces_InterfacesState_Interface_AdminStatus_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFInterfaces_InterfacesState_Interface_AdminStatus int64

// IsYANGGoEnum ensures that IETFInterfaces_InterfacesState_Interface_AdminStatus implements the yang.GoEnum
// interface. This ensures that IETFInterfaces_InterfacesState_Interface_AdminStatus can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFInterfaces_InterfacesState_Interface_AdminStatus) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFInterfaces_InterfacesState_Interface_AdminStatus.
func (E_IETFInterfaces_InterfacesState_Interface_AdminStatus) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_IETFInterfaces_InterfacesState_Interface_AdminStatus.
func (e E_IETFInterfaces_InterfacesState_Interface_AdminStatus) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFInterfaces_InterfacesState_Interface_AdminStatus")
}

const (
	// IETFInterfaces_InterfacesState_Interface_AdminStatus_UNSET corresponds to the value UNSET of IETFInterfaces_InterfacesState_Interface_AdminStatus
	IETFInterfaces_InterfacesState_Interface_AdminStatus_UNSET E_IETFInterfaces_InterfacesState_Interface_AdminStatus = 0
	// IETFInterfaces_InterfacesState_Interface_AdminStatus_up corresponds to the value up of IETFInterfaces_InterfacesState_Interface_AdminStatus
	IETFInterfaces_InterfacesState_Interface_AdminStatus_up E_IETFInterfaces_InterfacesState_Interface_AdminStatus = 1
	// IETFInterfaces_InterfacesState_Interface_AdminStatus_down corresponds to the value down of IETFInterfaces_InterfacesState_Interface_AdminStatus
	IETFInterfaces_InterfacesState_Interface_AdminStatus_down E_IETFInterfaces_InterfacesState_Interface_AdminStatus = 2
	// IETFInterfaces_InterfacesState_Interface_AdminStatus_testing corresponds to the value testing of IETFInterfaces_InterfacesState_Interface_AdminStatus
	IETFInterfaces_InterfacesState_Interface_AdminStatus_testing E_IETFInterfaces_InterfacesState_Interface_AdminStatus = 3
)


// E_IETFInterfaces_InterfacesState_Interface_OperStatus is a derived int64 type which is used to represent
// the enumerated node IETFInterfaces_InterfacesState_Interface_OperStatus. An additional value named
// IETFInterfaces_InterfacesState_Interface_OperStatus_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFInterfaces_InterfacesState_Interface_OperStatus int64

// IsYANGGoEnum ensures that IETFInterfaces_InterfacesState_Interface_OperStatus implements the yang.GoEnum
// interface. This ensures that IETFInterfaces_InterfacesState_Interface_OperStatus can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFInterfaces_InterfacesState_Interface_OperStatus) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFInterfaces_InterfacesState_Interface_OperStatus.
func (E_IETFInterfaces_InterfacesState_Interface_OperStatus) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_IETFInterfaces_InterfacesState_Interface_OperStatus.
func (e E_IETFInterfaces_InterfacesState_Interface_OperStatus) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFInterfaces_InterfacesState_Interface_OperStatus")
}

const (
	// IETFInterfaces_InterfacesState_Interface_OperStatus_UNSET corresponds to the value UNSET of IETFInterfaces_InterfacesState_Interface_OperStatus
	IETFInterfaces_InterfacesState_Interface_OperStatus_UNSET E_IETFInterfaces_InterfacesState_Interface_OperStatus = 0
	// IETFInterfaces_InterfacesState_Interface_OperStatus_up corresponds to the value up of IETFInterfaces_InterfacesState_Interface_OperStatus
	IETFInterfaces_InterfacesState_Interface_OperStatus_up E_IETFInterfaces_InterfacesState_Interface_OperStatus = 1
	// IETFInterfaces_InterfacesState_Interface_OperStatus_down corresponds to the value down of IETFInterfaces_InterfacesState_Interface_OperStatus
	IETFInterfaces_InterfacesState_Interface_OperStatus_down E_IETFInterfaces_InterfacesState_Interface_OperStatus = 2
	// IETFInterfaces_InterfacesState_Interface_OperStatus_testing corresponds to the value testing of IETFInterfaces_InterfacesState_Interface_OperStatus
	IETFInterfaces_InterfacesState_Interface_OperStatus_testing E_IETFInterfaces_InterfacesState_Interface_OperStatus = 3
	// IETFInterfaces_InterfacesState_Interface_OperStatus_unknown corresponds to the value unknown of IETFInterfaces_InterfacesState_Interface_OperStatus
	IETFInterfaces_InterfacesState_Interface_OperStatus_unknown E_IETFInterfaces_InterfacesState_Interface_OperStatus = 4
	// IETFInterfaces_InterfacesState_Interface_OperStatus_dormant corresponds to the value dormant of IETFInterfaces_InterfacesState_Interface_OperStatus
	IETFInterfaces_InterfacesState_Interface_OperStatus_dormant E_IETFInterfaces_InterfacesState_Interface_OperStatus = 5
	// IETFInterfaces_InterfacesState_Interface_OperStatus_not_present corresponds to the value not_present of IETFInterfaces_InterfacesState_Interface_OperStatus
	IETFInterfaces_InterfacesState_Interface_OperStatus_not_present E_IETFInterfaces_InterfacesState_Interface_OperStatus = 6
	// IETFInterfaces_InterfacesState_Interface_OperStatus_lower_layer_down corresponds to the value lower_layer_down of IETFInterfaces_InterfacesState_Interface_OperStatus
	IETFInterfaces_InterfacesState_Interface_OperStatus_lower_layer_down E_IETFInterfaces_InterfacesState_Interface_OperStatus = 7
)


// E_IETFInterfaces_Interfaces_Interface_AdminStatus is a derived int64 type which is used to represent
// the enumerated node IETFInterfaces_Interfaces_Interface_AdminStatus. An additional value named
// IETFInterfaces_Interfaces_Interface_AdminStatus_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFInterfaces_Interfaces_Interface_AdminStatus int64

// IsYANGGoEnum ensures that IETFInterfaces_Interfaces_Interface_AdminStatus implements the yang.GoEnum
// interface. This ensures that IETFInterfaces_Interfaces_Interface_AdminStatus can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFInterfaces_Interfaces_Interface_AdminStatus) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFInterfaces_Interfaces_Interface_AdminStatus.
func (E_IETFInterfaces_Interfaces_Interface_AdminStatus) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_IETFInterfaces_Interfaces_Interface_AdminStatus.
func (e E_IETFInterfaces_Interfaces_Interface_AdminStatus) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFInterfaces_Interfaces_Interface_AdminStatus")
}

const (
	// IETFInterfaces_Interfaces_Interface_AdminStatus_UNSET corresponds to the value UNSET of IETFInterfaces_Interfaces_Interface_AdminStatus
	IETFInterfaces_Interfaces_Interface_AdminStatus_UNSET E_IETFInterfaces_Interfaces_Interface_AdminStatus = 0
	// IETFInterfaces_Interfaces_Interface_AdminStatus_up corresponds to the value up of IETFInterfaces_Interfaces_Interface_AdminStatus
	IETFInterfaces_Interfaces_Interface_AdminStatus_up E_IETFInterfaces_Interfaces_Interface_AdminStatus = 1
	// IETFInterfaces_Interfaces_Interface_AdminStatus_down corresponds to the value down of IETFInterfaces_Interfaces_Interface_AdminStatus
	IETFInterfaces_Interfaces_Interface_AdminStatus_down E_IETFInterfaces_Interfaces_Interface_AdminStatus = 2
	// IETFInterfaces_Interfaces_Interface_AdminStatus_testing corresponds to the value testing of IETFInterfaces_Interfaces_Interface_AdminStatus
	IETFInterfaces_Interfaces_Interface_AdminStatus_testing E_IETFInterfaces_Interfaces_Interface_AdminStatus = 3
)


// E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable is a derived int64 type which is used to represent
// the enumerated node IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable. An additional value named
// IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable int64

// IsYANGGoEnum ensures that IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable implements the yang.GoEnum
// interface. This ensures that IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable.
func (E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable.
func (e E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable")
}

const (
	// IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable_UNSET corresponds to the value UNSET of IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable
	IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable_UNSET E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable = 0
	// IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable_enabled corresponds to the value enabled of IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable
	IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable_enabled E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable = 1
	// IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable_disabled corresponds to the value disabled of IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable
	IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable_disabled E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable = 2
)


// E_IETFInterfaces_Interfaces_Interface_OperStatus is a derived int64 type which is used to represent
// the enumerated node IETFInterfaces_Interfaces_Interface_OperStatus. An additional value named
// IETFInterfaces_Interfaces_Interface_OperStatus_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFInterfaces_Interfaces_Interface_OperStatus int64

// IsYANGGoEnum ensures that IETFInterfaces_Interfaces_Interface_OperStatus implements the yang.GoEnum
// interface. This ensures that IETFInterfaces_Interfaces_Interface_OperStatus can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFInterfaces_Interfaces_Interface_OperStatus) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFInterfaces_Interfaces_Interface_OperStatus.
func (E_IETFInterfaces_Interfaces_Interface_OperStatus) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_IETFInterfaces_Interfaces_Interface_OperStatus.
func (e E_IETFInterfaces_Interfaces_Interface_OperStatus) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFInterfaces_Interfaces_Interface_OperStatus")
}

const (
	// IETFInterfaces_Interfaces_Interface_OperStatus_UNSET corresponds to the value UNSET of IETFInterfaces_Interfaces_Interface_OperStatus
	IETFInterfaces_Interfaces_Interface_OperStatus_UNSET E_IETFInterfaces_Interfaces_Interface_OperStatus = 0
	// IETFInterfaces_Interfaces_Interface_OperStatus_up corresponds to the value up of IETFInterfaces_Interfaces_Interface_OperStatus
	IETFInterfaces_Interfaces_Interface_OperStatus_up E_IETFInterfaces_Interfaces_Interface_OperStatus = 1
	// IETFInterfaces_Interfaces_Interface_OperStatus_down corresponds to the value down of IETFInterfaces_Interfaces_Interface_OperStatus
	IETFInterfaces_Interfaces_Interface_OperStatus_down E_IETFInterfaces_Interfaces_Interface_OperStatus = 2
	// IETFInterfaces_Interfaces_Interface_OperStatus_testing corresponds to the value testing of IETFInterfaces_Interfaces_Interface_OperStatus
	IETFInterfaces_Interfaces_Interface_OperStatus_testing E_IETFInterfaces_Interfaces_Interface_OperStatus = 3
	// IETFInterfaces_Interfaces_Interface_OperStatus_unknown corresponds to the value unknown of IETFInterfaces_Interfaces_Interface_OperStatus
	IETFInterfaces_Interfaces_Interface_OperStatus_unknown E_IETFInterfaces_Interfaces_Interface_OperStatus = 4
	// IETFInterfaces_Interfaces_Interface_OperStatus_dormant corresponds to the value dormant of IETFInterfaces_Interfaces_Interface_OperStatus
	IETFInterfaces_Interfaces_Interface_OperStatus_dormant E_IETFInterfaces_Interfaces_Interface_OperStatus = 5
	// IETFInterfaces_Interfaces_Interface_OperStatus_not_present corresponds to the value not_present of IETFInterfaces_Interfaces_Interface_OperStatus
	IETFInterfaces_Interfaces_Interface_OperStatus_not_present E_IETFInterfaces_Interfaces_Interface_OperStatus = 6
	// IETFInterfaces_Interfaces_Interface_OperStatus_lower_layer_down corresponds to the value lower_layer_down of IETFInterfaces_Interfaces_Interface_OperStatus
	IETFInterfaces_Interfaces_Interface_OperStatus_lower_layer_down E_IETFInterfaces_Interfaces_Interface_OperStatus = 7
)


// E_Ieee802Dot1QTypes_TypeOfOperation is a derived int64 type which is used to represent
// the enumerated node Ieee802Dot1QTypes_TypeOfOperation. An additional value named
// Ieee802Dot1QTypes_TypeOfOperation_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Ieee802Dot1QTypes_TypeOfOperation int64

// IsYANGGoEnum ensures that Ieee802Dot1QTypes_TypeOfOperation implements the yang.GoEnum
// interface. This ensures that Ieee802Dot1QTypes_TypeOfOperation can be identified as a
// mapped type for a YANG enumeration.
func (E_Ieee802Dot1QTypes_TypeOfOperation) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Ieee802Dot1QTypes_TypeOfOperation.
func (E_Ieee802Dot1QTypes_TypeOfOperation) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Ieee802Dot1QTypes_TypeOfOperation.
func (e E_Ieee802Dot1QTypes_TypeOfOperation) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Ieee802Dot1QTypes_TypeOfOperation")
}

const (
	// Ieee802Dot1QTypes_TypeOfOperation_UNSET corresponds to the value UNSET of Ieee802Dot1QTypes_TypeOfOperation
	Ieee802Dot1QTypes_TypeOfOperation_UNSET E_Ieee802Dot1QTypes_TypeOfOperation = 0
	// Ieee802Dot1QTypes_TypeOfOperation_set_and_hold_mac corresponds to the value set_and_hold_mac of Ieee802Dot1QTypes_TypeOfOperation
	Ieee802Dot1QTypes_TypeOfOperation_set_and_hold_mac E_Ieee802Dot1QTypes_TypeOfOperation = 1
	// Ieee802Dot1QTypes_TypeOfOperation_set_and_release_mac corresponds to the value set_and_release_mac of Ieee802Dot1QTypes_TypeOfOperation
	Ieee802Dot1QTypes_TypeOfOperation_set_and_release_mac E_Ieee802Dot1QTypes_TypeOfOperation = 2
	// Ieee802Dot1QTypes_TypeOfOperation_set_gate_states corresponds to the value set_gate_states of Ieee802Dot1QTypes_TypeOfOperation
	Ieee802Dot1QTypes_TypeOfOperation_set_gate_states E_Ieee802Dot1QTypes_TypeOfOperation = 3
)


// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_IETFInterfaces_InterfaceType": {
	},
	"E_IETFInterfaces_InterfacesState_Interface_AdminStatus": {
		1: {Name: "up"},
		2: {Name: "down"},
		3: {Name: "testing"},
	},
	"E_IETFInterfaces_InterfacesState_Interface_OperStatus": {
		1: {Name: "up"},
		2: {Name: "down"},
		3: {Name: "testing"},
		4: {Name: "unknown"},
		5: {Name: "dormant"},
		6: {Name: "not-present"},
		7: {Name: "lower-layer-down"},
	},
	"E_IETFInterfaces_Interfaces_Interface_AdminStatus": {
		1: {Name: "up"},
		2: {Name: "down"},
		3: {Name: "testing"},
	},
	"E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable": {
		1: {Name: "enabled"},
		2: {Name: "disabled"},
	},
	"E_IETFInterfaces_Interfaces_Interface_OperStatus": {
		1: {Name: "up"},
		2: {Name: "down"},
		3: {Name: "testing"},
		4: {Name: "unknown"},
		5: {Name: "dormant"},
		6: {Name: "not-present"},
		7: {Name: "lower-layer-down"},
	},
	"E_Ieee802Dot1QTypes_TypeOfOperation": {
		1: {Name: "set-and-hold-mac", DefiningModule: "ieee802-dot1q-sched"},
		2: {Name: "set-and-release-mac", DefiningModule: "ieee802-dot1q-sched"},
		3: {Name: "set-gate-states", DefiningModule: "ieee802-dot1q-sched"},
	},
}


var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x9d, 0x5b, 0x53, 0xe3, 0xb8,
		0xd6, 0xf7, 0xef, 0xf9, 0x14, 0xae, 0x5c, 0x75, 0x3f, 0x83, 0x03, 0x09, 0xe1, 0x58, 0xf5, 0xd4,
		0x14, 0x74, 0xd3, 0x7b, 0xa8, 0x3d, 0x4c, 0xf7, 0x1e, 0xe8, 0xf7, 0x62, 0x0f, 0x54, 0x97, 0x88,
		0x15, 0xa2, 0xb7, 0x13, 0x39, 0x5b, 0x96, 0xbb, 0xa1, 0x66, 0xf3, 0xdd, 0x9f, 0xb2, 0x93, 0x38,
		0x76, 0x62, 0x12, 0x9d, 0x1c, 0x72, 0xf8, 0x5f, 0x01, 0xc1, 0x52, 0xec, 0xa5, 0x25, 0xad, 0xdf,
		0x3a, 0x48, 0xfe, 0x7b, 0xc7, 0xf3, 0x3c, 0xaf, 0xf6, 0x07, 0xe9, 0xd3, 0xda, 0x99, 0x57, 0x0b,
		0xe8, 0x0f, 0xd6, 0xa6, 0xb5, 0xdd, 0xe1, 0xa7, 0xff, 0x64, 0x3c, 0xa8, 0x9d, 0x79, 0x8d, 0xd1,
		0x9f, 0x1f, 0x42, 0xde, 0x61, 0x8f, 0xb5, 0x33, 0x6f, 0x7f, 0xf4, 0xc1, 0x47, 0x26, 0x6a, 0x67,
		0xde, 0xb0, 0x8b, 0xf4, 0x03, 0xc6, 0x25, 0x15, 0x1d, 0xd2, 0xa6, 0x51, 0xe1, 0xf3, 0xc2, 0x57,
		0xe4, 0xae, 0xd9, 0x2d, 0x5e, 0x51, 0xfc, 0xba, 0xec, 0xe3, 0xe9, 0xaf, 0xcd, 0xfe, 0xf1, 0x45,
		0xd0, 0x0e, 0x7b, 0x9a, 0xf9, 0xa6, 0xe2, 0xb7, 0x75, 0xa6, 0xbe, 0x25, 0xfd, 0xef, 0x4d, 0x18,
		0x8b, 0x36, 0x2d, 0x6d, 0x39, 0xbc, 0x13, 0xfa, 0xfc, 0x33, 0x14, 0xc9, 0xcd, 0xd4, 0x06, 0xc3,
		0x2f, 0xd9, 0x2d, 0xbf, 0xf0, 0x37, 0x12, 0x9d, 0x8b, 0xc7, 0xb8, 0x4f, 0xb9, 0xac, 0x9d, 0x79,
		0x52, 0xc4, 0xf4, 0x95, 0x0b, 0x73, 0x57, 0x25, 0xf7, 0x34, 0x73, 0xd1, 0x4b, 0xe1, 0x93, 0x97,
		0xa9, 0x27, 0x9d, 0x16, 0xf4, 0xac, 0xc0, 0x5f, 0x7f, 0x96, 0x19, 0xb9, 0xbf, 0xf6, 0x2c, 0xe5,
		0xe2, 0x5f, 0x38, 0x0c, 0x2a, 0xc3, 0xa1, 0x36, 0x2c, 0xaa, 0xc3, 0xa3, 0x3d, 0x4c, 0xda, 0xc3,
		0xa5, 0x3c, 0x6c, 0xe5, 0xc3, 0xf7, 0xca, 0x30, 0x2e, 0x1c, 0xce, 0xec, 0x02, 0x12, 0xf4, 0x19,
		0xf7, 0x23, 0x49, 0x64, 0x1c, 0x2d, 0x16, 0xc3, 0x58, 0xa8, 0x85, 0x56, 0x0b, 0x1e, 0x6c, 0x34,
		0xd8, 0xfb, 0x0b, 0x2e, 0xcb, 0x06, 0xbd, 0xb9, 0xe0, 0x42, 0x85, 0xc1, 0xd7, 0x53, 0x02, 0x5d,
		0x65, 0x30, 0x56, 0x0a, 0x63, 0xe5, 0xd0, 0x56, 0x92, 0xf9, 0xca, 0xb2, 0x40, 0x69, 0xb2, 0x6f,
		0xbb, 0x26, 0x3c, 0x20, 0x32, 0x14, 0xcf, 0xaf, 0xcf, 0xd5, 0xec, 0xda, 0xdb, 0xe7, 0x01, 0xd5,
		0x1b, 0x13, 0xca, 0xe3, 0x3e, 0x15, 0x44, 0xb2, 0x90, 0xab, 0x0c, 0xce, 0x78, 0xcd, 0x68, 0x29,
		0x5c, 0x7b, 0xc9, 0xe3, 0xbe, 0xfa, 0x30, 0xde, 0x86, 0x37, 0x52, 0x30, 0xfe, 0xa8, 0xdc, 0x22,
		0x6d, 0xd5, 0x48, 0x9e, 0x21, 0x1e, 0x28, 0x0e, 0x79, 0xda, 0xa4, 0x99, 0xda, 0xbd, 0xf0, 0x27,
		0xd7, 0x69, 0x74, 0x90, 0x34, 0x92, 0x34, 0x92, 0xc9, 0x1d, 0x2a, 0x35, 0x7b, 0xd9, 0x55, 0x7d,
		0xee, 0xab, 0x54, 0x93, 0x34, 0x1e, 0x3a, 0xbd, 0xf9, 0x85, 0x53, 0xb4, 0xd0, 0x64, 0x7c, 0xeb,
		0x67, 0xde, 0x81, 0x46, 0xab, 0x78, 0x90, 0x8c, 0xb5, 0xda, 0xe3, 0x56, 0x3c, 0x0b, 0xe8, 0x93,
		0x14, 0xc4, 0x8f, 0x79, 0x24, 0xc9, 0x43, 0x4f, 0x51, 0xc7, 0x59, 0xc7, 0xef, 0x50, 0x22, 0x63,
		0x91, 0x5c, 0xff, 0x97, 0xd2, 0x63, 0x68, 0x8c, 0xc2, 0x64, 0x55, 0xf3, 0xfb, 0xec, 0x41, 0x47,
		0x99, 0x34, 0x57, 0xb8, 0xb2, 0x95, 0x2e, 0xf7, 0x68, 0xbb, 0x7a, 0x9d, 0x98, 0xae, 0x7a, 0xaf,
		0xac, 0x7e, 0xe9, 0xb3, 0x2b, 0x77, 0xf0, 0xe2, 0x48, 0x97, 0xee, 0x15, 0x96, 0x1f, 0x41, 0x3b,
		0x54, 0x50, 0xde, 0xae, 0x74, 0xf0, 0xff, 0xfc, 0xf4, 0xc1, 0x6b, 0x9e, 0x1c, 0x1d, 0x9c, 0x79,
		0xb7, 0x5d, 0xea, 0x5d, 0x65, 0xa8, 0xeb, 0xfd, 0x43, 0x84, 0xf1, 0xc0, 0xbb, 0xbe, 0xba, 0xf0,
		0x7c, 0x8f, 0x75, 0xce, 0x13, 0x4b, 0x7d, 0xa3, 0x62, 0xa8, 0x5d, 0x2b, 0xca, 0x44, 0x0a, 0x6f,
		0xa9, 0x27, 0x06, 0x62, 0x5a, 0xbe, 0x4e, 0xed, 0x98, 0xb5, 0x9f, 0xb3, 0x72, 0xd5, 0x02, 0x1a,
		0xb5, 0x05, 0x1b, 0xa4, 0xd6, 0x55, 0x19, 0xeb, 0xf2, 0x8d, 0x1c, 0x53, 0xdd, 0x3e, 0xa8, 0x6e,
		0x45, 0xa8, 0x4e, 0x9f, 0xd4, 0xa2, 0x21, 0x1e, 0x69, 0x40, 0xda, 0xc9, 0xd2, 0x2d, 0xee, 0x4a,
		0xad, 0xb9, 0x3d, 0x46, 0xb0, 0xda, 0x2e, 0x14, 0xd0, 0x46, 0xac, 0xb3, 0x94, 0x27, 0x3a, 0x1a,
		0xa8, 0xaf, 0xb1, 0xe3, 0x06, 0x0b, 0xe6, 0xc0, 0x47, 0xda, 0x21, 0x71, 0x4f, 0x2a, 0x69, 0x73,
		0x2d, 0x19, 0xb5, 0xf9, 0xe2, 0xbc, 0xc7, 0x72, 0x8e, 0xe5, 0x7c, 0x24, 0xe7, 0x87, 0x30, 0xec,
		0x51, 0xa2, 0xe5, 0x74, 0x37, 0xb6, 0x7b, 0x3d, 0x07, 0x43, 0x6f, 0x25, 0x43, 0x3f, 0x12, 0x49,
		0xfd, 0x01, 0x11, 0xa4, 0x4f, 0x25, 0x15, 0xbe, 0x9a, 0xf6, 0x66, 0xca, 0x55, 0xda, 0x5a, 0x6d,
		0x19, 0x6e, 0xbc, 0xe5, 0x32, 0x1c, 0xb5, 0xbb, 0x0b, 0xcd, 0xd3, 0x1a, 0xae, 0xc4, 0xc3, 0xc7,
		0xaa, 0x78, 0x31, 0x5e, 0x14, 0x6e, 0x9f, 0x0a, 0xbb, 0x3f, 0x90, 0x88, 0xfa, 0x92, 0xf5, 0x35,
		0x84, 0x58, 0x8c, 0xc0, 0x4f, 0x3a, 0x50, 0x94, 0x88, 0x9a, 0x82, 0x69, 0x2b, 0x9a, 0x89, 0xc2,
		0x19, 0x2b, 0x9e, 0xcb, 0x05, 0x56, 0x4b, 0x11, 0xab, 0x59, 0x5d, 0x15, 0x15, 0x53, 0x73, 0xc1,
		0x54, 0x1c, 0x2f, 0x55, 0x85, 0xcd, 0x1a, 0x70, 0xc2, 0xc3, 0x88, 0xb6, 0x43, 0x1e, 0x44, 0xfa,
		0x82, 0x1f, 0x8f, 0x74, 0xbe, 0x13, 0x4d, 0xc9, 0xa9, 0x81, 0xaa, 0xb5, 0x22, 0xdb, 0x28, 0xf4,
		0x2c, 0xd8, 0x52, 0xaa, 0x6b, 0xc0, 0x6d, 0xf4, 0xdb, 0x99, 0x9e, 0x3b, 0xd3, 0xf7, 0x72, 0x34,
		0x4e, 0xa4, 0xa2, 0xdd, 0xcd, 0x8b, 0x56, 0x8b, 0x17, 0xcd, 0xd1, 0x56, 0x86, 0xe9, 0x57, 0xc7,
		0x3a, 0x66, 0x5c, 0x1e, 0x34, 0x4d, 0x46, 0x7b, 0xa4, 0xd9, 0xc7, 0x06, 0x4d, 0xff, 0x24, 0xfc,
		0x51, 0x1d, 0x94, 0xcd, 0xc1, 0x79, 0xe6, 0x8b, 0xaf, 0x19, 0x37, 0x56, 0xcf, 0xac, 0x93, 0xff,
		0x47, 0x7a, 0x31, 0xd5, 0x9f, 0x9a, 0x33, 0xfd, 0x7c, 0x12, 0xa4, 0x2d, 0x59, 0xc8, 0x3f, 0xb2,
		0x47, 0x26, 0x23, 0x07, 0x1d, 0xfe, 0x41, 0x1f, 0x89, 0x64, 0x3f, 0x92, 0x7b, 0xeb, 0x90, 0x5e,
		0x44, 0x8d, 0x7b, 0x7b, 0xd9, 0xb5, 0x10, 0x31, 0x79, 0x72, 0x27, 0xe2, 0x56, 0xf3, 0xb4, 0x75,
		0x7a, 0x74, 0xdc, 0x3c, 0x3d, 0xdc, 0x5c, 0x59, 0xef, 0x2c, 0xa7, 0xd5, 0xfd, 0x4e, 0x35, 0xfd,
		0x6b, 0xe8, 0x4a, 0xcd, 0xda, 0x10, 0xc3, 0x08, 0xc3, 0x08, 0x6f, 0xa8, 0x11, 0x3e, 0x6a, 0x59,
		0x18, 0xe1, 0x13, 0x18, 0x61, 0x18, 0xe1, 0xaa, 0x8c, 0x70, 0xe3, 0xa4, 0xd5, 0x3a, 0x3a, 0x6e,
		0xb5, 0xf6, 0x8f, 0x0f, 0x8e, 0xf7, 0x4f, 0x0f, 0x0f, 0x1b, 0x47, 0x0d, 0x98, 0xe3, 0x95, 0x35,
		0xc7, 0x4e, 0xdd, 0x6d, 0x83, 0x48, 0x78, 0xd6, 0x56, 0x3f, 0x22, 0x6e, 0xbe, 0xb6, 0x64, 0x2b,
		0x69, 0xa3, 0x59, 0x6f, 0x9e, 0xd6, 0x1b, 0x1e, 0xe1, 0x81, 0x77, 0x52, 0x3f, 0xaa, 0x9f, 0xd6,
		0x5b, 0xf5, 0x86, 0x17, 0x76, 0xbc, 0xab, 0xcb, 0xcb, 0x4b, 0xef, 0x46, 0x06, 0xde, 0xc9, 0x7e,
		0xb3, 0xde, 0xf8, 0x57, 0xfd, 0x8d, 0x4d, 0xab, 0x69, 0xa0, 0xbc, 0x5a, 0xeb, 0xaa, 0x2e, 0xbd,
		0xaa, 0x4d, 0xf0, 0x8e, 0xdb, 0x79, 0xa4, 0xaa, 0xef, 0xe7, 0x9c, 0x87, 0x92, 0x28, 0x15, 0xa1,
		0x14, 0xc1, 0xb6, 0xdd, 0xa5, 0x7d, 0x32, 0x20, 0xb2, 0x9b, 0x88, 0x71, 0x8f, 0x51, 0xd9, 0xf1,
		0x27, 0xd5, 0xfc, 0x7b, 0x65, 0xbf, 0xee, 0x95, 0xc5, 0xdb, 0xf7, 0xcc, 0xc2, 0xa4, 0xc3, 0x7b,
		0x90, 0x22, 0x6e, 0x4b, 0x3e, 0x9a, 0x08, 0x57, 0x97, 0xb7, 0x9f, 0x26, 0x99, 0x8f, 0x6f, 0x65,
		0xbf, 0x7e, 0xfb, 0x07, 0x91, 0xf4, 0xcb, 0xf8, 0x06, 0x6e, 0x93, 0xef, 0xff, 0x96, 0xe6, 0x44,
		0x2e, 0x48, 0x44, 0x6f, 0x93, 0x6f, 0x77, 0x55, 0xcf, 0xb8, 0xab, 0x1a, 0x60, 0x6e, 0x87, 0x5c,
		0x8a, 0xb0, 0xe7, 0xf7, 0x58, 0x24, 0x4d, 0x63, 0xcc, 0x85, 0x3e, 0x10, 0x66, 0x5e, 0x1e, 0xf9,
		0x6f, 0x73, 0x98, 0x39, 0x9d, 0xcc, 0x63, 0xcd, 0xa3, 0x5c, 0xa6, 0x35, 0xe8, 0x86, 0x4e, 0x6e,
		0x49, 0x5f, 0x66, 0xfe, 0x6e, 0x63, 0x9d, 0xfc, 0xdd, 0x20, 0x94, 0x8d, 0xff, 0xf8, 0xf2, 0x79,
		0x40, 0x23, 0xb8, 0xbd, 0xd3, 0x93, 0x21, 0x2f, 0x9c, 0x15, 0xf3, 0x7e, 0x75, 0xa7, 0x4a, 0xd6,
		0x90, 0xf1, 0x80, 0x9a, 0x7b, 0x29, 0xb9, 0xcd, 0x5b, 0x49, 0x37, 0x86, 0x32, 0x36, 0x0b, 0x0c,
		0x59, 0x4f, 0x18, 0x17, 0x13, 0xc7, 0xf1, 0x04, 0x72, 0x35, 0x91, 0x9c, 0x4f, 0x28, 0xe7, 0x13,
		0xcb, 0xfd, 0x04, 0xb3, 0xf4, 0x1d, 0x0d, 0x75, 0xc7, 0x38, 0xec, 0x54, 0x1a, 0x7e, 0x32, 0xca,
		0x01, 0x4d, 0xcf, 0xa3, 0x63, 0x8b, 0x2e, 0xec, 0xc2, 0x51, 0xf6, 0x61, 0x29, 0xa7, 0xe1, 0x29,
		0xd7, 0x61, 0xaa, 0xca, 0x02, 0x27, 0xee, 0x03, 0x28, 0x0e, 0xc2, 0x57, 0x4e, 0xc3, 0x58, 0x33,
		0x43, 0xe1, 0x2a, 0xa7, 0xb4, 0x8e, 0x63, 0xb2, 0xf3, 0x36, 0xad, 0xef, 0x97, 0x14, 0x54, 0x33,
		0xd0, 0xb9, 0x5a, 0x38, 0x18, 0x6d, 0xea, 0xf4, 0x47, 0xae, 0xb3, 0x25, 0x8f, 0x4c, 0xf5, 0x07,
		0x30, 0x01, 0x98, 0x6c, 0x19, 0x98, 0x68, 0x6c, 0xc3, 0x5e, 0x02, 0xdc, 0xb0, 0x80, 0x72, 0xc9,
		0xe4, 0xb3, 0xa0, 0x1d, 0x07, 0x84, 0x63, 0x93, 0xf9, 0xa8, 0x5d, 0x8d, 0x6e, 0xe5, 0x82, 0x44,
		0x0e, 0xf4, 0x78, 0xfc, 0x80, 0x89, 0x6e, 0xf8, 0x61, 0xc7, 0xcf, 0x16, 0x1e, 0x5b, 0x7d, 0x4e,
		0x0d, 0x65, 0x64, 0x8d, 0x62, 0x6e, 0x70, 0xac, 0x18, 0x0a, 0xa3, 0xd2, 0x27, 0x3c, 0xf0, 0xbb,
		0x61, 0x2f, 0xf0, 0xfb, 0xa4, 0x5d, 0x5b, 0x05, 0x4a, 0xa9, 0xe8, 0x19, 0x05, 0xed, 0x51, 0x12,
		0xd1, 0x4d, 0x7e, 0xcc, 0x34, 0xd0, 0x15, 0x49, 0x22, 0x6d, 0xd6, 0x36, 0x37, 0x6c, 0x73, 0xbf,
		0xf2, 0x09, 0x43, 0x13, 0xb6, 0x91, 0xac, 0x4f, 0x87, 0x79, 0x88, 0x1f, 0xa4, 0xe7, 0xff, 0x18,
		0x01, 0xb0, 0x25, 0xe0, 0x94, 0x75, 0x0a, 0xca, 0x01, 0xe5, 0x20, 0xfc, 0x82, 0xf0, 0x0b, 0xc2,
		0x2f, 0x08, 0xbf, 0x20, 0xfc, 0xb2, 0x21, 0xe1, 0x17, 0xc3, 0x85, 0xd1, 0xa2, 0x66, 0x68, 0xa6,
		0x2f, 0xf3, 0x1a, 0xa2, 0x0a, 0x56, 0xa6, 0xa9, 0x1a, 0xa3, 0x7a, 0xb3, 0x7e, 0xb0, 0x9b, 0x96,
		0xc9, 0x9c, 0xd4, 0x5b, 0x25, 0x45, 0x32, 0x35, 0x07, 0x33, 0xd0, 0x11, 0x0d, 0x94, 0x51, 0x81,
		0x6d, 0x05, 0x52, 0xe5, 0x80, 0x50, 0x0a, 0x0a, 0xaa, 0xb2, 0x47, 0xa8, 0xd4, 0x69, 0x0b, 0xdd,
		0xa4, 0xf0, 0x3f, 0xe9, 0xb3, 0x69, 0x6e, 0xb6, 0xf6, 0x3b, 0x8b, 0xe4, 0xb9, 0x94, 0x86, 0x59,
		0xe5, 0x6b, 0xc6, 0x2f, 0x7b, 0x34, 0x51, 0x17, 0x43, 0x53, 0x90, 0x58, 0xbd, 0x5c, 0x0f, 0x6e,
		0x8a, 0x5f, 0x6b, 0x9f, 0x45, 0x40, 0x05, 0x0d, 0x2e, 0x12, 0xb1, 0xf0, 0xb8, 0xd7, 0xab, 0x54,
		0xfa, 0x86, 0x55, 0x6c, 0x59, 0x7b, 0xc7, 0xd5, 0x6c, 0xf9, 0x82, 0xac, 0x3d, 0xeb, 0xe2, 0x16,
		0xcf, 0x6d, 0xad, 0xdb, 0x87, 0xe1, 0xad, 0x24, 0x4a, 0x97, 0x5e, 0x33, 0xfa, 0xfb, 0x32, 0xbd,
		0xb3, 0x8d, 0xaf, 0xd1, 0xed, 0xc7, 0x91, 0x5c, 0x66, 0x79, 0xee, 0xbb, 0x76, 0x18, 0x73, 0xf9,
		0xae, 0x5e, 0xa2, 0x06, 0xef, 0xbd, 0xbb, 0x78, 0x7f, 0xff, 0xa0, 0xfd, 0xbf, 0x5e, 0xbd, 0xbe,
		0x17, 0xc5, 0x83, 0x41, 0x28, 0x24, 0x0d, 0x52, 0xa5, 0xf1, 0xfb, 0xe4, 0xe9, 0xbd, 0x89, 0x9a,
		0x5c, 0x0a, 0x11, 0x8a, 0x6b, 0x1a, 0x45, 0xe4, 0xd1, 0x41, 0xe0, 0xe3, 0x8f, 0xb8, 0xff, 0x40,
		0x45, 0x62, 0x6d, 0xe8, 0x68, 0x7d, 0xf0, 0x18, 0xf7, 0x66, 0x75, 0xdc, 0x4b, 0xa4, 0xea, 0xf1,
		0x50, 0x7a, 0x0f, 0xd4, 0x7b, 0x14, 0x94, 0x48, 0x2a, 0x64, 0x97, 0x70, 0x6f, 0xf6, 0xa9, 0x4c,
		0x03, 0x27, 0x0e, 0xb8, 0x20, 0xcf, 0x02, 0x34, 0x91, 0x93, 0xdf, 0x1f, 0x09, 0xca, 0xc2, 0x8b,
		0x74, 0xc9, 0x00, 0x05, 0xbb, 0x5f, 0x85, 0xec, 0x57, 0xd3, 0xd2, 0xaa, 0x57, 0x3e, 0xef, 0xae,
		0x47, 0x2d, 0x7e, 0xbd, 0x39, 0x21, 0xb5, 0x7c, 0x61, 0x79, 0x13, 0x65, 0xf9, 0xba, 0xd0, 0xab,
		0x23, 0x48, 0x54, 0xe8, 0x2f, 0x8b, 0x69, 0xde, 0xa6, 0x48, 0x3f, 0x07, 0x2e, 0x6f, 0x50, 0xa7,
		0xff, 0xdc, 0xee, 0xd9, 0x9d, 0x04, 0x93, 0xeb, 0x01, 0x35, 0xfa, 0x46, 0x6b, 0x15, 0x6a, 0xf4,
		0x35, 0x6b, 0xf4, 0x03, 0xca, 0xc3, 0x3e, 0xe3, 0x44, 0x86, 0xc2, 0xbc, 0x38, 0x3f, 0xdf, 0x09,
		0x76, 0xa1, 0x2f, 0xc3, 0x26, 0x63, 0x17, 0xba, 0xd2, 0xfd, 0xe1, 0x28, 0x18, 0xed, 0x40, 0x91,
		0xc3, 0x2d, 0xd2, 0xd8, 0x85, 0x5e, 0x1e, 0x49, 0xc3, 0x51, 0x30, 0x95, 0x47, 0x8d, 0xd7, 0xf3,
		0x28, 0x98, 0xd1, 0xcb, 0x54, 0x6c, 0x4c, 0xf1, 0xa4, 0x0b, 0x18, 0x62, 0x18, 0x62, 0x18, 0x62,
		0x18, 0x62, 0x1c, 0x07, 0x03, 0x43, 0x0c, 0x43, 0xbc, 0xd5, 0x09, 0xa6, 0xfa, 0x5e, 0x86, 0x05,
		0x5e, 0xc0, 0x7e, 0x78, 0xf5, 0xbd, 0x9c, 0xc7, 0x5e, 0x9e, 0x62, 0x1a, 0x86, 0xa2, 0xfa, 0xe4,
		0x69, 0xba, 0x69, 0xf9, 0x45, 0xf9, 0xfe, 0x56, 0x20, 0x2b, 0x35, 0x1d, 0x4e, 0x2b, 0xcb, 0x80,
		0x78, 0x53, 0x29, 0x90, 0xec, 0x61, 0x90, 0x7f, 0x52, 0x04, 0x0d, 0x3b, 0x29, 0x23, 0xd3, 0x54,
		0xed, 0xac, 0x1f, 0x25, 0x48, 0xca, 0xd3, 0x23, 0x07, 0xc8, 0x33, 0x29, 0x2a, 0xb9, 0x81, 0x18,
		0x91, 0x65, 0x2a, 0xb4, 0x73, 0x9d, 0x65, 0xd2, 0x4d, 0x92, 0x78, 0x8e, 0x73, 0x4c, 0xc9, 0xf7,
		0xbf, 0xd1, 0x49, 0x50, 0xd9, 0xa3, 0xfb, 0xf4, 0x49, 0x52, 0x1e, 0xe9, 0x8c, 0xc5, 0xab, 0xc6,
		0x31, 0xd7, 0x97, 0x5e, 0xd6, 0x69, 0x1f, 0x59, 0x27, 0x64, 0x9d, 0x8c, 0xbc, 0x7b, 0x73, 0xaf,
		0xde, 0xc0, 0x9b, 0x37, 0xf4, 0xe2, 0xcd, 0xea, 0x2c, 0xcd, 0x2d, 0xa1, 0xa5, 0xb7, 0xee, 0xcc,
		0x73, 0xb4, 0xf7, 0x18, 0x5f, 0xcc, 0x0a, 0x4c, 0xed, 0x45, 0x67, 0xeb, 0x85, 0xaf, 0x92, 0x0c,
		0xd7, 0x02, 0x09, 0x36, 0xe2, 0x28, 0xd4, 0x16, 0x58, 0x58, 0x8f, 0x85, 0x15, 0xa4, 0xb7, 0x6e,
		0xfa, 0xee, 0x10, 0xd2, 0xf2, 0x1b, 0xb8, 0x0d, 0xd9, 0x2c, 0xdf, 0x85, 0x6a, 0xe1, 0x87, 0xc6,
		0xab, 0x26, 0xb3, 0x46, 0xcd, 0xc3, 0x43, 0xb5, 0x91, 0xba, 0x07, 0x18, 0x02, 0x0c, 0x97, 0x0e,
		0x86, 0x27, 0x06, 0x5c, 0x78, 0x08, 0x2e, 0x04, 0x17, 0x4e, 0x8b, 0xae, 0x79, 0x08, 0x20, 0x04,
		0x10, 0x2a, 0x03, 0xe1, 0x21, 0x80, 0xd0, 0x02, 0x08, 0x0f, 0x01, 0x84, 0x63, 0x51, 0xb5, 0x53,
		0xbe, 0xf1, 0xdb, 0xdd, 0x91, 0xa1, 0xd1, 0x84, 0xc1, 0x62, 0x73, 0x20, 0x18, 0x10, 0x6c, 0xa9,
		0x08, 0xa6, 0xfe, 0x8a, 0xf1, 0x69, 0xe5, 0x5b, 0xf0, 0xaa, 0xf1, 0xad, 0x34, 0x2a, 0xc7, 0x30,
		0x2a, 0x16, 0x46, 0xe5, 0x18, 0x46, 0xa5, 0xd4, 0xa8, 0xf8, 0x69, 0x95, 0x80, 0xa5, 0x69, 0x19,
		0x75, 0x52, 0xb1, 0x81, 0x69, 0xc2, 0xc0, 0xc0, 0xc0, 0x4c, 0x29, 0x61, 0xcc, 0x25, 0x15, 0x5a,
		0x2f, 0xf9, 0x33, 0x78, 0xb9, 0x1f, 0xfc, 0xfc, 0x6d, 0xf1, 0xf3, 0xdd, 0xbd, 0x94, 0x0f, 0x8e,
		0xff, 0xf6, 0x31, 0xda, 0x01, 0x5e, 0x8a, 0x67, 0xc1, 0x68, 0x07, 0x1b, 0xf2, 0x52, 0xbc, 0x0a,
		0x18, 0xcd, 0x6c, 0x4b, 0x78, 0x49, 0x1f, 0x15, 0x6f, 0x0a, 0x07, 0xa1, 0x6d, 0x26, 0xa1, 0x69,
		0x6f, 0x0a, 0xe7, 0x84, 0x87, 0xd6, 0xaf, 0x25, 0xcf, 0x77, 0x82, 0xbd, 0x68, 0xcb, 0x30, 0x15,
		0xd8, 0x8b, 0x56, 0x8d, 0xc3, 0x32, 0x33, 0xd6, 0xd8, 0x8b, 0xb6, 0x6c, 0xef, 0xc6, 0x39, 0x97,
		0xbb, 0xe3, 0x73, 0x0b, 0xaf, 0xc7, 0x89, 0xf7, 0x33, 0x23, 0x62, 0xec, 0x45, 0x73, 0xd6, 0x6a,
		0x15, 0x36, 0x85, 0x5b, 0x1b, 0x62, 0x18, 0x61, 0x18, 0xe1, 0x0d, 0x35, 0xc2, 0x5a, 0xa1, 0x43,
		0x8b, 0x10, 0x22, 0x8c, 0x30, 0x8c, 0xf0, 0x5b, 0x85, 0x22, 0x61, 0x8e, 0xab, 0x37, 0xc7, 0x08,
		0x85, 0x4e, 0x27, 0x5c, 0x4f, 0x11, 0x0a, 0x35, 0x0e, 0x85, 0xbe, 0x26, 0x3d, 0xec, 0x0b, 0x2d,
		0x82, 0xad, 0xab, 0x7d, 0xa1, 0xc6, 0x91, 0x52, 0xcf, 0xd9, 0xce, 0xd0, 0x21, 0xf5, 0x7e, 0x48,
		0xef, 0x60, 0xd9, 0x7b, 0x43, 0x47, 0x8f, 0x3f, 0xa0, 0x3c, 0x60, 0xfc, 0xd1, 0x38, 0xd0, 0x3c,
		0x6e, 0x8f, 0x32, 0x80, 0xe5, 0x71, 0x3f, 0xca, 0x00, 0x50, 0x67, 0xe6, 0xd8, 0x70, 0x9f, 0xc0,
		0x70, 0x5b, 0x18, 0xee, 0x13, 0xe4, 0x30, 0x33, 0xb3, 0x12, 0x0b, 0x41, 0xb9, 0x34, 0xcd, 0x5e,
		0xe6, 0x5b, 0x23, 0x6f, 0x09, 0x93, 0x62, 0xb0, 0x1e, 0x23, 0x6f, 0x89, 0x90, 0x29, 0x42, 0xa6,
		0x8e, 0x43, 0xa6, 0xc8, 0x5b, 0x22, 0x64, 0xba, 0x9a, 0x21, 0x53, 0xe4, 0x2d, 0x57, 0x3f, 0x50,
		0x8a, 0xbc, 0x25, 0x8c, 0x30, 0x8c, 0x30, 0xf2, 0x96, 0x30, 0xc2, 0x1e, 0xf2, 0x96, 0x30, 0xc7,
		0x6f, 0x6d, 0x8e, 0x11, 0xfe, 0x9c, 0x0e, 0xe0, 0x35, 0xf6, 0x11, 0xff, 0xb4, 0x88, 0x7f, 0xbe,
		0x22, 0x3e, 0x64, 0x2e, 0x8b, 0x68, 0xeb, 0x2c, 0x73, 0xa9, 0x1f, 0x25, 0xf5, 0xdc, 0xe5, 0x2c,
		0x87, 0x5f, 0xbe, 0xec, 0x74, 0x65, 0x2a, 0x08, 0xca, 0x93, 0x5b, 0x08, 0xf4, 0xe3, 0xca, 0x85,
		0xd6, 0x55, 0x9e, 0x8d, 0x96, 0x5a, 0x16, 0x9c, 0x8e, 0xe6, 0x7a, 0x79, 0x44, 0x7c, 0xdb, 0xc2,
		0x97, 0x40, 0xca, 0xd4, 0x15, 0x33, 0x8c, 0x8f, 0x73, 0x6f, 0x16, 0xad, 0x1f, 0x8e, 0x02, 0xd5,
		0x84, 0x07, 0x2d, 0x39, 0x6e, 0x65, 0x1a, 0x35, 0x1c, 0x50, 0xe1, 0x3f, 0x90, 0xc8, 0x74, 0x1b,
		0xe8, 0x54, 0x7b, 0xa4, 0x52, 0x61, 0x6a, 0x0c, 0xd6, 0x69, 0xa4, 0x52, 0x11, 0xc5, 0x45, 0x14,
		0xd7, 0x71, 0x14, 0x17, 0xa9, 0x54, 0x44, 0x71, 0x57, 0x33, 0x8a, 0x8b, 0x54, 0xea, 0xea, 0xc7,
		0x6e, 0x91, 0x4a, 0x85, 0x11, 0x86, 0x11, 0x46, 0x2a, 0x15, 0x46, 0xd8, 0x43, 0x2a, 0x15, 0xe6,
		0xf8, 0xad, 0xcd, 0x31, 0xc2, 0xa2, 0x33, 0xb9, 0x40, 0x1c, 0x59, 0xac, 0x19, 0x0d, 0x55, 0x11,
		0x1f, 0x52, 0xa9, 0x45, 0xb4, 0x75, 0x95, 0x4a, 0x35, 0x8a, 0x93, 0x7a, 0xce, 0x92, 0xa9, 0x9f,
		0x07, 0x54, 0x5c, 0x90, 0x68, 0xe9, 0x9b, 0x3f, 0xd3, 0xc7, 0x6e, 0x87, 0x5c, 0x8a, 0xb0, 0xe7,
		0xf7, 0x58, 0xfa, 0x62, 0x71, 0x93, 0x08, 0x73, 0xa1, 0x0b, 0x04, 0x99, 0x97, 0xc7, 0xfd, 0xdb,
		0x1c, 0x64, 0x4e, 0x27, 0xf2, 0x58, 0xf3, 0x28, 0x97, 0xe2, 0xd9, 0xdc, 0xc5, 0x2d, 0xe9, 0xcb,
		0xcc, 0xdb, 0x6d, 0xac, 0x93, 0xb7, 0x1b, 0x84, 0xb2, 0xf1, 0x1f, 0x5f, 0x3e, 0x0f, 0x68, 0x04,
		0xa7, 0x77, 0x7a, 0x32, 0xe4, 0x85, 0xb3, 0x62, 0xbe, 0xaf, 0xee, 0x54, 0xc9, 0x1a, 0x32, 0x1e,
		0x50, 0x8b, 0x93, 0xb2, 0xb3, 0x28, 0x49, 0xda, 0x8d, 0xa1, 0x8c, 0xcd, 0xc2, 0x42, 0xd6, 0x13,
		0xc6, 0xc5, 0xc4, 0x71, 0x3c, 0x81, 0x5c, 0x4d, 0x24, 0xe7, 0x13, 0xca, 0xf9, 0xc4, 0x72, 0x3f,
		0xc1, 0x2c, 0x3d, 0x47, 0x43, 0xdd, 0x31, 0x0e, 0x3a, 0x95, 0x06, 0x9f, 0x8c, 0x32, 0x40, 0xd3,
		0xf3, 0xe8, 0xd8, 0xa2, 0x0b, 0xbb, 0x60, 0x94, 0x7d, 0x50, 0xca, 0x69, 0x70, 0xca, 0x75, 0x90,
		0xaa, 0xb2, 0xb0, 0x89, 0xfb, 0xf0, 0x89, 0x83, 0xe0, 0x95, 0xd3, 0x20, 0xd6, 0xcc, 0x50, 0xb8,
		0xca, 0x28, 0xad, 0xe3, 0x98, 0xec, 0xbc, 0x4d, 0xeb, 0xfb, 0x25, 0x85, 0xd4, 0x4c, 0x5e, 0xd7,
		0x91, 0xf8, 0x8c, 0xa9, 0xb7, 0xef, 0x8f, 0xfc, 0x66, 0x4b, 0x1e, 0x99, 0xea, 0x0f, 0x60, 0x02,
		0x30, 0xd9, 0x32, 0x30, 0xb9, 0x26, 0x3c, 0x20, 0x32, 0x4c, 0x5d, 0xe0, 0xc6, 0x9b, 0xc3, 0x0d,
		0x0b, 0x28, 0x97, 0x4c, 0x3e, 0x0b, 0xda, 0x71, 0x40, 0x38, 0x36, 0x79, 0x8f, 0xda, 0xd5, 0xe8,
		0x56, 0x2e, 0x48, 0xe4, 0x40, 0x8f, 0xc7, 0x0f, 0x98, 0xe8, 0x86, 0x1f, 0x76, 0xfc, 0x6c, 0xe1,
		0xb1, 0xd5, 0xe7, 0xd4, 0x50, 0x46, 0xd6, 0x28, 0xe6, 0x06, 0xc7, 0x8a, 0xa1, 0x30, 0x2a, 0x7d,
		0xc2, 0x03, 0xbf, 0x1b, 0xf6, 0x02, 0xbf, 0x4f, 0xda, 0xb5, 0x55, 0xa0, 0x94, 0x8a, 0x9e, 0x51,
		0xd0, 0x1e, 0x25, 0x11, 0xdd, 0xe4, 0xc7, 0x4c, 0x03, 0x5d, 0x91, 0x24, 0xd2, 0x66, 0x6d, 0x73,
		0xc3, 0x36, 0xf7, 0x2b, 0x9f, 0x2e, 0x34, 0x61, 0x1b, 0xc9, 0xfa, 0x74, 0x98, 0x83, 0xf8, 0x41,
		0x7a, 0xfe, 0x8f, 0x11, 0x00, 0x5b, 0x02, 0x4e, 0x59, 0xa7, 0xa0, 0x1c, 0x50, 0x0e, 0xc2, 0x2f,
		0x08, 0xbf, 0x20, 0xfc, 0x82, 0xf0, 0x0b, 0xc2, 0x2f, 0x1b, 0x12, 0x7e, 0x31, 0x5c, 0x18, 0x2d,
		0x2a, 0x86, 0x66, 0xfa, 0x32, 0xaf, 0x20, 0xaa, 0x60, 0x65, 0x9a, 0xaa, 0x30, 0xaa, 0x37, 0xeb,
		0x07, 0xe3, 0x4d, 0x83, 0x65, 0xbb, 0x04, 0x6b, 0x0e, 0x66, 0xa0, 0x23, 0x1a, 0x28, 0xa3, 0x02,
		0xdb, 0xf2, 0xa3, 0xca, 0x01, 0xa1, 0x14, 0x14, 0x54, 0x65, 0x8f, 0x50, 0xa9, 0xd3, 0x16, 0xba,
		0x49, 0xe1, 0x7f, 0xd2, 0x67, 0xd3, 0xdc, 0x6c, 0xed, 0x77, 0x16, 0xc9, 0x73, 0x29, 0x0d, 0xb3,
		0xca, 0xd7, 0x8c, 0x5f, 0xf6, 0x68, 0xa2, 0x2e, 0x86, 0xa6, 0x20, 0xb1, 0x7a, 0xb9, 0x1e, 0xdc,
		0x94, 0xbe, 0xd6, 0x3e, 0x8b, 0x80, 0x0a, 0x1a, 0x5c, 0x24, 0x62, 0xe1, 0x71, 0xaf, 0x57, 0xa9,
		0xf4, 0x0d, 0x2b, 0xd8, 0xb2, 0xf6, 0x6e, 0x2b, 0xd9, 0xf2, 0xf5, 0x58, 0x7b, 0xd6, 0xb5, 0x2d,
		0x9e, 0xd3, 0x3a, 0xb7, 0x0f, 0xc3, 0x3b, 0x49, 0x54, 0x2e, 0xbd, 0x64, 0xf4, 0xf7, 0x65, 0x7a,
		0x63, 0x1b, 0x5f, 0x9f, 0xdb, 0x8f, 0x23, 0xb9, 0xcc, 0xd2, 0xdc, 0x77, 0xe9, 0x6b, 0xf2, 0xdf,
		0xd5, 0x4b, 0xb4, 0xe0, 0xbd, 0x77, 0x17, 0xef, 0xef, 0x1f, 0xb4, 0xff, 0xd7, 0xab, 0xd7, 0xf7,
		0xa2, 0x78, 0x30, 0x08, 0x85, 0xa4, 0x41, 0xaa, 0x33, 0x7e, 0x9f, 0x3c, 0xbd, 0x37, 0xd1, 0x92,
		0x4b, 0x21, 0x42, 0x71, 0x4d, 0xa3, 0x88, 0x3c, 0x3a, 0x08, 0x7b, 0xfc, 0x11, 0xf7, 0x1f, 0xa8,
		0x48, 0x6c, 0x0d, 0x1d, 0xad, 0x0e, 0x1e, 0xe3, 0xde, 0x8c, 0x86, 0x7b, 0x89, 0x50, 0x3d, 0x1e,
		0x4a, 0xef, 0x81, 0x7a, 0x8f, 0x82, 0x12, 0x49, 0x85, 0xec, 0x12, 0xee, 0xcd, 0x3e, 0x94, 0x69,
		0xd4, 0xc4, 0x01, 0x14, 0xe4, 0x41, 0x80, 0x26, 0x62, 0xf2, 0xfb, 0x23, 0x39, 0x59, 0xb8, 0x90,
		0x2e, 0x01, 0xa0, 0x60, 0xf4, 0x2b, 0x10, 0xfd, 0x6a, 0x5a, 0x59, 0xf5, 0x8a, 0xe7, 0xdd, 0xf5,
		0xa8, 0xc2, 0xaf, 0x37, 0x27, 0x94, 0x56, 0xa8, 0x28, 0xc7, 0xbb, 0x1d, 0xb4, 0x89, 0x57, 0x4b,
		0x92, 0xa8, 0xcd, 0x5f, 0x12, 0xd1, 0xbc, 0x49, 0x79, 0x7e, 0x0e, 0x5b, 0x96, 0x5f, 0xa1, 0xff,
		0xdc, 0xee, 0x59, 0x9d, 0x00, 0x93, 0xeb, 0x00, 0xd5, 0xf9, 0x46, 0x0b, 0x15, 0xaa, 0xf3, 0x35,
		0xab, 0xf3, 0x03, 0xca, 0xc3, 0x3e, 0xe3, 0x44, 0x86, 0xc2, 0xbc, 0x2c, 0x3f, 0xdf, 0x09, 0x76,
		0x9f, 0x2f, 0xc3, 0x20, 0x63, 0xf7, 0xb9, 0xd2, 0xfd, 0xe1, 0x08, 0x18, 0xed, 0x10, 0x91, 0xc3,
		0xad, 0xd1, 0xd8, 0x7d, 0x5e, 0x1e, 0x43, 0xc3, 0x11, 0x30, 0x95, 0xc7, 0x8b, 0xd7, 0xf3, 0x08,
		0x18, 0x1e, 0xf7, 0xa9, 0xb0, 0x33, 0xc5, 0x93, 0x2e, 0x60, 0x88, 0x61, 0x88, 0x61, 0x88, 0x61,
		0x88, 0x71, 0x0c, 0x0c, 0x0c, 0x31, 0x0c, 0xf1, 0x56, 0x27, 0x97, 0xea, 0x7b, 0x19, 0x16, 0x78,
		0x01, 0xfb, 0xe1, 0xd5, 0xf7, 0x72, 0x1e, 0x7b, 0x79, 0x7a, 0x69, 0x18, 0x8a, 0xea, 0x93, 0xa7,
		0xe9, 0xa6, 0xe5, 0x17, 0xe5, 0xfb, 0x5b, 0x81, 0x8c, 0xd4, 0x54, 0x34, 0xad, 0x2c, 0xfd, 0xe1,
		0x4d, 0xe5, 0x3f, 0xb2, 0x67, 0x41, 0xee, 0x49, 0x91, 0x33, 0xac, 0x84, 0x8c, 0x2c, 0x53, 0xb5,
		0x73, 0x7e, 0xea, 0xe8, 0xf6, 0xa9, 0xcc, 0xc8, 0x29, 0x72, 0x4c, 0x8a, 0x4a, 0x6e, 0x22, 0x47,
		0x64, 0x98, 0x0a, 0xed, 0x1c, 0x67, 0x98, 0x74, 0x73, 0x24, 0x9e, 0xdb, 0xfc, 0x52, 0xf2, 0xf5,
		0x6f, 0x73, 0xfe, 0x53, 0xf6, 0xe0, 0x3e, 0x7d, 0x92, 0x94, 0x47, 0x3a, 0x03, 0xf1, 0x9a, 0x65,
		0xcc, 0x75, 0x55, 0xf1, 0xfb, 0x6d, 0x90, 0x71, 0x72, 0xb9, 0x56, 0x6d, 0xc2, 0xfb, 0x6d, 0xb4,
		0x3d, 0x7a, 0x03, 0x4f, 0xde, 0xd0, 0x83, 0x37, 0xab, 0xae, 0x34, 0x37, 0x83, 0x96, 0x9e, 0xba,
		0x33, 0xaf, 0xd1, 0xde, 0x5b, 0x7c, 0x31, 0x2b, 0x2b, 0xb5, 0x17, 0x9d, 0xad, 0x07, 0xbe, 0x4a,
		0x32, 0x5c, 0x0b, 0x1c, 0xd8, 0x88, 0xe3, 0x4f, 0x9b, 0x78, 0x93, 0xa4, 0x26, 0x09, 0xab, 0x88,
		0x6f, 0x7b, 0xdf, 0x01, 0x95, 0xdf, 0xb7, 0x6d, 0xc6, 0x66, 0xf9, 0x1e, 0x80, 0x64, 0x40, 0xb2,
		0xa5, 0x23, 0xd9, 0x89, 0x01, 0x91, 0x1d, 0x82, 0xc8, 0x40, 0x64, 0xd3, 0xa2, 0x6b, 0x1e, 0x02,
		0xc5, 0x80, 0x62, 0xea, 0x28, 0xd6, 0x00, 0x8a, 0xd9, 0xa0, 0x58, 0x03, 0x28, 0x36, 0x96, 0xd5,
		0x7f, 0x62, 0x1a, 0xa7, 0x69, 0x06, 0x3f, 0x0a, 0x62, 0x5f, 0x6f, 0x52, 0x64, 0x3a, 0x5a, 0xd6,
		0x49, 0xc5, 0x55, 0xd9, 0x78, 0x07, 0xf4, 0x66, 0x02, 0x99, 0x76, 0x55, 0x76, 0x41, 0xf7, 0xcc,
		0x8b, 0xc1, 0x8a, 0xdd, 0xe8, 0x9e, 0x5e, 0x6d, 0xf0, 0x42, 0xf5, 0xac, 0xf1, 0xbe, 0xde, 0xc2,
		0x73, 0xbf, 0x05, 0xc5, 0x6a, 0xba, 0x13, 0xaf, 0x0a, 0x73, 0xb6, 0x82, 0xd5, 0x6a, 0x9a, 0x13,
		0xd3, 0xd0, 0x4c, 0xa1, 0x5c, 0xad, 0x0a, 0x9e, 0x73, 0xe2, 0x6a, 0xb9, 0x72, 0xb9, 0x9c, 0x7b,
		0x0f, 0xee, 0xbc, 0x08, 0x0b, 0x57, 0xcc, 0x89, 0x4b, 0x36, 0x23, 0x62, 0x94, 0xab, 0x39, 0x6b,
		0x75, 0x5f, 0xe9, 0x42, 0xe4, 0xe0, 0xc4, 0x20, 0x07, 0x27, 0x05, 0x39, 0x38, 0xc9, 0x6d, 0xbc,
		0x57, 0xb7, 0x51, 0x5a, 0x4b, 0xe1, 0xc8, 0xf3, 0x73, 0x65, 0x32, 0xab, 0xf0, 0x04, 0x9d, 0x5b,
		0xd1, 0x79, 0x9e, 0xa1, 0x8e, 0x98, 0xb1, 0x33, 0x43, 0x41, 0xc6, 0x52, 0x90, 0x4e, 0x87, 0xb5,
		0xfd, 0x76, 0x8f, 0x44, 0x16, 0xaf, 0xe8, 0x2d, 0x76, 0x03, 0xe8, 0x05, 0xf4, 0x6e, 0x14, 0xf4,
		0x16, 0xd4, 0x3b, 0x3d, 0xb3, 0xd4, 0x02, 0x80, 0x0f, 0x01, 0xc0, 0x00, 0xe0, 0xaa, 0x00, 0xf8,
		0x18, 0xdc, 0xbb, 0x19, 0x56, 0x99, 0x47, 0x7d, 0x16, 0x45, 0x2c, 0xe4, 0x7e, 0xf8, 0x83, 0x0a,
		0x11, 0x73, 0x2b, 0xe3, 0x3c, 0xdb, 0x1b, 0x82, 0x66, 0xba, 0xe5, 0x02, 0xe0, 0x07, 0xf0, 0x83,
		0xe1, 0x68, 0xa7, 0x87, 0xe0, 0x51, 0x81, 0xb7, 0xfd, 0x03, 0x1b, 0x56, 0x13, 0x1b, 0xf0, 0xb6,
		0x7f, 0x44, 0xd0, 0xde, 0x3e, 0x82, 0xd6, 0x44, 0x04, 0x6d, 0x19, 0x11, 0xb4, 0x26, 0x22, 0x68,
		0x4e, 0xae, 0x54, 0xcd, 0x92, 0x8f, 0x4e, 0xc6, 0x36, 0x89, 0x91, 0x99, 0x9d, 0x8c, 0x6d, 0x7e,
		0x22, 0xb6, 0xd3, 0x93, 0xb0, 0xcd, 0x4e, 0xc0, 0xde, 0xf4, 0xda, 0x30, 0xd5, 0x00, 0x36, 0x0a,
		0xc4, 0xe6, 0x2d, 0x62, 0x8a, 0x32, 0xc4, 0x8e, 0xd5, 0x42, 0x3b, 0x67, 0x3b, 0x56, 0xcd, 0x6b,
		0xc8, 0x3c, 0x67, 0xbb, 0x56, 0xff, 0x95, 0xdc, 0xc3, 0x35, 0x79, 0xba, 0x09, 0xe2, 0xf4, 0x83,
		0x65, 0x6e, 0x5c, 0x2d, 0xdb, 0xf9, 0xaf, 0x5d, 0x88, 0x67, 0x7e, 0x46, 0x03, 0x0a, 0xf1, 0x50,
		0x88, 0x57, 0x0c, 0xcf, 0xe1, 0x78, 0xd4, 0xea, 0x63, 0x76, 0x38, 0x95, 0xad, 0x4c, 0xef, 0x71,
		0x2a, 0x5b, 0xa9, 0x66, 0xe3, 0x78, 0x54, 0x84, 0xeb, 0x2a, 0x0b, 0xd7, 0xa1, 0xcc, 0x6d, 0xf5,
		0x43, 0x08, 0x38, 0x1e, 0x15, 0x86, 0x18, 0x86, 0x18, 0x86, 0xf8, 0xed, 0x0c, 0x31, 0xf2, 0x66,
		0x30, 0xc4, 0x30, 0xc4, 0x2f, 0x88, 0x3a, 0x9f, 0xd6, 0x1b, 0xf5, 0xa3, 0x92, 0xf0, 0x68, 0xfb,
		0x27, 0x82, 0xcc, 0x25, 0x86, 0x74, 0x81, 0xc8, 0x10, 0x53, 0x2e, 0x86, 0x42, 0x5d, 0xc5, 0x94,
		0xed, 0x8e, 0xac, 0x75, 0x13, 0x53, 0xbe, 0x19, 0xdf, 0x43, 0x7a, 0x1c, 0xe2, 0xb5, 0xea, 0x79,
		0xae, 0xae, 0x83, 0xca, 0xa9, 0xa4, 0x7e, 0x90, 0x9e, 0x6d, 0x5c, 0xb9, 0xd0, 0x4f, 0xc5, 0x87,
		0xee, 0x20, 0xb4, 0xec, 0x72, 0x61, 0xc2, 0x39, 0x88, 0x95, 0xa2, 0x3a, 0x4e, 0xdd, 0xc1, 0x39,
		0x88, 0x38, 0x7c, 0x67, 0x43, 0x51, 0xf7, 0x18, 0xa8, 0xab, 0x8b, 0xba, 0xc7, 0x9b, 0x81, 0xba,
		0x8e, 0x31, 0x2c, 0x7b, 0x75, 0xb4, 0x05, 0x82, 0x69, 0xbe, 0xf9, 0x1b, 0xf8, 0x05, 0xfc, 0x02,
		0x7e, 0x01, 0xbf, 0x80, 0x5f, 0xc0, 0xaf, 0x35, 0xc5, 0xaf, 0x43, 0x14, 0xb3, 0xea, 0xc1, 0xd7,
		0xe1, 0x26, 0x54, 0xae, 0x3a, 0x41, 0x2f, 0xc9, 0xda, 0xdf, 0xfd, 0x47, 0x41, 0x78, 0xdc, 0x23,
		0x82, 0xc9, 0x67, 0x7d, 0xf0, 0x9a, 0xe9, 0x01, 0x47, 0x4d, 0x03, 0xbb, 0x80, 0x5d, 0xc0, 0x2e,
		0x60, 0x17, 0xb0, 0x6b, 0x93, 0xb1, 0x0b, 0xd0, 0xa5, 0x05, 0x5d, 0xdb, 0x81, 0x5c, 0x3b, 0x16,
		0x33, 0xc2, 0x64, 0x26, 0x18, 0xcc, 0x00, 0x03, 0x0b, 0xfb, 0xfa, 0xab, 0x0b, 0xed, 0x26, 0x81,
		0x0b, 0x6e, 0x32, 0x55, 0x7a, 0xb7, 0xe8, 0xa4, 0x27, 0x21, 0xd7, 0x88, 0xb5, 0x63, 0xa7, 0xdf,
		0x8b, 0xf4, 0x52, 0xb3, 0x50, 0xc1, 0x59, 0x81, 0x42, 0x4d, 0x25, 0x76, 0xec, 0xa0, 0x08, 0x61,
		0xfe, 0x78, 0xbc, 0x2e, 0xdd, 0x39, 0x72, 0xab, 0x75, 0xd9, 0x63, 0x97, 0x0a, 0xbf, 0x47, 0x9e,
		0xa9, 0xf0, 0x59, 0x67, 0xa1, 0xe0, 0xb2, 0xb9, 0x36, 0xdd, 0x70, 0xc1, 0xd8, 0xa8, 0xb9, 0x51,
		0xca, 0xee, 0x93, 0x8e, 0xdb, 0x34, 0xa9, 0x0e, 0xee, 0xa8, 0x8c, 0x94, 0xe6, 0x5c, 0x37, 0xf6,
		0x8d, 0x8c, 0x27, 0x76, 0xb1, 0xb6, 0xb7, 0x53, 0xab, 0x78, 0xb5, 0x57, 0x76, 0x78, 0x26, 0x72,
		0x1e, 0xeb, 0xb0, 0x2f, 0xa8, 0x92, 0xc8, 0xc7, 0x9b, 0x16, 0x15, 0x1c, 0x9d, 0xda, 0x97, 0x6c,
		0xba, 0x76, 0xce, 0xf2, 0x33, 0x34, 0xf7, 0x57, 0xf2, 0x47, 0x3a, 0xd3, 0xac, 0x9e, 0x5b, 0x6b,
		0x83, 0xbd, 0xfe, 0xc6, 0x7a, 0x27, 0x1b, 0xea, 0xf5, 0x36, 0xd2, 0xaf, 0xad, 0x5d, 0xff, 0xf3,
		0xd3, 0x07, 0xaf, 0x79, 0x72, 0x74, 0x70, 0xe6, 0xdd, 0x76, 0xa9, 0x37, 0x59, 0x2d, 0xbd, 0x7f,
		0x88, 0x30, 0x1e, 0x78, 0xd7, 0x57, 0x17, 0x9e, 0xef, 0xb1, 0xce, 0x8d, 0x24, 0xed, 0xef, 0xb7,
		0xba, 0x5b, 0x8e, 0x37, 0xc6, 0xb6, 0xeb, 0x4b, 0x69, 0xd5, 0xec, 0xbb, 0x91, 0x05, 0x63, 0x89,
		0xd1, 0x0e, 0xe8, 0x93, 0xba, 0xe9, 0xca, 0x5a, 0xc0, 0x66, 0x6d, 0xa8, 0xcd, 0xba, 0x26, 0x3c,
		0x20, 0x32, 0x14, 0xcf, 0x8b, 0x77, 0x1d, 0x9a, 0xd9, 0x37, 0xa5, 0x38, 0xde, 0x58, 0x81, 0x0e,
		0x14, 0x2e, 0xd5, 0x8b, 0xdb, 0xe9, 0x9d, 0xf8, 0xa2, 0xbf, 0xb6, 0x19, 0xee, 0xd8, 0xb4, 0x8e,
		0x29, 0x99, 0xc7, 0x92, 0x5e, 0xf4, 0x8e, 0xb2, 0x31, 0x17, 0x49, 0xb3, 0xd1, 0x3a, 0x6e, 0x9d,
		0x1c, 0x1c, 0xb5, 0x8e, 0xd7, 0x47, 0x36, 0x2b, 0xe1, 0x9d, 0x99, 0xd0, 0x05, 0xeb, 0xf8, 0x1d,
		0x4a, 0x64, 0x2c, 0x2a, 0xc5, 0x0b, 0xd6, 0xf1, 0xfb, 0xec, 0x61, 0xc9, 0xcc, 0x90, 0x7b, 0xb4,
		0xb7, 0x84, 0x86, 0xd1, 0xb3, 0x2f, 0x5f, 0x97, 0x76, 0xd7, 0x8b, 0x2d, 0xaf, 0x14, 0x80, 0x61,
		0xab, 0xb1, 0x72, 0x28, 0xa0, 0x8d, 0x20, 0xca, 0x1e, 0x89, 0xa4, 0xdf, 0xee, 0x8e, 0x2c, 0xb2,
		0x22, 0x54, 0xe6, 0x1b, 0x81, 0x2b, 0x11, 0x0b, 0x19, 0x9f, 0x84, 0x43, 0x24, 0xf5, 0x09, 0x0f,
		0x7c, 0xc9, 0xfa, 0x54, 0x27, 0x16, 0x72, 0xa2, 0x16, 0x0b, 0x91, 0x54, 0x70, 0xe5, 0xe5, 0xb1,
		0x76, 0x77, 0x17, 0xfc, 0xdd, 0x7a, 0xf1, 0x93, 0x1f, 0xcd, 0xf1, 0x8f, 0xdb, 0xe1, 0x8f, 0xb3,
		0xc2, 0x8f, 0x77, 0x77, 0x77, 0xf5, 0xbb, 0xbb, 0xe0, 0x97, 0xf7, 0xbf, 0xbe, 0xfb, 0xf7, 0x7f,
		0xff, 0xba, 0xbb, 0xfb, 0xe5, 0xee, 0xce, 0xbf, 0x2f, 0x5c, 0xf1, 0xbe, 0xb6, 0x82, 0xbc, 0xb0,
		0x4a, 0x16, 0xe3, 0x77, 0x12, 0xc9, 0x0f, 0x2a, 0xeb, 0xc1, 0x56, 0x9b, 0x8d, 0x9c, 0x94, 0x36,
		0xc3, 0x76, 0x30, 0xfe, 0xdd, 0x8f, 0x07, 0x7e, 0x10, 0xfe, 0xe4, 0xbe, 0x14, 0x64, 0xe0, 0x53,
		0xae, 0xa4, 0xbf, 0x13, 0x43, 0xf2, 0x5a, 0x0f, 0x8e, 0xad, 0xca, 0x3e, 0xac, 0xca, 0xda, 0x5a,
		0x15, 0x3a, 0x3a, 0xd5, 0x85, 0x85, 0x5c, 0xc7, 0xa6, 0xb4, 0x14, 0xae, 0xbd, 0xe4, 0x71, 0x5f,
		0x7d, 0x68, 0x6e, 0xc3, 0x1b, 0x29, 0x18, 0x7f, 0xd4, 0x2b, 0x87, 0x68, 0x0c, 0x9f, 0x21, 0xd1,
		0x6a, 0xad, 0xf2, 0xb5, 0x66, 0x6a, 0x51, 0x59, 0x34, 0x6c, 0xe8, 0xb6, 0xac, 0x2b, 0xbc, 0x4a,
		0x87, 0x5b, 0xe7, 0xa4, 0xbc, 0xf1, 0x8d, 0x68, 0xbd, 0x28, 0x22, 0x7b, 0xee, 0x33, 0xaf, 0xb1,
		0xb6, 0xd9, 0x7c, 0xf8, 0xe5, 0xf0, 0xcb, 0x57, 0x80, 0xb2, 0xee, 0xf8, 0xa4, 0x21, 0xeb, 0xfc,
		0xce, 0xf8, 0xf7, 0xaf, 0x83, 0x8f, 0xe1, 0x4f, 0x7e, 0x2b, 0xc8, 0xe0, 0x92, 0x23, 0x11, 0x64,
		0x27, 0xba, 0xcd, 0xe0, 0xb1, 0xf0, 0xa7, 0x51, 0x79, 0xc3, 0x54, 0x3b, 0x78, 0xf4, 0x60, 0x2f,
		0x54, 0x37, 0xa0, 0xba, 0xe1, 0x0d, 0xe3, 0x09, 0xa8, 0x6e, 0xd8, 0xc6, 0xea, 0x86, 0x51, 0xc5,
		0xa0, 0xa2, 0xd5, 0x4a, 0xaf, 0x46, 0x9c, 0x00, 0xb6, 0x6a, 0xbc, 0x41, 0x6c, 0xe8, 0x9c, 0xeb,
		0x84, 0x9d, 0xb7, 0x7a, 0x8d, 0xfd, 0x83, 0xf4, 0xb1, 0xba, 0x2e, 0x92, 0xcf, 0x46, 0xac, 0xab,
		0xe1, 0x80, 0x0a, 0x3f, 0x92, 0x44, 0xc6, 0x91, 0xfa, 0xf2, 0x9a, 0x6f, 0x04, 0x8f, 0x00, 0xb5,
		0x63, 0x5b, 0x1a, 0xb9, 0x8d, 0x07, 0xfa, 0x41, 0xdb, 0xf0, 0xa7, 0xce, 0x9b, 0x85, 0x6b, 0x07,
		0xe9, 0x96, 0x6d, 0x1a, 0x49, 0x35, 0xf3, 0x95, 0xb5, 0x6b, 0xa5, 0xf7, 0xc7, 0xbf, 0x73, 0xcd,
		0xef, 0x3b, 0x1c, 0xde, 0xa4, 0xe8, 0x13, 0x2e, 0x75, 0xda, 0x1d, 0xa5, 0xd4, 0x15, 0x4a, 0x7f,
		0x20, 0x68, 0x44, 0xf5, 0xda, 0x1e, 0x4f, 0xc7, 0x19, 0x52, 0x21, 0xbd, 0x79, 0x54, 0x7b, 0x24,
		0x04, 0xad, 0xd7, 0xd1, 0x0f, 0xc7, 0x57, 0x2f, 0x0e, 0x3e, 0xf3, 0xe4, 0x7a, 0x1b, 0x9d, 0xf3,
		0x42, 0x3f, 0xf3, 0x8e, 0x74, 0xde, 0xa1, 0x3d, 0x52, 0x2b, 0xa5, 0xc2, 0xcc, 0xac, 0xd5, 0x58,
		0xa9, 0xce, 0xbc, 0x96, 0x4e, 0xab, 0xc1, 0x5a, 0xc7, 0xf9, 0x57, 0x89, 0xcd, 0x3e, 0x0f, 0xa8,
		0xb8, 0x51, 0xb1, 0xbd, 0x5b, 0x4d, 0x68, 0x39, 0x29, 0x6d, 0x04, 0xa7, 0x0d, 0xba, 0xcf, 0x91,
		0x4f, 0x82, 0x40, 0xd0, 0x48, 0x03, 0xd4, 0x0a, 0xad, 0x40, 0x6a, 0xf0, 0x87, 0xf5, 0xf5, 0xc2,
		0xab, 0xbc, 0x18, 0xeb, 0xdd, 0x5f, 0xfb, 0xfe, 0x29, 0xf1, 0x3b, 0xe7, 0xfe, 0xa7, 0xfb, 0xbf,
		0x9b, 0x2f, 0xef, 0xce, 0x8a, 0x7f, 0xbf, 0xff, 0x9f, 0xf7, 0xbf, 0xa2, 0xc6, 0x6a, 0xfe, 0x6a,
		0xf7, 0xa5, 0xfb, 0x1c, 0x9d, 0x2b, 0x0f, 0xe7, 0xd6, 0x1a, 0x85, 0xbc, 0x98, 0x36, 0xc2, 0x2a,
		0x44, 0x03, 0x9a, 0x56, 0x50, 0x28, 0x9a, 0x83, 0xe1, 0xe5, 0xb0, 0x03, 0xb0, 0x03, 0x23, 0x39,
		0x3f, 0x92, 0xf8, 0x91, 0x1e, 0xb5, 0x34, 0x4c, 0xc0, 0xc9, 0xda, 0xee, 0xe1, 0xda, 0xc7, 0x1e,
		0xae, 0x69, 0x91, 0xd8, 0xbd, 0xbd, 0xdc, 0xc3, 0x6e, 0xae, 0x35, 0x27, 0x87, 0x62, 0xf1, 0xcb,
		0x4d, 0x62, 0x1d, 0x76, 0x3d, 0xd6, 0xf9, 0x8d, 0x3d, 0x76, 0x6f, 0x14, 0x4c, 0xc5, 0xf6, 0xb2,
		0xc4, 0x42, 0xc1, 0x6d, 0x06, 0x5d, 0x48, 0x22, 0x59, 0x24, 0x59, 0x5b, 0xc3, 0xe3, 0xcc, 0xb5,
		0x51, 0xe3, 0x8c, 0x06, 0x38, 0x63, 0xdd, 0x38, 0x43, 0xf5, 0x5d, 0xda, 0xb5, 0x80, 0x45, 0xed,
		0x90, 0x4b, 0xc6, 0x63, 0x26, 0x9f, 0x87, 0x3b, 0x7f, 0xb4, 0xcf, 0x2b, 0x2d, 0xe9, 0x63, 0x03,
		0x0e, 0x8a, 0x57, 0x52, 0x3c, 0x97, 0x6b, 0xeb, 0x0a, 0x1c, 0x57, 0xaa, 0xa2, 0x98, 0x9a, 0xcb,
		0xa2, 0xe2, 0x48, 0x69, 0xa4, 0xb2, 0xf4, 0x61, 0x7a, 0x56, 0x63, 0x35, 0xb7, 0xba, 0x99, 0x44,
		0x59, 0x8c, 0xa3, 0x2d, 0x59, 0xc3, 0xe5, 0x6e, 0x81, 0x53, 0x33, 0x53, 0x1a, 0x29, 0x00, 0x85,
		0x65, 0x9b, 0x71, 0xff, 0x41, 0x84, 0x24, 0x68, 0x93, 0x48, 0xfa, 0x83, 0xef, 0x32, 0xd2, 0x5f,
		0x7c, 0x66, 0xbb, 0xc0, 0xda, 0x83, 0xb5, 0x47, 0x6b, 0xed, 0x31, 0x5f, 0x47, 0xda, 0x61, 0x9c,
		0xc0, 0xa7, 0x92, 0x7b, 0x6e, 0xe0, 0xa6, 0x1b, 0xba, 0xeb, 0xfa, 0x2e, 0x89, 0x95, 0xfb, 0x6e,
		0xeb, 0xc6, 0x3b, 0x73, 0x54, 0xed, 0x1d, 0x56, 0x03, 0xf7, 0xde, 0xca, 0xcd, 0xaf, 0xc0, 0xdd,
		0x5f, 0x45, 0x69, 0xe2, 0xd0, 0x64, 0x97, 0x73, 0xd4, 0x3c, 0x7c, 0xf0, 0xdb, 0x87, 0x2b, 0x7e,
		0x31, 0x36, 0x96, 0x5f, 0xd4, 0x6d, 0xa5, 0x0b, 0x6b, 0xe3, 0x32, 0x9a, 0xe0, 0xcc, 0x00, 0x39,
		0x8a, 0x2e, 0xcc, 0xca, 0x75, 0x2b, 0xdf, 0x7c, 0xc1, 0xb8, 0x9f, 0xb8, 0x82, 0x44, 0x04, 0x66,
		0x1c, 0x97, 0x35, 0x06, 0xc1, 0x81, 0xe0, 0x96, 0x4b, 0x70, 0x78, 0xd9, 0x05, 0x08, 0x0e, 0x2f,
		0xbb, 0x00, 0xb7, 0xad, 0x0a, 0xb7, 0xa5, 0xa7, 0x94, 0x7d, 0xd4, 0xb3, 0x87, 0xa0, 0xb4, 0xf9,
		0x52, 0xdc, 0x56, 0x26, 0xa3, 0x42, 0x84, 0xc2, 0x8c, 0xc8, 0x46, 0x4d, 0xc1, 0x63, 0xe0, 0x31,
		0xf0, 0x18, 0x78, 0x0c, 0x3c, 0x06, 0x1e, 0xdb, 0x62, 0x1e, 0xbb, 0xd4, 0xb1, 0x86, 0xa0, 0xb1,
		0x79, 0x32, 0xdc, 0x56, 0x16, 0xeb, 0xc7, 0x3d, 0xc9, 0xec, 0xb2, 0x9d, 0x53, 0x5d, 0x80, 0xcd,
		0xc0, 0x66, 0xcb, 0x65, 0x33, 0x64, 0x3b, 0xc1, 0x66, 0xc8, 0x76, 0x82, 0xd2, 0xd6, 0x21, 0xdb,
		0x79, 0x3d, 0x36, 0x96, 0xc8, 0x76, 0x5a, 0x90, 0xdb, 0x22, 0xb9, 0x6e, 0x2b, 0xcd, 0x85, 0x6d,
		0x49, 0x0d, 0x29, 0x6e, 0xd4, 0x14, 0xf4, 0x06, 0x7a, 0x03, 0xbd, 0x81, 0xde, 0x40, 0x6f, 0xa0,
		0x37, 0xc4, 0xd8, 0x52, 0xb4, 0xf8, 0xac, 0x63, 0x19, 0xc1, 0x6a, 0xf3, 0xa5, 0xb8, 0xad, 0x64,
		0x16, 0x73, 0xcb, 0x28, 0x5b, 0xa1, 0x03, 0x50, 0x1a, 0x28, 0x0d, 0x94, 0x06, 0x4a, 0x03, 0xa5,
		0x81, 0xd2, 0x40, 0x69, 0x29, 0x5f, 0x7c, 0x45, 0x50, 0xcd, 0x0d, 0xa8, 0x7d, 0xdd, 0xfa, 0x28,
		0xda, 0xe8, 0xb8, 0x4a, 0x7f, 0x20, 0x42, 0x19, 0x9a, 0xd2, 0x5a, 0xa1, 0x0b, 0xf0, 0x1a, 0x78,
		0x6d, 0xb9, 0xbc, 0x86, 0x7a, 0x35, 0xf0, 0x1a, 0xea, 0xd5, 0x40, 0x69, 0x2b, 0x44, 0x69, 0x57,
		0xfc, 0xeb, 0xd0, 0x2a, 0x7e, 0xd1, 0x31, 0x8a, 0xe0, 0x34, 0x05, 0x51, 0x6e, 0x25, 0xa9, 0x85,
		0xb1, 0xb4, 0x3e, 0xac, 0xa3, 0xa4, 0x0f, 0xb0, 0x1a, 0x58, 0x0d, 0xb1, 0x35, 0xb0, 0x1a, 0x62,
		0x6b, 0xa0, 0x36, 0xd4, 0xaf, 0x4d, 0x1a, 0xb2, 0xce, 0x6f, 0x1f, 0x3e, 0xc7, 0x12, 0xc7, 0x75,
		0xb8, 0x60, 0xb8, 0x85, 0x82, 0xdd, 0x5a, 0xa2, 0x33, 0x3f, 0xb0, 0xa3, 0xd0, 0x1a, 0x14, 0x07,
		0x8a, 0x43, 0xc4, 0x0d, 0x14, 0x87, 0x88, 0x1b, 0xd8, 0x6d, 0x6b, 0x23, 0x6e, 0x9f, 0x63, 0x89,
		0x23, 0x3b, 0xec, 0xa3, 0x6d, 0x79, 0x31, 0x6e, 0x2d, 0x97, 0x99, 0x1e, 0xda, 0x91, 0x6b, 0x0b,
		0x26, 0x03, 0x93, 0x81, 0xc9, 0xc0, 0x64, 0x60, 0x32, 0x30, 0xd9, 0x36, 0x33, 0x19, 0x8e, 0xed,
		0x70, 0x40, 0x64, 0xdb, 0x7c, 0x6e, 0x47, 0xc2, 0x54, 0xb6, 0x07, 0x77, 0x94, 0xf4, 0x01, 0x3e,
		0x03, 0x9f, 0x2d, 0x97, 0xcf, 0x90, 0xf9, 0x04, 0x9f, 0x21, 0xf3, 0x09, 0x52, 0x5b, 0x8b, 0xcc,
		0x27, 0x8e, 0xee, 0x70, 0x41, 0x6f, 0x0b, 0x05, 0xbb, 0xb5, 0x44, 0x67, 0x7a, 0x78, 0x47, 0xae,
		0x2d, 0x08, 0x0e, 0x04, 0x07, 0x82, 0x03, 0xc1, 0x81, 0xe0, 0x40, 0x70, 0x88, 0xb5, 0x0d, 0xe9,
		0x02, 0xc7, 0x77, 0xd8, 0x46, 0xdb, 0xf2, 0x62, 0xdc, 0x5a, 0x3a, 0xb3, 0x3b, 0xc0, 0x63, 0xa6,
		0x07, 0x90, 0x1a, 0x48, 0x0d, 0xa4, 0x06, 0x52, 0x03, 0xa9, 0x81, 0xd4, 0x40, 0x6a, 0x43, 0xc4,
		0xc0, 0x11, 0x1e, 0xae, 0x60, 0x6d, 0x93, 0xcf, 0xf0, 0xd8, 0xb1, 0x98, 0x47, 0xb5, 0x73, 0xce,
		0x43, 0x49, 0x92, 0x15, 0x47, 0x49, 0x53, 0x6a, 0x51, 0xbb, 0x4b, 0xfb, 0x64, 0x40, 0x64, 0x37,
		0x19, 0x82, 0x3d, 0x46, 0x65, 0xc7, 0x67, 0x99, 0xe8, 0xf7, 0xca, 0x7e, 0xdd, 0x8b, 0x92, 0x2f,
		0x88, 0x24, 0x6b, 0xab, 0xe8, 0x71, 0x2d, 0x92, 0x22, 0x6e, 0x4b, 0x3e, 0x9a, 0x2e, 0x57, 0x97,
		0xb7, 0x9f, 0x26, 0x43, 0xfb, 0xad, 0xec, 0xd7, 0x6f, 0x37, 0x93, 0xfe, 0x77, 0xcc, 0x24, 0x35,
		0x47, 0x4a, 0x35, 0xa9, 0xc2, 0x19, 0xd9, 0xf4, 0x4e, 0xaf, 0x5e, 0x20, 0x73, 0x35, 0x86, 0x55,
		0x66, 0x57, 0x1d, 0x66, 0xd5, 0x63, 0x55, 0xdd, 0x35, 0xc4, 0x98, 0x4d, 0x8d, 0x17, 0x08, 0x6d,
		0x16, 0xb5, 0x9b, 0x2d, 0xd7, 0x84, 0x07, 0x44, 0x86, 0xe2, 0x39, 0x31, 0xfa, 0x0b, 0xae, 0x55,
		0xe6, 0xd3, 0xc9, 0x98, 0x04, 0x94, 0x4b, 0x26, 0x9f, 0x05, 0x55, 0x1a, 0x9c, 0x91, 0x1a, 0xa9,
		0xa0, 0x46, 0xed, 0x6a, 0xd4, 0xf5, 0x05, 0x89, 0xa8, 0xc9, 0xf9, 0x3d, 0xa3, 0xa9, 0xe6, 0xa7,
		0xea, 0x5d, 0xb1, 0x90, 0x0d, 0x4c, 0xba, 0x81, 0x29, 0x37, 0xf0, 0x1b, 0x14, 0x0d, 0xce, 0xed,
		0xe2, 0x25, 0xc0, 0xb5, 0x23, 0x68, 0x6a, 0xa0, 0xdd, 0xfa, 0x82, 0x3a, 0xf2, 0x71, 0xed, 0x34,
		0xee, 0xd8, 0x99, 0xdb, 0x39, 0xa6, 0x61, 0x47, 0x43, 0x87, 0x93, 0x31, 0x49, 0x24, 0x91, 0x5a,
		0xaf, 0x57, 0x2e, 0xf9, 0x9d, 0x45, 0xf2, 0x5c, 0x4a, 0x31, 0x77, 0xc0, 0x13, 0x97, 0xee, 0xb2,
		0x47, 0x13, 0xc9, 0x2e, 0x70, 0x02, 0x12, 0x0f, 0x26, 0x77, 0xa5, 0x9e, 0x2b, 0x52, 0xfb, 0x2c,
		0x02, 0x2a, 0x68, 0x70, 0x91, 0xdc, 0x35, 0x8f, 0x7b, 0x3d, 0xad, 0x87, 0x3d, 0x8f, 0x1f, 0x93,
		0xaf, 0xa5, 0xc1, 0xdc, 0x49, 0xa7, 0x68, 0x38, 0xf7, 0x58, 0xe7, 0x2c, 0x4f, 0x0f, 0xb9, 0xbf,
		0x16, 0xd9, 0xd3, 0x8f, 0x34, 0x6a, 0x0b, 0x36, 0x18, 0x41, 0xcc, 0xf8, 0xb6, 0xbc, 0xac, 0xbd,
		0xf7, 0x93, 0xc9, 0xae, 0x97, 0x90, 0x4b, 0x10, 0xf7, 0x68, 0xe0, 0x49, 0x41, 0x3a, 0x1d, 0xd6,
		0xf6, 0xda, 0xa9, 0x81, 0x8d, 0x45, 0x8a, 0x3f, 0x75, 0x45, 0xab, 0xdd, 0x78, 0x4b, 0xab, 0x9d,
		0x3e, 0x83, 0xbf, 0x89, 0xb6, 0x3b, 0x7b, 0xb2, 0x8a, 0x8d, 0xcb, 0x47, 0x26, 0xd4, 0x44, 0xfe,
		0x48, 0x24, 0xf5, 0x07, 0x44, 0x90, 0x3e, 0x95, 0x54, 0xf8, 0x7a, 0xee, 0x65, 0x36, 0x60, 0xa5,
		0xbd, 0x28, 0x8a, 0x67, 0x5a, 0xad, 0xbd, 0xb4, 0xb5, 0x27, 0xbb, 0x44, 0x26, 0xaa, 0x2b, 0x09,
		0xe3, 0x91, 0x27, 0xbb, 0xd4, 0x1b, 0x50, 0xe1, 0x0f, 0x42, 0x21, 0xbd, 0x3e, 0xe1, 0xe4, 0x91,
		0xa6, 0x57, 0x65, 0xdf, 0x19, 0x79, 0x9d, 0x50, 0xdc, 0xf1, 0xb1, 0xce, 0x8f, 0x66, 0x01, 0xe3,
		0x8f, 0x75, 0xef, 0x53, 0x28, 0x3c, 0xe2, 0x3d, 0xb2, 0x1f, 0x94, 0x7b, 0x5f, 0x42, 0x21, 0x77,
		0x3d, 0xc2, 0x3d, 0xca, 0xa5, 0x78, 0xf6, 0x18, 0x4f, 0x7b, 0x1e, 0x7e, 0x23, 0x7d, 0x62, 0x91,
		0x8c, 0xea, 0x77, 0xfc, 0xbc, 0xd7, 0xf3, 0x7e, 0x0a, 0x36, 0xfc, 0x34, 0x7c, 0xf8, 0xff, 0xb4,
		0x2d, 0xa3, 0xe1, 0xa5, 0x2c, 0x1a, 0x5d, 0xdb, 0x8f, 0x23, 0xe9, 0x3d, 0xa4, 0xf7, 0x14, 0xb1,
		0x48, 0x26, 0xf3, 0x30, 0xfc, 0x41, 0x85, 0x37, 0x08, 0x7f, 0x52, 0xe1, 0xc5, 0x83, 0x3b, 0x2e,
		0x68, 0x24, 0x89, 0x90, 0x7b, 0x82, 0x3e, 0x84, 0xa1, 0xac, 0x6b, 0x06, 0x7e, 0x1b, 0xab, 0x18,
		0xf8, 0x4d, 0x85, 0xba, 0x7d, 0xb1, 0xdf, 0xe1, 0x63, 0xbf, 0x51, 0xf8, 0x77, 0xed, 0x02, 0x3f,
		0x8d, 0x66, 0xbd, 0x79, 0x5a, 0x6f, 0xec, 0x7a, 0x27, 0xf5, 0xa3, 0xfa, 0x49, 0xbd, 0xe5, 0x11,
		0x1e, 0xa4, 0xbf, 0x9f, 0x7a, 0x61, 0xc7, 0xbb, 0xba, 0xbc, 0xbc, 0xf4, 0x6e, 0x64, 0xe0, 0x9d,
		0xec, 0x37, 0xeb, 0x8d, 0x7f, 0x21, 0xe0, 0x53, 0xa2, 0x6f, 0x7a, 0x12, 0xdc, 0xb6, 0x40, 0x8f,
		0x26, 0xc1, 0xde, 0xbf, 0x06, 0x75, 0x6a, 0x01, 0x21, 0x93, 0x40, 0xd0, 0x1c, 0x65, 0xd2, 0x8f,
		0xfa, 0x94, 0x8f, 0xef, 0xec, 0xb3, 0x16, 0x3f, 0x99, 0x5a, 0x5d, 0x16, 0x3d, 0xad, 0xfa, 0x53,
		0x96, 0x3c, 0x9b, 0xea, 0x33, 0x15, 0x9f, 0x64, 0x72, 0xbf, 0xb9, 0x7b, 0x9d, 0x78, 0xe0, 0x91,
		0x1f, 0x49, 0x22, 0x67, 0x67, 0xf9, 0xac, 0xaf, 0x3e, 0xbe, 0x72, 0xea, 0x89, 0xcb, 0xed, 0xe8,
		0xc4, 0x5e, 0x36, 0xa7, 0xfe, 0x31, 0xc7, 0x2e, 0xce, 0x0f, 0x26, 0x2d, 0x5a, 0x8f, 0x94, 0x8d,
		0x99, 0xf2, 0x62, 0xb2, 0x30, 0x18, 0x34, 0x5f, 0x17, 0x5e, 0x43, 0xc3, 0x89, 0x48, 0x5f, 0x7f,
		0x96, 0x19, 0xe9, 0xbf, 0xf6, 0x2c, 0xf3, 0x31, 0x66, 0x21, 0xb6, 0xa8, 0x60, 0x8a, 0x5a, 0x8c,
		0x4f, 0xd5, 0x5c, 0x68, 0x33, 0x87, 0xf6, 0xda, 0xaf, 0x1c, 0xc3, 0xd3, 0x73, 0xc5, 0x17, 0x91,
		0x7e, 0x8d, 0x04, 0x7d, 0xc6, 0xd3, 0x49, 0x12, 0x47, 0xea, 0x01, 0xde, 0x42, 0x2b, 0x04, 0x7a,
		0x11, 0xe8, 0x35, 0x08, 0xf4, 0x52, 0x1e, 0xf7, 0xe9, 0x30, 0xec, 0xa0, 0x13, 0xe8, 0x6d, 0x29,
		0x5c, 0x7b, 0xc9, 0xe3, 0xbe, 0xfa, 0x30, 0xde, 0x86, 0x37, 0x52, 0x30, 0xfe, 0xa8, 0x87, 0xcf,
		0x8d, 0xe4, 0x19, 0xe2, 0x81, 0x8e, 0xc3, 0xd3, 0x4c, 0x9a, 0x04, 0xe1, 0x4f, 0xae, 0xd3, 0xe8,
		0x20, 0x4d, 0xa8, 0xd0, 0x48, 0x26, 0x77, 0xe8, 0xb6, 0x76, 0x24, 0xbc, 0x4a, 0x35, 0x49, 0xe3,
		0xa1, 0xd3, 0x9b, 0x9f, 0x31, 0x8f, 0x73, 0x9b, 0x8c, 0x6f, 0xfd, 0xcc, 0x3b, 0xd0, 0x68, 0x15,
		0x0f, 0x92, 0xb1, 0x5e, 0x89, 0xe4, 0xa0, 0x49, 0x24, 0x9e, 0x75, 0xfc, 0x0e, 0x25, 0x32, 0x16,
		0x95, 0x86, 0xe2, 0x59, 0xc7, 0xef, 0xb3, 0x87, 0x25, 0xbb, 0xdc, 0xb9, 0x47, 0x7b, 0xdb, 0x92,
		0xab, 0xf4, 0xd9, 0x97, 0x1f, 0x41, 0xdf, 0x5d, 0xaf, 0x3c, 0xcc, 0x79, 0x62, 0xa9, 0x6f, 0x54,
		0x0c, 0xf5, 0x56, 0xa7, 0x63, 0xf2, 0x62, 0x5a, 0x49, 0x9d, 0xca, 0x08, 0xad, 0x32, 0x85, 0x0a,
		0xe8, 0x40, 0xd0, 0x36, 0x91, 0x4b, 0x0f, 0xe2, 0x45, 0xba, 0xda, 0xe9, 0x5e, 0x4b, 0x72, 0xcf,
		0xbe, 0x3e, 0x39, 0xb9, 0x39, 0x6e, 0x4d, 0x97, 0x3d, 0x76, 0xa9, 0xf0, 0x7b, 0xe4, 0x99, 0x0a,
		0x9f, 0x75, 0xd4, 0xc1, 0x7e, 0xba, 0x21, 0xd8, 0x7e, 0x43, 0xd9, 0xde, 0xa0, 0x30, 0x23, 0xab,
		0x7f, 0x48, 0x43, 0x2a, 0xbe, 0x66, 0x81, 0x86, 0xc2, 0xf9, 0x49, 0xb5, 0x2f, 0x59, 0x88, 0x29,
		0x9f, 0x06, 0x1d, 0x7e, 0x5f, 0xe1, 0xb3, 0xe4, 0x8f, 0x34, 0xa4, 0x64, 0x25, 0x03, 0xa5, 0x24,
		0xf4, 0xc4, 0x1b, 0x52, 0x4d, 0x46, 0xe7, 0xfc, 0x27, 0xf3, 0xa4, 0x74, 0xd6, 0x89, 0x52, 0x72,
		0xba, 0x4a, 0x96, 0x5d, 0x25, 0x9a, 0xb9, 0x91, 0xa4, 0xfd, 0xfd, 0x56, 0x23, 0x7f, 0xb8, 0x95,
		0x30, 0x93, 0x93, 0x12, 0x58, 0x06, 0x2c, 0xb3, 0xe6, 0x2c, 0xc3, 0x3a, 0x3e, 0xe3, 0x01, 0x7d,
		0x52, 0x87, 0x98, 0xac, 0x05, 0xe8, 0x05, 0x91, 0x49, 0x33, 0xd2, 0x51, 0x3a, 0x22, 0x72, 0xac,
		0x40, 0x0a, 0x81, 0x2d, 0xcd, 0x6d, 0x50, 0x1a, 0x4b, 0x9e, 0xc9, 0xb6, 0xa7, 0xc9, 0x9e, 0x1d,
		0xcd, 0x75, 0xc6, 0x76, 0x63, 0x8e, 0xf9, 0x86, 0x1c, 0x8d, 0x6d, 0x4d, 0x46, 0xdb, 0x99, 0x32,
		0x91, 0x34, 0x1b, 0xad, 0xe3, 0xd6, 0xc9, 0xc1, 0x51, 0xeb, 0x78, 0x7d, 0x64, 0xb3, 0x9c, 0xd5,
		0x1b, 0x71, 0x52, 0xc4, 0x49, 0x37, 0x36, 0x4e, 0x7a, 0xa5, 0x00, 0x0c, 0x5b, 0xed, 0x54, 0x0c,
		0x05, 0x04, 0x7f, 0x02, 0xfe, 0xc4, 0x9a, 0xfb, 0x13, 0x3d, 0x12, 0x49, 0xbf, 0xdd, 0x1d, 0xf1,
		0x98, 0xa2, 0x4b, 0x91, 0x6f, 0x04, 0xaf, 0x02, 0x31, 0xd1, 0xf1, 0xba, 0x40, 0x24, 0xf5, 0x09,
		0x0f, 0x7c, 0xc9, 0xfa, 0x54, 0x27, 0x1a, 0x7a, 0xa2, 0x16, 0x0d, 0x95, 0x54, 0x70, 0xe5, 0x75,
		0xad, 0x76, 0x77, 0x17, 0xfc, 0xdd, 0x7a, 0xf1, 0x93, 0x1f, 0xcd, 0xf1, 0x8f, 0xdb, 0xe1, 0x8f,
		0xb3, 0xc2, 0x8f, 0x77, 0x77, 0x77, 0xf5, 0xbb, 0xbb, 0xe0, 0x97, 0xf7, 0xbf, 0xbe, 0xfb, 0xf7,
		0x7f, 0xff, 0xba, 0xbb, 0xfb, 0xe5, 0xee, 0xce, 0xbf, 0x2f, 0x5c, 0xf1, 0xbe, 0xb6, 0x82, 0xb4,
		0xb8, 0x4a, 0xbc, 0xf0, 0x3b, 0x89, 0xe4, 0x07, 0x95, 0xf5, 0x60, 0xab, 0xa1, 0x21, 0x27, 0x25,
		0x90, 0x03, 0xc8, 0x61, 0xdd, 0xc9, 0x21, 0xfc, 0x69, 0x94, 0x54, 0x9d, 0x6a, 0x07, 0x7e, 0x00,
		0x3f, 0x20, 0xa7, 0xea, 0x21, 0xa7, 0x8a, 0x9c, 0x2a, 0x72, 0xaa, 0x20, 0x19, 0x90, 0xcc, 0xf2,
		0x49, 0x66, 0xb4, 0x1d, 0x4b, 0x91, 0x5f, 0xe6, 0x1c, 0xe4, 0x00, 0x6a, 0xd9, 0x42, 0x6a, 0x89,
		0x86, 0xdb, 0x25, 0x74, 0xc2, 0x1d, 0x5b, 0x6d, 0x61, 0xff, 0x20, 0x7d, 0xd8, 0xd6, 0x45, 0xf2,
		0x81, 0x55, 0x85, 0x55, 0x5d, 0x73, 0xab, 0x1a, 0x0e, 0xa8, 0xd0, 0xde, 0x4a, 0x99, 0x6f, 0x04,
		0x1b, 0x8b, 0x7a, 0x25, 0xec, 0xa4, 0x54, 0x68, 0x62, 0xbf, 0x93, 0x52, 0xa3, 0x5d, 0x2b, 0xbd,
		0x3f, 0xfe, 0x9d, 0x6b, 0x7e, 0xdf, 0xe1, 0xf0, 0x26, 0x45, 0x9f, 0x70, 0xa9, 0xd3, 0xee, 0x28,
		0x65, 0xee, 0x50, 0xfa, 0x03, 0x41, 0x23, 0xaa, 0xd7, 0xf6, 0x78, 0x3a, 0xde, 0x98, 0x0a, 0xe9,
		0xed, 0xb7, 0x8d, 0x0e, 0x85, 0x70, 0xe6, 0x69, 0x9c, 0x08, 0x6d, 0xb2, 0xd9, 0x74, 0xe6, 0xc9,
		0xf5, 0xde, 0xdb, 0x9c, 0x17, 0xfa, 0x99, 0x77, 0x54, 0xfd, 0x2e, 0xd7, 0x91, 0x52, 0x9d, 0x79,
		0xad, 0xed, 0xd9, 0x1b, 0xbb, 0x4a, 0x64, 0xfe, 0x79, 0x40, 0x05, 0x36, 0x47, 0x6a, 0x48, 0x09,
		0x94, 0x0e, 0x4a, 0x5f, 0x73, 0x4a, 0x1f, 0x74, 0x9f, 0x23, 0x9f, 0x04, 0x81, 0xa0, 0x91, 0x06,
		0xa6, 0x17, 0x5a, 0x81, 0xd3, 0x11, 0x0b, 0xd3, 0xd7, 0x0b, 0xaf, 0xf2, 0x02, 0xa0, 0x77, 0x7f,
		0xed, 0xfb, 0xa7, 0xc4, 0xef, 0x9c, 0xfb, 0x9f, 0xee, 0xff, 0x6e, 0xbe, 0xbc, 0x3b, 0x2b, 0xfe,
		0xfd, 0xfe, 0x7f, 0xde, 0xff, 0x8a, 0xba, 0x9e, 0xf9, 0xb6, 0xee, 0x4b, 0xf7, 0x39, 0x3a, 0x57,
		0x1e, 0xce, 0xad, 0x45, 0x82, 0xbc, 0x98, 0xc0, 0x04, 0x60, 0x82, 0x35, 0x67, 0x82, 0x68, 0x40,
		0xd3, 0x03, 0xbc, 0x15, 0x61, 0x60, 0x78, 0x39, 0x28, 0x00, 0x14, 0x90, 0x9d, 0x70, 0x1d, 0x3f,
		0x52, 0xa5, 0x57, 0xa9, 0x69, 0xbc, 0x42, 0x6d, 0x45, 0xf7, 0x0c, 0xee, 0x63, 0xcf, 0xe0, 0xb4,
		0x48, 0xec, 0x5f, 0x7d, 0x86, 0xdd, 0x83, 0xeb, 0xcc, 0x8d, 0xc5, 0xb7, 0xd7, 0xdf, 0x24, 0xd6,
		0x61, 0xd7, 0x63, 0x9d, 0xdf, 0xd8, 0x63, 0xf7, 0x46, 0xc1, 0x54, 0x6c, 0x2f, 0x49, 0x2e, 0x14,
		0x1c, 0xd8, 0x12, 0x6c, 0xb9, 0xee, 0x6c, 0x39, 0x79, 0x31, 0x9b, 0x3a, 0x60, 0xaa, 0xbe, 0x2c,
		0x6e, 0x25, 0x5e, 0xc8, 0x02, 0xca, 0x34, 0xb1, 0x78, 0xca, 0x2f, 0x61, 0x09, 0x58, 0xd4, 0x0e,
		0xb9, 0x64, 0x3c, 0x66, 0xf2, 0x79, 0xb8, 0xd3, 0x4c, 0xfb, 0x15, 0x2c, 0x25, 0x7d, 0xe0, 0x5d,
		0xd3, 0xfa, 0xcb, 0xe3, 0x56, 0xbf, 0x6b, 0x5a, 0xa3, 0x88, 0x41, 0xdf, 0x95, 0x9a, 0xd5, 0x58,
		0xcd, 0xad, 0x95, 0x26, 0x11, 0x56, 0xe3, 0x48, 0x6b, 0xd6, 0x70, 0xb9, 0x5b, 0x2e, 0xd5, 0xcc,
		0x94, 0xee, 0xb8, 0xda, 0xbc, 0x44, 0x46, 0x13, 0x85, 0xf4, 0x91, 0xc8, 0x0d, 0x1a, 0xd9, 0xae,
		0x01, 0xce, 0x50, 0xc9, 0xd9, 0x9a, 0xe0, 0x0c, 0x9d, 0xf4, 0xd6, 0x0a, 0xfd, 0xab, 0x9d, 0xbd,
		0xf8, 0x45, 0x01, 0x31, 0x18, 0xf7, 0x1f, 0x44, 0x48, 0x82, 0x36, 0x89, 0xa4, 0x3f, 0xf8, 0x2e,
		0x23, 0x93, 0xb7, 0x7c, 0x4e, 0x77, 0x01, 0x3b, 0x09, 0x3b, 0xa9, 0xb5, 0x9e, 0x9a, 0xdb, 0xbc,
		0x76, 0x18, 0x27, 0x6e, 0xb2, 0x52, 0x20, 0xd1, 0x20, 0xa0, 0x68, 0x18, 0x58, 0xb4, 0x58, 0xb4,
		0x4d, 0x02, 0x8d, 0xb6, 0x01, 0x47, 0x67, 0x21, 0x35, 0xfb, 0xd0, 0x9a, 0x41, 0x20, 0xd2, 0x2a,
		0x20, 0x59, 0x41, 0x60, 0x72, 0x15, 0xa5, 0xf9, 0xb6, 0x96, 0x6a, 0x53, 0x5f, 0xcd, 0xa7, 0x1f,
		0xaf, 0xfb, 0xed, 0xc3, 0x15, 0xbf, 0x18, 0x1b, 0xcb, 0x2f, 0xea, 0xb6, 0xb2, 0x2a, 0x22, 0x5b,
		0xcd, 0x17, 0xf6, 0xb9, 0x90, 0xeb, 0xea, 0xcc, 0x91, 0x5d, 0xf8, 0x06, 0xf0, 0x0d, 0xd6, 0xd4,
		0x37, 0x08, 0x58, 0xd4, 0x26, 0x22, 0x30, 0xf3, 0x0a, 0xb2, 0xc6, 0xf0, 0x07, 0xe0, 0x0f, 0x2c,
		0xd7, 0x1f, 0x50, 0x3a, 0x8c, 0x78, 0x5a, 0xf1, 0x8e, 0xe1, 0x0f, 0xc0, 0x1f, 0x98, 0x16, 0x5d,
		0xab, 0x79, 0xda, 0x3a, 0x3d, 0x3a, 0x6e, 0x9e, 0xc2, 0x0b, 0x80, 0x17, 0x60, 0xec, 0x05, 0xa4,
		0xa7, 0xc1, 0x7e, 0xd4, 0xb3, 0x87, 0x60, 0xfe, 0xf9, 0x52, 0x04, 0xe1, 0x83, 0xf0, 0x41, 0xf8,
		0xb6, 0x84, 0x4f, 0x85, 0x08, 0x85, 0x19, 0xdf, 0x8f, 0x9a, 0x82, 0xee, 0x41, 0xf7, 0xa0, 0x7b,
		0xd0, 0x3d, 0xe8, 0x1e, 0x74, 0xbf, 0xc5, 0x74, 0x7f, 0xa9, 0x63, 0x0d, 0xc1, 0xf6, 0xf3, 0x64,
		0x08, 0xb2, 0x07, 0xd9, 0x83, 0xec, 0x6d, 0xc9, 0xbe, 0x1f, 0xf7, 0x24, 0xb3, 0xab, 0xeb, 0x99,
		0xea, 0x02, 0xa4, 0x0f, 0xd2, 0x5f, 0x2e, 0xe9, 0xa3, 0xae, 0x07, 0xa4, 0x8f, 0xba, 0x1e, 0x30,
		0xff, 0x3a, 0xd4, 0xf5, 0x5c, 0x8f, 0x8d, 0x25, 0xea, 0x7a, 0x2c, 0xfc, 0x80, 0x45, 0x72, 0x85,
		0x6f, 0x00, 0xdf, 0x00, 0xbe, 0x81, 0xad, 0x6f, 0x10, 0xb6, 0x25, 0x35, 0xf4, 0x09, 0x46, 0x4d,
		0xe1, 0x0b, 0xc0, 0x17, 0x80, 0x2f, 0x00, 0x5f, 0x00, 0xbe, 0x00, 0x7c, 0x01, 0xc4, 0xff, 0x53,
		0x50, 0xfd, 0xac, 0x63, 0x19, 0x41, 0xfe, 0xf3, 0xa5, 0x08, 0xce, 0x07, 0xe7, 0x83, 0xf3, 0x6d,
		0x39, 0x3f, 0xe6, 0x96, 0x19, 0x80, 0x42, 0x07, 0x60, 0x7e, 0x30, 0x3f, 0x98, 0x1f, 0xcc, 0x0f,
		0xe6, 0x07, 0xf3, 0x83, 0xf9, 0x53, 0x5a, 0xfd, 0x8a, 0x80, 0xbf, 0x1b, 0xec, 0xff, 0x8a, 0x08,
		0x3f, 0xc8, 0x1f, 0xe4, 0xef, 0x90, 0xfc, 0xd3, 0x17, 0x25, 0xf9, 0x03, 0x11, 0xca, 0xd0, 0x94,
		0xfd, 0x0b, 0x5d, 0x80, 0xfe, 0x41, 0xff, 0xcb, 0xa5, 0x7f, 0xd4, 0xf9, 0x83, 0xfe, 0x51, 0xe7,
		0x0f, 0xe6, 0x5f, 0x21, 0xe6, 0xbf, 0xe2, 0x5f, 0x87, 0x56, 0xf1, 0x8b, 0x8e, 0x51, 0x04, 0xf5,
		0x2b, 0x88, 0x12, 0xdc, 0x0f, 0xee, 0x07, 0xf7, 0x5b, 0x71, 0x7f, 0x18, 0x4b, 0xeb, 0xe3, 0x3c,
		0x4b, 0xfa, 0x00, 0xf9, 0x83, 0xfc, 0x97, 0x4b, 0xfe, 0x88, 0xfb, 0x83, 0xfc, 0x11, 0xf7, 0x87,
		0x0f, 0xb0, 0xfa, 0x75, 0xff, 0x9f, 0x63, 0x89, 0x03, 0x3d, 0x5d, 0x78, 0x04, 0x0b, 0x05, 0x0b,
		0xff, 0x00, 0xfe, 0x01, 0xfc, 0x03, 0x6b, 0xff, 0xc0, 0xfc, 0x48, 0xcf, 0x42, 0x6b, 0xf8, 0x04,
		0xf0, 0x09, 0x96, 0xeb, 0x13, 0x20, 0x1b, 0x00, 0x9f, 0x00, 0xd9, 0x00, 0x78, 0x02, 0xab, 0xe2,
		0x09, 0x78, 0xac, 0xf3, 0x39, 0x96, 0x38, 0xd4, 0xd3, 0x92, 0xfb, 0xa7, 0xc4, 0x08, 0xca, 0x07,
		0xe5, 0x83, 0xf2, 0xad, 0x29, 0xdf, 0xf4, 0x58, 0xcf, 0x5c, 0x5b, 0x10, 0x3e, 0x08, 0x1f, 0x84,
		0x0f, 0xc2, 0x07, 0xe1, 0x83, 0xf0, 0xb7, 0x99, 0xf0, 0x71, 0xb0, 0xa7, 0x03, 0xbe, 0xc7, 0xc9,
		0x9e, 0xa0, 0x7b, 0xd0, 0xbd, 0x2b, 0xba, 0xb7, 0x3d, 0xda, 0xb3, 0xa4, 0x0f, 0xd0, 0x3e, 0x68,
		0x7f, 0xb9, 0xb4, 0x8f, 0x1a, 0x1f, 0xd0, 0x3e, 0x6a, 0x7c, 0xc0, 0xfd, 0x6b, 0x51, 0xe3, 0x83,
		0xc3, 0x3d, 0x5d, 0xf8, 0x02, 0x0b, 0x05, 0x0b, 0xff, 0x00, 0xfe, 0x01, 0xfc, 0x03, 0x6b, 0xff,
		0xc0, 0xf4, 0x78, 0xcf, 0x5c, 0x5b, 0xf8, 0x03, 0xf0, 0x07, 0xe0, 0x0f, 0xc0, 0x1f, 0x80, 0x3f,
		0x00, 0x7f, 0x00, 0x79, 0x80, 0x21, 0xab, 0xe2, 0x80, 0x4f, 0x2b, 0xfa, 0x9f, 0x12, 0x23, 0x58,
		0x1f, 0xac, 0x0f, 0xd6, 0xb7, 0x66, 0x7d, 0xbb, 0x23, 0x3e, 0x67, 0x7a, 0x00, 0xf7, 0x83, 0xfb,
		0xc1, 0xfd, 0xe0, 0x7e, 0x70, 0x3f, 0xb8, 0x1f, 0xdc, 0x3f, 0x04, 0x56, 0x1c, 0xf2, 0xe9, 0x0a,
		0xfd, 0x71, 0xca, 0x27, 0xe8, 0x1f, 0xf4, 0xaf, 0x42, 0xff, 0x3b, 0x16, 0xab, 0xb2, 0xc9, 0x6a,
		0xac, 0xab, 0xdb, 0x06, 0xbc, 0x67, 0xa4, 0xcb, 0x2e, 0xf8, 0xdc, 0x48, 0x77, 0xdd, 0xf2, 0xb9,
		0x89, 0xae, 0xbe, 0x38, 0xd2, 0xa5, 0x7b, 0x2b, 0x5d, 0x3a, 0xe7, 0x3c, 0x94, 0x24, 0x61, 0x21,
		0x45, 0x3d, 0x6a, 0x77, 0x69, 0x9f, 0x0c, 0x88, 0xec, 0x26, 0xcf, 0xbd, 0xc7, 0xa8, 0xec, 0xf8,
		0x2c, 0x33, 0x0a, 0x7b, 0x93, 0x5f, 0xfd, 0x64, 0x58, 0xe8, 0xe4, 0x83, 0xbd, 0xe4, 0x6f, 0x16,
		0x49, 0xd6, 0x56, 0x19, 0xaa, 0x5a, 0x24, 0x45, 0xdc, 0x96, 0x7c, 0xa4, 0x5b, 0x57, 0x97, 0xb7,
		0x9f, 0x26, 0xa6, 0xe7, 0xdb, 0xe4, 0xd7, 0x9b, 0xe4, 0x4b, 0x26, 0x7f, 0x7f, 0xbb, 0x99, 0x7c,
		0xc9, 0x8e, 0x99, 0x58, 0xe7, 0x08, 0xac, 0x26, 0x55, 0x9c, 0xa1, 0x6c, 0x42, 0xa4, 0x57, 0x2f,
		0x10, 0xbf, 0x9a, 0xa3, 0xad, 0xec, 0x60, 0xeb, 0x38, 0xd6, 0x7a, 0x0e, 0xb5, 0xee, 0x44, 0x35,
		0x76, 0xa0, 0x8d, 0x27, 0xa6, 0xb6, 0xc3, 0x6c, 0xb7, 0x08, 0x5f, 0x13, 0x1e, 0x10, 0x19, 0x8a,
		0xe7, 0xc4, 0x33, 0x59, 0x70, 0xad, 0xb2, 0x13, 0x3d, 0x19, 0x93, 0x80, 0x72, 0xc9, 0xe4, 0xb3,
		0xa0, 0x4a, 0x83, 0x33, 0x52, 0x23, 0x15, 0x7f, 0xa8, 0x76, 0x35, 0xea, 0xfa, 0x82, 0x44, 0xd4,
		0xe4, 0xe0, 0xe8, 0xd1, 0x54, 0xf3, 0x53, 0xf5, 0x5e, 0x41, 0x4b, 0xa7, 0xef, 0x6f, 0x18, 0x18,
		0x3b, 0x45, 0x2a, 0xbe, 0x5d, 0xbc, 0x04, 0xb8, 0xb6, 0x86, 0xa6, 0x5e, 0x84, 0x5b, 0x83, 0xa8,
		0x23, 0x9f, 0xe5, 0x5b, 0xcc, 0x5d, 0xf0, 0x12, 0x78, 0x49, 0x1b, 0x0c, 0x76, 0x34, 0x56, 0xb0,
		0x44, 0xde, 0xc9, 0x83, 0xa6, 0x00, 0xf3, 0xca, 0x25, 0xbf, 0xb3, 0x48, 0x9e, 0x4b, 0x29, 0xe6,
		0x0e, 0x66, 0xed, 0x9a, 0xf1, 0xcb, 0x1e, 0x4d, 0x04, 0xb7, 0x20, 0x4e, 0x55, 0xbb, 0x26, 0x4f,
		0xb9, 0x2b, 0xf5, 0xa2, 0x65, 0xb5, 0xcf, 0x22, 0xa0, 0x82, 0x06, 0x17, 0xc9, 0x5d, 0xf3, 0xb8,
		0xd7, 0xd3, 0x7a, 0x58, 0x8d, 0x65, 0x5a, 0x75, 0x62, 0x69, 0xd8, 0x4a, 0xad, 0x89, 0x64, 0xc3,
		0x31, 0x5a, 0x13, 0xc7, 0x0d, 0xc7, 0xe8, 0x4c, 0x94, 0x17, 0x43, 0xc5, 0xbe, 0xd7, 0x1a, 0x6b,
		0x45, 0x87, 0xc1, 0xdc, 0x51, 0x98, 0x23, 0x5f, 0x43, 0xaf, 0xa0, 0x5c, 0x74, 0xb3, 0x02, 0x29,
		0x7e, 0x32, 0x25, 0x00, 0x15, 0x25, 0x5f, 0xa4, 0xdc, 0x73, 0xc4, 0xa5, 0xa5, 0xcc, 0xaa, 0x4a,
		0xac, 0xad, 0xbc, 0xda, 0x4a, 0xab, 0xad, 0xac, 0x2f, 0x8a, 0x63, 0x71, 0x3f, 0x77, 0x2c, 0x16,
		0x28, 0xa1, 0xae, 0xf2, 0x95, 0x48, 0x45, 0x4b, 0xd5, 0x8a, 0x8f, 0x3b, 0x79, 0x98, 0xe1, 0x6f,
		0xa3, 0x9b, 0x7f, 0xed, 0xa6, 0x6b, 0x2c, 0xfa, 0x44, 0xbe, 0xd3, 0x3f, 0xc3, 0x70, 0x56, 0xe4,
		0xd3, 0x0f, 0x52, 0xcb, 0xff, 0xab, 0x70, 0x83, 0x1f, 0xe9, 0x0f, 0x36, 0xd6, 0xf4, 0x97, 0x9d,
		0x97, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0xbd, 0x5e, 0x3e, 0xd1,
		0x6e, 0x9a, 0x03, 0x00,
	}
)


// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
func initΛEnumTypes(){
  ΛEnumTypes = map[string][]reflect.Type{
	"/interfaces-state/interface/admin-status": []reflect.Type{
		reflect.TypeOf((E_IETFInterfaces_InterfacesState_Interface_AdminStatus)(0)),
	},
	"/interfaces-state/interface/oper-status": []reflect.Type{
		reflect.TypeOf((E_IETFInterfaces_InterfacesState_Interface_OperStatus)(0)),
	},
	"/interfaces-state/interface/type": []reflect.Type{
		reflect.TypeOf((E_IETFInterfaces_InterfaceType)(0)),
	},
	"/interfaces/interface/admin-status": []reflect.Type{
		reflect.TypeOf((E_IETFInterfaces_Interfaces_Interface_AdminStatus)(0)),
	},
	"/interfaces/interface/gate-parameter-table/admin-control-list/gate-control-entry/operation-name": []reflect.Type{
		reflect.TypeOf((E_Ieee802Dot1QTypes_TypeOfOperation)(0)),
	},
	"/interfaces/interface/gate-parameter-table/oper-control-list/gate-control-entry/operation-name": []reflect.Type{
		reflect.TypeOf((E_Ieee802Dot1QTypes_TypeOfOperation)(0)),
	},
	"/interfaces/interface/link-up-down-trap-enable": []reflect.Type{
		reflect.TypeOf((E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable)(0)),
	},
	"/interfaces/interface/oper-status": []reflect.Type{
		reflect.TypeOf((E_IETFInterfaces_Interfaces_Interface_OperStatus)(0)),
	},
	"/interfaces/interface/type": []reflect.Type{
		reflect.TypeOf((E_IETFInterfaces_InterfaceType)(0)),
	},
  }
}

