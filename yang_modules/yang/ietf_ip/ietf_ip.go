/*
Package ietf_ip is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by C:/Users/hamza/go/pkg/mod/github.com/openconfig/ygot@v0.27.0/genutil/names.go
using the following YANG input files:
	- ietf-ip@2018-02-22.yang
Imported modules were sourced from:
	- ...
*/
package ietf_ip

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

var (
	SchemaTree map[string]*yang.Entry
	ΛEnumTypes map[string][]reflect.Type
)

func init() {
	var err error
	initΛEnumTypes()
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " +  err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root: &Device{},
		SchemaTree: uzp,
		Unmarshal: Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn )
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// Device represents the /device YANG schema element.
type Device struct {
	Interfaces	*IETFInterfaces_Interfaces	`path:"interfaces" module:"ietf-interfaces"`
	InterfacesState	*IETFInterfaces_InterfacesState	`path:"interfaces-state" module:"ietf-interfaces"`
}

// IsYANGGoStruct ensures that Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Device) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Device"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Device) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Device.
func (*Device) ΛBelongingModule() string {
	return ""
}


// IETFInterfaces_Interfaces represents the /ietf-interfaces/interfaces YANG schema element.
type IETFInterfaces_Interfaces struct {
	Interface	map[string]*IETFInterfaces_Interfaces_Interface	`path:"interface" module:"ietf-interfaces"`
}

// IsYANGGoStruct ensures that IETFInterfaces_Interfaces implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_Interfaces) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// IETFInterfaces_Interfaces struct. The keys of the list are populated from the input
// arguments.
func (t *IETFInterfaces_Interfaces) NewInterface(Name string) (*IETFInterfaces_Interfaces_Interface, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*IETFInterfaces_Interfaces_Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &IETFInterfaces_Interfaces_Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_Interfaces"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_Interfaces) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_Interfaces.
func (*IETFInterfaces_Interfaces) ΛBelongingModule() string {
	return "ietf-interfaces"
}


// IETFInterfaces_InterfacesState represents the /ietf-interfaces/interfaces-state YANG schema element.
type IETFInterfaces_InterfacesState struct {
	Interface	map[string]*IETFInterfaces_InterfacesState_Interface	`path:"interface" module:"ietf-interfaces"`
}

// IsYANGGoStruct ensures that IETFInterfaces_InterfacesState implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_InterfacesState) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// IETFInterfaces_InterfacesState struct. The keys of the list are populated from the input
// arguments.
func (t *IETFInterfaces_InterfacesState) NewInterface(Name string) (*IETFInterfaces_InterfacesState_Interface, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*IETFInterfaces_InterfacesState_Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &IETFInterfaces_InterfacesState_Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_InterfacesState) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_InterfacesState"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_InterfacesState) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_InterfacesState) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_InterfacesState.
func (*IETFInterfaces_InterfacesState) ΛBelongingModule() string {
	return "ietf-interfaces"
}


// IETFInterfaces_InterfacesState_Interface represents the /ietf-interfaces/interfaces-state/interface YANG schema element.
type IETFInterfaces_InterfacesState_Interface struct {
	AdminStatus	E_IETFInterfaces_InterfacesState_Interface_AdminStatus	`path:"admin-status" module:"ietf-interfaces"`
	HigherLayerIf	[]string	`path:"higher-layer-if" module:"ietf-interfaces"`
	IfIndex	*int32	`path:"if-index" module:"ietf-interfaces"`
	Ipv4	*IETFInterfaces_InterfacesState_Interface_Ipv4	`path:"ipv4" module:"ietf-ip"`
	Ipv6	*IETFInterfaces_InterfacesState_Interface_Ipv6	`path:"ipv6" module:"ietf-ip"`
	LastChange	*string	`path:"last-change" module:"ietf-interfaces"`
	LowerLayerIf	[]string	`path:"lower-layer-if" module:"ietf-interfaces"`
	Name	*string	`path:"name" module:"ietf-interfaces"`
	OperStatus	E_IETFInterfaces_InterfacesState_Interface_OperStatus	`path:"oper-status" module:"ietf-interfaces"`
	PhysAddress	*string	`path:"phys-address" module:"ietf-interfaces"`
	Speed	*uint64	`path:"speed" module:"ietf-interfaces"`
	Statistics	*IETFInterfaces_InterfacesState_Interface_Statistics	`path:"statistics" module:"ietf-interfaces"`
	Type	E_IETFInterfaces_InterfaceType	`path:"type" module:"ietf-interfaces"`
}

// IsYANGGoStruct ensures that IETFInterfaces_InterfacesState_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_InterfacesState_Interface) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the IETFInterfaces_InterfacesState_Interface struct, which is a YANG list entry.
func (t *IETFInterfaces_InterfacesState_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_InterfacesState_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_InterfacesState_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_InterfacesState_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_InterfacesState_Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_InterfacesState_Interface.
func (*IETFInterfaces_InterfacesState_Interface) ΛBelongingModule() string {
	return "ietf-interfaces"
}


// IETFInterfaces_InterfacesState_Interface_Ipv4 represents the /ietf-interfaces/interfaces-state/interface/ipv4 YANG schema element.
type IETFInterfaces_InterfacesState_Interface_Ipv4 struct {
	Address	map[string]*IETFInterfaces_InterfacesState_Interface_Ipv4_Address	`path:"address" module:"ietf-ip"`
	Forwarding	*bool	`path:"forwarding" module:"ietf-ip"`
	Mtu	*uint16	`path:"mtu" module:"ietf-ip"`
	Neighbor	map[string]*IETFInterfaces_InterfacesState_Interface_Ipv4_Neighbor	`path:"neighbor" module:"ietf-ip"`
}

// IsYANGGoStruct ensures that IETFInterfaces_InterfacesState_Interface_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_InterfacesState_Interface_Ipv4) IsYANGGoStruct() {}

// NewAddress creates a new entry in the Address list of the
// IETFInterfaces_InterfacesState_Interface_Ipv4 struct. The keys of the list are populated from the input
// arguments.
func (t *IETFInterfaces_InterfacesState_Interface_Ipv4) NewAddress(Ip string) (*IETFInterfaces_InterfacesState_Interface_Ipv4_Address, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*IETFInterfaces_InterfacesState_Interface_Ipv4_Address)
	}

	key := Ip

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Address[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Address", key)
	}

	t.Address[key] = &IETFInterfaces_InterfacesState_Interface_Ipv4_Address{
		Ip: &Ip,
	}

	return t.Address[key], nil
}

// NewNeighbor creates a new entry in the Neighbor list of the
// IETFInterfaces_InterfacesState_Interface_Ipv4 struct. The keys of the list are populated from the input
// arguments.
func (t *IETFInterfaces_InterfacesState_Interface_Ipv4) NewNeighbor(Ip string) (*IETFInterfaces_InterfacesState_Interface_Ipv4_Neighbor, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*IETFInterfaces_InterfacesState_Interface_Ipv4_Neighbor)
	}

	key := Ip

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &IETFInterfaces_InterfacesState_Interface_Ipv4_Neighbor{
		Ip: &Ip,
	}

	return t.Neighbor[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_InterfacesState_Interface_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_InterfacesState_Interface_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_InterfacesState_Interface_Ipv4) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_InterfacesState_Interface_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_InterfacesState_Interface_Ipv4.
func (*IETFInterfaces_InterfacesState_Interface_Ipv4) ΛBelongingModule() string {
	return "ietf-ip"
}


// IETFInterfaces_InterfacesState_Interface_Ipv4_Address represents the /ietf-interfaces/interfaces-state/interface/ipv4/address YANG schema element.
type IETFInterfaces_InterfacesState_Interface_Ipv4_Address struct {
	Ip	*string	`path:"ip" module:"ietf-ip"`
	Netmask	*string	`path:"netmask" module:"ietf-ip"`
	Origin	E_IETFIp_IpAddressOrigin	`path:"origin" module:"ietf-ip"`
	PrefixLength	*uint8	`path:"prefix-length" module:"ietf-ip"`
}

// IsYANGGoStruct ensures that IETFInterfaces_InterfacesState_Interface_Ipv4_Address implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_InterfacesState_Interface_Ipv4_Address) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the IETFInterfaces_InterfacesState_Interface_Ipv4_Address struct, which is a YANG list entry.
func (t *IETFInterfaces_InterfacesState_Interface_Ipv4_Address) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ip == nil {
		return nil, fmt.Errorf("nil value for key Ip")
	}

	return map[string]interface{}{
		"ip": *t.Ip,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_InterfacesState_Interface_Ipv4_Address) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_InterfacesState_Interface_Ipv4_Address"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_InterfacesState_Interface_Ipv4_Address) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_InterfacesState_Interface_Ipv4_Address) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_InterfacesState_Interface_Ipv4_Address.
func (*IETFInterfaces_InterfacesState_Interface_Ipv4_Address) ΛBelongingModule() string {
	return "ietf-ip"
}


// IETFInterfaces_InterfacesState_Interface_Ipv4_Neighbor represents the /ietf-interfaces/interfaces-state/interface/ipv4/neighbor YANG schema element.
type IETFInterfaces_InterfacesState_Interface_Ipv4_Neighbor struct {
	Ip	*string	`path:"ip" module:"ietf-ip"`
	LinkLayerAddress	*string	`path:"link-layer-address" module:"ietf-ip"`
	Origin	E_IETFIp_NeighborOrigin	`path:"origin" module:"ietf-ip"`
}

// IsYANGGoStruct ensures that IETFInterfaces_InterfacesState_Interface_Ipv4_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_InterfacesState_Interface_Ipv4_Neighbor) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the IETFInterfaces_InterfacesState_Interface_Ipv4_Neighbor struct, which is a YANG list entry.
func (t *IETFInterfaces_InterfacesState_Interface_Ipv4_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ip == nil {
		return nil, fmt.Errorf("nil value for key Ip")
	}

	return map[string]interface{}{
		"ip": *t.Ip,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_InterfacesState_Interface_Ipv4_Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_InterfacesState_Interface_Ipv4_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_InterfacesState_Interface_Ipv4_Neighbor) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_InterfacesState_Interface_Ipv4_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_InterfacesState_Interface_Ipv4_Neighbor.
func (*IETFInterfaces_InterfacesState_Interface_Ipv4_Neighbor) ΛBelongingModule() string {
	return "ietf-ip"
}


// IETFInterfaces_InterfacesState_Interface_Ipv6 represents the /ietf-interfaces/interfaces-state/interface/ipv6 YANG schema element.
type IETFInterfaces_InterfacesState_Interface_Ipv6 struct {
	Address	map[string]*IETFInterfaces_InterfacesState_Interface_Ipv6_Address	`path:"address" module:"ietf-ip"`
	Forwarding	*bool	`path:"forwarding" module:"ietf-ip"`
	Mtu	*uint32	`path:"mtu" module:"ietf-ip"`
	Neighbor	map[string]*IETFInterfaces_InterfacesState_Interface_Ipv6_Neighbor	`path:"neighbor" module:"ietf-ip"`
}

// IsYANGGoStruct ensures that IETFInterfaces_InterfacesState_Interface_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_InterfacesState_Interface_Ipv6) IsYANGGoStruct() {}

// NewAddress creates a new entry in the Address list of the
// IETFInterfaces_InterfacesState_Interface_Ipv6 struct. The keys of the list are populated from the input
// arguments.
func (t *IETFInterfaces_InterfacesState_Interface_Ipv6) NewAddress(Ip string) (*IETFInterfaces_InterfacesState_Interface_Ipv6_Address, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*IETFInterfaces_InterfacesState_Interface_Ipv6_Address)
	}

	key := Ip

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Address[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Address", key)
	}

	t.Address[key] = &IETFInterfaces_InterfacesState_Interface_Ipv6_Address{
		Ip: &Ip,
	}

	return t.Address[key], nil
}

// NewNeighbor creates a new entry in the Neighbor list of the
// IETFInterfaces_InterfacesState_Interface_Ipv6 struct. The keys of the list are populated from the input
// arguments.
func (t *IETFInterfaces_InterfacesState_Interface_Ipv6) NewNeighbor(Ip string) (*IETFInterfaces_InterfacesState_Interface_Ipv6_Neighbor, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*IETFInterfaces_InterfacesState_Interface_Ipv6_Neighbor)
	}

	key := Ip

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &IETFInterfaces_InterfacesState_Interface_Ipv6_Neighbor{
		Ip: &Ip,
	}

	return t.Neighbor[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_InterfacesState_Interface_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_InterfacesState_Interface_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_InterfacesState_Interface_Ipv6) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_InterfacesState_Interface_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_InterfacesState_Interface_Ipv6.
func (*IETFInterfaces_InterfacesState_Interface_Ipv6) ΛBelongingModule() string {
	return "ietf-ip"
}


// IETFInterfaces_InterfacesState_Interface_Ipv6_Address represents the /ietf-interfaces/interfaces-state/interface/ipv6/address YANG schema element.
type IETFInterfaces_InterfacesState_Interface_Ipv6_Address struct {
	Ip	*string	`path:"ip" module:"ietf-ip"`
	Origin	E_IETFIp_IpAddressOrigin	`path:"origin" module:"ietf-ip"`
	PrefixLength	*uint8	`path:"prefix-length" module:"ietf-ip"`
	Status	E_IETFInterfaces_InterfacesState_Interface_Ipv6_Address_Status	`path:"status" module:"ietf-ip"`
}

// IsYANGGoStruct ensures that IETFInterfaces_InterfacesState_Interface_Ipv6_Address implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_InterfacesState_Interface_Ipv6_Address) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the IETFInterfaces_InterfacesState_Interface_Ipv6_Address struct, which is a YANG list entry.
func (t *IETFInterfaces_InterfacesState_Interface_Ipv6_Address) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ip == nil {
		return nil, fmt.Errorf("nil value for key Ip")
	}

	return map[string]interface{}{
		"ip": *t.Ip,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_InterfacesState_Interface_Ipv6_Address) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_InterfacesState_Interface_Ipv6_Address"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_InterfacesState_Interface_Ipv6_Address) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_InterfacesState_Interface_Ipv6_Address) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_InterfacesState_Interface_Ipv6_Address.
func (*IETFInterfaces_InterfacesState_Interface_Ipv6_Address) ΛBelongingModule() string {
	return "ietf-ip"
}


// IETFInterfaces_InterfacesState_Interface_Ipv6_Neighbor represents the /ietf-interfaces/interfaces-state/interface/ipv6/neighbor YANG schema element.
type IETFInterfaces_InterfacesState_Interface_Ipv6_Neighbor struct {
	Ip	*string	`path:"ip" module:"ietf-ip"`
	IsRouter	YANGEmpty	`path:"is-router" module:"ietf-ip"`
	LinkLayerAddress	*string	`path:"link-layer-address" module:"ietf-ip"`
	Origin	E_IETFIp_NeighborOrigin	`path:"origin" module:"ietf-ip"`
	State	E_IETFInterfaces_InterfacesState_Interface_Ipv6_Neighbor_State	`path:"state" module:"ietf-ip"`
}

// IsYANGGoStruct ensures that IETFInterfaces_InterfacesState_Interface_Ipv6_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_InterfacesState_Interface_Ipv6_Neighbor) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the IETFInterfaces_InterfacesState_Interface_Ipv6_Neighbor struct, which is a YANG list entry.
func (t *IETFInterfaces_InterfacesState_Interface_Ipv6_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ip == nil {
		return nil, fmt.Errorf("nil value for key Ip")
	}

	return map[string]interface{}{
		"ip": *t.Ip,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_InterfacesState_Interface_Ipv6_Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_InterfacesState_Interface_Ipv6_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_InterfacesState_Interface_Ipv6_Neighbor) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_InterfacesState_Interface_Ipv6_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_InterfacesState_Interface_Ipv6_Neighbor.
func (*IETFInterfaces_InterfacesState_Interface_Ipv6_Neighbor) ΛBelongingModule() string {
	return "ietf-ip"
}


// IETFInterfaces_InterfacesState_Interface_Statistics represents the /ietf-interfaces/interfaces-state/interface/statistics YANG schema element.
type IETFInterfaces_InterfacesState_Interface_Statistics struct {
	DiscontinuityTime	*string	`path:"discontinuity-time" module:"ietf-interfaces"`
	InBroadcastPkts	*uint64	`path:"in-broadcast-pkts" module:"ietf-interfaces"`
	InDiscards	*uint32	`path:"in-discards" module:"ietf-interfaces"`
	InErrors	*uint32	`path:"in-errors" module:"ietf-interfaces"`
	InMulticastPkts	*uint64	`path:"in-multicast-pkts" module:"ietf-interfaces"`
	InOctets	*uint64	`path:"in-octets" module:"ietf-interfaces"`
	InUnicastPkts	*uint64	`path:"in-unicast-pkts" module:"ietf-interfaces"`
	InUnknownProtos	*uint32	`path:"in-unknown-protos" module:"ietf-interfaces"`
	OutBroadcastPkts	*uint64	`path:"out-broadcast-pkts" module:"ietf-interfaces"`
	OutDiscards	*uint32	`path:"out-discards" module:"ietf-interfaces"`
	OutErrors	*uint32	`path:"out-errors" module:"ietf-interfaces"`
	OutMulticastPkts	*uint64	`path:"out-multicast-pkts" module:"ietf-interfaces"`
	OutOctets	*uint64	`path:"out-octets" module:"ietf-interfaces"`
	OutUnicastPkts	*uint64	`path:"out-unicast-pkts" module:"ietf-interfaces"`
}

// IsYANGGoStruct ensures that IETFInterfaces_InterfacesState_Interface_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_InterfacesState_Interface_Statistics) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_InterfacesState_Interface_Statistics) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_InterfacesState_Interface_Statistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_InterfacesState_Interface_Statistics) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_InterfacesState_Interface_Statistics) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_InterfacesState_Interface_Statistics.
func (*IETFInterfaces_InterfacesState_Interface_Statistics) ΛBelongingModule() string {
	return "ietf-interfaces"
}


// IETFInterfaces_Interfaces_Interface represents the /ietf-interfaces/interfaces/interface YANG schema element.
type IETFInterfaces_Interfaces_Interface struct {
	AdminStatus	E_IETFInterfaces_Interfaces_Interface_AdminStatus	`path:"admin-status" module:"ietf-interfaces"`
	Description	*string	`path:"description" module:"ietf-interfaces"`
	Enabled	*bool	`path:"enabled" module:"ietf-interfaces"`
	HigherLayerIf	[]string	`path:"higher-layer-if" module:"ietf-interfaces"`
	IfIndex	*int32	`path:"if-index" module:"ietf-interfaces"`
	Ipv4	*IETFInterfaces_Interfaces_Interface_Ipv4	`path:"ipv4" module:"ietf-ip"`
	Ipv6	*IETFInterfaces_Interfaces_Interface_Ipv6	`path:"ipv6" module:"ietf-ip"`
	LastChange	*string	`path:"last-change" module:"ietf-interfaces"`
	LinkUpDownTrapEnable	E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable	`path:"link-up-down-trap-enable" module:"ietf-interfaces"`
	LowerLayerIf	[]string	`path:"lower-layer-if" module:"ietf-interfaces"`
	Name	*string	`path:"name" module:"ietf-interfaces"`
	OperStatus	E_IETFInterfaces_Interfaces_Interface_OperStatus	`path:"oper-status" module:"ietf-interfaces"`
	PhysAddress	*string	`path:"phys-address" module:"ietf-interfaces"`
	Speed	*uint64	`path:"speed" module:"ietf-interfaces"`
	Statistics	*IETFInterfaces_Interfaces_Interface_Statistics	`path:"statistics" module:"ietf-interfaces"`
	Type	E_IETFInterfaces_InterfaceType	`path:"type" module:"ietf-interfaces"`
}

// IsYANGGoStruct ensures that IETFInterfaces_Interfaces_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_Interfaces_Interface) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the IETFInterfaces_Interfaces_Interface struct, which is a YANG list entry.
func (t *IETFInterfaces_Interfaces_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_Interfaces_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_Interfaces_Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_Interfaces_Interface.
func (*IETFInterfaces_Interfaces_Interface) ΛBelongingModule() string {
	return "ietf-interfaces"
}


// IETFInterfaces_Interfaces_Interface_Ipv4 represents the /ietf-interfaces/interfaces/interface/ipv4 YANG schema element.
type IETFInterfaces_Interfaces_Interface_Ipv4 struct {
	Address	map[string]*IETFInterfaces_Interfaces_Interface_Ipv4_Address	`path:"address" module:"ietf-ip"`
	Enabled	*bool	`path:"enabled" module:"ietf-ip"`
	Forwarding	*bool	`path:"forwarding" module:"ietf-ip"`
	Mtu	*uint16	`path:"mtu" module:"ietf-ip"`
	Neighbor	map[string]*IETFInterfaces_Interfaces_Interface_Ipv4_Neighbor	`path:"neighbor" module:"ietf-ip"`
}

// IsYANGGoStruct ensures that IETFInterfaces_Interfaces_Interface_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_Interfaces_Interface_Ipv4) IsYANGGoStruct() {}

// NewAddress creates a new entry in the Address list of the
// IETFInterfaces_Interfaces_Interface_Ipv4 struct. The keys of the list are populated from the input
// arguments.
func (t *IETFInterfaces_Interfaces_Interface_Ipv4) NewAddress(Ip string) (*IETFInterfaces_Interfaces_Interface_Ipv4_Address, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*IETFInterfaces_Interfaces_Interface_Ipv4_Address)
	}

	key := Ip

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Address[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Address", key)
	}

	t.Address[key] = &IETFInterfaces_Interfaces_Interface_Ipv4_Address{
		Ip: &Ip,
	}

	return t.Address[key], nil
}

// NewNeighbor creates a new entry in the Neighbor list of the
// IETFInterfaces_Interfaces_Interface_Ipv4 struct. The keys of the list are populated from the input
// arguments.
func (t *IETFInterfaces_Interfaces_Interface_Ipv4) NewNeighbor(Ip string) (*IETFInterfaces_Interfaces_Interface_Ipv4_Neighbor, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*IETFInterfaces_Interfaces_Interface_Ipv4_Neighbor)
	}

	key := Ip

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &IETFInterfaces_Interfaces_Interface_Ipv4_Neighbor{
		Ip: &Ip,
	}

	return t.Neighbor[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_Interfaces_Interface_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_Ipv4) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_Interfaces_Interface_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_Interfaces_Interface_Ipv4.
func (*IETFInterfaces_Interfaces_Interface_Ipv4) ΛBelongingModule() string {
	return "ietf-ip"
}


// IETFInterfaces_Interfaces_Interface_Ipv4_Address represents the /ietf-interfaces/interfaces/interface/ipv4/address YANG schema element.
type IETFInterfaces_Interfaces_Interface_Ipv4_Address struct {
	Ip	*string	`path:"ip" module:"ietf-ip"`
	Netmask	*string	`path:"netmask" module:"ietf-ip"`
	Origin	E_IETFIp_IpAddressOrigin	`path:"origin" module:"ietf-ip"`
	PrefixLength	*uint8	`path:"prefix-length" module:"ietf-ip"`
}

// IsYANGGoStruct ensures that IETFInterfaces_Interfaces_Interface_Ipv4_Address implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_Interfaces_Interface_Ipv4_Address) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the IETFInterfaces_Interfaces_Interface_Ipv4_Address struct, which is a YANG list entry.
func (t *IETFInterfaces_Interfaces_Interface_Ipv4_Address) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ip == nil {
		return nil, fmt.Errorf("nil value for key Ip")
	}

	return map[string]interface{}{
		"ip": *t.Ip,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_Ipv4_Address) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_Interfaces_Interface_Ipv4_Address"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_Ipv4_Address) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_Interfaces_Interface_Ipv4_Address) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_Interfaces_Interface_Ipv4_Address.
func (*IETFInterfaces_Interfaces_Interface_Ipv4_Address) ΛBelongingModule() string {
	return "ietf-ip"
}


// IETFInterfaces_Interfaces_Interface_Ipv4_Neighbor represents the /ietf-interfaces/interfaces/interface/ipv4/neighbor YANG schema element.
type IETFInterfaces_Interfaces_Interface_Ipv4_Neighbor struct {
	Ip	*string	`path:"ip" module:"ietf-ip"`
	LinkLayerAddress	*string	`path:"link-layer-address" module:"ietf-ip"`
	Origin	E_IETFIp_NeighborOrigin	`path:"origin" module:"ietf-ip"`
}

// IsYANGGoStruct ensures that IETFInterfaces_Interfaces_Interface_Ipv4_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_Interfaces_Interface_Ipv4_Neighbor) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the IETFInterfaces_Interfaces_Interface_Ipv4_Neighbor struct, which is a YANG list entry.
func (t *IETFInterfaces_Interfaces_Interface_Ipv4_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ip == nil {
		return nil, fmt.Errorf("nil value for key Ip")
	}

	return map[string]interface{}{
		"ip": *t.Ip,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_Ipv4_Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_Interfaces_Interface_Ipv4_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_Ipv4_Neighbor) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_Interfaces_Interface_Ipv4_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_Interfaces_Interface_Ipv4_Neighbor.
func (*IETFInterfaces_Interfaces_Interface_Ipv4_Neighbor) ΛBelongingModule() string {
	return "ietf-ip"
}


// IETFInterfaces_Interfaces_Interface_Ipv6 represents the /ietf-interfaces/interfaces/interface/ipv6 YANG schema element.
type IETFInterfaces_Interfaces_Interface_Ipv6 struct {
	Address	map[string]*IETFInterfaces_Interfaces_Interface_Ipv6_Address	`path:"address" module:"ietf-ip"`
	Autoconf	*IETFInterfaces_Interfaces_Interface_Ipv6_Autoconf	`path:"autoconf" module:"ietf-ip"`
	DupAddrDetectTransmits	*uint32	`path:"dup-addr-detect-transmits" module:"ietf-ip"`
	Enabled	*bool	`path:"enabled" module:"ietf-ip"`
	Forwarding	*bool	`path:"forwarding" module:"ietf-ip"`
	Mtu	*uint32	`path:"mtu" module:"ietf-ip"`
	Neighbor	map[string]*IETFInterfaces_Interfaces_Interface_Ipv6_Neighbor	`path:"neighbor" module:"ietf-ip"`
}

// IsYANGGoStruct ensures that IETFInterfaces_Interfaces_Interface_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_Interfaces_Interface_Ipv6) IsYANGGoStruct() {}

// NewAddress creates a new entry in the Address list of the
// IETFInterfaces_Interfaces_Interface_Ipv6 struct. The keys of the list are populated from the input
// arguments.
func (t *IETFInterfaces_Interfaces_Interface_Ipv6) NewAddress(Ip string) (*IETFInterfaces_Interfaces_Interface_Ipv6_Address, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*IETFInterfaces_Interfaces_Interface_Ipv6_Address)
	}

	key := Ip

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Address[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Address", key)
	}

	t.Address[key] = &IETFInterfaces_Interfaces_Interface_Ipv6_Address{
		Ip: &Ip,
	}

	return t.Address[key], nil
}

// NewNeighbor creates a new entry in the Neighbor list of the
// IETFInterfaces_Interfaces_Interface_Ipv6 struct. The keys of the list are populated from the input
// arguments.
func (t *IETFInterfaces_Interfaces_Interface_Ipv6) NewNeighbor(Ip string) (*IETFInterfaces_Interfaces_Interface_Ipv6_Neighbor, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*IETFInterfaces_Interfaces_Interface_Ipv6_Neighbor)
	}

	key := Ip

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &IETFInterfaces_Interfaces_Interface_Ipv6_Neighbor{
		Ip: &Ip,
	}

	return t.Neighbor[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_Interfaces_Interface_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_Ipv6) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_Interfaces_Interface_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_Interfaces_Interface_Ipv6.
func (*IETFInterfaces_Interfaces_Interface_Ipv6) ΛBelongingModule() string {
	return "ietf-ip"
}


// IETFInterfaces_Interfaces_Interface_Ipv6_Address represents the /ietf-interfaces/interfaces/interface/ipv6/address YANG schema element.
type IETFInterfaces_Interfaces_Interface_Ipv6_Address struct {
	Ip	*string	`path:"ip" module:"ietf-ip"`
	Origin	E_IETFIp_IpAddressOrigin	`path:"origin" module:"ietf-ip"`
	PrefixLength	*uint8	`path:"prefix-length" module:"ietf-ip"`
	Status	E_IETFInterfaces_Interfaces_Interface_Ipv6_Address_Status	`path:"status" module:"ietf-ip"`
}

// IsYANGGoStruct ensures that IETFInterfaces_Interfaces_Interface_Ipv6_Address implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_Interfaces_Interface_Ipv6_Address) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the IETFInterfaces_Interfaces_Interface_Ipv6_Address struct, which is a YANG list entry.
func (t *IETFInterfaces_Interfaces_Interface_Ipv6_Address) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ip == nil {
		return nil, fmt.Errorf("nil value for key Ip")
	}

	return map[string]interface{}{
		"ip": *t.Ip,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_Ipv6_Address) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_Interfaces_Interface_Ipv6_Address"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_Ipv6_Address) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_Interfaces_Interface_Ipv6_Address) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_Interfaces_Interface_Ipv6_Address.
func (*IETFInterfaces_Interfaces_Interface_Ipv6_Address) ΛBelongingModule() string {
	return "ietf-ip"
}


// IETFInterfaces_Interfaces_Interface_Ipv6_Autoconf represents the /ietf-interfaces/interfaces/interface/ipv6/autoconf YANG schema element.
type IETFInterfaces_Interfaces_Interface_Ipv6_Autoconf struct {
	CreateGlobalAddresses	*bool	`path:"create-global-addresses" module:"ietf-ip"`
	CreateTemporaryAddresses	*bool	`path:"create-temporary-addresses" module:"ietf-ip"`
	TemporaryPreferredLifetime	*uint32	`path:"temporary-preferred-lifetime" module:"ietf-ip"`
	TemporaryValidLifetime	*uint32	`path:"temporary-valid-lifetime" module:"ietf-ip"`
}

// IsYANGGoStruct ensures that IETFInterfaces_Interfaces_Interface_Ipv6_Autoconf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_Interfaces_Interface_Ipv6_Autoconf) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_Ipv6_Autoconf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_Interfaces_Interface_Ipv6_Autoconf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_Ipv6_Autoconf) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_Interfaces_Interface_Ipv6_Autoconf) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_Interfaces_Interface_Ipv6_Autoconf.
func (*IETFInterfaces_Interfaces_Interface_Ipv6_Autoconf) ΛBelongingModule() string {
	return "ietf-ip"
}


// IETFInterfaces_Interfaces_Interface_Ipv6_Neighbor represents the /ietf-interfaces/interfaces/interface/ipv6/neighbor YANG schema element.
type IETFInterfaces_Interfaces_Interface_Ipv6_Neighbor struct {
	Ip	*string	`path:"ip" module:"ietf-ip"`
	IsRouter	YANGEmpty	`path:"is-router" module:"ietf-ip"`
	LinkLayerAddress	*string	`path:"link-layer-address" module:"ietf-ip"`
	Origin	E_IETFIp_NeighborOrigin	`path:"origin" module:"ietf-ip"`
	State	E_IETFInterfaces_Interfaces_Interface_Ipv6_Neighbor_State	`path:"state" module:"ietf-ip"`
}

// IsYANGGoStruct ensures that IETFInterfaces_Interfaces_Interface_Ipv6_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_Interfaces_Interface_Ipv6_Neighbor) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the IETFInterfaces_Interfaces_Interface_Ipv6_Neighbor struct, which is a YANG list entry.
func (t *IETFInterfaces_Interfaces_Interface_Ipv6_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ip == nil {
		return nil, fmt.Errorf("nil value for key Ip")
	}

	return map[string]interface{}{
		"ip": *t.Ip,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_Ipv6_Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_Interfaces_Interface_Ipv6_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_Ipv6_Neighbor) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_Interfaces_Interface_Ipv6_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_Interfaces_Interface_Ipv6_Neighbor.
func (*IETFInterfaces_Interfaces_Interface_Ipv6_Neighbor) ΛBelongingModule() string {
	return "ietf-ip"
}


// IETFInterfaces_Interfaces_Interface_Statistics represents the /ietf-interfaces/interfaces/interface/statistics YANG schema element.
type IETFInterfaces_Interfaces_Interface_Statistics struct {
	DiscontinuityTime	*string	`path:"discontinuity-time" module:"ietf-interfaces"`
	InBroadcastPkts	*uint64	`path:"in-broadcast-pkts" module:"ietf-interfaces"`
	InDiscards	*uint32	`path:"in-discards" module:"ietf-interfaces"`
	InErrors	*uint32	`path:"in-errors" module:"ietf-interfaces"`
	InMulticastPkts	*uint64	`path:"in-multicast-pkts" module:"ietf-interfaces"`
	InOctets	*uint64	`path:"in-octets" module:"ietf-interfaces"`
	InUnicastPkts	*uint64	`path:"in-unicast-pkts" module:"ietf-interfaces"`
	InUnknownProtos	*uint32	`path:"in-unknown-protos" module:"ietf-interfaces"`
	OutBroadcastPkts	*uint64	`path:"out-broadcast-pkts" module:"ietf-interfaces"`
	OutDiscards	*uint32	`path:"out-discards" module:"ietf-interfaces"`
	OutErrors	*uint32	`path:"out-errors" module:"ietf-interfaces"`
	OutMulticastPkts	*uint64	`path:"out-multicast-pkts" module:"ietf-interfaces"`
	OutOctets	*uint64	`path:"out-octets" module:"ietf-interfaces"`
	OutUnicastPkts	*uint64	`path:"out-unicast-pkts" module:"ietf-interfaces"`
}

// IsYANGGoStruct ensures that IETFInterfaces_Interfaces_Interface_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_Interfaces_Interface_Statistics) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_Statistics) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_Interfaces_Interface_Statistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_Statistics) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_Interfaces_Interface_Statistics) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFInterfaces_Interfaces_Interface_Statistics.
func (*IETFInterfaces_Interfaces_Interface_Statistics) ΛBelongingModule() string {
	return "ietf-interfaces"
}


// E_IETFInterfaces_InterfaceType is a derived int64 type which is used to represent
// the enumerated node IETFInterfaces_InterfaceType. An additional value named
// IETFInterfaces_InterfaceType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFInterfaces_InterfaceType int64

// IsYANGGoEnum ensures that IETFInterfaces_InterfaceType implements the yang.GoEnum
// interface. This ensures that IETFInterfaces_InterfaceType can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFInterfaces_InterfaceType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFInterfaces_InterfaceType.
func (E_IETFInterfaces_InterfaceType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_IETFInterfaces_InterfaceType.
func (e E_IETFInterfaces_InterfaceType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFInterfaces_InterfaceType")
}

const (
	// IETFInterfaces_InterfaceType_UNSET corresponds to the value UNSET of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_UNSET E_IETFInterfaces_InterfaceType = 0
)


// E_IETFInterfaces_InterfacesState_Interface_AdminStatus is a derived int64 type which is used to represent
// the enumerated node IETFInterfaces_InterfacesState_Interface_AdminStatus. An additional value named
// IETFInterfaces_InterfacesState_Interface_AdminStatus_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFInterfaces_InterfacesState_Interface_AdminStatus int64

// IsYANGGoEnum ensures that IETFInterfaces_InterfacesState_Interface_AdminStatus implements the yang.GoEnum
// interface. This ensures that IETFInterfaces_InterfacesState_Interface_AdminStatus can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFInterfaces_InterfacesState_Interface_AdminStatus) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFInterfaces_InterfacesState_Interface_AdminStatus.
func (E_IETFInterfaces_InterfacesState_Interface_AdminStatus) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_IETFInterfaces_InterfacesState_Interface_AdminStatus.
func (e E_IETFInterfaces_InterfacesState_Interface_AdminStatus) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFInterfaces_InterfacesState_Interface_AdminStatus")
}

const (
	// IETFInterfaces_InterfacesState_Interface_AdminStatus_UNSET corresponds to the value UNSET of IETFInterfaces_InterfacesState_Interface_AdminStatus
	IETFInterfaces_InterfacesState_Interface_AdminStatus_UNSET E_IETFInterfaces_InterfacesState_Interface_AdminStatus = 0
	// IETFInterfaces_InterfacesState_Interface_AdminStatus_up corresponds to the value up of IETFInterfaces_InterfacesState_Interface_AdminStatus
	IETFInterfaces_InterfacesState_Interface_AdminStatus_up E_IETFInterfaces_InterfacesState_Interface_AdminStatus = 1
	// IETFInterfaces_InterfacesState_Interface_AdminStatus_down corresponds to the value down of IETFInterfaces_InterfacesState_Interface_AdminStatus
	IETFInterfaces_InterfacesState_Interface_AdminStatus_down E_IETFInterfaces_InterfacesState_Interface_AdminStatus = 2
	// IETFInterfaces_InterfacesState_Interface_AdminStatus_testing corresponds to the value testing of IETFInterfaces_InterfacesState_Interface_AdminStatus
	IETFInterfaces_InterfacesState_Interface_AdminStatus_testing E_IETFInterfaces_InterfacesState_Interface_AdminStatus = 3
)


// E_IETFInterfaces_InterfacesState_Interface_Ipv6_Address_Status is a derived int64 type which is used to represent
// the enumerated node IETFInterfaces_InterfacesState_Interface_Ipv6_Address_Status. An additional value named
// IETFInterfaces_InterfacesState_Interface_Ipv6_Address_Status_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFInterfaces_InterfacesState_Interface_Ipv6_Address_Status int64

// IsYANGGoEnum ensures that IETFInterfaces_InterfacesState_Interface_Ipv6_Address_Status implements the yang.GoEnum
// interface. This ensures that IETFInterfaces_InterfacesState_Interface_Ipv6_Address_Status can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFInterfaces_InterfacesState_Interface_Ipv6_Address_Status) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFInterfaces_InterfacesState_Interface_Ipv6_Address_Status.
func (E_IETFInterfaces_InterfacesState_Interface_Ipv6_Address_Status) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_IETFInterfaces_InterfacesState_Interface_Ipv6_Address_Status.
func (e E_IETFInterfaces_InterfacesState_Interface_Ipv6_Address_Status) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFInterfaces_InterfacesState_Interface_Ipv6_Address_Status")
}

const (
	// IETFInterfaces_InterfacesState_Interface_Ipv6_Address_Status_UNSET corresponds to the value UNSET of IETFInterfaces_InterfacesState_Interface_Ipv6_Address_Status
	IETFInterfaces_InterfacesState_Interface_Ipv6_Address_Status_UNSET E_IETFInterfaces_InterfacesState_Interface_Ipv6_Address_Status = 0
	// IETFInterfaces_InterfacesState_Interface_Ipv6_Address_Status_preferred corresponds to the value preferred of IETFInterfaces_InterfacesState_Interface_Ipv6_Address_Status
	IETFInterfaces_InterfacesState_Interface_Ipv6_Address_Status_preferred E_IETFInterfaces_InterfacesState_Interface_Ipv6_Address_Status = 1
	// IETFInterfaces_InterfacesState_Interface_Ipv6_Address_Status_deprecated corresponds to the value deprecated of IETFInterfaces_InterfacesState_Interface_Ipv6_Address_Status
	IETFInterfaces_InterfacesState_Interface_Ipv6_Address_Status_deprecated E_IETFInterfaces_InterfacesState_Interface_Ipv6_Address_Status = 2
	// IETFInterfaces_InterfacesState_Interface_Ipv6_Address_Status_invalid corresponds to the value invalid of IETFInterfaces_InterfacesState_Interface_Ipv6_Address_Status
	IETFInterfaces_InterfacesState_Interface_Ipv6_Address_Status_invalid E_IETFInterfaces_InterfacesState_Interface_Ipv6_Address_Status = 3
	// IETFInterfaces_InterfacesState_Interface_Ipv6_Address_Status_inaccessible corresponds to the value inaccessible of IETFInterfaces_InterfacesState_Interface_Ipv6_Address_Status
	IETFInterfaces_InterfacesState_Interface_Ipv6_Address_Status_inaccessible E_IETFInterfaces_InterfacesState_Interface_Ipv6_Address_Status = 4
	// IETFInterfaces_InterfacesState_Interface_Ipv6_Address_Status_unknown corresponds to the value unknown of IETFInterfaces_InterfacesState_Interface_Ipv6_Address_Status
	IETFInterfaces_InterfacesState_Interface_Ipv6_Address_Status_unknown E_IETFInterfaces_InterfacesState_Interface_Ipv6_Address_Status = 5
	// IETFInterfaces_InterfacesState_Interface_Ipv6_Address_Status_tentative corresponds to the value tentative of IETFInterfaces_InterfacesState_Interface_Ipv6_Address_Status
	IETFInterfaces_InterfacesState_Interface_Ipv6_Address_Status_tentative E_IETFInterfaces_InterfacesState_Interface_Ipv6_Address_Status = 6
	// IETFInterfaces_InterfacesState_Interface_Ipv6_Address_Status_duplicate corresponds to the value duplicate of IETFInterfaces_InterfacesState_Interface_Ipv6_Address_Status
	IETFInterfaces_InterfacesState_Interface_Ipv6_Address_Status_duplicate E_IETFInterfaces_InterfacesState_Interface_Ipv6_Address_Status = 7
	// IETFInterfaces_InterfacesState_Interface_Ipv6_Address_Status_optimistic corresponds to the value optimistic of IETFInterfaces_InterfacesState_Interface_Ipv6_Address_Status
	IETFInterfaces_InterfacesState_Interface_Ipv6_Address_Status_optimistic E_IETFInterfaces_InterfacesState_Interface_Ipv6_Address_Status = 8
)


// E_IETFInterfaces_InterfacesState_Interface_Ipv6_Neighbor_State is a derived int64 type which is used to represent
// the enumerated node IETFInterfaces_InterfacesState_Interface_Ipv6_Neighbor_State. An additional value named
// IETFInterfaces_InterfacesState_Interface_Ipv6_Neighbor_State_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFInterfaces_InterfacesState_Interface_Ipv6_Neighbor_State int64

// IsYANGGoEnum ensures that IETFInterfaces_InterfacesState_Interface_Ipv6_Neighbor_State implements the yang.GoEnum
// interface. This ensures that IETFInterfaces_InterfacesState_Interface_Ipv6_Neighbor_State can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFInterfaces_InterfacesState_Interface_Ipv6_Neighbor_State) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFInterfaces_InterfacesState_Interface_Ipv6_Neighbor_State.
func (E_IETFInterfaces_InterfacesState_Interface_Ipv6_Neighbor_State) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_IETFInterfaces_InterfacesState_Interface_Ipv6_Neighbor_State.
func (e E_IETFInterfaces_InterfacesState_Interface_Ipv6_Neighbor_State) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFInterfaces_InterfacesState_Interface_Ipv6_Neighbor_State")
}

const (
	// IETFInterfaces_InterfacesState_Interface_Ipv6_Neighbor_State_UNSET corresponds to the value UNSET of IETFInterfaces_InterfacesState_Interface_Ipv6_Neighbor_State
	IETFInterfaces_InterfacesState_Interface_Ipv6_Neighbor_State_UNSET E_IETFInterfaces_InterfacesState_Interface_Ipv6_Neighbor_State = 0
	// IETFInterfaces_InterfacesState_Interface_Ipv6_Neighbor_State_incomplete corresponds to the value incomplete of IETFInterfaces_InterfacesState_Interface_Ipv6_Neighbor_State
	IETFInterfaces_InterfacesState_Interface_Ipv6_Neighbor_State_incomplete E_IETFInterfaces_InterfacesState_Interface_Ipv6_Neighbor_State = 1
	// IETFInterfaces_InterfacesState_Interface_Ipv6_Neighbor_State_reachable corresponds to the value reachable of IETFInterfaces_InterfacesState_Interface_Ipv6_Neighbor_State
	IETFInterfaces_InterfacesState_Interface_Ipv6_Neighbor_State_reachable E_IETFInterfaces_InterfacesState_Interface_Ipv6_Neighbor_State = 2
	// IETFInterfaces_InterfacesState_Interface_Ipv6_Neighbor_State_stale corresponds to the value stale of IETFInterfaces_InterfacesState_Interface_Ipv6_Neighbor_State
	IETFInterfaces_InterfacesState_Interface_Ipv6_Neighbor_State_stale E_IETFInterfaces_InterfacesState_Interface_Ipv6_Neighbor_State = 3
	// IETFInterfaces_InterfacesState_Interface_Ipv6_Neighbor_State_delay corresponds to the value delay of IETFInterfaces_InterfacesState_Interface_Ipv6_Neighbor_State
	IETFInterfaces_InterfacesState_Interface_Ipv6_Neighbor_State_delay E_IETFInterfaces_InterfacesState_Interface_Ipv6_Neighbor_State = 4
	// IETFInterfaces_InterfacesState_Interface_Ipv6_Neighbor_State_probe corresponds to the value probe of IETFInterfaces_InterfacesState_Interface_Ipv6_Neighbor_State
	IETFInterfaces_InterfacesState_Interface_Ipv6_Neighbor_State_probe E_IETFInterfaces_InterfacesState_Interface_Ipv6_Neighbor_State = 5
)


// E_IETFInterfaces_InterfacesState_Interface_OperStatus is a derived int64 type which is used to represent
// the enumerated node IETFInterfaces_InterfacesState_Interface_OperStatus. An additional value named
// IETFInterfaces_InterfacesState_Interface_OperStatus_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFInterfaces_InterfacesState_Interface_OperStatus int64

// IsYANGGoEnum ensures that IETFInterfaces_InterfacesState_Interface_OperStatus implements the yang.GoEnum
// interface. This ensures that IETFInterfaces_InterfacesState_Interface_OperStatus can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFInterfaces_InterfacesState_Interface_OperStatus) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFInterfaces_InterfacesState_Interface_OperStatus.
func (E_IETFInterfaces_InterfacesState_Interface_OperStatus) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_IETFInterfaces_InterfacesState_Interface_OperStatus.
func (e E_IETFInterfaces_InterfacesState_Interface_OperStatus) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFInterfaces_InterfacesState_Interface_OperStatus")
}

const (
	// IETFInterfaces_InterfacesState_Interface_OperStatus_UNSET corresponds to the value UNSET of IETFInterfaces_InterfacesState_Interface_OperStatus
	IETFInterfaces_InterfacesState_Interface_OperStatus_UNSET E_IETFInterfaces_InterfacesState_Interface_OperStatus = 0
	// IETFInterfaces_InterfacesState_Interface_OperStatus_up corresponds to the value up of IETFInterfaces_InterfacesState_Interface_OperStatus
	IETFInterfaces_InterfacesState_Interface_OperStatus_up E_IETFInterfaces_InterfacesState_Interface_OperStatus = 1
	// IETFInterfaces_InterfacesState_Interface_OperStatus_down corresponds to the value down of IETFInterfaces_InterfacesState_Interface_OperStatus
	IETFInterfaces_InterfacesState_Interface_OperStatus_down E_IETFInterfaces_InterfacesState_Interface_OperStatus = 2
	// IETFInterfaces_InterfacesState_Interface_OperStatus_testing corresponds to the value testing of IETFInterfaces_InterfacesState_Interface_OperStatus
	IETFInterfaces_InterfacesState_Interface_OperStatus_testing E_IETFInterfaces_InterfacesState_Interface_OperStatus = 3
	// IETFInterfaces_InterfacesState_Interface_OperStatus_unknown corresponds to the value unknown of IETFInterfaces_InterfacesState_Interface_OperStatus
	IETFInterfaces_InterfacesState_Interface_OperStatus_unknown E_IETFInterfaces_InterfacesState_Interface_OperStatus = 4
	// IETFInterfaces_InterfacesState_Interface_OperStatus_dormant corresponds to the value dormant of IETFInterfaces_InterfacesState_Interface_OperStatus
	IETFInterfaces_InterfacesState_Interface_OperStatus_dormant E_IETFInterfaces_InterfacesState_Interface_OperStatus = 5
	// IETFInterfaces_InterfacesState_Interface_OperStatus_not_present corresponds to the value not_present of IETFInterfaces_InterfacesState_Interface_OperStatus
	IETFInterfaces_InterfacesState_Interface_OperStatus_not_present E_IETFInterfaces_InterfacesState_Interface_OperStatus = 6
	// IETFInterfaces_InterfacesState_Interface_OperStatus_lower_layer_down corresponds to the value lower_layer_down of IETFInterfaces_InterfacesState_Interface_OperStatus
	IETFInterfaces_InterfacesState_Interface_OperStatus_lower_layer_down E_IETFInterfaces_InterfacesState_Interface_OperStatus = 7
)


// E_IETFInterfaces_Interfaces_Interface_AdminStatus is a derived int64 type which is used to represent
// the enumerated node IETFInterfaces_Interfaces_Interface_AdminStatus. An additional value named
// IETFInterfaces_Interfaces_Interface_AdminStatus_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFInterfaces_Interfaces_Interface_AdminStatus int64

// IsYANGGoEnum ensures that IETFInterfaces_Interfaces_Interface_AdminStatus implements the yang.GoEnum
// interface. This ensures that IETFInterfaces_Interfaces_Interface_AdminStatus can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFInterfaces_Interfaces_Interface_AdminStatus) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFInterfaces_Interfaces_Interface_AdminStatus.
func (E_IETFInterfaces_Interfaces_Interface_AdminStatus) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_IETFInterfaces_Interfaces_Interface_AdminStatus.
func (e E_IETFInterfaces_Interfaces_Interface_AdminStatus) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFInterfaces_Interfaces_Interface_AdminStatus")
}

const (
	// IETFInterfaces_Interfaces_Interface_AdminStatus_UNSET corresponds to the value UNSET of IETFInterfaces_Interfaces_Interface_AdminStatus
	IETFInterfaces_Interfaces_Interface_AdminStatus_UNSET E_IETFInterfaces_Interfaces_Interface_AdminStatus = 0
	// IETFInterfaces_Interfaces_Interface_AdminStatus_up corresponds to the value up of IETFInterfaces_Interfaces_Interface_AdminStatus
	IETFInterfaces_Interfaces_Interface_AdminStatus_up E_IETFInterfaces_Interfaces_Interface_AdminStatus = 1
	// IETFInterfaces_Interfaces_Interface_AdminStatus_down corresponds to the value down of IETFInterfaces_Interfaces_Interface_AdminStatus
	IETFInterfaces_Interfaces_Interface_AdminStatus_down E_IETFInterfaces_Interfaces_Interface_AdminStatus = 2
	// IETFInterfaces_Interfaces_Interface_AdminStatus_testing corresponds to the value testing of IETFInterfaces_Interfaces_Interface_AdminStatus
	IETFInterfaces_Interfaces_Interface_AdminStatus_testing E_IETFInterfaces_Interfaces_Interface_AdminStatus = 3
)


// E_IETFInterfaces_Interfaces_Interface_Ipv6_Address_Status is a derived int64 type which is used to represent
// the enumerated node IETFInterfaces_Interfaces_Interface_Ipv6_Address_Status. An additional value named
// IETFInterfaces_Interfaces_Interface_Ipv6_Address_Status_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFInterfaces_Interfaces_Interface_Ipv6_Address_Status int64

// IsYANGGoEnum ensures that IETFInterfaces_Interfaces_Interface_Ipv6_Address_Status implements the yang.GoEnum
// interface. This ensures that IETFInterfaces_Interfaces_Interface_Ipv6_Address_Status can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFInterfaces_Interfaces_Interface_Ipv6_Address_Status) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFInterfaces_Interfaces_Interface_Ipv6_Address_Status.
func (E_IETFInterfaces_Interfaces_Interface_Ipv6_Address_Status) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_IETFInterfaces_Interfaces_Interface_Ipv6_Address_Status.
func (e E_IETFInterfaces_Interfaces_Interface_Ipv6_Address_Status) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFInterfaces_Interfaces_Interface_Ipv6_Address_Status")
}

const (
	// IETFInterfaces_Interfaces_Interface_Ipv6_Address_Status_UNSET corresponds to the value UNSET of IETFInterfaces_Interfaces_Interface_Ipv6_Address_Status
	IETFInterfaces_Interfaces_Interface_Ipv6_Address_Status_UNSET E_IETFInterfaces_Interfaces_Interface_Ipv6_Address_Status = 0
	// IETFInterfaces_Interfaces_Interface_Ipv6_Address_Status_preferred corresponds to the value preferred of IETFInterfaces_Interfaces_Interface_Ipv6_Address_Status
	IETFInterfaces_Interfaces_Interface_Ipv6_Address_Status_preferred E_IETFInterfaces_Interfaces_Interface_Ipv6_Address_Status = 1
	// IETFInterfaces_Interfaces_Interface_Ipv6_Address_Status_deprecated corresponds to the value deprecated of IETFInterfaces_Interfaces_Interface_Ipv6_Address_Status
	IETFInterfaces_Interfaces_Interface_Ipv6_Address_Status_deprecated E_IETFInterfaces_Interfaces_Interface_Ipv6_Address_Status = 2
	// IETFInterfaces_Interfaces_Interface_Ipv6_Address_Status_invalid corresponds to the value invalid of IETFInterfaces_Interfaces_Interface_Ipv6_Address_Status
	IETFInterfaces_Interfaces_Interface_Ipv6_Address_Status_invalid E_IETFInterfaces_Interfaces_Interface_Ipv6_Address_Status = 3
	// IETFInterfaces_Interfaces_Interface_Ipv6_Address_Status_inaccessible corresponds to the value inaccessible of IETFInterfaces_Interfaces_Interface_Ipv6_Address_Status
	IETFInterfaces_Interfaces_Interface_Ipv6_Address_Status_inaccessible E_IETFInterfaces_Interfaces_Interface_Ipv6_Address_Status = 4
	// IETFInterfaces_Interfaces_Interface_Ipv6_Address_Status_unknown corresponds to the value unknown of IETFInterfaces_Interfaces_Interface_Ipv6_Address_Status
	IETFInterfaces_Interfaces_Interface_Ipv6_Address_Status_unknown E_IETFInterfaces_Interfaces_Interface_Ipv6_Address_Status = 5
	// IETFInterfaces_Interfaces_Interface_Ipv6_Address_Status_tentative corresponds to the value tentative of IETFInterfaces_Interfaces_Interface_Ipv6_Address_Status
	IETFInterfaces_Interfaces_Interface_Ipv6_Address_Status_tentative E_IETFInterfaces_Interfaces_Interface_Ipv6_Address_Status = 6
	// IETFInterfaces_Interfaces_Interface_Ipv6_Address_Status_duplicate corresponds to the value duplicate of IETFInterfaces_Interfaces_Interface_Ipv6_Address_Status
	IETFInterfaces_Interfaces_Interface_Ipv6_Address_Status_duplicate E_IETFInterfaces_Interfaces_Interface_Ipv6_Address_Status = 7
	// IETFInterfaces_Interfaces_Interface_Ipv6_Address_Status_optimistic corresponds to the value optimistic of IETFInterfaces_Interfaces_Interface_Ipv6_Address_Status
	IETFInterfaces_Interfaces_Interface_Ipv6_Address_Status_optimistic E_IETFInterfaces_Interfaces_Interface_Ipv6_Address_Status = 8
)


// E_IETFInterfaces_Interfaces_Interface_Ipv6_Neighbor_State is a derived int64 type which is used to represent
// the enumerated node IETFInterfaces_Interfaces_Interface_Ipv6_Neighbor_State. An additional value named
// IETFInterfaces_Interfaces_Interface_Ipv6_Neighbor_State_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFInterfaces_Interfaces_Interface_Ipv6_Neighbor_State int64

// IsYANGGoEnum ensures that IETFInterfaces_Interfaces_Interface_Ipv6_Neighbor_State implements the yang.GoEnum
// interface. This ensures that IETFInterfaces_Interfaces_Interface_Ipv6_Neighbor_State can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFInterfaces_Interfaces_Interface_Ipv6_Neighbor_State) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFInterfaces_Interfaces_Interface_Ipv6_Neighbor_State.
func (E_IETFInterfaces_Interfaces_Interface_Ipv6_Neighbor_State) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_IETFInterfaces_Interfaces_Interface_Ipv6_Neighbor_State.
func (e E_IETFInterfaces_Interfaces_Interface_Ipv6_Neighbor_State) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFInterfaces_Interfaces_Interface_Ipv6_Neighbor_State")
}

const (
	// IETFInterfaces_Interfaces_Interface_Ipv6_Neighbor_State_UNSET corresponds to the value UNSET of IETFInterfaces_Interfaces_Interface_Ipv6_Neighbor_State
	IETFInterfaces_Interfaces_Interface_Ipv6_Neighbor_State_UNSET E_IETFInterfaces_Interfaces_Interface_Ipv6_Neighbor_State = 0
	// IETFInterfaces_Interfaces_Interface_Ipv6_Neighbor_State_incomplete corresponds to the value incomplete of IETFInterfaces_Interfaces_Interface_Ipv6_Neighbor_State
	IETFInterfaces_Interfaces_Interface_Ipv6_Neighbor_State_incomplete E_IETFInterfaces_Interfaces_Interface_Ipv6_Neighbor_State = 1
	// IETFInterfaces_Interfaces_Interface_Ipv6_Neighbor_State_reachable corresponds to the value reachable of IETFInterfaces_Interfaces_Interface_Ipv6_Neighbor_State
	IETFInterfaces_Interfaces_Interface_Ipv6_Neighbor_State_reachable E_IETFInterfaces_Interfaces_Interface_Ipv6_Neighbor_State = 2
	// IETFInterfaces_Interfaces_Interface_Ipv6_Neighbor_State_stale corresponds to the value stale of IETFInterfaces_Interfaces_Interface_Ipv6_Neighbor_State
	IETFInterfaces_Interfaces_Interface_Ipv6_Neighbor_State_stale E_IETFInterfaces_Interfaces_Interface_Ipv6_Neighbor_State = 3
	// IETFInterfaces_Interfaces_Interface_Ipv6_Neighbor_State_delay corresponds to the value delay of IETFInterfaces_Interfaces_Interface_Ipv6_Neighbor_State
	IETFInterfaces_Interfaces_Interface_Ipv6_Neighbor_State_delay E_IETFInterfaces_Interfaces_Interface_Ipv6_Neighbor_State = 4
	// IETFInterfaces_Interfaces_Interface_Ipv6_Neighbor_State_probe corresponds to the value probe of IETFInterfaces_Interfaces_Interface_Ipv6_Neighbor_State
	IETFInterfaces_Interfaces_Interface_Ipv6_Neighbor_State_probe E_IETFInterfaces_Interfaces_Interface_Ipv6_Neighbor_State = 5
)


// E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable is a derived int64 type which is used to represent
// the enumerated node IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable. An additional value named
// IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable int64

// IsYANGGoEnum ensures that IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable implements the yang.GoEnum
// interface. This ensures that IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable.
func (E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable.
func (e E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable")
}

const (
	// IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable_UNSET corresponds to the value UNSET of IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable
	IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable_UNSET E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable = 0
	// IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable_enabled corresponds to the value enabled of IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable
	IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable_enabled E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable = 1
	// IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable_disabled corresponds to the value disabled of IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable
	IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable_disabled E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable = 2
)


// E_IETFInterfaces_Interfaces_Interface_OperStatus is a derived int64 type which is used to represent
// the enumerated node IETFInterfaces_Interfaces_Interface_OperStatus. An additional value named
// IETFInterfaces_Interfaces_Interface_OperStatus_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFInterfaces_Interfaces_Interface_OperStatus int64

// IsYANGGoEnum ensures that IETFInterfaces_Interfaces_Interface_OperStatus implements the yang.GoEnum
// interface. This ensures that IETFInterfaces_Interfaces_Interface_OperStatus can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFInterfaces_Interfaces_Interface_OperStatus) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFInterfaces_Interfaces_Interface_OperStatus.
func (E_IETFInterfaces_Interfaces_Interface_OperStatus) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_IETFInterfaces_Interfaces_Interface_OperStatus.
func (e E_IETFInterfaces_Interfaces_Interface_OperStatus) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFInterfaces_Interfaces_Interface_OperStatus")
}

const (
	// IETFInterfaces_Interfaces_Interface_OperStatus_UNSET corresponds to the value UNSET of IETFInterfaces_Interfaces_Interface_OperStatus
	IETFInterfaces_Interfaces_Interface_OperStatus_UNSET E_IETFInterfaces_Interfaces_Interface_OperStatus = 0
	// IETFInterfaces_Interfaces_Interface_OperStatus_up corresponds to the value up of IETFInterfaces_Interfaces_Interface_OperStatus
	IETFInterfaces_Interfaces_Interface_OperStatus_up E_IETFInterfaces_Interfaces_Interface_OperStatus = 1
	// IETFInterfaces_Interfaces_Interface_OperStatus_down corresponds to the value down of IETFInterfaces_Interfaces_Interface_OperStatus
	IETFInterfaces_Interfaces_Interface_OperStatus_down E_IETFInterfaces_Interfaces_Interface_OperStatus = 2
	// IETFInterfaces_Interfaces_Interface_OperStatus_testing corresponds to the value testing of IETFInterfaces_Interfaces_Interface_OperStatus
	IETFInterfaces_Interfaces_Interface_OperStatus_testing E_IETFInterfaces_Interfaces_Interface_OperStatus = 3
	// IETFInterfaces_Interfaces_Interface_OperStatus_unknown corresponds to the value unknown of IETFInterfaces_Interfaces_Interface_OperStatus
	IETFInterfaces_Interfaces_Interface_OperStatus_unknown E_IETFInterfaces_Interfaces_Interface_OperStatus = 4
	// IETFInterfaces_Interfaces_Interface_OperStatus_dormant corresponds to the value dormant of IETFInterfaces_Interfaces_Interface_OperStatus
	IETFInterfaces_Interfaces_Interface_OperStatus_dormant E_IETFInterfaces_Interfaces_Interface_OperStatus = 5
	// IETFInterfaces_Interfaces_Interface_OperStatus_not_present corresponds to the value not_present of IETFInterfaces_Interfaces_Interface_OperStatus
	IETFInterfaces_Interfaces_Interface_OperStatus_not_present E_IETFInterfaces_Interfaces_Interface_OperStatus = 6
	// IETFInterfaces_Interfaces_Interface_OperStatus_lower_layer_down corresponds to the value lower_layer_down of IETFInterfaces_Interfaces_Interface_OperStatus
	IETFInterfaces_Interfaces_Interface_OperStatus_lower_layer_down E_IETFInterfaces_Interfaces_Interface_OperStatus = 7
)


// E_IETFIp_IpAddressOrigin is a derived int64 type which is used to represent
// the enumerated node IETFIp_IpAddressOrigin. An additional value named
// IETFIp_IpAddressOrigin_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFIp_IpAddressOrigin int64

// IsYANGGoEnum ensures that IETFIp_IpAddressOrigin implements the yang.GoEnum
// interface. This ensures that IETFIp_IpAddressOrigin can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFIp_IpAddressOrigin) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFIp_IpAddressOrigin.
func (E_IETFIp_IpAddressOrigin) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_IETFIp_IpAddressOrigin.
func (e E_IETFIp_IpAddressOrigin) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFIp_IpAddressOrigin")
}

const (
	// IETFIp_IpAddressOrigin_UNSET corresponds to the value UNSET of IETFIp_IpAddressOrigin
	IETFIp_IpAddressOrigin_UNSET E_IETFIp_IpAddressOrigin = 0
	// IETFIp_IpAddressOrigin_other corresponds to the value other of IETFIp_IpAddressOrigin
	IETFIp_IpAddressOrigin_other E_IETFIp_IpAddressOrigin = 1
	// IETFIp_IpAddressOrigin_static corresponds to the value static of IETFIp_IpAddressOrigin
	IETFIp_IpAddressOrigin_static E_IETFIp_IpAddressOrigin = 2
	// IETFIp_IpAddressOrigin_dhcp corresponds to the value dhcp of IETFIp_IpAddressOrigin
	IETFIp_IpAddressOrigin_dhcp E_IETFIp_IpAddressOrigin = 3
	// IETFIp_IpAddressOrigin_link_layer corresponds to the value link_layer of IETFIp_IpAddressOrigin
	IETFIp_IpAddressOrigin_link_layer E_IETFIp_IpAddressOrigin = 4
	// IETFIp_IpAddressOrigin_random corresponds to the value random of IETFIp_IpAddressOrigin
	IETFIp_IpAddressOrigin_random E_IETFIp_IpAddressOrigin = 5
)


// E_IETFIp_NeighborOrigin is a derived int64 type which is used to represent
// the enumerated node IETFIp_NeighborOrigin. An additional value named
// IETFIp_NeighborOrigin_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFIp_NeighborOrigin int64

// IsYANGGoEnum ensures that IETFIp_NeighborOrigin implements the yang.GoEnum
// interface. This ensures that IETFIp_NeighborOrigin can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFIp_NeighborOrigin) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFIp_NeighborOrigin.
func (E_IETFIp_NeighborOrigin) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_IETFIp_NeighborOrigin.
func (e E_IETFIp_NeighborOrigin) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFIp_NeighborOrigin")
}

const (
	// IETFIp_NeighborOrigin_UNSET corresponds to the value UNSET of IETFIp_NeighborOrigin
	IETFIp_NeighborOrigin_UNSET E_IETFIp_NeighborOrigin = 0
	// IETFIp_NeighborOrigin_other corresponds to the value other of IETFIp_NeighborOrigin
	IETFIp_NeighborOrigin_other E_IETFIp_NeighborOrigin = 1
	// IETFIp_NeighborOrigin_static corresponds to the value static of IETFIp_NeighborOrigin
	IETFIp_NeighborOrigin_static E_IETFIp_NeighborOrigin = 2
	// IETFIp_NeighborOrigin_dynamic corresponds to the value dynamic of IETFIp_NeighborOrigin
	IETFIp_NeighborOrigin_dynamic E_IETFIp_NeighborOrigin = 3
)


// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_IETFInterfaces_InterfaceType": {
	},
	"E_IETFInterfaces_InterfacesState_Interface_AdminStatus": {
		1: {Name: "up"},
		2: {Name: "down"},
		3: {Name: "testing"},
	},
	"E_IETFInterfaces_InterfacesState_Interface_Ipv6_Address_Status": {
		1: {Name: "preferred"},
		2: {Name: "deprecated"},
		3: {Name: "invalid"},
		4: {Name: "inaccessible"},
		5: {Name: "unknown"},
		6: {Name: "tentative"},
		7: {Name: "duplicate"},
		8: {Name: "optimistic"},
	},
	"E_IETFInterfaces_InterfacesState_Interface_Ipv6_Neighbor_State": {
		1: {Name: "incomplete"},
		2: {Name: "reachable"},
		3: {Name: "stale"},
		4: {Name: "delay"},
		5: {Name: "probe"},
	},
	"E_IETFInterfaces_InterfacesState_Interface_OperStatus": {
		1: {Name: "up"},
		2: {Name: "down"},
		3: {Name: "testing"},
		4: {Name: "unknown"},
		5: {Name: "dormant"},
		6: {Name: "not-present"},
		7: {Name: "lower-layer-down"},
	},
	"E_IETFInterfaces_Interfaces_Interface_AdminStatus": {
		1: {Name: "up"},
		2: {Name: "down"},
		3: {Name: "testing"},
	},
	"E_IETFInterfaces_Interfaces_Interface_Ipv6_Address_Status": {
		1: {Name: "preferred"},
		2: {Name: "deprecated"},
		3: {Name: "invalid"},
		4: {Name: "inaccessible"},
		5: {Name: "unknown"},
		6: {Name: "tentative"},
		7: {Name: "duplicate"},
		8: {Name: "optimistic"},
	},
	"E_IETFInterfaces_Interfaces_Interface_Ipv6_Neighbor_State": {
		1: {Name: "incomplete"},
		2: {Name: "reachable"},
		3: {Name: "stale"},
		4: {Name: "delay"},
		5: {Name: "probe"},
	},
	"E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable": {
		1: {Name: "enabled"},
		2: {Name: "disabled"},
	},
	"E_IETFInterfaces_Interfaces_Interface_OperStatus": {
		1: {Name: "up"},
		2: {Name: "down"},
		3: {Name: "testing"},
		4: {Name: "unknown"},
		5: {Name: "dormant"},
		6: {Name: "not-present"},
		7: {Name: "lower-layer-down"},
	},
	"E_IETFIp_IpAddressOrigin": {
		1: {Name: "other"},
		2: {Name: "static"},
		3: {Name: "dhcp"},
		4: {Name: "link-layer"},
		5: {Name: "random"},
	},
	"E_IETFIp_NeighborOrigin": {
		1: {Name: "other"},
		2: {Name: "static"},
		3: {Name: "dynamic"},
	},
}


var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5d, 0xdd, 0x73, 0xda, 0x3a,
		0xd3, 0xbf, 0xcf, 0x5f, 0xa1, 0x61, 0xe6, 0x4c, 0xa1, 0x27, 0x4e, 0x81, 0x10, 0x92, 0x70, 0xd3,
		0x49, 0xdb, 0xf4, 0x39, 0xcc, 0xdb, 0x9c, 0x66, 0x9a, 0x9c, 0xe7, 0xe2, 0x0d, 0x3c, 0x1d, 0xd7,
		0x96, 0x83, 0xa6, 0x20, 0xfb, 0xb5, 0xe5, 0xb4, 0x79, 0x5a, 0xfe, 0xf7, 0x77, 0xfc, 0x81, 0x81,
		0x40, 0x40, 0x2b, 0x09, 0xc2, 0xc7, 0xf6, 0xa2, 0x21, 0xc4, 0x92, 0xed, 0xd5, 0x6a, 0xf7, 0xb7,
		0xab, 0xfd, 0xf8, 0x75, 0x40, 0x08, 0x21, 0xa5, 0xbf, 0xed, 0x01, 0x2d, 0xb5, 0x48, 0xc9, 0xa5,
		0x0f, 0xcc, 0xa1, 0xa5, 0xc3, 0xec, 0xdb, 0xff, 0x61, 0xdc, 0x2d, 0xb5, 0x48, 0x2d, 0xff, 0xf5,
		0xbd, 0xcf, 0x3d, 0x76, 0x5f, 0x6a, 0x91, 0x6a, 0xfe, 0xc5, 0x07, 0x16, 0x96, 0x5a, 0x24, 0x9b,
		0x22, 0xfd, 0x82, 0x71, 0x41, 0x43, 0xcf, 0x76, 0x68, 0x34, 0xf5, 0xfd, 0xd4, 0x2d, 0x26, 0xae,
		0x39, 0x9c, 0xbe, 0x62, 0xfa, 0x76, 0xc5, 0xd7, 0x4f, 0x6f, 0x5b, 0xfc, 0xe1, 0x3a, 0xa4, 0x1e,
		0xfb, 0x39, 0x73, 0xa7, 0xe9, 0xbb, 0x79, 0x4f, 0xee, 0x92, 0xfe, 0xf5, 0xc6, 0x8f, 0x43, 0x87,
		0xce, 0x1d, 0x99, 0x3d, 0x09, 0x7d, 0xfc, 0xe1, 0x87, 0xc9, 0xc3, 0x94, 0x82, 0xec, 0x26, 0x87,
		0xf3, 0x2f, 0xfc, 0xcb, 0x8e, 0x2e, 0xc2, 0xfb, 0x78, 0x40, 0xb9, 0x28, 0xb5, 0x88, 0x08, 0x63,
		0xfa, 0xcc, 0x85, 0x13, 0x57, 0x25, 0xcf, 0x34, 0x73, 0xd1, 0x70, 0xea, 0x9b, 0xe1, 0x93, 0x37,
		0x7d, 0x4a, 0xe8, 0x59, 0x82, 0x3f, 0xff, 0x2e, 0x33, 0x74, 0x7f, 0xee, 0x5d, 0xe6, 0x93, 0x7f,
		0xe9, 0x32, 0xc8, 0x2c, 0x87, 0xdc, 0xb2, 0xc8, 0x2e, 0x0f, 0x78, 0x99, 0xc0, 0xcb, 0x25, 0xbd,
		0x6c, 0xf3, 0x97, 0xef, 0x99, 0x65, 0x5c, 0xba, 0x9c, 0xc5, 0x05, 0xb6, 0x3b, 0x60, 0xdc, 0x8a,
		0x84, 0x2d, 0xe2, 0x68, 0x39, 0x19, 0x46, 0x44, 0x9d, 0x1a, 0xb5, 0xe4, 0xc5, 0xf2, 0xc5, 0xae,
		0x2e, 0xb9, 0xac, 0x58, 0xf4, 0xfa, 0x92, 0x0b, 0x25, 0x16, 0x1f, 0xc6, 0x04, 0x50, 0x66, 0x50,
		0x66, 0x0a, 0x65, 0xe6, 0x00, 0x33, 0xc9, 0x62, 0x66, 0x59, 0xc2, 0x34, 0xc5, 0xdd, 0xae, 0x6c,
		0xee, 0xda, 0xc2, 0x0f, 0x1f, 0x9f, 0xdf, 0xab, 0xc5, 0xb5, 0xb7, 0x8f, 0x01, 0x85, 0xad, 0x09,
		0xe5, 0xf1, 0x80, 0x86, 0xb6, 0x60, 0x3e, 0x97, 0x59, 0x9c, 0x91, 0xcc, 0x68, 0x48, 0x5c, 0x7b,
		0xc9, 0xe3, 0x81, 0xfc, 0x32, 0xde, 0xfa, 0x37, 0x22, 0x64, 0xfc, 0x5e, 0x7a, 0x44, 0x3a, 0xaa,
		0x96, 0xbc, 0x43, 0x1c, 0x48, 0x2e, 0x79, 0x3a, 0xa4, 0x9e, 0xea, 0x3d, 0xff, 0x07, 0x87, 0x0c,
		0x3a, 0x4e, 0x06, 0x09, 0x1a, 0x89, 0xe4, 0x09, 0xa5, 0x86, 0x0d, 0x0f, 0x65, 0xdf, 0xbb, 0x9d,
		0x72, 0x12, 0xe0, 0xa5, 0xd3, 0x87, 0x5f, 0xba, 0x45, 0xa7, 0x86, 0x8c, 0x1e, 0xbd, 0x45, 0x8e,
		0x01, 0xa3, 0xe2, 0x20, 0x59, 0x6b, 0xb9, 0xd7, 0x5d, 0xf1, 0x2e, 0xa0, 0x3f, 0x45, 0x68, 0x5b,
		0x31, 0x8f, 0x84, 0xfd, 0xad, 0x2f, 0xc9, 0xe3, 0xcc, 0xb3, 0x3c, 0x6a, 0x8b, 0x38, 0x4c, 0xae,
		0xbf, 0x93, 0x7a, 0x0d, 0xc0, 0x2a, 0x8c, 0xa5, 0x9a, 0x35, 0x60, 0xdf, 0x20, 0xcc, 0x04, 0x94,
		0x70, 0xf3, 0x24, 0xdd, 0xc4, 0xab, 0x1d, 0xc2, 0x26, 0x51, 0x95, 0x7a, 0xcf, 0x48, 0xbf, 0xf4,
		0xdd, 0xa5, 0x27, 0x18, 0x1a, 0xe2, 0xa5, 0xae, 0x84, 0xf8, 0x09, 0xa9, 0x47, 0x43, 0xca, 0x9d,
		0x95, 0x2e, 0xfe, 0x97, 0x8f, 0xef, 0x49, 0xfd, 0xac, 0x79, 0xdc, 0x22, 0xb7, 0x3d, 0x4a, 0xda,
		0x05, 0xd4, 0x25, 0xff, 0x0a, 0xfd, 0x38, 0x20, 0x57, 0xed, 0x77, 0xc4, 0x22, 0xcc, 0xbb, 0x48,
		0x34, 0xf5, 0x8d, 0x8c, 0xa2, 0x36, 0xcd, 0x28, 0x63, 0x2a, 0xbc, 0x24, 0x9f, 0x28, 0x90, 0x69,
		0xfd, 0x3c, 0x75, 0xa0, 0x36, 0x7e, 0x81, 0xe4, 0x2a, 0xb9, 0x34, 0x72, 0x42, 0x16, 0xa4, 0xda,
		0x55, 0x1a, 0xd6, 0x4d, 0x0e, 0x32, 0x8c, 0xea, 0xaa, 0x88, 0xea, 0x36, 0x04, 0xd5, 0xc1, 0x91,
		0x5a, 0x94, 0xc1, 0x23, 0x00, 0x48, 0x3b, 0x5b, 0xbb, 0xc6, 0xdd, 0x28, 0x99, 0xdb, 0x67, 0x36,
		0x4a, 0xdb, 0xa5, 0x04, 0xda, 0x09, 0x39, 0x4b, 0x79, 0xc2, 0xa3, 0xae, 0xbc, 0x8c, 0x1d, 0x0d,
		0x58, 0xb2, 0x07, 0x3e, 0x50, 0xcf, 0x8e, 0xfb, 0x42, 0x8a, 0x9b, 0x4b, 0xc9, 0xaa, 0x2d, 0x26,
		0x67, 0x17, 0xc5, 0x39, 0x8a, 0xf3, 0x9c, 0xce, 0xdf, 0x7c, 0xbf, 0x4f, 0x6d, 0x90, 0xd1, 0x5d,
		0xdb, 0x6f, 0x79, 0x8e, 0x18, 0x7a, 0x2f, 0x31, 0x74, 0x8f, 0xdd, 0xf7, 0x68, 0x68, 0xf5, 0xed,
		0x47, 0x1a, 0x5a, 0xcc, 0x93, 0x97, 0xf1, 0x4f, 0x07, 0xa2, 0x87, 0x14, 0x85, 0xef, 0xd3, 0xb3,
		0x11, 0x2b, 0xa4, 0x1e, 0x44, 0x04, 0x9f, 0x4a, 0x5c, 0x7b, 0x6d, 0x8b, 0x5e, 0x72, 0x93, 0x37,
		0xcc, 0x6b, 0x8d, 0x0f, 0xbf, 0xa6, 0x7e, 0x4b, 0x7e, 0xe1, 0xc9, 0xb3, 0x68, 0xbd, 0xf7, 0x27,
		0x16, 0x89, 0x0b, 0x21, 0x42, 0xb9, 0x77, 0xbf, 0x62, 0xfc, 0xb2, 0x4f, 0x93, 0x55, 0x89, 0x96,
		0xb3, 0x79, 0xee, 0x79, 0xfe, 0x39, 0x31, 0xa2, 0x76, 0xd6, 0x68, 0x34, 0x4f, 0x1b, 0x8d, 0xea,
		0xe9, 0xf1, 0x69, 0xf5, 0xfc, 0xe4, 0xa4, 0xd6, 0xac, 0x9d, 0x48, 0x4c, 0xf2, 0x39, 0x74, 0x69,
		0x48, 0xdd, 0x77, 0x8f, 0xa5, 0x16, 0xe1, 0x71, 0xbf, 0xbf, 0xd7, 0x3a, 0xec, 0x46, 0xd8, 0xce,
		0xf7, 0xdb, 0xf4, 0xd9, 0x51, 0x85, 0xc9, 0x50, 0x69, 0x27, 0x34, 0x18, 0xf3, 0x2c, 0xc6, 0x5d,
		0xfa, 0x53, 0x5e, 0x75, 0x15, 0x23, 0x50, 0x67, 0xe1, 0xa9, 0x9e, 0x9a, 0x7e, 0x3b, 0xae, 0x03,
		0xf4, 0x9a, 0xc4, 0xa1, 0x50, 0xe9, 0x8b, 0xcd, 0xef, 0x57, 0x22, 0x43, 0xaf, 0x18, 0x87, 0xcb,
		0xb6, 0x7f, 0xdb, 0xfd, 0x98, 0x2e, 0xa7, 0xdd, 0xcc, 0xb8, 0x8f, 0xa1, 0xed, 0x08, 0xe6, 0xf3,
		0x0f, 0xec, 0x9e, 0xc9, 0x2a, 0xc2, 0x69, 0x12, 0xd3, 0x7b, 0x5b, 0xb0, 0x87, 0xe4, 0xde, 0x9e,
		0xdd, 0x8f, 0xa8, 0xbc, 0x84, 0x02, 0x48, 0xfc, 0x2b, 0xfb, 0xa7, 0x3a, 0x49, 0xea, 0xb5, 0xc6,
		0x69, 0xe3, 0xec, 0xb8, 0xd9, 0x38, 0xdd, 0x1e, 0xda, 0xac, 0x47, 0x7a, 0xe3, 0x19, 0x23, 0x44,
		0xee, 0xe2, 0x19, 0xe3, 0x56, 0x61, 0xcb, 0xb6, 0x04, 0x60, 0xd8, 0x6b, 0x58, 0x99, 0x11, 0x68,
		0x37, 0x10, 0x65, 0xf0, 0xd0, 0x00, 0xa0, 0xc9, 0xe4, 0x6a, 0x39, 0x24, 0x59, 0x7b, 0x51, 0xd7,
		0x73, 0xb0, 0x83, 0x48, 0x32, 0x58, 0x35, 0x92, 0x5c, 0x16, 0x5c, 0x58, 0x5c, 0x68, 0xbb, 0x6e,
		0x48, 0xa3, 0x48, 0x9e, 0x72, 0xe3, 0x38, 0xc3, 0x6c, 0xa0, 0xe4, 0xeb, 0xcb, 0xb1, 0x12, 0x98,
		0xa5, 0x54, 0x58, 0x4b, 0x8d, 0xc5, 0x4c, 0x4a, 0x48, 0x10, 0xcb, 0xad, 0x48, 0x81, 0x06, 0xc6,
		0x85, 0x9e, 0xe4, 0x4a, 0xc9, 0xb2, 0xe6, 0x84, 0x5c, 0x83, 0x13, 0x5b, 0x69, 0x69, 0x01, 0xd6,
		0xb3, 0x36, 0xc3, 0xea, 0x30, 0xae, 0xfe, 0x5b, 0xea, 0x30, 0xb2, 0x31, 0x86, 0x36, 0xc6, 0xd8,
		0xda, 0x0c, 0x0e, 0x63, 0x74, 0x05, 0xdb, 0x0d, 0x66, 0xb1, 0x2f, 0xd4, 0xd9, 0x56, 0x2e, 0x78,
		0x2d, 0xee, 0x5b, 0xff, 0xf5, 0x39, 0x55, 0x59, 0xf9, 0x22, 0x16, 0x44, 0x61, 0xec, 0xb5, 0x2d,
		0x04, 0x0d, 0xb9, 0x34, 0xb6, 0x9d, 0x99, 0xa0, 0x5c, 0xbe, 0xab, 0x5a, 0xe7, 0xdd, 0xdf, 0x77,
		0x35, 0xeb, 0xbc, 0x9b, 0x7d, 0xac, 0xa5, 0x3f, 0xb2, 0xcf, 0xf5, 0xbb, 0xaa, 0xd5, 0x18, 0x7d,
		0x3e, 0xb9, 0xab, 0x5a, 0x27, 0xdd, 0x4a, 0xa7, 0x73, 0x54, 0xf9, 0x75, 0x3c, 0x84, 0x0f, 0x2c,
		0xff, 0x71, 0xd7, 0xe9, 0x04, 0xbf, 0xfe, 0x1e, 0x26, 0xff, 0x7f, 0x1a, 0x76, 0xff, 0xac, 0xbc,
		0x55, 0x65, 0xd2, 0x64, 0xe2, 0x4e, 0xe7, 0xa8, 0xfb, 0x1a, 0xce, 0x56, 0xdd, 0x83, 0xd5, 0x30,
		0x21, 0xc4, 0x79, 0xe0, 0x87, 0xec, 0x5e, 0xc5, 0xa5, 0x32, 0x62, 0xbd, 0x7c, 0xfc, 0x9a, 0x85,
		0x69, 0x1d, 0x85, 0x29, 0x0a, 0xd3, 0x95, 0x09, 0xd3, 0x42, 0x94, 0x2a, 0x31, 0x37, 0x01, 0xa6,
		0x3e, 0xcc, 0x8c, 0x05, 0xa5, 0x42, 0xcc, 0x12, 0x40, 0x25, 0x35, 0x62, 0x66, 0x96, 0x6a, 0xba,
		0xb7, 0x45, 0x8f, 0x86, 0x8a, 0xfc, 0x46, 0x8a, 0x84, 0x8b, 0x48, 0xd8, 0x82, 0x39, 0x3a, 0xd3,
		0x64, 0x49, 0x18, 0x3d, 0x27, 0xd0, 0x99, 0x24, 0x4d, 0xca, 0xe8, 0x33, 0xfe, 0x3d, 0x3b, 0xe3,
		0xd7, 0x99, 0xaa, 0x91, 0x7a, 0x33, 0x6c, 0xee, 0xfa, 0x83, 0x92, 0xd2, 0x2c, 0xc3, 0x43, 0xd5,
		0xb5, 0x85, 0xa6, 0x7f, 0xcc, 0x4c, 0x91, 0x92, 0x11, 0x2c, 0x40, 0xa7, 0xa6, 0x98, 0x20, 0x22,
		0x28, 0x43, 0x64, 0x56, 0xf7, 0xa4, 0xfc, 0x05, 0x56, 0x03, 0xd3, 0x4e, 0xb5, 0x6c, 0x19, 0x5a,
		0xa4, 0xa1, 0x31, 0x49, 0xce, 0xa2, 0xb2, 0xe9, 0x2b, 0x7a, 0x12, 0x4d, 0x41, 0x06, 0xae, 0x44,
		0xf3, 0x47, 0xf1, 0x37, 0x4e, 0x85, 0xba, 0xe6, 0xcf, 0xc7, 0xab, 0x69, 0xfe, 0x13, 0x34, 0xa3,
		0x50, 0xf3, 0x9b, 0xd5, 0xfc, 0x80, 0x43, 0x52, 0x6d, 0xdf, 0x43, 0x31, 0x90, 0x53, 0x31, 0xb0,
		0xa3, 0xef, 0xea, 0xab, 0x3c, 0xe2, 0xb1, 0xd1, 0x44, 0x8a, 0x4b, 0x93, 0x6f, 0x2b, 0x45, 0x21,
		0xa8, 0xbc, 0xbd, 0x4c, 0x6c, 0x33, 0x33, 0xdb, 0xcd, 0xd4, 0xb6, 0x33, 0xbe, 0xfd, 0x8c, 0x6f,
		0x43, 0x63, 0xdb, 0x51, 0x5d, 0x7d, 0xe9, 0x60, 0x18, 0xd5, 0xad, 0x66, 0x6c, 0xcb, 0x19, 0xde,
		0x7a, 0x9a, 0x36, 0xad, 0xf1, 0xad, 0x68, 0x72, 0x4b, 0x9a, 0xdd, 0x9a, 0xa6, 0xb7, 0xe8, 0xca,
		0xb6, 0xea, 0xca, 0xb6, 0xac, 0xf1, 0xad, 0xab, 0xb7, 0x85, 0x35, 0xb7, 0xb2, 0xbe, 0xcd, 0xfd,
		0x2c, 0x9f, 0xb9, 0xbe, 0x10, 0xd4, 0xb5, 0xfe, 0x2f, 0xb6, 0x5d, 0x13, 0x0c, 0xa7, 0xe1, 0xd7,
		0x34, 0xee, 0xe7, 0x7c, 0x51, 0xbf, 0xa7, 0x3e, 0xa7, 0x75, 0x5f, 0x94, 0xd3, 0x14, 0x82, 0x6e,
		0x96, 0xce, 0xa9, 0x10, 0x94, 0xb3, 0xec, 0x9f, 0x19, 0xb9, 0x46, 0x66, 0x5c, 0xfc, 0xdc, 0xe7,
		0x96, 0xe3, 0x73, 0xc1, 0xee, 0x63, 0x3f, 0x8e, 0xac, 0x5c, 0x71, 0x45, 0x86, 0xc4, 0xdd, 0x2a,
		0x64, 0xf3, 0x3c, 0x19, 0xad, 0x1c, 0x2a, 0xf4, 0x62, 0xf2, 0xfa, 0x19, 0xb9, 0xbd, 0x60, 0x45,
		0x8c, 0xdd, 0x76, 0x78, 0xb0, 0x19, 0xb3, 0x68, 0xee, 0xfb, 0x2d, 0x01, 0xa7, 0x17, 0x9c, 0xfb,
		0xc2, 0x96, 0xca, 0xc0, 0x5f, 0xec, 0x5b, 0x71, 0x7a, 0x74, 0x60, 0x07, 0x45, 0x6e, 0x07, 0x15,
		0x9e, 0x35, 0x99, 0xdd, 0x31, 0xe7, 0xe3, 0x9b, 0x84, 0x9f, 0xde, 0xe4, 0x9e, 0xe7, 0x37, 0x99,
		0x73, 0xe5, 0xcd, 0x08, 0x9a, 0xae, 0xcb, 0x2d, 0xa5, 0xe0, 0xe6, 0xc8, 0x10, 0x97, 0xd5, 0xa7,
		0xfc, 0x3e, 0x7d, 0x5b, 0x4d, 0x3b, 0x78, 0x7a, 0x3a, 0xb4, 0x86, 0xd1, 0x1a, 0x46, 0x6b, 0x78,
		0xf5, 0xdb, 0x6f, 0x25, 0xdb, 0x10, 0x2d, 0x63, 0xb4, 0x8c, 0xd1, 0x32, 0x36, 0x6c, 0x19, 0xc7,
		0x8c, 0x8b, 0x33, 0x83, 0x36, 0xf1, 0x89, 0x81, 0xa9, 0x60, 0xc9, 0x3e, 0x6b, 0x34, 0x9e, 0x54,
		0x92, 0x85, 0x96, 0x4e, 0x3a, 0xca, 0x9c, 0xa9, 0x1a, 0xb6, 0x2d, 0x74, 0x13, 0x6a, 0x96, 0xb3,
		0x90, 0x6a, 0xc2, 0xcd, 0x8a, 0x77, 0xc9, 0xf4, 0x92, 0xd9, 0x3f, 0x57, 0xb7, 0x64, 0xc7, 0x75,
		0x5c, 0x33, 0xb4, 0x2b, 0xd1, 0xae, 0x7c, 0x33, 0x0d, 0xef, 0x36, 0x33, 0xe8, 0x01, 0x1a, 0xc4,
		0xae, 0x47, 0x62, 0x53, 0xa4, 0x2d, 0xad, 0x2a, 0xb2, 0xc3, 0x68, 0xac, 0xfd, 0xff, 0xd0, 0x47,
		0x10, 0x68, 0x85, 0x55, 0x8f, 0x98, 0xd4, 0xbf, 0xb0, 0x2a, 0x12, 0x93, 0x6a, 0x40, 0xbb, 0x9a,
		0x44, 0x31, 0x19, 0xa8, 0xaa, 0x04, 0x94, 0x94, 0x8a, 0x7c, 0xa7, 0xcd, 0x6f, 0x90, 0xd4, 0x94,
		0x48, 0x84, 0xb1, 0x23, 0x78, 0x0e, 0x21, 0xdb, 0x97, 0xb7, 0x1f, 0xc7, 0x79, 0x6f, 0x5f, 0xe7,
		0x7d, 0xfc, 0xda, 0x0e, 0x1e, 0x1a, 0x5f, 0x2f, 0xf2, 0x3b, 0x99, 0xaa, 0xe9, 0x2b, 0x91, 0xaf,
		0x25, 0x5b, 0x9b, 0x6d, 0x06, 0x17, 0xcb, 0xd5, 0x68, 0x1b, 0xdb, 0xdd, 0x80, 0x5a, 0x6d, 0xc5,
		0xa0, 0xe5, 0x35, 0xdb, 0x0a, 0xad, 0x06, 0xcb, 0x7e, 0xaa, 0x62, 0xf6, 0xd3, 0xbe, 0x67, 0x3f,
		0x81, 0x2d, 0x45, 0x85, 0xda, 0x70, 0x4f, 0xd9, 0xae, 0x56, 0x5b, 0xe3, 0xce, 0xf6, 0xfc, 0xf0,
		0x87, 0x1d, 0xba, 0x90, 0xc8, 0xe4, 0xe2, 0x15, 0x27, 0xc6, 0xae, 0x72, 0x7f, 0xa7, 0x08, 0x1b,
		0x37, 0x38, 0x6e, 0x70, 0xdc, 0xe0, 0x0a, 0x1b, 0x7c, 0x20, 0x62, 0xf8, 0xce, 0x4e, 0x06, 0xe1,
		0x56, 0xc2, 0xad, 0xb4, 0xa6, 0xad, 0x14, 0x33, 0x2e, 0x6a, 0x4d, 0x85, 0x9d, 0xd4, 0x04, 0x0c,
		0x51, 0x73, 0x87, 0x2a, 0x98, 0xac, 0x3a, 0xee, 0xcd, 0xc2, 0x27, 0xd6, 0x54, 0x0c, 0x8a, 0x32,
		0xe6, 0xfb, 0xd2, 0xf7, 0x71, 0xa9, 0x1c, 0x5b, 0xeb, 0xf8, 0x19, 0xc7, 0xb4, 0x3b, 0x39, 0x39,
		0x3e, 0xd9, 0x7e, 0xf2, 0xad, 0xc8, 0x65, 0xd1, 0x35, 0xba, 0xe9, 0x35, 0x42, 0xbf, 0x14, 0x2a,
		0xef, 0x68, 0xec, 0xca, 0xc9, 0x4a, 0x3c, 0xa7, 0xe7, 0xb5, 0x56, 0x56, 0x63, 0x86, 0x53, 0x41,
		0xae, 0x43, 0x5f, 0xf8, 0x8e, 0xdf, 0x7f, 0xe1, 0x6c, 0x12, 0xd5, 0x3a, 0x3c, 0xc6, 0xd4, 0xc8,
		0x5c, 0x75, 0xb2, 0x80, 0x5c, 0xdb, 0xc6, 0xd1, 0x46, 0xe0, 0x14, 0xa7, 0xec, 0xbe, 0xf7, 0xcd,
		0x0f, 0xe1, 0x98, 0xaa, 0x18, 0x89, 0x25, 0x58, 0x10, 0x58, 0x81, 0x64, 0x2c, 0x96, 0x60, 0xd1,
		0x65, 0x5c, 0xfd, 0xb7, 0x24, 0x98, 0x3b, 0x68, 0x40, 0xa4, 0x63, 0x09, 0x16, 0x95, 0x45, 0xc2,
		0x12, 0x2c, 0xa6, 0x98, 0x10, 0x92, 0x88, 0x3d, 0xce, 0xa7, 0xb7, 0xa0, 0x55, 0xd7, 0x66, 0xd8,
		0x70, 0xce, 0x5c, 0x28, 0x64, 0x51, 0xc8, 0x6e, 0x84, 0x90, 0xd5, 0x49, 0xd0, 0xd6, 0x17, 0xd0,
		0x41, 0xef, 0x31, 0x52, 0xdc, 0x13, 0x1b, 0x20, 0x98, 0x13, 0x11, 0x67, 0x5b, 0xde, 0x85, 0xf5,
		0xb1, 0xfb, 0xab, 0x3e, 0x2c, 0xb7, 0xa6, 0x7f, 0xaf, 0xbc, 0xae, 0xbc, 0xc5, 0xf2, 0x53, 0xeb,
		0x93, 0x71, 0x58, 0x7e, 0x0a, 0x65, 0xdc, 0xaa, 0xe4, 0xd4, 0xc8, 0x7a, 0xc7, 0xe2, 0x53, 0x9b,
		0x54, 0x7c, 0xea, 0x91, 0xdb, 0x03, 0xe6, 0x6c, 0x5f, 0xb5, 0xa7, 0xfc, 0xb9, 0xf5, 0x0a, 0x3e,
		0x99, 0xa8, 0xd3, 0xb4, 0x3b, 0x25, 0x96, 0x30, 0x10, 0x6f, 0x33, 0x03, 0xf1, 0xb6, 0xf2, 0x80,
		0xe0, 0xac, 0xde, 0x6c, 0x91, 0x0b, 0x4e, 0x2e, 0x93, 0x2d, 0xc6, 0xa9, 0x20, 0x79, 0xcc, 0x1d,
		0xf9, 0x42, 0x23, 0xbf, 0x1f, 0x0b, 0xe6, 0x73, 0x3c, 0x36, 0x58, 0x04, 0x01, 0xc0, 0x44, 0xdc,
		0xd1, 0xe3, 0xb1, 0xb5, 0x87, 0xa1, 0x02, 0x4f, 0x19, 0x88, 0x46, 0x1c, 0xea, 0xdf, 0xa3, 0x5b,
		0x99, 0x3a, 0x7e, 0x59, 0x7b, 0xe3, 0x97, 0x20, 0xa4, 0xd1, 0xaa, 0x3b, 0x7f, 0x5c, 0xa6, 0x11,
		0xb0, 0x11, 0x69, 0x5f, 0x3f, 0x34, 0x48, 0xcc, 0xfb, 0xc9, 0x06, 0x10, 0x3d, 0x4a, 0x5e, 0xe5,
		0xa1, 0xb1, 0xaf, 0x48, 0x9f, 0xda, 0x5e, 0x87, 0x97, 0x7f, 0xf4, 0x98, 0xd3, 0x23, 0x6e, 0x16,
		0x21, 0x17, 0x11, 0xe1, 0x93, 0x57, 0xc9, 0x66, 0x7c, 0x55, 0x21, 0x2c, 0x22, 0x11, 0x15, 0xe9,
		0x37, 0xe9, 0x51, 0xf2, 0xab, 0xf5, 0x1f, 0xbe, 0x44, 0x2f, 0xde, 0x20, 0x64, 0x25, 0x74, 0xdc,
		0xb2, 0xe6, 0x46, 0x40, 0x69, 0xa2, 0x2c, 0x45, 0x64, 0x5a, 0x78, 0xa8, 0x09, 0x8d, 0xd2, 0x6a,
		0x1a, 0xa9, 0x34, 0x41, 0x8d, 0x54, 0x9a, 0xd8, 0x48, 0x05, 0x1b, 0xa9, 0x60, 0x23, 0x15, 0x3c,
		0xc5, 0x5f, 0xab, 0x4d, 0x89, 0xa7, 0xf8, 0xe8, 0x7c, 0x45, 0xe7, 0xab, 0xe2, 0x3a, 0x3f, 0x34,
		0x77, 0xe0, 0x14, 0xbf, 0xf5, 0x7b, 0xf2, 0x7c, 0xa8, 0x7a, 0xd8, 0x18, 0x56, 0x5a, 0x95, 0xf2,
		0xd3, 0xef, 0x5a, 0x95, 0x5f, 0xd5, 0xc3, 0x93, 0x61, 0xb9, 0x3c, 0xe7, 0x2f, 0x6f, 0xe7, 0xcd,
		0x51, 0xf9, 0x5d, 0x2e, 0x97, 0xf3, 0xf3, 0xfb, 0xa9, 0x33, 0xfd, 0xbb, 0x6a, 0xad, 0xfb, 0x36,
		0xfd, 0x98, 0xfd, 0x5f, 0x44, 0x05, 0x48, 0x5d, 0x5c, 0x31, 0x19, 0x0b, 0x50, 0x2e, 0xdf, 0xfd,
		0xa7, 0xd5, 0xfd, 0xb3, 0x55, 0xf9, 0xd5, 0x1c, 0x8e, 0x3e, 0xa7, 0xff, 0x57, 0x7e, 0x97, 0x8f,
		0x5e, 0x77, 0x3a, 0x47, 0x47, 0xaf, 0x2b, 0xd9, 0x8b, 0xe4, 0xd7, 0xbd, 0xce, 0xfe, 0xfa, 0xb6,
		0xd5, 0x9a, 0xf9, 0xaa, 0x52, 0xfe, 0xe3, 0x48, 0x33, 0x2c, 0x21, 0xa3, 0x5f, 0x0b, 0x1b, 0xc4,
		0xe0, 0x09, 0x1d, 0x2a, 0x89, 0x9d, 0x51, 0x12, 0xd8, 0x20, 0x06, 0x1b, 0xc4, 0x2c, 0x9a, 0x0a,
		0x1b, 0xc4, 0x60, 0x83, 0x18, 0x75, 0x89, 0x46, 0x36, 0xa4, 0x41, 0x8c, 0x5e, 0x69, 0x41, 0x23,
		0xa5, 0x04, 0xd1, 0x58, 0x44, 0x1c, 0xb0, 0x22, 0x1c, 0xf0, 0xb2, 0xd1, 0x88, 0xaa, 0x65, 0xfc,
		0x34, 0xca, 0xf6, 0x69, 0x96, 0xe9, 0xd3, 0x50, 0x29, 0x26, 0xca, 0xf0, 0x99, 0x2a, 0xbb, 0x67,
		0xbc, 0x64, 0x9b, 0xb9, 0x12, 0x6d, 0x1a, 0x65, 0xf4, 0x8c, 0x94, 0xcd, 0x2b, 0x48, 0x5c, 0xab,
		0x9f, 0xed, 0x2e, 0x91, 0xd7, 0xa4, 0xc0, 0x37, 0xc1, 0x74, 0x4f, 0x50, 0x4b, 0xac, 0x91, 0x4c,
		0x90, 0x8f, 0x47, 0xd3, 0x1d, 0x55, 0xf6, 0x8e, 0x98, 0xee, 0x94, 0xc7, 0x03, 0x1a, 0x66, 0x07,
		0xdb, 0xfb, 0x6a, 0xb4, 0x07, 0x69, 0x20, 0x57, 0x48, 0x5d, 0x6d, 0xc3, 0xdd, 0xa5, 0x41, 0x48,
		0x1d, 0x5b, 0xe8, 0x4d, 0x95, 0x1a, 0xef, 0x8c, 0x3f, 0xd8, 0x7d, 0xe6, 0x6a, 0xdb, 0xef, 0x8c,
		0xdb, 0x8e, 0x43, 0xa3, 0x88, 0x7d, 0xeb, 0x53, 0x6d, 0x0b, 0x3e, 0xe6, 0xdf, 0xb9, 0xff, 0x83,
		0xeb, 0xcc, 0x73, 0x92, 0xcc, 0x23, 0x28, 0x17, 0x99, 0xf6, 0xd2, 0x98, 0xa9, 0x99, 0x52, 0x3c,
		0x0e, 0xfa, 0x2c, 0xa1, 0xb8, 0xce, 0x4c, 0xa7, 0xa9, 0xeb, 0x26, 0x10, 0x6c, 0xc0, 0x22, 0xb1,
		0x8d, 0x41, 0xcd, 0x63, 0xb6, 0x03, 0x43, 0xf7, 0xe9, 0x89, 0x0a, 0x6a, 0x82, 0x0a, 0xbc, 0xcc,
		0xcc, 0x33, 0xc5, 0x74, 0x7a, 0x1e, 0x8f, 0xd1, 0x3e, 0xd0, 0x0c, 0xd8, 0x1e, 0x2f, 0x6e, 0x8b,
		0x9c, 0x1e, 0xea, 0x75, 0x17, 0xc8, 0x64, 0x85, 0x9e, 0x13, 0x66, 0xbc, 0x03, 0xb4, 0x2a, 0x8e,
		0x17, 0x3b, 0xb2, 0x45, 0x1a, 0x3b, 0x51, 0xb4, 0xd6, 0x40, 0x3f, 0x2b, 0x8d, 0xd8, 0x65, 0x03,
		0xa6, 0xdd, 0x64, 0x2c, 0x73, 0xa3, 0x7e, 0x7e, 0xdc, 0x22, 0x57, 0x36, 0xb7, 0xef, 0xd3, 0x80,
		0x71, 0xd2, 0xe6, 0x9e, 0x1f, 0x0e, 0x52, 0x6d, 0x4b, 0xde, 0xd9, 0x11, 0x25, 0x9e, 0x1f, 0x12,
		0xd1, 0xa3, 0x1d, 0x3e, 0x9e, 0x61, 0xa6, 0xda, 0x07, 0x29, 0xb7, 0xaf, 0x2b, 0x93, 0x57, 0x58,
		0xa4, 0x1d, 0xe4, 0x01, 0xbd, 0x37, 0x29, 0x20, 0xbd, 0x7d, 0xdf, 0xe1, 0xe9, 0xfd, 0xce, 0x9a,
		0xf5, 0x16, 0x69, 0x5f, 0x3f, 0x34, 0x49, 0xf2, 0x07, 0x9a, 0x46, 0xea, 0x8d, 0x42, 0x7f, 0x2f,
		0xe2, 0x64, 0xb6, 0x04, 0x52, 0xc6, 0xca, 0xfa, 0xde, 0x14, 0xd0, 0x9b, 0x07, 0xf8, 0x74, 0xa3,
		0xa9, 0x8d, 0x63, 0xbf, 0xb9, 0x18, 0x70, 0x0b, 0x96, 0x75, 0x7f, 0x2d, 0x41, 0x4c, 0x44, 0xc1,
		0x8a, 0xd0, 0x2c, 0x78, 0x68, 0xae, 0xad, 0x22, 0x74, 0xf3, 0x25, 0x2a, 0x42, 0xdb, 0xf9, 0x8e,
		0x57, 0x08, 0xa0, 0x1c, 0x8d, 0xc4, 0x08, 0xca, 0x35, 0x39, 0x24, 0xf6, 0x36, 0x82, 0xd2, 0x09,
		0xa9, 0x2d, 0xa8, 0x75, 0xdf, 0xf7, 0xbf, 0xd9, 0xfd, 0x51, 0x74, 0x00, 0xd5, 0x70, 0xbd, 0x3d,
		0x37, 0x21, 0xb4, 0xaf, 0xbd, 0x42, 0x19, 0xe4, 0x31, 0x68, 0x97, 0x2e, 0x77, 0x5e, 0xa8, 0x3a,
		0x3c, 0xdd, 0x43, 0x57, 0xe1, 0x8e, 0xb8, 0x0a, 0xe1, 0x55, 0x97, 0x67, 0x14, 0x49, 0x0d, 0x6d,
		0x47, 0x69, 0xdb, 0x11, 0x04, 0xfa, 0x27, 0xed, 0x88, 0x1b, 0x9a, 0x9e, 0x34, 0x91, 0x93, 0xa3,
		0x13, 0x34, 0xf1, 0x54, 0x4d, 0x3c, 0x23, 0xd4, 0xc7, 0x33, 0x39, 0x79, 0xa4, 0x20, 0xe8, 0x20,
		0xf0, 0x43, 0x3b, 0x7c, 0x34, 0x08, 0x16, 0xe6, 0xcd, 0xb9, 0x4e, 0xbc, 0x00, 0x68, 0x9f, 0x80,
		0x80, 0x01, 0x01, 0x03, 0x02, 0x86, 0x2d, 0x04, 0x0c, 0x13, 0xbd, 0xfb, 0x5f, 0x10, 0x31, 0xa4,
		0x69, 0x3a, 0x41, 0xc8, 0x1e, 0x6c, 0xe7, 0xd1, 0x02, 0x9a, 0xf9, 0xeb, 0xd2, 0xfe, 0x13, 0x94,
		0xda, 0xec, 0x56, 0xd9, 0xf3, 0x48, 0xb9, 0xf9, 0xaa, 0xfc, 0x70, 0x9b, 0xc1, 0xee, 0x79, 0xa3,
		0xd6, 0x22, 0xd7, 0x19, 0xd1, 0xc9, 0xe5, 0x4f, 0x41, 0x79, 0xc4, 0x7c, 0x1e, 0xa5, 0x8e, 0xf4,
		0x19, 0x00, 0x36, 0x09, 0xb7, 0x66, 0xb0, 0x18, 0x61, 0x3c, 0xc5, 0x6d, 0x08, 0x7d, 0x55, 0xa1,
		0xef, 0x0a, 0xd6, 0x02, 0x81, 0xb0, 0x8c, 0x77, 0xa9, 0x40, 0xab, 0xc5, 0x21, 0xb3, 0xd5, 0x67,
		0x1e, 0x15, 0x6c, 0x40, 0xd5, 0xa1, 0xf0, 0xc2, 0x59, 0xd7, 0x09, 0x86, 0xcf, 0x9a, 0x8d, 0x6a,
		0x15, 0xc1, 0x30, 0x82, 0xe1, 0xfd, 0x04, 0xc3, 0x31, 0xe3, 0xe2, 0xb8, 0xae, 0x81, 0x85, 0x4f,
		0x31, 0xc0, 0x5d, 0x71, 0x1e, 0x0c, 0x70, 0x5f, 0x4a, 0xe2, 0x46, 0xfd, 0xbc, 0x71, 0xde, 0x3c,
		0xad, 0x9f, 0x9f, 0x60, 0x9c, 0xfb, 0x7a, 0xa1, 0x04, 0x9a, 0xac, 0x68, 0xb2, 0xa2, 0xc9, 0x8a,
		0x26, 0xeb, 0xf5, 0x43, 0x73, 0x3a, 0x18, 0xec, 0xf6, 0xf2, 0xea, 0xfa, 0xeb, 0xf5, 0x97, 0xcb,
		0x8f, 0x97, 0x5f, 0xbe, 0x5c, 0x7e, 0xf8, 0xfa, 0xa9, 0xfd, 0xf1, 0xf2, 0xb6, 0x7d, 0x75, 0x89,
		0x76, 0xed, 0xe6, 0xd8, 0xb5, 0x72, 0x0b, 0x86, 0xc6, 0x2f, 0xc8, 0xf8, 0x4d, 0xc3, 0xbd, 0x8d,
		0x1a, 0xbe, 0x4f, 0x66, 0x5c, 0xa7, 0xd1, 0xdb, 0xac, 0x36, 0xce, 0xd0, 0xea, 0x45, 0xab, 0x17,
		0xad, 0x5e, 0xb4, 0x7a, 0xd1, 0xea, 0x45, 0xab, 0x17, 0xad, 0x5e, 0xb4, 0x7a, 0xd1, 0xea, 0x45,
		0xab, 0x17, 0xad, 0xde, 0x45, 0x46, 0xd4, 0xbf, 0x2f, 0x3e, 0xb5, 0xd1, 0xe2, 0xdd, 0x12, 0x8b,
		0xf7, 0xc9, 0x62, 0x61, 0xf6, 0x99, 0x09, 0xcd, 0xb7, 0x9d, 0xbd, 0x7b, 0x56, 0x9e, 0x7f, 0xba,
		0x1f, 0xdd, 0x7b, 0x56, 0x9d, 0xef, 0x89, 0xfd, 0x7b, 0xe6, 0x27, 0x0d, 0xc2, 0xd1, 0x98, 0x72,
		0xd6, 0x20, 0x08, 0xad, 0x98, 0x49, 0x1b, 0x74, 0xe3, 0xac, 0x4a, 0xab, 0xe5, 0x52, 0x41, 0x1d,
		0x61, 0x89, 0xd0, 0xe6, 0xd1, 0x20, 0x33, 0x57, 0x80, 0x79, 0x84, 0xcf, 0x4f, 0x25, 0x9b, 0x4e,
		0xa6, 0xe0, 0x53, 0x2b, 0xd5, 0xe4, 0xa8, 0xd5, 0x85, 0x25, 0x37, 0x56, 0x31, 0xb9, 0x71, 0xdf,
		0x93, 0x1b, 0xc1, 0x6e, 0x2e, 0x75, 0xf7, 0x96, 0x82, 0x5b, 0x4b, 0xd1, 0x9d, 0xa5, 0xa0, 0xca,
		0x75, 0xdc, 0x57, 0xba, 0x6e, 0x2b, 0x63, 0x2e, 0x14, 0x7d, 0xd7, 0x89, 0x82, 0x7b, 0x4a, 0xcb,
		0x2d, 0x65, 0xcc, 0x1d, 0xb5, 0x49, 0x34, 0xdc, 0x0a, 0x88, 0x81, 0x20, 0x1b, 0x41, 0xf6, 0x8e,
		0x82, 0x6c, 0x23, 0x90, 0x31, 0xef, 0xef, 0x07, 0x07, 0x88, 0xa3, 0x81, 0xab, 0x84, 0x83, 0xf2,
		0xc9, 0xf8, 0x88, 0x08, 0x11, 0x11, 0xae, 0x0b, 0x11, 0xc2, 0x73, 0xde, 0x80, 0xb9, 0x6e, 0x66,
		0x76, 0xb6, 0xe7, 0x87, 0x3f, 0xec, 0xd0, 0x85, 0xd4, 0xcf, 0x2c, 0x5e, 0x71, 0x62, 0xec, 0x2a,
		0xf7, 0x37, 0x20, 0x79, 0x16, 0x37, 0x38, 0x6e, 0xf0, 0xdd, 0xd9, 0xe0, 0x3b, 0x0e, 0x5e, 0x6b,
		0x2d, 0x32, 0x6a, 0x5f, 0x4d, 0x3e, 0xb0, 0xc8, 0xf1, 0x1f, 0x68, 0xf8, 0x98, 0x1e, 0x49, 0xb4,
		0xaf, 0xc9, 0x03, 0x0d, 0x23, 0xe6, 0x73, 0xd2, 0x24, 0xe5, 0x04, 0x9a, 0x55, 0xe6, 0x55, 0x56,
		0x68, 0x1e, 0xd5, 0x8f, 0x6a, 0x87, 0xa4, 0x1d, 0x7d, 0xf1, 0x63, 0xa1, 0xd4, 0x96, 0x66, 0x6f,
		0x10, 0xae, 0x71, 0x5a, 0xef, 0x25, 0x0c, 0x1e, 0x88, 0x18, 0xae, 0x25, 0x93, 0x41, 0xa8, 0x96,
		0x50, 0x2d, 0xa1, 0x27, 0xf2, 0xa5, 0x3c, 0x91, 0xb5, 0xfa, 0x19, 0x3a, 0x23, 0xd1, 0x19, 0x89,
		0xce, 0xc8, 0x15, 0xe2, 0xb9, 0xb3, 0x7a, 0xb5, 0xda, 0x9a, 0xad, 0x6d, 0x7c, 0x48, 0xfe, 0xbd,
		0x08, 0x5c, 0x04, 0xd4, 0x61, 0x1e, 0x73, 0x9e, 0xaf, 0x9d, 0x85, 0x98, 0xee, 0x19, 0x4c, 0xb7,
		0x2a, 0x7a, 0xef, 0x25, 0xae, 0xe3, 0x39, 0x34, 0x86, 0x83, 0xbb, 0x62, 0x24, 0x16, 0xd2, 0x45,
		0x84, 0x07, 0x92, 0xf2, 0xe0, 0x42, 0xba, 0x2c, 0x50, 0x4f, 0x81, 0x02, 0x67, 0xd9, 0x60, 0x2e,
		0xd1, 0xda, 0x18, 0x7a, 0xb5, 0xba, 0x62, 0x37, 0xbb, 0x4c, 0x3f, 0x34, 0x8b, 0x3e, 0xd3, 0xdc,
		0xb7, 0xfe, 0xeb, 0x73, 0xaa, 0x53, 0x5b, 0x4e, 0xa1, 0xa5, 0x5f, 0xe9, 0xda, 0x16, 0x89, 0xea,
		0x55, 0x0e, 0xc3, 0x2e, 0x95, 0xcb, 0xad, 0xdf, 0xe3, 0x36, 0xf8, 0xdd, 0x5f, 0xd5, 0xc3, 0xc6,
		0xb0, 0xd2, 0xaa, 0x94, 0x9f, 0x7e, 0xd7, 0xaa, 0xfc, 0xaa, 0x1e, 0x9e, 0x0c, 0xcb, 0xe5, 0x39,
		0x7f, 0x79, 0x3b, 0x6f, 0x8e, 0xb4, 0x83, 0x7f, 0xfd, 0xe4, 0xae, 0x6a, 0x9d, 0x74, 0x7f, 0xd7,
		0xef, 0xaa, 0x56, 0xa3, 0x9b, 0x5c, 0xd3, 0xfd, 0x7d, 0x57, 0xad, 0x75, 0xdf, 0xa6, 0x1f, 0xb3,
		0xff, 0x2b, 0x9d, 0xce, 0x51, 0xe5, 0xd7, 0xf1, 0x50, 0xee, 0xe2, 0x4a, 0xa5, 0xfc, 0xc7, 0x5d,
		0xa7, 0x13, 0xfc, 0xfa, 0x7b, 0x98, 0xfc, 0xff, 0x69, 0xd8, 0xd5, 0xe8, 0xff, 0x5f, 0x2e, 0xdf,
		0xfd, 0xa7, 0xd5, 0xfd, 0xb3, 0x55, 0xf9, 0xd5, 0x1c, 0x8e, 0x3e, 0xa7, 0xff, 0x57, 0x7e, 0x97,
		0x8f, 0x5e, 0x77, 0x3a, 0x47, 0x47, 0xaf, 0x2b, 0xd9, 0x8b, 0xe4, 0xd7, 0xbd, 0xce, 0xfe, 0xfa,
		0xb6, 0xd5, 0x9a, 0xf9, 0xaa, 0x52, 0xfe, 0xe3, 0x48, 0xe3, 0x51, 0xc6, 0xf4, 0x6b, 0x75, 0x3a,
		0x47, 0xdd, 0xd7, 0xa5, 0xad, 0xcc, 0x9a, 0x65, 0x91, 0x15, 0x66, 0x8e, 0x39, 0x75, 0x1d, 0x51,
		0x4c, 0x81, 0x5d, 0x0d, 0x51, 0x55, 0xec, 0x88, 0xaa, 0xa0, 0x83, 0x40, 0x3c, 0xea, 0xe8, 0x86,
		0xe3, 0x0d, 0xd8, 0xdc, 0xe3, 0xa6, 0xf1, 0x23, 0xad, 0xa7, 0xbe, 0xcb, 0xe7, 0xcc, 0x85, 0xc8,
		0x10, 0xb7, 0xfb, 0x46, 0x6c, 0xf7, 0x97, 0xed, 0x3b, 0x1e, 0xf4, 0x1e, 0x23, 0xc5, 0x3d, 0xb1,
		0x01, 0x68, 0x72, 0x12, 0x06, 0xd6, 0x87, 0xe5, 0xd6, 0xf4, 0xef, 0x95, 0xd7, 0x95, 0xb7, 0xdb,
		0x09, 0x6c, 0xfc, 0x90, 0xdd, 0x2b, 0x9c, 0x01, 0x14, 0xab, 0x9a, 0x8f, 0x47, 0x48, 0x83, 0x32,
		0x6e, 0x47, 0x20, 0xcd, 0xc8, 0xe5, 0x68, 0x29, 0xb1, 0x36, 0xd9, 0x99, 0x66, 0xcd, 0xbe, 0xe8,
		0x29, 0xc5, 0x7c, 0x14, 0xb3, 0xd4, 0x46, 0x8d, 0xdc, 0x99, 0xa3, 0xdd, 0xa4, 0xd9, 0x7d, 0xe4,
		0xf6, 0x60, 0x1b, 0x1b, 0x06, 0xe7, 0xcf, 0xad, 0xd9, 0x54, 0x37, 0x5d, 0x0a, 0xbd, 0x3e, 0xb8,
		0xf9, 0x42, 0xb4, 0x48, 0x6d, 0x33, 0xdb, 0xd7, 0xae, 0x44, 0xbb, 0x25, 0x2f, 0xad, 0x51, 0xd9,
		0x2a, 0x1b, 0x8e, 0xba, 0x0d, 0x75, 0xdb, 0xae, 0x98, 0xeb, 0x3c, 0x1e, 0x50, 0xf5, 0x7c, 0x95,
		0x9d, 0xd0, 0x6b, 0x8c, 0x3b, 0xfe, 0x20, 0xe8, 0x53, 0xbd, 0x4e, 0xf6, 0xb5, 0xec, 0xf8, 0xda,
		0x76, 0x7a, 0xb6, 0x66, 0xbf, 0xff, 0x7a, 0x2e, 0x69, 0xf4, 0x66, 0x39, 0x4e, 0xb5, 0x24, 0xed,
		0xdb, 0x8f, 0x3a, 0xb3, 0x34, 0xb2, 0xbd, 0xe8, 0x7f, 0xa3, 0x5b, 0xd8, 0x9a, 0x3f, 0x79, 0x77,
		0xdd, 0x16, 0xf8, 0x05, 0x6b, 0xe8, 0x29, 0xdb, 0x8c, 0x84, 0x2d, 0xd2, 0xd0, 0x98, 0x63, 0xcc,
		0x5c, 0x60, 0x6b, 0xfd, 0xa9, 0x0e, 0x4c, 0xe7, 0xa8, 0x63, 0xdb, 0xfa, 0x82, 0xb2, 0x9b, 0xd3,
		0x7a, 0x50, 0x3b, 0x70, 0xf8, 0xf4, 0xe8, 0xf8, 0xa8, 0x8e, 0x95, 0x7b, 0x14, 0x14, 0xbc, 0xd9,
		0x15, 0xc0, 0x72, 0x3c, 0x26, 0xf6, 0x39, 0x36, 0x83, 0x37, 0x47, 0xca, 0xbd, 0xc8, 0x5b, 0xc1,
		0x00, 0x46, 0x43, 0x92, 0x0d, 0xab, 0x1b, 0x3d, 0x81, 0x4d, 0xaa, 0xd5, 0x8d, 0x80, 0x21, 0x8b,
		0x44, 0xa3, 0xba, 0xd1, 0x68, 0x75, 0x8d, 0x55, 0x37, 0x3a, 0xd0, 0xa0, 0xb8, 0x8a, 0xbc, 0x49,
		0xec, 0xfe, 0x08, 0x24, 0x66, 0x14, 0xe2, 0x2e, 0x2f, 0xd3, 0x1c, 0xf9, 0x28, 0x2b, 0x41, 0x10,
		0xf3, 0xb4, 0xfe, 0x80, 0xe8, 0x51, 0xf2, 0x2a, 0x4f, 0x9e, 0x7f, 0x45, 0xfa, 0xd4, 0xf6, 0x3a,
		0xbc, 0xfc, 0xa3, 0xc7, 0x9c, 0x1e, 0x71, 0xb3, 0x1c, 0xda, 0x88, 0x08, 0x9f, 0xbc, 0x4a, 0x36,
		0xe4, 0xab, 0x0a, 0x61, 0x11, 0x89, 0xa8, 0x48, 0xbf, 0x49, 0x23, 0xe3, 0x5f, 0xad, 0x3f, 0x92,
		0x33, 0x52, 0x90, 0x32, 0x66, 0x63, 0x39, 0x57, 0x42, 0x47, 0xd3, 0x30, 0xe3, 0x40, 0x4f, 0xba,
		0x2c, 0xe3, 0x71, 0xa0, 0x34, 0x51, 0x96, 0x22, 0x12, 0x0b, 0xad, 0x28, 0x34, 0x16, 0x53, 0xfc,
		0x79, 0xfa, 0x2d, 0xa0, 0x4c, 0xa9, 0x6f, 0x47, 0xc2, 0x72, 0x7a, 0x79, 0xd2, 0xd2, 0x62, 0xb2,
		0x8c, 0x23, 0x25, 0x26, 0x06, 0x2d, 0xa1, 0xba, 0x9c, 0x4b, 0x55, 0xda, 0x85, 0x0a, 0x71, 0x99,
		0x8e, 0x5d, 0xa4, 0x32, 0xe5, 0xea, 0xa0, 0x7b, 0x5d, 0xd9, 0x05, 0xaa, 0xbc, 0xb3, 0xa7, 0x5d,
		0x9c, 0x12, 0x75, 0xf1, 0xf4, 0x74, 0x82, 0xb4, 0xcb, 0x72, 0x5c, 0xf2, 0xce, 0x16, 0xd4, 0xb2,
		0xb9, 0x6b, 0x49, 0xb6, 0x90, 0x80, 0xc4, 0x05, 0x80, 0xe3, 0x00, 0x4a, 0x9d, 0x8e, 0xfb, 0xab,
		0x31, 0xb4, 0x92, 0x1f, 0xf5, 0xd1, 0x8f, 0xdb, 0xec, 0x47, 0x6b, 0xea, 0x47, 0xb9, 0xd3, 0x39,
		0xea, 0x74, 0xdc, 0x3f, 0x2b, 0x6f, 0xcb, 0xff, 0xfb, 0xfb, 0xae, 0xd3, 0xf9, 0xb3, 0xd3, 0xb1,
		0xba, 0x53, 0x57, 0x48, 0x20, 0xac, 0xee, 0xda, 0xf5, 0x2f, 0x1c, 0xe7, 0x2b, 0x28, 0xe0, 0x04,
		0x8e, 0xd6, 0xcf, 0x9a, 0xc7, 0x2d, 0x72, 0xdb, 0xa3, 0x64, 0x2c, 0x99, 0xc8, 0xbf, 0x42, 0x3f,
		0x0e, 0xc8, 0x55, 0xfb, 0x1d, 0xb1, 0x08, 0xf3, 0x3e, 0xd9, 0x91, 0x78, 0x2f, 0x23, 0x0f, 0x4c,
		0x6b, 0x57, 0x55, 0x10, 0x6f, 0x56, 0xbd, 0xc2, 0xa9, 0xb4, 0x69, 0xba, 0x53, 0x4d, 0x77, 0x30,
		0xfe, 0xdd, 0x8a, 0x03, 0xcb, 0xf5, 0x7f, 0x70, 0x4b, 0x84, 0x76, 0x60, 0x65, 0x70, 0x02, 0xa0,
		0x48, 0x9e, 0x9b, 0xc1, 0xb0, 0x56, 0xa9, 0xa2, 0x56, 0xd9, 0x5a, 0xad, 0x02, 0x3b, 0xf8, 0x82,
		0x1c, 0x74, 0xc1, 0x0e, 0xb6, 0xd4, 0x0e, 0xb2, 0xb2, 0xd3, 0x26, 0x58, 0xad, 0x2f, 0x32, 0x8e,
		0x9d, 0x60, 0x51, 0x36, 0xd0, 0x6c, 0x06, 0x3d, 0xf8, 0xc8, 0x66, 0xfc, 0x20, 0xa0, 0x43, 0xee,
		0x89, 0xe2, 0x68, 0xb5, 0xad, 0xb5, 0x73, 0x15, 0x7a, 0x62, 0xa8, 0x64, 0x18, 0x7a, 0xd6, 0x80,
		0x7d, 0x5b, 0xb3, 0xf6, 0x54, 0x6e, 0x62, 0x61, 0x38, 0xd3, 0x30, 0x7b, 0xf7, 0xf5, 0xeb, 0xc4,
		0xc3, 0x2d, 0x42, 0x59, 0x93, 0xc7, 0x17, 0xcc, 0xfb, 0xc4, 0xf8, 0xf7, 0x7f, 0x82, 0x0f, 0xfe,
		0x0f, 0x7e, 0x1b, 0xda, 0xc1, 0x25, 0x07, 0x9e, 0x64, 0xef, 0x17, 0xf4, 0x92, 0x20, 0xdd, 0x6e,
		0xe0, 0x31, 0xff, 0x07, 0x0d, 0xf3, 0x0c, 0x06, 0xe6, 0x01, 0x50, 0xd8, 0xf4, 0x38, 0xb4, 0xe8,
		0x11, 0x7b, 0x8d, 0xe8, 0x3c, 0xda, 0x4f, 0x56, 0x48, 0x3d, 0x08, 0xfa, 0x3a, 0x95, 0xb3, 0xe8,
		0x73, 0xd7, 0x9a, 0xd7, 0x9a, 0xf4, 0xa6, 0x4d, 0xfc, 0x96, 0xfc, 0x92, 0x7a, 0xc9, 0xb4, 0xde,
		0x1b, 0x74, 0xce, 0x08, 0x3f, 0x5f, 0x34, 0x72, 0xae, 0x08, 0x3b, 0x4f, 0xdc, 0x75, 0x7f, 0xc2,
		0x8d, 0xb0, 0x9d, 0xef, 0xb7, 0xa8, 0xd4, 0xa4, 0xa9, 0xb4, 0x13, 0xfa, 0x2b, 0xf7, 0x87, 0x4b,
		0x6a, 0xad, 0xf4, 0x6a, 0xf4, 0x13, 0xa0, 0xae, 0x2a, 0x22, 0xbe, 0x43, 0xb9, 0x72, 0xbb, 0x63,
		0xb7, 0xf3, 0x5e, 0xcb, 0xd8, 0xbf, 0xed, 0x01, 0x4a, 0xd7, 0x65, 0xf4, 0xd9, 0x09, 0xb9, 0xea,
		0x07, 0x34, 0xb4, 0x22, 0x61, 0x8b, 0x38, 0x92, 0x17, 0xaf, 0x93, 0x83, 0xd0, 0x22, 0xd8, 0x51,
		0x29, 0x0b, 0x48, 0x2b, 0xde, 0x53, 0xcf, 0x6d, 0x1c, 0xc0, 0x9d, 0xb6, 0xfe, 0x0f, 0x50, 0xe9,
		0xeb, 0xe3, 0xac, 0x13, 0x7f, 0x24, 0xe4, 0xab, 0xc5, 0x93, 0x22, 0xe2, 0x3f, 0xe6, 0xdf, 0x39,
		0xf0, 0x7e, 0x27, 0xd9, 0x43, 0x86, 0x03, 0x9b, 0x0b, 0xc8, 0xb8, 0x66, 0x8a, 0xba, 0x7c, 0x61,
		0x65, 0x21, 0x2d, 0xa0, 0xb1, 0xa7, 0x4f, 0xfd, 0x0c, 0x29, 0x91, 0x5e, 0xdc, 0xab, 0x9d, 0x13,
		0xa1, 0x45, 0x20, 0x91, 0x9f, 0xe9, 0xa3, 0xc3, 0xfc, 0xe0, 0x33, 0x6f, 0x0e, 0xab, 0x29, 0x3b,
		0x49, 0xf4, 0x16, 0x69, 0x02, 0x46, 0x8e, 0xd8, 0x0a, 0x94, 0x5c, 0x51, 0x30, 0x15, 0x28, 0x0b,
		0x22, 0xd9, 0x2a, 0xdb, 0xec, 0xe7, 0xdf, 0x24, 0x6c, 0xf6, 0x39, 0xa0, 0xe1, 0x8d, 0x8c, 0xee,
		0xdd, 0x6b, 0x84, 0x36, 0x41, 0xa5, 0x9d, 0xc0, 0x69, 0x53, 0x65, 0x36, 0xa4, 0x81, 0x1a, 0xa0,
		0x38, 0x07, 0x22, 0xb5, 0x3d, 0xb2, 0x87, 0x81, 0x45, 0x5b, 0x56, 0x1b, 0x8c, 0x65, 0xa4, 0x08,
		0xcb, 0x7e, 0xc7, 0x58, 0x5d, 0xf7, 0x1e, 0xa3, 0x0b, 0x70, 0x0d, 0x9e, 0xbd, 0x53, 0x0a, 0x93,
		0x64, 0xda, 0x09, 0xad, 0x10, 0x05, 0x54, 0xa2, 0xbd, 0xdc, 0xd8, 0x0d, 0x96, 0x5e, 0x8e, 0x7a,
		0x00, 0xf5, 0x40, 0x4e, 0xe7, 0x7b, 0x3b, 0xbe, 0xa7, 0xcd, 0x06, 0x40, 0x05, 0xc8, 0x68, 0x00,
		0x58, 0x9b, 0x0b, 0x58, 0x7a, 0x1f, 0x5c, 0x58, 0x29, 0x36, 0xd6, 0xd5, 0xee, 0xbf, 0xa0, 0xde,
		0x77, 0x61, 0x08, 0xcb, 0x5b, 0x54, 0x27, 0x89, 0x5e, 0x9a, 0xe3, 0x4b, 0x53, 0x69, 0x23, 0x32,
		0x47, 0xb6, 0x1a, 0x39, 0x4c, 0x07, 0xbf, 0xdc, 0x24, 0xda, 0xe1, 0x90, 0x30, 0xef, 0x2f, 0x76,
		0xdf, 0xbb, 0x91, 0x50, 0x15, 0xfb, 0x8b, 0x25, 0x96, 0x12, 0x6e, 0x37, 0xd0, 0x85, 0xb0, 0x05,
		0x8b, 0x04, 0x73, 0x00, 0x16, 0xe7, 0xc4, 0x18, 0x39, 0x9c, 0x51, 0x43, 0x9c, 0xb1, 0x6d, 0x38,
		0x43, 0xb6, 0x07, 0x43, 0xc9, 0x65, 0x91, 0xe3, 0x73, 0xc1, 0x78, 0xcc, 0xc4, 0x63, 0x96, 0xf9,
		0x03, 0x6e, 0x15, 0x32, 0x67, 0x8e, 0x5d, 0x68, 0x0b, 0xe7, 0xed, 0x61, 0xd3, 0x10, 0xef, 0xa5,
		0x9a, 0x86, 0x28, 0x54, 0xc8, 0xd5, 0x68, 0x25, 0x07, 0x4d, 0x75, 0x53, 0xf1, 0xb2, 0x28, 0x7b,
		0x5b, 0x8a, 0x81, 0xeb, 0x4d, 0x81, 0x93, 0x53, 0x53, 0x80, 0x23, 0x00, 0x09, 0xb1, 0xcd, 0xb8,
		0xf5, 0x2d, 0xf4, 0x6d, 0xd7, 0xb1, 0x23, 0x61, 0x05, 0xdf, 0x45, 0x04, 0x17, 0x3e, 0xb3, 0x53,
		0xa0, 0xec, 0x41, 0xd9, 0x03, 0x92, 0x3d, 0xea, 0x72, 0xc4, 0xf1, 0xe3, 0x04, 0x7c, 0x4a, 0x99,
		0xe7, 0x0a, 0x66, 0xba, 0xa2, 0xb9, 0x0e, 0x37, 0x49, 0xb4, 0xcc, 0x77, 0x5d, 0x33, 0xde, 0x98,
		0xa1, 0xaa, 0x6f, 0xb0, 0x2a, 0x98, 0xf7, 0x5a, 0x66, 0xfe, 0x0a, 0xcc, 0xfd, 0x4d, 0xa4, 0x26,
		0x36, 0xa7, 0x34, 0xb9, 0x47, 0xd5, 0xdd, 0x07, 0x7f, 0xbd, 0x6f, 0xf3, 0x77, 0x23, 0x65, 0x79,
		0x2d, 0xaf, 0x2b, 0x4d, 0x68, 0x1b, 0x93, 0xde, 0x04, 0x63, 0x0a, 0xc8, 0x90, 0x77, 0x61, 0x96,
		0xae, 0x7b, 0xd9, 0x6c, 0x92, 0x71, 0x2b, 0x31, 0x05, 0xed, 0xd0, 0x55, 0xc3, 0x71, 0xc5, 0x60,
		0x44, 0x70, 0x88, 0xe0, 0xd6, 0x8b, 0xe0, 0xb0, 0xaf, 0x38, 0x22, 0x38, 0x6c, 0x2a, 0x8e, 0xb8,
		0x6d, 0x53, 0x70, 0x1b, 0x61, 0x5e, 0x9b, 0x7f, 0x80, 0xe9, 0x43, 0x44, 0x69, 0x8b, 0xa9, 0xb8,
		0xaf, 0x98, 0x8c, 0x86, 0xa1, 0x1f, 0xaa, 0x21, 0xb2, 0x7c, 0x28, 0xe2, 0x31, 0xc4, 0x63, 0x88,
		0xc7, 0x10, 0x8f, 0x21, 0x1e, 0x43, 0x3c, 0xb6, 0xc7, 0x78, 0xec, 0x12, 0xa2, 0x0d, 0x11, 0x8d,
		0x2d, 0xa2, 0xe1, 0xbe, 0x62, 0xb1, 0x41, 0xdc, 0x17, 0x4c, 0xef, 0xb4, 0xf3, 0xc9, 0x14, 0x88,
		0xcd, 0x10, 0x9b, 0xad, 0x17, 0x9b, 0xe1, 0x69, 0x27, 0x62, 0x33, 0x3c, 0xed, 0x44, 0x94, 0xb6,
		0x0d, 0xa7, 0x9d, 0x57, 0x23, 0x65, 0x89, 0xa7, 0x9d, 0x1a, 0xc8, 0x6d, 0x19, 0x5d, 0xf7, 0x15,
		0xcd, 0xf9, 0x8e, 0xa0, 0x8a, 0x28, 0x2e, 0x1f, 0x8a, 0xe8, 0x0d, 0xd1, 0x1b, 0xa2, 0x37, 0x44,
		0x6f, 0x88, 0xde, 0x10, 0xbd, 0xa1, 0x8f, 0x2d, 0x85, 0x16, 0x9f, 0x21, 0x9a, 0x11, 0xb1, 0xda,
		0x62, 0x2a, 0xee, 0x2b, 0x32, 0x8b, 0xb9, 0xa6, 0x97, 0x6d, 0x6a, 0x02, 0x44, 0x69, 0x88, 0xd2,
		0x10, 0xa5, 0x21, 0x4a, 0x43, 0x94, 0x86, 0x28, 0x0d, 0x51, 0x5a, 0x8a, 0x2f, 0xfe, 0x41, 0xa7,
		0x9a, 0x19, 0xa0, 0xf6, 0xcf, 0xde, 0x7b, 0xd1, 0xf2, 0x72, 0x95, 0x56, 0x10, 0xfa, 0xc2, 0x57,
		0x45, 0x6b, 0x53, 0x53, 0x20, 0x5e, 0x43, 0xbc, 0xb6, 0x5e, 0xbc, 0x86, 0xf1, 0x6a, 0x88, 0xd7,
		0x30, 0x5e, 0x0d, 0x51, 0xda, 0x06, 0xa1, 0xb4, 0x36, 0xff, 0x27, 0xd3, 0x8a, 0xd7, 0x10, 0xa5,
		0x88, 0x38, 0x4d, 0x82, 0x94, 0x7b, 0x89, 0xd4, 0xfc, 0x58, 0x68, 0x17, 0xeb, 0x98, 0x33, 0x07,
		0x62, 0x35, 0xc4, 0x6a, 0xe8, 0x5b, 0x43, 0xac, 0x86, 0xbe, 0x35, 0x44, 0x6d, 0x18, 0xbf, 0x36,
		0x1e, 0xc8, 0xbc, 0xbf, 0xde, 0x7f, 0x8e, 0x05, 0x96, 0xeb, 0x30, 0x81, 0xe1, 0x96, 0x12, 0x76,
		0x6f, 0x11, 0x9d, 0x7a, 0xc1, 0x8e, 0xa9, 0xd1, 0x88, 0xe2, 0x10, 0xc5, 0xa1, 0xc7, 0x0d, 0x51,
		0x1c, 0x7a, 0xdc, 0x10, 0xbb, 0xed, 0xad, 0xc7, 0xed, 0x73, 0x2c, 0xb0, 0x64, 0x87, 0xbe, 0xb7,
		0x6d, 0x92, 0x8c, 0x7b, 0x8b, 0xcb, 0x54, 0x8b, 0x76, 0x4c, 0x8c, 0x45, 0x4c, 0x86, 0x98, 0x0c,
		0x31, 0x19, 0x62, 0x32, 0xc4, 0x64, 0x88, 0xc9, 0xf6, 0x19, 0x93, 0x61, 0xd9, 0x0e, 0x03, 0x88,
		0x6c, 0x9f, 0xeb, 0x76, 0x24, 0x98, 0x4a, 0xb7, 0x70, 0xc7, 0x9c, 0x39, 0x10, 0x9f, 0x21, 0x3e,
		0x5b, 0x2f, 0x3e, 0xc3, 0x93, 0x4f, 0xc4, 0x67, 0x78, 0xf2, 0x89, 0x48, 0x6d, 0x2b, 0x4e, 0x3e,
		0xb1, 0x74, 0x87, 0x09, 0xf4, 0xb6, 0x94, 0xb0, 0x7b, 0x8b, 0xe8, 0x54, 0x8b, 0x77, 0x4c, 0x8c,
		0x45, 0x04, 0x87, 0x08, 0x0e, 0x11, 0x1c, 0x22, 0x38, 0x44, 0x70, 0x88, 0xe0, 0xd0, 0xd7, 0x96,
		0xa1, 0x0b, 0x2c, 0xdf, 0xa1, 0xeb, 0x6d, 0x9b, 0x24, 0xe3, 0xde, 0xa2, 0x33, 0xbd, 0x02, 0x1e,
		0x33, 0x33, 0x20, 0x52, 0x43, 0xa4, 0x86, 0x48, 0x0d, 0x91, 0x1a, 0x22, 0x35, 0x44, 0x6a, 0x88,
		0xd4, 0x32, 0x88, 0x81, 0x25, 0x3c, 0x4c, 0x81, 0xb5, 0x5d, 0xae, 0xe1, 0x71, 0xa0, 0xb1, 0x8f,
		0x4a, 0x17, 0x9c, 0xfb, 0xc2, 0x4e, 0x24, 0x8e, 0x14, 0xa7, 0x94, 0x22, 0xa7, 0x47, 0x07, 0x76,
		0x60, 0x8b, 0x5e, 0xb2, 0x04, 0x6f, 0x18, 0x15, 0x9e, 0xc5, 0x0a, 0xd2, 0xbf, 0x99, 0xf7, 0xf1,
		0x4d, 0x94, 0xdc, 0x20, 0x12, 0xcc, 0x91, 0xe1, 0xe3, 0x52, 0x24, 0xc2, 0xd8, 0x11, 0x3c, 0xdf,
		0x2e, 0xed, 0xcb, 0xdb, 0x8f, 0xe3, 0xa5, 0xfd, 0x3a, 0xef, 0xe3, 0xd7, 0x9b, 0xf1, 0xfc, 0x07,
		0x6a, 0x94, 0x5a, 0x40, 0xa5, 0x92, 0x90, 0xc1, 0x19, 0xc5, 0xf6, 0x4e, 0xaf, 0x5e, 0x42, 0x73,
		0x39, 0x0c, 0x2b, 0x8d, 0x5d, 0x21, 0x98, 0x15, 0x86, 0x55, 0xa1, 0x32, 0x44, 0x19, 0x9b, 0x2a,
		0x0b, 0x08, 0x30, 0x16, 0xd5, 0xdb, 0x2d, 0x57, 0x36, 0x77, 0x6d, 0xe1, 0x87, 0x8f, 0x89, 0xd2,
		0x5f, 0x72, 0xad, 0x34, 0x3e, 0x1d, 0xaf, 0x89, 0x4b, 0xb9, 0x60, 0xe2, 0x31, 0xa4, 0x52, 0x8b,
		0x93, 0xb3, 0x91, 0x0c, 0xd4, 0x28, 0xb5, 0xf3, 0xa9, 0xdf, 0xd9, 0x11, 0x55, 0xa9, 0xdf, 0x93,
		0x6f, 0x35, 0x2b, 0x65, 0xef, 0x15, 0x13, 0x59, 0x41, 0xa5, 0x2b, 0xa8, 0x72, 0x05, 0xbb, 0x41,
		0x52, 0xe1, 0xdc, 0x2e, 0x17, 0x01, 0xa6, 0x0d, 0x41, 0x55, 0x05, 0x6d, 0xd6, 0x16, 0x84, 0xd0,
		0xc7, 0xb4, 0xd1, 0x78, 0xa0, 0xa7, 0x6e, 0x17, 0xa8, 0x86, 0x03, 0x00, 0x0f, 0x27, 0x6b, 0x92,
		0x50, 0x22, 0xd5, 0x5e, 0xcf, 0x5c, 0xf2, 0x89, 0x45, 0xe2, 0x42, 0x88, 0x70, 0xe1, 0x82, 0x27,
		0x26, 0xdd, 0x65, 0x9f, 0x26, 0x94, 0x5d, 0x62, 0x04, 0x24, 0x16, 0xcc, 0xc4, 0x95, 0x30, 0x53,
		0xa4, 0xf4, 0x39, 0x74, 0x69, 0x48, 0xdd, 0x77, 0xc9, 0x53, 0xf3, 0xb8, 0xdf, 0x07, 0xbd, 0xec,
		0x45, 0x7c, 0x9f, 0xdc, 0x96, 0xba, 0x0b, 0x37, 0x9d, 0xa4, 0xe2, 0x7c, 0xc3, 0xbc, 0xd6, 0x24,
		0x7a, 0x98, 0xf8, 0x6d, 0x99, 0x3e, 0xfd, 0x40, 0x23, 0x27, 0x64, 0x41, 0x0e, 0x62, 0x4a, 0xed,
		0x6b, 0x12, 0xd8, 0xa1, 0x3d, 0xa0, 0x82, 0x86, 0x11, 0xf1, 0x39, 0x19, 0x4f, 0x7b, 0xd4, 0xe1,
		0x1d, 0xde, 0xf6, 0x88, 0x3d, 0xf1, 0x25, 0x61, 0x11, 0xe1, 0xbe, 0x20, 0x8e, 0x1d, 0x24, 0xf2,
		0x86, 0xf8, 0x1e, 0x09, 0x63, 0xce, 0x19, 0xbf, 0x27, 0xed, 0xeb, 0x43, 0x22, 0x7a, 0x94, 0x44,
		0x34, 0x7c, 0xa0, 0x61, 0x87, 0x0f, 0xe2, 0x48, 0xa4, 0xd7, 0xda, 0xfd, 0xbe, 0xff, 0x23, 0xfd,
		0x93, 0xd3, 0x67, 0x94, 0x0b, 0x22, 0x7c, 0xe2, 0xa4, 0xea, 0x3a, 0x0e, 0x69, 0xf2, 0x7d, 0x44,
		0x27, 0x9e, 0xe1, 0x48, 0x12, 0x10, 0xd4, 0x5e, 0x14, 0x10, 0x04, 0x3b, 0x08, 0x08, 0x82, 0x55,
		0xeb, 0xaa, 0x0f, 0x2c, 0x94, 0x23, 0x33, 0x0b, 0x1e, 0x1a, 0x0a, 0x8a, 0x37, 0x19, 0x25, 0xf9,
		0xe2, 0x4f, 0x76, 0xc1, 0xf5, 0x78, 0x0b, 0x78, 0x7e, 0x98, 0xf2, 0x6a, 0xfb, 0xfa, 0xa1, 0x41,
		0x6c, 0xd7, 0x0d, 0x69, 0x14, 0x11, 0xcf, 0x1e, 0xb0, 0xfe, 0xe3, 0x11, 0xd0, 0xef, 0x5a, 0xdb,
		0x48, 0xbf, 0x6b, 0xb0, 0x87, 0x7e, 0xd7, 0xe0, 0xa5, 0xfc, 0xae, 0x3a, 0x1e, 0x97, 0x20, 0xa4,
		0xd1, 0xba, 0x1d, 0x2e, 0x97, 0x3c, 0x79, 0xce, 0x28, 0xe3, 0xfe, 0x98, 0xf7, 0x13, 0xe6, 0x4f,
		0x76, 0xc3, 0x2b, 0x9a, 0xfe, 0xc1, 0x7d, 0x45, 0xfa, 0xd4, 0xf6, 0x3a, 0xbc, 0xfc, 0xa3, 0xc7,
		0x9c, 0x1e, 0x71, 0xa9, 0x67, 0xc7, 0x7d, 0x11, 0x25, 0x22, 0xfd, 0x55, 0xb2, 0x48, 0xaf, 0x2a,
		0x89, 0x86, 0x88, 0x68, 0x2a, 0xe4, 0x5f, 0xa5, 0xbe, 0xb4, 0x57, 0x2f, 0xec, 0x8f, 0x29, 0xc8,
		0xb8, 0x49, 0xee, 0x98, 0x95, 0xd0, 0x79, 0x3f, 0x2b, 0xae, 0x06, 0x0f, 0x4d, 0x25, 0x5d, 0xd1,
		0x34, 0xaa, 0x2b, 0x9a, 0xa8, 0x2b, 0x50, 0x57, 0xec, 0xad, 0xae, 0x68, 0xa2, 0xae, 0x58, 0x8b,
		0xae, 0x68, 0xa2, 0xae, 0x50, 0x34, 0x4d, 0x80, 0x2e, 0x8b, 0xee, 0x73, 0x56, 0xbc, 0xdc, 0x09,
		0x80, 0x8a, 0xe7, 0x7f, 0x01, 0xcf, 0xc1, 0xdd, 0xfc, 0xf3, 0xd7, 0x77, 0xf6, 0x5d, 0xa7, 0xbf,
		0x79, 0x22, 0xa9, 0x96, 0xbd, 0xad, 0xfc, 0x5b, 0xce, 0x79, 0x37, 0xd9, 0x77, 0x9a, 0x7e, 0x93,
		0xf1, 0xf3, 0x4e, 0x3c, 0xeb, 0xd8, 0xe5, 0x1a, 0x59, 0x91, 0xb0, 0xc5, 0xac, 0x2c, 0x98, 0x75,
		0xce, 0x8e, 0xae, 0x7c, 0xf2, 0xc6, 0xf3, 0xb5, 0xf1, 0x58, 0xeb, 0xd6, 0x9f, 0xfc, 0x61, 0x81,
		0x76, 0x5d, 0x7c, 0x7a, 0xb0, 0x4c, 0x6a, 0x49, 0x6b, 0x45, 0x69, 0x99, 0xb3, 0xd4, 0xfb, 0xbf,
		0x98, 0x17, 0x9e, 0x33, 0xde, 0xc7, 0x24, 0x7d, 0xfe, 0x5d, 0x66, 0xa8, 0xff, 0xdc, 0xbb, 0x2c,
		0x06, 0x43, 0x4b, 0xc1, 0x8f, 0x0c, 0xd8, 0x91, 0x3b, 0xd4, 0x91, 0x55, 0x2a, 0x60, 0xf0, 0x02,
		0x56, 0x11, 0xd2, 0x87, 0x36, 0x30, 0xdf, 0xeb, 0x32, 0x5f, 0x4c, 0xc9, 0x76, 0x07, 0x8c, 0xa7,
		0x9b, 0x24, 0x8e, 0xe4, 0x4f, 0xf4, 0xa6, 0x46, 0xe1, 0xc9, 0x1e, 0x9e, 0xec, 0x29, 0x9c, 0xec,
		0x51, 0x1e, 0x0f, 0x68, 0x98, 0xa9, 0x1d, 0xc0, 0xc9, 0x5e, 0x43, 0xe2, 0xda, 0x4b, 0x1e, 0x0f,
		0xe4, 0x97, 0xf1, 0xd6, 0xbf, 0x11, 0x21, 0xe3, 0xf7, 0x30, 0x28, 0x5e, 0x4b, 0xde, 0x21, 0x06,
		0x59, 0x4e, 0xf5, 0x64, 0x88, 0xeb, 0xff, 0xe0, 0x90, 0x41, 0xc7, 0xe9, 0x09, 0x3a, 0x8d, 0x44,
		0xf2, 0x84, 0x66, 0x83, 0x05, 0xfd, 0x76, 0xca, 0x49, 0x80, 0x97, 0x4e, 0x1f, 0x7e, 0x46, 0x3d,
		0x2e, 0x1c, 0x32, 0x7a, 0xf4, 0x16, 0x39, 0x06, 0x8c, 0x8a, 0x83, 0x64, 0xad, 0x37, 0x22, 0x1a,
		0x44, 0xe5, 0xe8, 0x95, 0x79, 0x96, 0x47, 0x6d, 0x11, 0x87, 0x2b, 0x3d, 0x7b, 0x65, 0x9e, 0x35,
		0x60, 0xdf, 0xd6, 0x6c, 0xbb, 0x4f, 0xbc, 0xda, 0xcb, 0xc6, 0xd8, 0xa6, 0xef, 0xbe, 0xfe, 0x23,
		0xd3, 0xc3, 0xed, 0x3a, 0x78, 0xbf, 0x48, 0x34, 0xf5, 0x8d, 0x8c, 0xa2, 0x36, 0xcd, 0x28, 0x5b,
		0x75, 0xfe, 0x3e, 0x49, 0xa6, 0x8d, 0xe4, 0xa9, 0x02, 0xa1, 0xad, 0x8c, 0xa1, 0x5c, 0x1a, 0x84,
		0xd4, 0xb1, 0x05, 0x75, 0xd7, 0xcc, 0x28, 0x11, 0x94, 0x3b, 0xcd, 0x73, 0xc9, 0xc4, 0xbb, 0x6f,
		0x4f, 0x10, 0xc6, 0x02, 0xb3, 0xa6, 0xc7, 0xee, 0x7b, 0x34, 0xb4, 0xfa, 0xf6, 0x23, 0x0d, 0x2d,
		0xe6, 0xc9, 0x03, 0xfb, 0xa7, 0x03, 0x11, 0xdb, 0xef, 0x28, 0xb6, 0x57, 0x88, 0xc4, 0x2b, 0x02,
		0xde, 0x52, 0x97, 0x8a, 0x05, 0x8c, 0xc8, 0x93, 0x28, 0x98, 0x57, 0xba, 0x2e, 0x5c, 0x4c, 0x93,
		0x71, 0x2f, 0xd9, 0xfd, 0xa6, 0xbe, 0x4b, 0x7e, 0x49, 0x5d, 0x4a, 0x5a, 0x34, 0x90, 0x8a, 0x3a,
		0x1a, 0x5b, 0x43, 0xb2, 0xd1, 0x47, 0x13, 0xf6, 0x93, 0x7a, 0x14, 0x52, 0x31, 0x89, 0x54, 0x34,
		0xd2, 0x2a, 0xb1, 0xec, 0x26, 0xa1, 0x99, 0x1b, 0x61, 0x3b, 0xdf, 0x6f, 0xd3, 0x67, 0x47, 0x30,
		0x23, 0x43, 0x25, 0xc4, 0x32, 0x88, 0x65, 0xb6, 0x1c, 0xcb, 0x30, 0xcf, 0x62, 0xdc, 0xa5, 0x3f,
		0xe5, 0x41, 0x4c, 0x31, 0x02, 0xd1, 0x0b, 0x7a, 0x26, 0xd5, 0x90, 0x8e, 0x54, 0x4d, 0xe0, 0x11,
		0x03, 0x49, 0x38, 0xb6, 0x80, 0x79, 0xaf, 0x00, 0x91, 0xa7, 0x92, 0xe7, 0x3a, 0x4e, 0xd2, 0x04,
		0xca, 0x19, 0xdd, 0x4c, 0x4c, 0xf5, 0x0c, 0x4c, 0x40, 0x1e, 0xab, 0x52, 0xfe, 0x6a, 0x41, 0x92,
		0x7a, 0xad, 0x71, 0xda, 0x38, 0x3b, 0x6e, 0x36, 0x4e, 0xb7, 0x87, 0x36, 0xeb, 0x91, 0xde, 0xe8,
		0x27, 0x45, 0x3f, 0xe9, 0xce, 0xfa, 0x49, 0xdb, 0x12, 0x80, 0x61, 0xaf, 0x8d, 0x8a, 0x8c, 0x40,
		0x68, 0x4f, 0xa0, 0x3d, 0xb1, 0xed, 0xf6, 0x84, 0x4c, 0xd6, 0x09, 0x24, 0xdb, 0x04, 0x9c, 0xaa,
		0x54, 0xc7, 0x54, 0x25, 0x39, 0xdd, 0xb5, 0x39, 0xa9, 0x4a, 0x79, 0xd4, 0x37, 0x3c, 0x02, 0x7d,
		0x34, 0x10, 0xc3, 0xc4, 0xe1, 0xc2, 0x6f, 0xaf, 0xc3, 0xc4, 0x65, 0x59, 0x73, 0x42, 0xae, 0xc1,
		0x89, 0xad, 0xb4, 0xb4, 0x04, 0x5e, 0x73, 0x4c, 0x99, 0x61, 0x75, 0x18, 0x57, 0xff, 0x2d, 0x89,
		0xf9, 0xb8, 0x73, 0x38, 0x43, 0x1b, 0x63, 0x6c, 0x6d, 0x06, 0x87, 0x31, 0xba, 0x82, 0xe5, 0x4e,
		0x94, 0x6a, 0x98, 0xcd, 0xd5, 0xd9, 0x56, 0x2e, 0x78, 0x2d, 0xee, 0x5b, 0xff, 0xf5, 0xb9, 0x4a,
		0xa8, 0x7f, 0x21, 0x8c, 0xcf, 0x14, 0xc6, 0x5e, 0xdb, 0x42, 0xd0, 0x90, 0x83, 0x13, 0x35, 0x8a,
		0x09, 0xca, 0xe5, 0xbb, 0xaa, 0x75, 0xde, 0xfd, 0x7d, 0x57, 0xb3, 0xce, 0xbb, 0xd9, 0xc7, 0x5a,
		0xfa, 0x23, 0xfb, 0x5c, 0xbf, 0xab, 0x5a, 0x8d, 0xd1, 0xe7, 0x93, 0xbb, 0xaa, 0x75, 0xd2, 0xad,
		0x74, 0x3a, 0x47, 0x95, 0x5f, 0xc7, 0x43, 0xf8, 0xc0, 0xf2, 0x1f, 0x77, 0x9d, 0x4e, 0xf0, 0xeb,
		0xef, 0x61, 0xf2, 0xff, 0xa7, 0x61, 0xf7, 0xcf, 0xca, 0x5b, 0x55, 0x26, 0x4d, 0x26, 0xee, 0x74,
		0x8e, 0xba, 0xaf, 0xe1, 0x6c, 0xd5, 0x5d, 0x29, 0x5b, 0x69, 0xa4, 0xdd, 0xa8, 0x1a, 0x1a, 0xea,
		0x86, 0x87, 0x59, 0x43, 0xc4, 0xb4, 0x48, 0x33, 0x66, 0xa8, 0xac, 0x4c, 0xc4, 0x19, 0x33, 0x64,
		0xf4, 0x44, 0x9f, 0xfa, 0xa8, 0xee, 0x8a, 0xd2, 0x70, 0x20, 0x6e, 0x54, 0x3f, 0x64, 0xf7, 0x2a,
		0xce, 0xe5, 0xa2, 0x9c, 0x69, 0x36, 0x1e, 0x81, 0x05, 0x02, 0x8b, 0x9d, 0x01, 0x16, 0x05, 0xac,
		0x50, 0x62, 0x6e, 0x02, 0x0c, 0x64, 0x9f, 0x19, 0x0b, 0x0a, 0x6c, 0x9f, 0x25, 0x80, 0x4a, 0xa0,
		0xfb, 0xcc, 0x2c, 0xd5, 0x74, 0x6f, 0x8b, 0x1e, 0x0d, 0x75, 0x54, 0x50, 0x6d, 0xa4, 0x34, 0x98,
		0xa3, 0x33, 0x4d, 0x16, 0x52, 0xdf, 0x73, 0x02, 0x9d, 0x49, 0xd2, 0x10, 0xfb, 0x3e, 0xe3, 0xdf,
		0xb3, 0xb8, 0x37, 0x9d, 0xa9, 0x1a, 0xa9, 0x5f, 0xd7, 0xe6, 0xae, 0x3f, 0x50, 0x53, 0x32, 0xc3,
		0x43, 0xd5, 0xb5, 0x85, 0x06, 0xf3, 0xcf, 0x4c, 0x91, 0x92, 0x11, 0x14, 0xdc, 0x3f, 0x33, 0xc5,
		0x04, 0x11, 0x41, 0xf1, 0xfe, 0xb3, 0xba, 0x27, 0xe5, 0x2f, 0xe5, 0x4a, 0xaf, 0xe9, 0x1c, 0xf9,
		0x32, 0xb4, 0x48, 0x43, 0x63, 0x92, 0x9c, 0x45, 0x65, 0x93, 0x11, 0xf4, 0x35, 0xff, 0x10, 0x51,
		0x30, 0xa2, 0x60, 0x44, 0xc1, 0x1b, 0x83, 0x82, 0xa3, 0xf8, 0x1b, 0xa7, 0x42, 0x1d, 0x05, 0xe7,
		0xe3, 0xd5, 0x50, 0xf0, 0x09, 0xa2, 0x60, 0x44, 0xc1, 0x66, 0x35, 0x00, 0xd4, 0xaf, 0x5c, 0x0c,
		0xe4, 0x54, 0x0c, 0xec, 0xe8, 0xbb, 0xfa, 0x4a, 0x8d, 0xf8, 0x64, 0x34, 0x91, 0x22, 0x79, 0xf3,
		0xad, 0xa1, 0xa8, 0xd4, 0x95, 0xb7, 0x88, 0x89, 0xad, 0x62, 0x66, 0xcb, 0xac, 0x52, 0x81, 0x69,
		0x6d, 0xa1, 0xf5, 0x28, 0x30, 0x95, 0x2d, 0xa5, 0xa9, 0xb8, 0x14, 0x39, 0x45, 0x75, 0xab, 0x19,
		0xdb, 0x72, 0x86, 0xb7, 0x9e, 0xa6, 0x8f, 0xc6, 0xf8, 0x56, 0x34, 0xb9, 0x25, 0xcd, 0x6e, 0x4d,
		0xd3, 0x5b, 0x74, 0x65, 0x5b, 0x75, 0x65, 0x5b, 0xd6, 0xf8, 0xd6, 0xd5, 0xdb, 0xc2, 0x9a, 0x5b,
		0x59, 0xdf, 0x87, 0xf4, 0xbc, 0x2d, 0xe3, 0x0b, 0x41, 0x5d, 0xeb, 0xff, 0x62, 0xdb, 0x35, 0xc1,
		0x70, 0x1a, 0x67, 0x56, 0xb3, 0xdb, 0x4a, 0xf3, 0x0c, 0x6b, 0x66, 0xc2, 0x75, 0x9e, 0x69, 0xe9,
		0x73, 0x5a, 0xf7, 0x45, 0x39, 0xcd, 0x80, 0xa5, 0x3e, 0x33, 0xa7, 0x42, 0xb8, 0xed, 0xea, 0xac,
		0xf9, 0x05, 0x92, 0xf7, 0xa1, 0x61, 0x71, 0x9f, 0x5b, 0x8e, 0xcf, 0x05, 0xbb, 0x8f, 0xfd, 0x38,
		0xb2, 0x72, 0xc5, 0x15, 0x19, 0x12, 0x77, 0xab, 0x90, 0xcd, 0xf3, 0x64, 0xb4, 0x72, 0x10, 0xf0,
		0x8b, 0xc9, 0xeb, 0x67, 0xe4, 0xf6, 0x82, 0x15, 0x31, 0x76, 0xdb, 0xe1, 0xc1, 0x66, 0xcc, 0xd2,
		0x35, 0x20, 0x3a, 0x35, 0x7d, 0x64, 0x6b, 0xd8, 0x65, 0x46, 0x7c, 0x68, 0x2f, 0xb1, 0xa7, 0x8c,
		0xf8, 0xd8, 0x5e, 0x76, 0x3f, 0x99, 0xf0, 0xc1, 0x6d, 0xec, 0xee, 0x39, 0x78, 0x99, 0xfb, 0xaf,
		0xd7, 0xb4, 0x03, 0xb6, 0x88, 0x7a, 0x5e, 0x4e, 0xc8, 0x96, 0x56, 0x1c, 0x25, 0xc1, 0x8f, 0x33,
		0xe0, 0x83, 0x87, 0xc6, 0x9b, 0xfc, 0x34, 0xf2, 0x4d, 0xe6, 0x64, 0x7c, 0x33, 0x32, 0xef, 0xd6,
		0x75, 0x54, 0xa1, 0xe0, 0xee, 0xcb, 0xac, 0x16, 0xab, 0x4f, 0xf9, 0x7d, 0xfa, 0xce, 0x9a, 0xbe,
		0xa4, 0xe9, 0xe9, 0xd0, 0xa3, 0x84, 0x1e, 0x25, 0xf4, 0x28, 0xad, 0x7e, 0xfb, 0xad, 0x64, 0x1b,
		0xa2, 0x77, 0x09, 0xbd, 0x4b, 0xe8, 0x5d, 0x32, 0xec, 0x5d, 0x8a, 0x19, 0x17, 0x67, 0x06, 0xfd,
		0x4a, 0x27, 0x06, 0xa6, 0x52, 0x6b, 0x01, 0xbd, 0x06, 0xd3, 0x48, 0xa7, 0x65, 0xf4, 0xb3, 0x93,
		0x6a, 0xb6, 0x92, 0x7e, 0x76, 0x5e, 0x53, 0x4d, 0x91, 0x9f, 0x67, 0x21, 0xdd, 0x66, 0xc9, 0x2b,
		0xda, 0x25, 0xd3, 0x4b, 0x66, 0xff, 0x5c, 0xdd, 0x92, 0x1d, 0xd7, 0x71, 0xcd, 0x76, 0xcb, 0xba,
		0xdc, 0x40, 0x9f, 0x2c, 0x7a, 0x8a, 0xd0, 0x53, 0x84, 0x9e, 0x22, 0xf4, 0x14, 0xad, 0xd7, 0x53,
		0x34, 0x6d, 0xb0, 0x61, 0x68, 0xab, 0x19, 0x61, 0x8c, 0xa1, 0xad, 0x2f, 0xea, 0xc7, 0xd9, 0xe1,
		0xd0, 0x56, 0x68, 0x0a, 0xbb, 0x9e, 0xd0, 0x31, 0x2b, 0x6c, 0x4a, 0xab, 0x8a, 0xe2, 0x35, 0x9a,
		0x6f, 0x9f, 0x77, 0xa9, 0x96, 0x76, 0xcc, 0xc0, 0xaa, 0xc7, 0x4e, 0xda, 0x98, 0xb0, 0x2a, 0xb2,
		0x93, 0xa6, 0x8e, 0x76, 0x35, 0xd9, 0x62, 0x32, 0x50, 0x55, 0x59, 0x28, 0x29, 0x75, 0x3a, 0xdc,
		0x29, 0x4a, 0x60, 0x8d, 0xb0, 0x65, 0x2d, 0x89, 0x6b, 0x32, 0x7c, 0x59, 0x4b, 0xc2, 0xae, 0x26,
		0x7c, 0x59, 0x47, 0xa2, 0xbe, 0x70, 0x27, 0x39, 0xd9, 0x7a, 0x33, 0x6a, 0x92, 0xd2, 0x90, 0x84,
		0x84, 0x14, 0x54, 0x91, 0x6c, 0xa4, 0x76, 0x93, 0xdc, 0x6e, 0xfc, 0xfb, 0xd7, 0x76, 0xf0, 0xd0,
		0xf8, 0x7a, 0x91, 0xdf, 0x6e, 0x8d, 0x0d, 0x5b, 0x3d, 0x3f, 0xfc, 0x61, 0x87, 0x2e, 0x24, 0xdd,
		0xb0, 0xd8, 0x92, 0x13, 0x63, 0x61, 0x75, 0x73, 0xaa, 0x58, 0x37, 0x67, 0xdf, 0xeb, 0xe6, 0x80,
		0x7d, 0xe8, 0xc5, 0x3a, 0x7d, 0xf3, 0xfd, 0x3e, 0xb5, 0x41, 0xcd, 0x99, 0x46, 0xd1, 0x96, 0x35,
		0xd4, 0x9f, 0xa8, 0x3f, 0x77, 0x4b, 0x7f, 0x1a, 0x51, 0x02, 0x03, 0x11, 0xc3, 0xa5, 0x7f, 0x32,
		0x08, 0xc5, 0x3e, 0x8a, 0xfd, 0x35, 0x89, 0xfd, 0x98, 0x71, 0x51, 0x6b, 0x2a, 0x48, 0xfd, 0x26,
		0x60, 0x88, 0xda, 0x99, 0xa7, 0x82, 0x54, 0xd6, 0x39, 0xc3, 0x2c, 0x0e, 0xbe, 0x9a, 0x8a, 0xd9,
		0x03, 0xc6, 0x0e, 0xb8, 0xf4, 0x0f, 0xb2, 0x54, 0x62, 0xd3, 0x74, 0x0e, 0x13, 0xc7, 0xb4, 0x3b,
		0x39, 0x39, 0x3e, 0xd9, 0x7e, 0xf2, 0x6d, 0x85, 0xf1, 0xa6, 0x03, 0x94, 0xe0, 0xc5, 0xa7, 0x0d,
		0x60, 0xa5, 0x2f, 0x1f, 0xdf, 0x93, 0xd3, 0xf3, 0x5a, 0x2b, 0x2b, 0xb3, 0xcc, 0xa9, 0x20, 0xd7,
		0xa1, 0x2f, 0x7c, 0xc7, 0xef, 0xbf, 0x30, 0x76, 0x52, 0x2d, 0x45, 0xbd, 0x5a, 0xf8, 0xb4, 0x80,
		0x5c, 0x9b, 0xc3, 0xd1, 0x87, 0x08, 0xce, 0x11, 0x9c, 0x6f, 0x23, 0x38, 0xe7, 0x94, 0xdd, 0xf7,
		0xbe, 0xf9, 0x21, 0x1c, 0xa1, 0x17, 0x23, 0xb1, 0xaa, 0x31, 0xc2, 0x74, 0x90, 0xc6, 0xc6, 0xaa,
		0xc6, 0xba, 0x8c, 0xab, 0xff, 0x96, 0x04, 0xcb, 0xae, 0x18, 0x10, 0xe9, 0x58, 0xd5, 0x58, 0x65,
		0x91, 0xb0, 0xaa, 0xb1, 0x59, 0xb6, 0xc2, 0xa0, 0x17, 0x63, 0x22, 0xcd, 0x38, 0x6a, 0x35, 0x2e,
		0xe2, 0x8c, 0xa3, 0x58, 0x35, 0xd1, 0xa7, 0x3e, 0x6a, 0x13, 0xea, 0xb9, 0x8d, 0x4b, 0x54, 0x5a,
		0xd0, 0xa6, 0x1e, 0x33, 0x7c, 0x3b, 0x67, 0x2e, 0x04, 0x1c, 0x08, 0x38, 0x76, 0x04, 0x70, 0x04,
		0xbd, 0xc7, 0x48, 0x91, 0xaf, 0x37, 0x00, 0x68, 0x24, 0x2a, 0xdb, 0xb6, 0xbc, 0x0b, 0xeb, 0x63,
		0xf7, 0x57, 0x7d, 0x58, 0x6e, 0x4d, 0xff, 0x5e, 0x79, 0x5d, 0x79, 0x8b, 0xba, 0x1c, 0x75, 0x39,
		0xea, 0xf2, 0x6d, 0xd6, 0xe5, 0xd8, 0xa1, 0x00, 0x75, 0x36, 0xea, 0xec, 0x79, 0x9e, 0x59, 0xec,
		0x4f, 0xb0, 0x49, 0xfd, 0x09, 0x1e, 0xb9, 0x3d, 0x60, 0xce, 0xf6, 0x35, 0x04, 0xc8, 0x9f, 0x5b,
		0xaf, 0x27, 0x80, 0x89, 0x52, 0xfe, 0x58, 0x85, 0x1f, 0x91, 0x1e, 0x22, 0xbd, 0x5d, 0x43, 0x7a,
		0x98, 0xbf, 0xb3, 0x7b, 0xf9, 0x3b, 0x2f, 0x16, 0x56, 0x73, 0x56, 0x6f, 0xb6, 0xc8, 0x05, 0x27,
		0x97, 0x89, 0xba, 0xe1, 0x54, 0x90, 0x3c, 0xe7, 0x81, 0x7c, 0xa1, 0x91, 0xdf, 0x8f, 0x05, 0xf3,
		0x39, 0x06, 0xdb, 0x2c, 0x12, 0x49, 0x60, 0x22, 0x62, 0x08, 0xce, 0xea, 0xd5, 0x24, 0x86, 0xe0,
		0xac, 0x9f, 0x9b, 0x76, 0x21, 0xbf, 0x0c, 0x18, 0xa1, 0x43, 0x74, 0x13, 0xcc, 0xfe, 0x1e, 0xdd,
		0xcf, 0x54, 0xfc, 0x92, 0x56, 0x5b, 0x77, 0x05, 0x05, 0x56, 0x0a, 0x42, 0x1a, 0x81, 0xf4, 0x96,
		0x42, 0xac, 0xd1, 0x75, 0x7a, 0x0f, 0x41, 0x98, 0x47, 0xda, 0xd7, 0x0f, 0x0d, 0xc2, 0x22, 0x42,
		0x79, 0xf2, 0x88, 0x2e, 0xf1, 0x39, 0x11, 0x3d, 0x16, 0x91, 0x62, 0x1d, 0xd7, 0x1f, 0x95, 0x14,
		0x29, 0xa8, 0x24, 0xb3, 0x71, 0x49, 0x20, 0xfa, 0x98, 0xc6, 0x99, 0x07, 0x06, 0xd4, 0x0c, 0x54,
		0xbd, 0x28, 0xf0, 0x90, 0x92, 0x3a, 0x31, 0xc1, 0x21, 0x4a, 0xea, 0xc3, 0x2c, 0x7f, 0xa8, 0xa8,
		0x0b, 0x63, 0xab, 0xaf, 0x25, 0x91, 0x80, 0x6a, 0x40, 0x53, 0xfc, 0x97, 0xa4, 0x38, 0x55, 0x59,
		0xda, 0x2f, 0x26, 0xfe, 0xf3, 0xa4, 0x5c, 0x40, 0xa4, 0x12, 0x0b, 0x1e, 0x9a, 0x4b, 0x49, 0x33,
		0x19, 0x0b, 0xb5, 0x2c, 0x63, 0x47, 0x32, 0xe8, 0x74, 0xec, 0x96, 0x5f, 0xe2, 0xe3, 0x82, 0xb8,
		0xe1, 0x61, 0x6e, 0x77, 0xe8, 0xe6, 0x54, 0x76, 0xab, 0x2b, 0x6f, 0x46, 0xb0, 0xdb, 0x5c, 0x4f,
		0x7d, 0xcb, 0x06, 0x89, 0x96, 0xa0, 0x01, 0x1c, 0xc5, 0xba, 0xc0, 0x4e, 0xb5, 0x31, 0x7e, 0x19,
		0xe3, 0x97, 0x81, 0xac, 0x39, 0x21, 0xd7, 0x30, 0x7e, 0xd9, 0xf0, 0x5b, 0x12, 0x3c, 0x9a, 0x34,
		0x60, 0x0f, 0xbf, 0x44, 0xfc, 0x72, 0x73, 0x07, 0xe2, 0x97, 0x5b, 0xbf, 0x27, 0x23, 0x89, 0xaa,
		0x87, 0x8d, 0x61, 0xa5, 0x55, 0x29, 0x3f, 0xfd, 0xae, 0x55, 0xf9, 0x55, 0x3d, 0x3c, 0x19, 0x96,
		0xcb, 0x73, 0xfe, 0xf2, 0x76, 0xde, 0x1c, 0x95, 0xdf, 0xe5, 0x72, 0x39, 0x8f, 0x5c, 0x9e, 0x8a,
		0x66, 0xbe, 0xab, 0xd6, 0xba, 0x6f, 0xd3, 0x8f, 0xd9, 0xff, 0x45, 0x3c, 0xb4, 0xd4, 0xc5, 0x15,
		0x93, 0x51, 0xd0, 0xe5, 0xf2, 0xdd, 0x7f, 0x5a, 0xdd, 0x3f, 0x5b, 0x95, 0x5f, 0xcd, 0xe1, 0xe8,
		0x73, 0xfa, 0x7f, 0xe5, 0x77, 0xf9, 0xe8, 0x75, 0xa7, 0x73, 0x74, 0xf4, 0xba, 0x92, 0xbd, 0x48,
		0x7e, 0xdd, 0xeb, 0xec, 0xaf, 0x6f, 0x5b, 0xad, 0x99, 0xaf, 0x2a, 0xe5, 0x3f, 0x8e, 0x34, 0x03,
		0xb2, 0x33, 0xfa, 0xb5, 0x30, 0x2e, 0xdb, 0x94, 0xcb, 0xd2, 0xac, 0xeb, 0xd2, 0x94, 0xa8, 0x36,
		0xee, 0xca, 0x34, 0x2e, 0xba, 0x8d, 0xbb, 0x36, 0xd5, 0x44, 0xba, 0xfa, 0x28, 0x8c, 0xe5, 0x42,
		0xc0, 0x84, 0x80, 0x69, 0xf3, 0x00, 0x53, 0x01, 0x97, 0x30, 0x9a, 0x6b, 0x83, 0xa2, 0xb9, 0x7a,
		0x8e, 0x56, 0x8f, 0xa5, 0xe3, 0xe9, 0xcc, 0x11, 0x9d, 0xa9, 0x1a, 0xe9, 0x69, 0xb2, 0xcd, 0x5d,
		0x7f, 0xb0, 0x7d, 0xc1, 0x65, 0x09, 0x19, 0xf5, 0x22, 0xcb, 0x26, 0x88, 0xd8, 0x22, 0xc7, 0x2f,
		0x1c, 0xa2, 0x96, 0x2f, 0x83, 0x72, 0x1b, 0x31, 0x82, 0x71, 0x6e, 0x88, 0x82, 0x11, 0x05, 0xef,
		0x39, 0x0a, 0xd6, 0xeb, 0xcf, 0x66, 0xa4, 0x1f, 0x1b, 0x62, 0x62, 0xc4, 0xc4, 0x2b, 0xd2, 0x07,
		0x57, 0x36, 0x77, 0x6d, 0xe1, 0x87, 0x8f, 0xf2, 0x87, 0x29, 0x06, 0xf1, 0xb4, 0x6a, 0x2f, 0x34,
		0x8d, 0xde, 0x67, 0x9a, 0xbd, 0xce, 0x34, 0x94, 0x97, 0x89, 0x5e, 0x66, 0xa6, 0x7a, 0x97, 0x19,
		0xef, 0x7b, 0x65, 0xae, 0xcf, 0x95, 0x46, 0x47, 0x28, 0x23, 0xbd, 0xc7, 0x0a, 0x12, 0xd7, 0xea,
		0x67, 0xbb, 0x4b, 0xe4, 0x9d, 0xe8, 0xa9, 0x81, 0x60, 0x16, 0xc1, 0x2c, 0x82, 0xd9, 0xa1, 0x4a,
		0xac, 0xb5, 0x22, 0x8a, 0x55, 0x8b, 0x38, 0x43, 0xf8, 0x8a, 0xf0, 0x75, 0x35, 0x1a, 0x40, 0x1f,
		0x82, 0x52, 0x1e, 0x0f, 0x68, 0x98, 0xc5, 0x01, 0xee, 0xab, 0x33, 0x37, 0x48, 0xd3, 0x5f, 0x42,
		0x3d, 0x05, 0x54, 0x33, 0xa7, 0xcb, 0x52, 0xa7, 0x2e, 0xe3, 0x0f, 0x76, 0x9f, 0xb9, 0xda, 0x7e,
		0x5d, 0xc6, 0x6d, 0xc7, 0xa1, 0x51, 0xc4, 0x12, 0x88, 0xa0, 0xeb, 0xd9, 0x8d, 0xf9, 0x77, 0xee,
		0xff, 0xe0, 0x3a, 0xf3, 0x9c, 0x24, 0xf3, 0x08, 0xca, 0x45, 0x86, 0xe4, 0x34, 0x66, 0x6a, 0xa6,
		0x14, 0x8f, 0x83, 0x3e, 0x4b, 0x28, 0xae, 0x33, 0xd3, 0x69, 0xea, 0xd2, 0x0f, 0x04, 0x1b, 0xb0,
		0x48, 0x6c, 0x63, 0x5a, 0xf4, 0x98, 0xed, 0xc0, 0x66, 0xec, 0xf4, 0x44, 0x05, 0x35, 0x41, 0xc5,
		0xe4, 0x67, 0xe6, 0x99, 0x62, 0x3a, 0x3d, 0x4f, 0xf8, 0x68, 0x1f, 0x68, 0xa6, 0x7c, 0x8f, 0x17,
		0xb7, 0x45, 0x4e, 0x35, 0x26, 0x1a, 0xcb, 0x0a, 0x3d, 0xe7, 0xfc, 0x78, 0x07, 0x68, 0xb5, 0x30,
		0x2f, 0x76, 0x64, 0x8b, 0x34, 0xd0, 0x41, 0x9f, 0xcf, 0xa1, 0x9e, 0xf1, 0x69, 0xd0, 0xac, 0xf9,
		0xf2, 0xf1, 0x3d, 0x69, 0xd4, 0xcf, 0x8f, 0x5b, 0xe4, 0xca, 0xe6, 0xf6, 0x7d, 0x9a, 0x66, 0x4b,
		0xda, 0xdc, 0xf3, 0xc3, 0x41, 0xaa, 0x6d, 0xc9, 0x3b, 0x3b, 0xa2, 0xc4, 0xf3, 0x43, 0x22, 0x7a,
		0xb4, 0xc3, 0xc7, 0x33, 0xcc, 0x54, 0x16, 0x27, 0xe5, 0xf6, 0x75, 0x65, 0xf2, 0x0a, 0x8b, 0xb4,
		0x83, 0x3c, 0x0d, 0xf2, 0x26, 0x05, 0xa4, 0xb7, 0xef, 0x3b, 0x3c, 0xbd, 0xdf, 0x59, 0xb3, 0xde,
		0x22, 0xed, 0xeb, 0x87, 0x26, 0x49, 0xa3, 0xe4, 0xfb, 0x34, 0x8a, 0x8a, 0x84, 0xc9, 0x8b, 0x38,
		0x99, 0x2d, 0x81, 0x94, 0xb1, 0xb2, 0xbe, 0x5f, 0xa5, 0xb9, 0xa5, 0x9b, 0x83, 0xba, 0x1e, 0x8b,
		0x6b, 0x0b, 0x96, 0x75, 0xf3, 0x2d, 0xc1, 0x43, 0xf4, 0x53, 0xa0, 0x9f, 0x62, 0xef, 0xfc, 0x14,
		0x58, 0x5c, 0x02, 0x9b, 0xc3, 0x2a, 0x8b, 0x23, 0x4c, 0xde, 0x5f, 0xb1, 0x98, 0xc1, 0xe4, 0xfd,
		0x67, 0xb3, 0x37, 0x9b, 0xeb, 0x6d, 0x0e, 0xdb, 0xdc, 0xfd, 0xe6, 0xb0, 0x1f, 0xa8, 0x67, 0xc7,
		0x7d, 0x01, 0x92, 0x1b, 0xa5, 0xf4, 0xc8, 0x4b, 0x8e, 0x26, 0x5d, 0xec, 0x56, 0xb8, 0x26, 0x8f,
		0x33, 0x76, 0x2b, 0xdc, 0x89, 0x26, 0xb5, 0x2f, 0x56, 0x24, 0xaa, 0x71, 0xd6, 0xac, 0xb5, 0xc8,
		0xa8, 0x58, 0x09, 0xf9, 0xc0, 0x22, 0xc7, 0x7f, 0xa0, 0xe1, 0x63, 0x6a, 0x42, 0xb6, 0xaf, 0xc9,
		0x03, 0x0d, 0xa3, 0xc4, 0xac, 0x6c, 0x26, 0xe6, 0xe2, 0x43, 0x73, 0xca, 0x60, 0xbc, 0xa1, 0xe9,
		0xf1, 0x3a, 0x69, 0x1e, 0xd5, 0x8f, 0x6a, 0x87, 0xa4, 0x1d, 0x7d, 0xf1, 0x63, 0xa1, 0x14, 0xbf,
		0xbb, 0x1f, 0xb5, 0xa4, 0x56, 0x41, 0x6b, 0x2c, 0x39, 0x85, 0xa8, 0x75, 0x7f, 0x51, 0x2b, 0xb6,
		0x64, 0x46, 0x90, 0xb3, 0x17, 0x20, 0x27, 0x66, 0x5c, 0x1c, 0xd7, 0x15, 0x30, 0xce, 0xe9, 0xce,
		0xb6, 0x64, 0xae, 0xd5, 0xcf, 0xaa, 0xd8, 0x94, 0x59, 0x95, 0x7a, 0x8d, 0xfa, 0x79, 0xe3, 0xbc,
		0x79, 0x5a, 0x3f, 0xc7, 0xce, 0xcc, 0xeb, 0xf1, 0x9c, 0x6c, 0x69, 0x09, 0xd9, 0x6a, 0x75, 0x4e,
		0xaf, 0xe1, 0x43, 0xf2, 0xef, 0x45, 0x50, 0x35, 0xa0, 0x0e, 0xf3, 0x98, 0x93, 0xba, 0x89, 0xe6,
		0x61, 0xd8, 0x13, 0xb4, 0x10, 0x9e, 0xb1, 0x10, 0x56, 0x45, 0x6f, 0xb4, 0x12, 0xd0, 0x4a, 0x40,
		0x2b, 0x41, 0xcb, 0x4a, 0xc0, 0xde, 0xd0, 0x68, 0x2f, 0xac, 0xdb, 0x5e, 0xc0, 0xda, 0x6a, 0xba,
		0x8c, 0xab, 0xff, 0x96, 0x04, 0xe3, 0xca, 0x0d, 0x88, 0x74, 0xac, 0xad, 0xa6, 0xb2, 0x48, 0x58,
		0x5b, 0x0d, 0x6b, 0xab, 0xad, 0xd8, 0xb6, 0xd4, 0x45, 0xdb, 0xea, 0xa8, 0xdb, 0x2c, 0xfa, 0x36,
		0x25, 0xaa, 0x8d, 0xa3, 0x71, 0xe3, 0xa2, 0xdb, 0x38, 0x3a, 0x57, 0x13, 0xe9, 0xea, 0xa3, 0x36,
		0x21, 0x11, 0x8f, 0x45, 0x56, 0x98, 0x1d, 0xa0, 0xa9, 0xe3, 0xa5, 0x62, 0x0a, 0x84, 0x4d, 0x08,
		0x9b, 0x76, 0x04, 0x36, 0xd1, 0x41, 0x20, 0x1e, 0x75, 0x70, 0xd2, 0x31, 0x2a, 0x3a, 0x54, 0x74,
		0xa8, 0xe8, 0x36, 0x46, 0xd1, 0x8d, 0x2b, 0xc2, 0x59, 0xd0, 0xde, 0x00, 0x33, 0x7c, 0x3b, 0x67,
		0x2e, 0x54, 0x7d, 0xa8, 0xfa, 0x76, 0x44, 0xf5, 0x05, 0xbd, 0xc7, 0x48, 0x91, 0xaf, 0x37, 0xc0,
		0x53, 0x30, 0x69, 0xe2, 0xd7, 0x87, 0xe5, 0xd6, 0xf4, 0xef, 0x95, 0xd7, 0x95, 0xb7, 0x68, 0xb4,
		0xa2, 0x2e, 0x47, 0x5d, 0xbe, 0xcd, 0xba, 0x1c, 0x0b, 0x82, 0xa3, 0xce, 0x46, 0x9d, 0x3d, 0xef,
		0x68, 0x15, 0xcb, 0x81, 0x6f, 0x52, 0x39, 0xf0, 0x47, 0x6e, 0x0f, 0xb6, 0xb1, 0x8a, 0x49, 0xfe,
		0xdc, 0x9a, 0x95, 0x3e, 0x0c, 0x54, 0xce, 0xc6, 0xa2, 0xd7, 0x88, 0xf4, 0x10, 0xe9, 0xed, 0x31,
		0xd2, 0x4b, 0x93, 0x60, 0xf5, 0xca, 0x04, 0x52, 0xc4, 0x79, 0x88, 0xf3, 0x76, 0x05, 0xe7, 0x61,
		0x95, 0x40, 0x52, 0x62, 0xdc, 0xf1, 0x07, 0x41, 0x9f, 0xea, 0x95, 0x9a, 0xab, 0x65, 0x01, 0xd0,
		0xb6, 0xd3, 0xb3, 0x35, 0x0b, 0xf2, 0xd5, 0x73, 0x49, 0xa3, 0x37, 0xcb, 0x71, 0xa6, 0x1e, 0xfa,
		0xf6, 0xa3, 0x76, 0x71, 0xc0, 0x20, 0xf4, 0xbf, 0xd1, 0x2d, 0xac, 0x9d, 0x97, 0xbc, 0xbb, 0x6e,
		0x8d, 0xba, 0x82, 0x35, 0xf4, 0x80, 0x67, 0x46, 0x42, 0xbd, 0x8e, 0x2d, 0x63, 0xe6, 0xd2, 0xab,
		0x05, 0x98, 0xb1, 0x56, 0x8b, 0xd4, 0x11, 0x03, 0x17, 0x94, 0xdd, 0x94, 0xba, 0x72, 0x06, 0x12,
		0x99, 0x4f, 0x8f, 0x8e, 0x8f, 0xea, 0x58, 0x02, 0x4e, 0x41, 0xc1, 0x9b, 0x5d, 0x01, 0xac, 0xd6,
		0x86, 0xd6, 0x22, 0x5a, 0x8b, 0x9b, 0x67, 0x2d, 0x62, 0xb5, 0xb6, 0xdd, 0xab, 0xd6, 0xb6, 0x35,
		0x55, 0x5e, 0x30, 0x41, 0xd3, 0x90, 0xde, 0xc5, 0xcc, 0xcb, 0x35, 0xa8, 0x4b, 0xcc, 0xbc, 0x5c,
		0x3f, 0x37, 0xed, 0x42, 0x55, 0x41, 0x60, 0x62, 0x26, 0xd1, 0x2d, 0x2b, 0x38, 0x12, 0x1b, 0xc6,
		0xea, 0x0a, 0x1e, 0x68, 0x10, 0x5f, 0x45, 0x91, 0x95, 0x82, 0x90, 0x46, 0x20, 0xfd, 0xa5, 0x90,
		0x62, 0x7a, 0x9d, 0xde, 0x43, 0x10, 0xe6, 0x65, 0x25, 0xa7, 0x59, 0x44, 0x28, 0x4f, 0x1e, 0xd1,
		0x25, 0x3e, 0x27, 0xa2, 0xc7, 0x22, 0x52, 0xac, 0xe3, 0xfa, 0x93, 0x51, 0x23, 0x05, 0xb5, 0x64,
		0x36, 0x1d, 0x15, 0x44, 0x1f, 0xd3, 0x78, 0xf3, 0xc0, 0x80, 0x9a, 0x81, 0xaa, 0x17, 0x05, 0x1e,
		0x52, 0x52, 0x27, 0x26, 0x38, 0x44, 0xad, 0x41, 0x93, 0x51, 0xfe, 0x50, 0x51, 0x17, 0xc6, 0x56,
		0x5f, 0x4b, 0x22, 0x01, 0xd5, 0x80, 0xa6, 0xf8, 0x2f, 0x49, 0x71, 0xaa, 0xb2, 0xb4, 0x5f, 0x4c,
		0xfc, 0xe7, 0x49, 0xb9, 0x80, 0x48, 0xa5, 0xbe, 0x1d, 0x09, 0xcb, 0xe9, 0xe5, 0x65, 0x9a, 0x16,
		0x53, 0x68, 0x1c, 0xb5, 0x3d, 0x31, 0x68, 0xc9, 0x02, 0xc8, 0x1d, 0x01, 0x4a, 0x1f, 0xf9, 0x41,
		0x8e, 0xf8, 0xc6, 0x47, 0x7a, 0x9e, 0xcc, 0xc2, 0x00, 0xb7, 0xaa, 0xf2, 0x91, 0x9d, 0xf2, 0xd6,
		0x9c, 0x3e, 0x92, 0xf3, 0x4a, 0x2b, 0x56, 0xe6, 0xd2, 0x47, 0x6c, 0x63, 0x11, 0x69, 0x0b, 0x6a,
		0xd9, 0xdc, 0xb5, 0x04, 0x1b, 0xc8, 0x28, 0x34, 0x48, 0x7c, 0x33, 0x38, 0x9e, 0xb9, 0xd4, 0xe9,
		0xb8, 0xbf, 0x1a, 0x43, 0x2b, 0xf9, 0x51, 0x1f, 0xfd, 0xb8, 0xcd, 0x7e, 0xb4, 0xa6, 0x7e, 0x94,
		0x3b, 0x9d, 0xa3, 0x4e, 0xc7, 0xfd, 0xb3, 0xf2, 0xb6, 0xfc, 0xbf, 0xbf, 0xef, 0x3a, 0x9d, 0x3f,
		0x3b, 0x1d, 0xab, 0x3b, 0x75, 0x85, 0x84, 0xcd, 0xd5, 0x5d, 0x3b, 0x70, 0x82, 0x5b, 0xfe, 0x0a,
		0x5a, 0x2f, 0x31, 0x50, 0xeb, 0x67, 0xcd, 0xe3, 0x16, 0xb9, 0xed, 0x51, 0x32, 0x16, 0x4f, 0xe4,
		0x5f, 0xa1, 0x1f, 0x07, 0xe4, 0xaa, 0xfd, 0x8e, 0x58, 0x84, 0x79, 0x9f, 0xec, 0x48, 0xbc, 0x97,
		0x91, 0x07, 0xa6, 0x95, 0xa3, 0xaa, 0x59, 0x6f, 0x56, 0x3f, 0xc2, 0xa9, 0x84, 0x20, 0x0a, 0x41,
		0xd4, 0xe6, 0x80, 0x28, 0x35, 0xe4, 0xe0, 0xff, 0xa0, 0x61, 0x9e, 0xbb, 0xc5, 0x3c, 0x00, 0x78,
		0x98, 0x1e, 0x87, 0xf8, 0x01, 0xf1, 0xc3, 0x88, 0xce, 0x23, 0xc1, 0x99, 0x81, 0x6b, 0x2b, 0xa4,
		0x1e, 0x04, 0x45, 0x9c, 0xca, 0xa1, 0x88, 0x1c, 0xd9, 0x7b, 0xad, 0x59, 0x30, 0x3f, 0xf1, 0x5d,
		0xf2, 0x4b, 0x0a, 0xd2, 0xb5, 0x68, 0x00, 0x3a, 0xf3, 0x80, 0x9f, 0x75, 0x18, 0x39, 0xe3, 0x80,
		0x9d, 0x6d, 0xec, 0x3a, 0x92, 0xb9, 0x11, 0xb6, 0xf3, 0xfd, 0x16, 0x18, 0xc8, 0xb4, 0x77, 0x48,
		0x66, 0x82, 0x4a, 0x88, 0x64, 0x10, 0xc9, 0x6c, 0x39, 0x92, 0xc9, 0x9d, 0x31, 0x92, 0xf8, 0x25,
		0xbd, 0x1a, 0x51, 0x0b, 0xa2, 0x96, 0x22, 0x32, 0x3e, 0x94, 0x6b, 0x93, 0x34, 0x76, 0x77, 0xec,
		0xb5, 0x86, 0xfd, 0xdb, 0x1e, 0xa0, 0x6e, 0x5d, 0x46, 0x1f, 0xd4, 0xaa, 0xa8, 0x55, 0xb7, 0x5c,
		0xab, 0xfa, 0x01, 0x0d, 0xad, 0x82, 0x65, 0x24, 0x95, 0xeb, 0xe4, 0x20, 0xd4, 0xb1, 0x3b, 0xaa,
		0x63, 0xaf, 0x6c, 0xee, 0xda, 0xc2, 0x0f, 0x1f, 0x97, 0x87, 0xf3, 0x2b, 0xe8, 0x63, 0x58, 0x62,
		0x0f, 0x24, 0x91, 0x07, 0x96, 0xb8, 0xa3, 0x96, 0xa8, 0x93, 0x65, 0xd3, 0xc4, 0xa0, 0x9a, 0xd8,
		0x59, 0x8a, 0xb4, 0xff, 0x03, 0xd4, 0xb0, 0x2e, 0xcd, 0x92, 0x11, 0x34, 0x12, 0xf2, 0x3d, 0x1e,
		0x49, 0x91, 0x17, 0x33, 0x6a, 0xd1, 0x0f, 0x18, 0x77, 0x92, 0x3d, 0x64, 0x38, 0xb0, 0xb9, 0x80,
		0x8c, 0x6b, 0xa6, 0x98, 0xdb, 0x17, 0x56, 0x16, 0x29, 0x01, 0x1a, 0x7b, 0xfa, 0xd4, 0xdf, 0x98,
		0x12, 0xc9, 0x6c, 0xff, 0x1d, 0x70, 0xba, 0x4e, 0x41, 0x84, 0x16, 0x81, 0x44, 0xa0, 0xa6, 0x8f,
		0x0e, 0xca, 0x23, 0x9f, 0x7d, 0x73, 0x58, 0xef, 0x9e, 0x49, 0xa2, 0xb7, 0x48, 0x13, 0x30, 0x72,
		0xc4, 0x56, 0xa0, 0x14, 0xa4, 0x82, 0xa9, 0x40, 0xb9, 0x42, 0xc9, 0x56, 0x91, 0x4d, 0x6a, 0xdf,
		0xc4, 0xf0, 0xa7, 0x4d, 0x42, 0xe6, 0x9f, 0x03, 0x1a, 0xde, 0x40, 0x81, 0xd0, 0xde, 0xe1, 0xf3,
		0x09, 0x2a, 0x21, 0x4a, 0x47, 0x94, 0xbe, 0xe5, 0x28, 0x7d, 0xaa, 0x44, 0x9d, 0x34, 0x4c, 0x07,
		0x14, 0xb6, 0x43, 0x9c, 0xbe, 0x47, 0xbe, 0x30, 0x60, 0xc1, 0xc3, 0xd5, 0x06, 0x00, 0x19, 0x29,
		0x60, 0xb8, 0xdf, 0x71, 0x3d, 0xd7, 0xbd, 0xc7, 0xe8, 0x02, 0xde, 0x28, 0x7f, 0xdf, 0x20, 0xc1,
		0x24, 0x99, 0x10, 0x13, 0x20, 0x26, 0xd8, 0x72, 0x4c, 0x10, 0x05, 0x94, 0xba, 0xf2, 0x60, 0x20,
		0xbb, 0x1c, 0x51, 0x00, 0xa2, 0x80, 0x9c, 0xce, 0xf7, 0x76, 0x7c, 0x4f, 0x9b, 0x0d, 0x00, 0x00,
		0x90, 0xd1, 0xff, 0xb0, 0x56, 0xc2, 0xb0, 0x14, 0x63, 0xb8, 0x04, 0x1a, 0x35, 0xbd, 0x85, 0x96,
		0xa8, 0xd2, 0xed, 0x71, 0xab, 0xde, 0xdb, 0x76, 0x08, 0xcb, 0x9d, 0x56, 0x27, 0x89, 0x5e, 0xaa,
		0xf5, 0x4b, 0x53, 0x69, 0x23, 0xd2, 0x56, 0xb6, 0x1a, 0x37, 0x4e, 0x16, 0x06, 0x61, 0xde, 0x4d,
		0xa2, 0x1d, 0x0e, 0x09, 0xf3, 0xfe, 0x62, 0xf7, 0xbd, 0x1b, 0x09, 0x55, 0xb1, 0xbf, 0x48, 0x72,
		0x29, 0xe1, 0x10, 0x5b, 0x22, 0xb6, 0xdc, 0x76, 0x6c, 0x29, 0x6c, 0xc1, 0x22, 0xc1, 0x1c, 0x80,
		0xb7, 0x69, 0x62, 0x8c, 0x1c, 0xca, 0xac, 0x21, 0xca, 0xdc, 0x36, 0x94, 0x29, 0xdb, 0x97, 0xb6,
		0xe4, 0xb2, 0xc8, 0xf1, 0xb9, 0x60, 0x3c, 0x66, 0xe2, 0x31, 0xcb, 0x34, 0x03, 0xb7, 0x4f, 0x9e,
		0x33, 0x07, 0xac, 0x91, 0x72, 0x75, 0x23, 0x1b, 0x29, 0x7b, 0x7b, 0xd8, 0x48, 0xd9, 0x7b, 0xa9,
		0x46, 0xca, 0x80, 0x20, 0x06, 0xb8, 0x29, 0x35, 0xcb, 0xb1, 0xc0, 0xd4, 0x4a, 0x15, 0x0f, 0xab,
		0xb2, 0xa7, 0xb5, 0x18, 0xb8, 0xde, 0x94, 0x4b, 0x39, 0x35, 0x05, 0x5d, 0x57, 0x9d, 0x62, 0x4c,
		0x58, 0xe4, 0x06, 0x8b, 0xdc, 0x18, 0xe1, 0xd5, 0x03, 0x03, 0xdc, 0x5c, 0x62, 0xdc, 0xfa, 0x16,
		0xfa, 0xb6, 0xeb, 0xd8, 0x91, 0xb0, 0x82, 0xef, 0x22, 0x82, 0x2b, 0xca, 0xd9, 0x29, 0x50, 0x4f,
		0xa2, 0x9e, 0x04, 0xc9, 0x53, 0x75, 0x9d, 0xe7, 0xf8, 0x71, 0x62, 0x26, 0x4b, 0x39, 0x12, 0x15,
		0x1c, 0x8a, 0x8a, 0x8e, 0x45, 0x0d, 0xa1, 0xad, 0xe2, 0x68, 0xd4, 0x75, 0x38, 0x1a, 0x73, 0xa9,
		0xe9, 0xbb, 0xd6, 0x14, 0x1c, 0x91, 0x5a, 0x0e, 0xc9, 0x15, 0x38, 0x26, 0x37, 0x91, 0x9a, 0x5b,
		0x51, 0x8e, 0x6d, 0x2b, 0x4b, 0x5c, 0xc2, 0xfc, 0x75, 0x7f, 0xbd, 0x6f, 0xf3, 0x77, 0x23, 0x65,
		0x79, 0x2d, 0xaf, 0x2b, 0x57, 0x85, 0xc8, 0x36, 0xb7, 0xe2, 0xa5, 0x2e, 0x5d, 0xb1, 0x00, 0x26,
		0xda, 0x06, 0x68, 0x1b, 0xe8, 0xda, 0x06, 0x2e, 0x8b, 0x1c, 0x3b, 0x74, 0xd5, 0xac, 0x82, 0x62,
		0x30, 0xda, 0x03, 0x68, 0x0f, 0xac, 0xd7, 0x1e, 0x38, 0xae, 0x2b, 0xd8, 0x03, 0xa7, 0x68, 0x0f,
		0xa0, 0x3d, 0xf0, 0x94, 0x74, 0x8d, 0xfa, 0x79, 0xe3, 0xbc, 0x79, 0x5a, 0x3f, 0x47, 0x2b, 0x00,
		0xad, 0x00, 0x65, 0x2b, 0x80, 0x30, 0xaf, 0xcd, 0x3f, 0xc0, 0xf4, 0x21, 0x62, 0xfe, 0xc5, 0x54,
		0x44, 0x84, 0x8f, 0x08, 0x1f, 0x11, 0xbe, 0x2e, 0xc2, 0xa7, 0x61, 0xe8, 0x87, 0x6a, 0xf8, 0x3e,
		0x1f, 0x8a, 0xe8, 0x1e, 0xd1, 0x3d, 0xa2, 0x7b, 0x44, 0xf7, 0x88, 0xee, 0x11, 0xdd, 0xef, 0x31,
		0xba, 0xbf, 0x84, 0x68, 0x43, 0xc4, 0xf6, 0x8b, 0x68, 0x88, 0xc8, 0x1e, 0x91, 0x3d, 0x22, 0x7b,
		0x5d, 0x64, 0x3f, 0x88, 0xfb, 0x82, 0xe9, 0xc5, 0xf5, 0x3c, 0x99, 0x02, 0x91, 0x3e, 0x22, 0xfd,
		0xf5, 0x22, 0x7d, 0x8c, 0xeb, 0x41, 0xa4, 0x8f, 0x71, 0x3d, 0x88, 0xf9, 0xb7, 0x21, 0xae, 0xe7,
		0x6a, 0xa4, 0x2c, 0x31, 0xae, 0x47, 0xc3, 0x0e, 0x58, 0x46, 0x57, 0xb4, 0x0d, 0xd0, 0x36, 0x40,
		0xdb, 0x40, 0xd7, 0x36, 0xf0, 0x1d, 0x41, 0x15, 0x6d, 0x82, 0x7c, 0x28, 0xda, 0x02, 0x68, 0x0b,
		0xa0, 0x2d, 0x80, 0xb6, 0x00, 0xda, 0x02, 0x68, 0x0b, 0xa0, 0xff, 0x3f, 0x05, 0xaa, 0x9f, 0x21,
		0x9a, 0x11, 0x91, 0xff, 0x62, 0x2a, 0x22, 0xce, 0x47, 0x9c, 0x8f, 0x38, 0x5f, 0x17, 0xe7, 0xc7,
		0x5c, 0xf3, 0x04, 0x60, 0x6a, 0x02, 0xc4, 0xfc, 0x88, 0xf9, 0x11, 0xf3, 0x23, 0xe6, 0x47, 0xcc,
		0x8f, 0x98, 0x1f, 0x31, 0x7f, 0x8a, 0x56, 0xff, 0x41, 0x87, 0xbf, 0x19, 0xd8, 0xff, 0x0f, 0x7a,
		0xf8, 0x11, 0xf9, 0x23, 0xf2, 0x37, 0x88, 0xfc, 0xd3, 0x46, 0x49, 0x56, 0x10, 0xfa, 0xc2, 0x57,
		0xc5, 0xfe, 0x53, 0x53, 0x20, 0xfa, 0x47, 0xf4, 0xbf, 0x5e, 0xf4, 0x8f, 0x71, 0xfe, 0x88, 0xfe,
		0x31, 0xce, 0x1f, 0x31, 0xff, 0x06, 0x61, 0xfe, 0x36, 0xff, 0x27, 0xd3, 0x8a, 0xd7, 0x10, 0xa5,
		0x88, 0xa8, 0x5f, 0x82, 0x94, 0x88, 0xfb, 0x11, 0xf7, 0x23, 0xee, 0xd7, 0xc2, 0xfd, 0x7e, 0x2c,
		0xb4, 0xcb, 0x79, 0xce, 0x99, 0x03, 0x91, 0x3f, 0x22, 0xff, 0xf5, 0x22, 0x7f, 0xf4, 0xfb, 0x23,
		0xf2, 0x47, 0xbf, 0x3f, 0xda, 0x00, 0x9b, 0x1f, 0xf7, 0xff, 0x39, 0x16, 0x58, 0xd0, 0xd3, 0x84,
		0x45, 0xb0, 0x94, 0xb0, 0x68, 0x1f, 0xa0, 0x7d, 0x80, 0xf6, 0x81, 0xb6, 0x7d, 0xa0, 0x5e, 0xd2,
		0x73, 0x6a, 0x34, 0xda, 0x04, 0x68, 0x13, 0xac, 0xd7, 0x26, 0xc0, 0xd3, 0x00, 0xb4, 0x09, 0xf0,
		0x34, 0x00, 0x2d, 0x81, 0x4d, 0xb1, 0x04, 0x08, 0xf3, 0x3e, 0xc7, 0x02, 0x8b, 0x7a, 0x6a, 0xe2,
		0xfe, 0x27, 0x64, 0x44, 0x94, 0x8f, 0x28, 0x1f, 0x51, 0xbe, 0x36, 0xca, 0x57, 0x2d, 0xeb, 0x39,
		0x31, 0x16, 0x11, 0x3e, 0x22, 0x7c, 0x44, 0xf8, 0x88, 0xf0, 0x11, 0xe1, 0x23, 0xc2, 0xdf, 0x67,
		0x84, 0x8f, 0x85, 0x3d, 0x0d, 0xe0, 0x7b, 0xac, 0xec, 0x89, 0xe8, 0x1e, 0xd1, 0xbd, 0x29, 0x74,
		0xaf, 0x5b, 0xda, 0x73, 0xce, 0x1c, 0x88, 0xf6, 0x11, 0xed, 0xaf, 0x17, 0xed, 0x63, 0x8c, 0x0f,
		0xa2, 0x7d, 0x8c, 0xf1, 0x41, 0xdc, 0xbf, 0x15, 0x31, 0x3e, 0x58, 0xdc, 0xd3, 0x84, 0x2d, 0xb0,
		0x94, 0xb0, 0x68, 0x1f, 0xa0, 0x7d, 0x80, 0xf6, 0x81, 0xb6, 0x7d, 0xa0, 0x5a, 0xde, 0x73, 0x62,
		0x2c, 0xda, 0x03, 0x68, 0x0f, 0xa0, 0x3d, 0x80, 0xf6, 0x00, 0xda, 0x03, 0x68, 0x0f, 0xe0, 0x39,
		0x40, 0x86, 0x55, 0xb1, 0xc0, 0xa7, 0x16, 0xfa, 0x7f, 0x42, 0x46, 0xc4, 0xfa, 0x88, 0xf5, 0x11,
		0xeb, 0x6b, 0x63, 0x7d, 0xbd, 0x12, 0x9f, 0x33, 0x33, 0x20, 0xee, 0x47, 0xdc, 0x8f, 0xb8, 0x1f,
		0x71, 0x3f, 0xe2, 0x7e, 0xc4, 0xfd, 0x88, 0xfb, 0x33, 0xc0, 0x8a, 0x45, 0x3e, 0x4d, 0x41, 0x7f,
		0xac, 0xf2, 0x89, 0xe8, 0x1f, 0xd1, 0xbf, 0x0c, 0xfa, 0x3f, 0xd0, 0x90, 0xca, 0x2a, 0xd2, 0x18,
		0xca, 0xdb, 0x0a, 0x78, 0x4f, 0x89, 0x97, 0x4d, 0xe0, 0x73, 0x25, 0xde, 0x35, 0x8b, 0xcf, 0x55,
		0x78, 0x75, 0x68, 0x88, 0x97, 0xba, 0x5a, 0xbc, 0x74, 0xc1, 0xb9, 0x2f, 0xec, 0x04, 0x0b, 0x49,
		0xf2, 0x91, 0xd3, 0xa3, 0x03, 0x3b, 0xb0, 0x45, 0x2f, 0x79, 0xef, 0x37, 0x8c, 0x0a, 0xcf, 0x62,
		0x85, 0x52, 0x78, 0x33, 0xfe, 0x68, 0x25, 0xcb, 0x42, 0xc7, 0x5f, 0xbc, 0x49, 0x7e, 0x67, 0x91,
		0x60, 0x8e, 0xcc, 0x52, 0x95, 0x22, 0x11, 0xc6, 0x8e, 0xe0, 0x39, 0x6f, 0xb5, 0x2f, 0x6f, 0x3f,
		0x8e, 0x55, 0xcf, 0xd7, 0xf1, 0xc7, 0x9b, 0xe4, 0x26, 0xe3, 0xdf, 0xbf, 0xde, 0x8c, 0x6f, 0x72,
		0xa0, 0x46, 0xd6, 0x05, 0x04, 0x2b, 0x09, 0x19, 0x63, 0xa8, 0xd8, 0x10, 0xe9, 0xd5, 0x4b, 0xc8,
		0x2f, 0x67, 0x68, 0x4b, 0x1b, 0xd8, 0x10, 0xc3, 0x1a, 0x66, 0x50, 0x43, 0x37, 0xaa, 0xb2, 0x01,
		0xad, 0xbc, 0x31, 0xc1, 0x06, 0xb3, 0x9e, 0x10, 0xbe, 0xb2, 0xb9, 0x6b, 0x0b, 0x3f, 0x7c, 0x4c,
		0x2c, 0x93, 0x25, 0xd7, 0x4a, 0x1b, 0xd1, 0xe3, 0x35, 0x71, 0x29, 0x17, 0x4c, 0x3c, 0x86, 0x54,
		0x6a, 0x71, 0x72, 0x36, 0x92, 0xb1, 0x87, 0x4a, 0xed, 0x7c, 0xea, 0x77, 0x76, 0x44, 0x55, 0x0a,
		0x47, 0xe7, 0x5b, 0xcd, 0x4a, 0xd9, 0x7b, 0x03, 0x35, 0x1d, 0xdc, 0xde, 0x50, 0x50, 0x76, 0x92,
		0xa8, 0xf8, 0x76, 0xb9, 0x08, 0x30, 0xad, 0x0d, 0x55, 0xad, 0x08, 0xb3, 0x0a, 0x11, 0x42, 0x9f,
		0xf5, 0x6b, 0xcc, 0x43, 0xc4, 0x4b, 0x88, 0x97, 0xc0, 0xc0, 0xe0, 0x00, 0x20, 0xc1, 0x12, 0x7a,
		0x27, 0x2f, 0x9a, 0x02, 0x98, 0x67, 0x2e, 0xf9, 0xc4, 0x22, 0x71, 0x21, 0x44, 0xb8, 0x70, 0x31,
		0x4b, 0x57, 0x8c, 0x5f, 0xf6, 0x69, 0x42, 0xb8, 0x25, 0x7e, 0xaa, 0xd2, 0x95, 0xfd, 0x73, 0xe2,
		0x4a, 0x98, 0xb7, 0xac, 0xf4, 0x39, 0x74, 0x69, 0x48, 0xdd, 0x77, 0xc9, 0x53, 0xf3, 0xb8, 0xdf,
		0x07, 0xbd, 0xec, 0x45, 0x7c, 0x9f, 0xdc, 0x96, 0xba, 0x0b, 0xf7, 0x8b, 0x24, 0x6c, 0x7a, 0xc3,
		0xbc, 0xd6, 0x2c, 0x8c, 0x9c, 0xf8, 0x6e, 0x19, 0xa6, 0xfa, 0x40, 0x23, 0x27, 0x64, 0x41, 0x8e,
		0x69, 0x4b, 0x1f, 0x6c, 0x61, 0x13, 0xee, 0xbb, 0x34, 0x22, 0x9e, 0x1f, 0x12, 0xd1, 0xa3, 0xc4,
		0x0f, 0x68, 0x98, 0x62, 0x5e, 0xbb, 0x4f, 0xd2, 0xf9, 0x89, 0xef, 0x91, 0xf6, 0x35, 0xf1, 0x39,
		0x19, 0xdf, 0xf9, 0x48, 0x12, 0xbb, 0xd5, 0x5e, 0x14, 0xbb, 0x05, 0x3b, 0x88, 0xdd, 0x82, 0x55,
		0xc3, 0x8a, 0x0f, 0x2c, 0x94, 0x23, 0x33, 0x0b, 0x1e, 0x1a, 0x0a, 0x18, 0x29, 0x19, 0x25, 0xf9,
		0xe2, 0x4f, 0x98, 0xb5, 0xd0, 0x94, 0x56, 0x14, 0x50, 0x87, 0x79, 0xcc, 0x21, 0x81, 0x1d, 0xda,
		0x03, 0x2a, 0x68, 0x38, 0xe6, 0xdf, 0xf6, 0xf5, 0x43, 0x83, 0xd8, 0xae, 0x1b, 0xd2, 0x28, 0x22,
		0x9e, 0x3d, 0x60, 0xfd, 0xc7, 0x23, 0xe0, 0xd1, 0x5e, 0x0d, 0x7a, 0xb4, 0x57, 0x5f, 0xc7, 0xd1,
		0x5e, 0xb0, 0x87, 0x47, 0x7b, 0xc1, 0x4b, 0x1d, 0xed, 0xe9, 0x38, 0xf5, 0x83, 0x90, 0x46, 0xeb,
		0xf6, 0xe9, 0x5f, 0xa7, 0xf7, 0x14, 0x84, 0x79, 0xd9, 0x06, 0x60, 0x11, 0xa1, 0x3c, 0x79, 0x74,
		0x37, 0x11, 0xdc, 0xa2, 0xc7, 0x22, 0x22, 0xab, 0x23, 0x56, 0xed, 0x4e, 0x2d, 0xc8, 0xb3, 0x49,
		0x0e, 0x55, 0x10, 0xfd, 0xd0, 0x81, 0x8f, 0x0e, 0x7c, 0x74, 0xe0, 0xeb, 0xc8, 0xd8, 0x04, 0x06,
		0x34, 0x95, 0xc0, 0x43, 0x53, 0x11, 0x3c, 0x5c, 0xcf, 0x45, 0x0a, 0x4d, 0x44, 0x0a, 0x88, 0x14,
		0xf6, 0x19, 0x29, 0x34, 0x11, 0x29, 0x68, 0x21, 0x85, 0x26, 0x22, 0x05, 0x44, 0x0a, 0x88, 0x14,
		0x54, 0x91, 0x02, 0x1e, 0xf5, 0xa3, 0xeb, 0x7a, 0x23, 0x5d, 0xd7, 0xcf, 0xc8, 0x4b, 0x08, 0xcf,
		0xc9, 0xf2, 0x1a, 0xc0, 0xa3, 0x09, 0xe2, 0x2d, 0x1d, 0xcf, 0x26, 0x88, 0x97, 0xcc, 0x78, 0x36,
		0x21, 0xbc, 0x33, 0x54, 0x5c, 0xeb, 0x2e, 0xcc, 0x73, 0x2f, 0x17, 0xfe, 0xa1, 0x1e, 0xf6, 0xb1,
		0x80, 0xbe, 0x8a, 0x31, 0x1e, 0xf3, 0x49, 0x37, 0x4b, 0x90, 0xe9, 0x6f, 0x9e, 0x10, 0x40, 0x86,
		0xc9, 0x97, 0x31, 0xf7, 0x02, 0x72, 0x81, 0x98, 0x59, 0x96, 0x89, 0xc1, 0xcc, 0x0b, 0x66, 0x5a,
		0x30, 0xb3, 0x0e, 0x25, 0xd7, 0xa2, 0xbb, 0x70, 0x2d, 0x96, 0x30, 0x21, 0x94, 0xf9, 0xe6, 0x50,
		0x05, 0xc4, 0x6a, 0xd3, 0xaf, 0x3b, 0x7e, 0x99, 0xec, 0x53, 0xfe, 0xf0, 0xcf, 0x3d, 0x74, 0x89,
		0x45, 0x1f, 0xed, 0xef, 0xf4, 0x8b, 0xef, 0xcf, 0x92, 0xfc, 0xe9, 0x8b, 0x94, 0x26, 0xff, 0x34,
		0xf5, 0x80, 0x1f, 0xe8, 0x03, 0x1b, 0x71, 0xfa, 0xf0, 0x60, 0xf8, 0xff, 0x00, 0x00, 0x00, 0xff,
		0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x69, 0xa2, 0xbe, 0x75, 0x75, 0x4f, 0x04, 0x00,
	}
)


// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
func initΛEnumTypes(){
  ΛEnumTypes = map[string][]reflect.Type{
	"/interfaces-state/interface/admin-status": []reflect.Type{
		reflect.TypeOf((E_IETFInterfaces_InterfacesState_Interface_AdminStatus)(0)),
	},
	"/interfaces-state/interface/ipv4/address/origin": []reflect.Type{
		reflect.TypeOf((E_IETFIp_IpAddressOrigin)(0)),
	},
	"/interfaces-state/interface/ipv4/neighbor/origin": []reflect.Type{
		reflect.TypeOf((E_IETFIp_NeighborOrigin)(0)),
	},
	"/interfaces-state/interface/ipv6/address/origin": []reflect.Type{
		reflect.TypeOf((E_IETFIp_IpAddressOrigin)(0)),
	},
	"/interfaces-state/interface/ipv6/address/status": []reflect.Type{
		reflect.TypeOf((E_IETFInterfaces_InterfacesState_Interface_Ipv6_Address_Status)(0)),
	},
	"/interfaces-state/interface/ipv6/neighbor/origin": []reflect.Type{
		reflect.TypeOf((E_IETFIp_NeighborOrigin)(0)),
	},
	"/interfaces-state/interface/ipv6/neighbor/state": []reflect.Type{
		reflect.TypeOf((E_IETFInterfaces_InterfacesState_Interface_Ipv6_Neighbor_State)(0)),
	},
	"/interfaces-state/interface/oper-status": []reflect.Type{
		reflect.TypeOf((E_IETFInterfaces_InterfacesState_Interface_OperStatus)(0)),
	},
	"/interfaces-state/interface/type": []reflect.Type{
		reflect.TypeOf((E_IETFInterfaces_InterfaceType)(0)),
	},
	"/interfaces/interface/admin-status": []reflect.Type{
		reflect.TypeOf((E_IETFInterfaces_Interfaces_Interface_AdminStatus)(0)),
	},
	"/interfaces/interface/ipv4/address/origin": []reflect.Type{
		reflect.TypeOf((E_IETFIp_IpAddressOrigin)(0)),
	},
	"/interfaces/interface/ipv4/neighbor/origin": []reflect.Type{
		reflect.TypeOf((E_IETFIp_NeighborOrigin)(0)),
	},
	"/interfaces/interface/ipv6/address/origin": []reflect.Type{
		reflect.TypeOf((E_IETFIp_IpAddressOrigin)(0)),
	},
	"/interfaces/interface/ipv6/address/status": []reflect.Type{
		reflect.TypeOf((E_IETFInterfaces_Interfaces_Interface_Ipv6_Address_Status)(0)),
	},
	"/interfaces/interface/ipv6/neighbor/origin": []reflect.Type{
		reflect.TypeOf((E_IETFIp_NeighborOrigin)(0)),
	},
	"/interfaces/interface/ipv6/neighbor/state": []reflect.Type{
		reflect.TypeOf((E_IETFInterfaces_Interfaces_Interface_Ipv6_Neighbor_State)(0)),
	},
	"/interfaces/interface/link-up-down-trap-enable": []reflect.Type{
		reflect.TypeOf((E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable)(0)),
	},
	"/interfaces/interface/oper-status": []reflect.Type{
		reflect.TypeOf((E_IETFInterfaces_Interfaces_Interface_OperStatus)(0)),
	},
	"/interfaces/interface/type": []reflect.Type{
		reflect.TypeOf((E_IETFInterfaces_InterfaceType)(0)),
	},
  }
}

